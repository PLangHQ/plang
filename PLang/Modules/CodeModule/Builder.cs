using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using PLang.Building.Model;
using PLang.Building.Parsers;
using PLang.Errors;
using PLang.Errors.Builder;
using PLang.Exceptions;
using PLang.Interfaces;
using PLang.Runtime;
using PLang.Services.CompilerService;
using PLang.Utils.Extractors;
using static PLang.Services.CompilerService.CSharpCompiler;
using Nethereum.ABI.CompilationMetadata;
using static PLang.Runtime.Startup.ModuleLoader;
using Microsoft.CodeAnalysis;
using System.Linq;
using Org.BouncyCastle.Asn1.Mozilla;
using PLang.Utils;
using System.Text.RegularExpressions;

namespace PLang.Modules.CodeModule
{
	internal class Builder : BaseBuilder
	{

		private readonly IPLangFileSystem fileSystem;
		private readonly PrParser prParser;
		private readonly MemoryStack memoryStack;
		private readonly ILogger logger;
		private readonly ProgramFactory programFactory;
		private int errorCount = 0;

		public Builder(IPLangFileSystem fileSystem, PrParser prParser, MemoryStack memoryStack, ILogger logger, ProgramFactory programFactory) : base()
		{
			this.fileSystem = fileSystem;
			this.prParser = prParser;
			this.memoryStack = memoryStack;
			this.logger = logger;
			this.programFactory = programFactory;
		}


		public override async Task<(Instruction?, IBuilderError?)> Build(GoalStep step)
		{
			return await Build(step, null);
		}


		public async Task<(Instruction?, IBuilderError?)> Build(GoalStep step, CompilerError? error = null, int errorCount = 0)
		{
			var result = await PrepareStep(step);
			if (result.Instruction != null || result.Error != null) return result;

			return await MakeCode(step, error, errorCount);

		}
		public async Task<(Instruction? Instruction, IBuilderError? Error)> PrepareStep(GoalStep step)
		{
			var file = programFactory.GetProgram<FileModule.Program>(step);
			var files = await file.GetFilePathsInDirectory(step.Goal.RelativeGoalFolderPath, "*.cs", includeSubfolders: true);

			SetSystem(@$"I would like you to make a decision, either you should generate code from the user description or use a <prepared> .cs file
				If you can match with existing .cs file, then use that.

<prepared>
{JsonConvert.SerializeObject(files)}
<prepared>

return file name with path or null
				"

				);
			(var instruction, var buildError) = await Build<FileToUse>(step);

			var fileToUse = instruction.Action as FileToUse;
			if (fileToUse.FileName == null) return (null, null);

			var result = await file.ReadTextFile(fileToUse.FileName);
			if (result.Error != null) return (null, new StepBuilderError(result.Error, step));

			string source = result.Item1 as string;

			var tree = CSharpSyntaxTree.ParseText(source);
			var root = tree.GetCompilationUnitRoot();

			var defaultClassName = "PLang" + fileSystem.Path.GetFileNameWithoutExtension(fileToUse.FileName);
			var dirPath = fileSystem.Path.GetDirectoryName(fileToUse.FileName) ?? fileSystem.Path.GetFileNameWithoutExtension(fileToUse.FileName);
			var defaultNamespace = ("PLang.AutoGenerated." + dirPath.AdjustPathToOs().Replace(Path.DirectorySeparatorChar, '.').TrimStart('.')).TrimEnd('.');

			// namespace
			var nsDecl = root
				.DescendantNodes()
				.OfType<NamespaceDeclarationSyntax>()
				.FirstOrDefault();
			var @namespace = nsDecl?.Name.ToString() ?? null;

			// class name
			var classDecl = root
				.DescendantNodes()
				.OfType<ClassDeclarationSyntax>()
				.FirstOrDefault();
			var className = classDecl?.Identifier.Text ?? null;

			// usings
			var usings = root.Usings
				.Select(u => u.Name.ToString())
				.ToArray();

			string[]? inputParameters;
			string[]? outParameters;
			string methodName = null;
			if (classDecl != null)
			{
				// pick first method
				var method = classDecl
					.DescendantNodes()
					.OfType<MethodDeclarationSyntax>()
					.FirstOrDefault();

				if (method == null) return (null, new StepBuilderError("Method could not be found in .cs file", step));

				methodName = method.Identifier.ToString();

				inputParameters = method.ParameterList.Parameters
					.Select(p => p.Type.ToString())
					.ToArray();
				outParameters = new[] { method.ReturnType.ToString() };
			}
			else
			{
				var decNodes = root.DescendantNodes();
				var ofType = decNodes.OfType<GlobalStatementSyntax>();
				var select = ofType.Select(gs => gs.Statement);
				var function = select.OfType<LocalFunctionStatementSyntax>().FirstOrDefault();

				string appendPublic = "";
				if (function.Modifiers.Count == 0)
				{
					appendPublic = "public ";
				}
				if (function.Modifiers.ToString() != "" && function.Modifiers.ToString() != "public")
				{
					return (null, new CompilerError("First method cannot be private or protected", "", step));
				}

				source = source.Insert(function.SpanStart, $"public class {defaultClassName} {{\n{appendPublic}");
				source += "\n}";

				className = defaultClassName;
				methodName = function.Identifier.ToString();

				inputParameters = function.ParameterList.Parameters
					.Select(p => p.ToString())
					.ToArray();
				outParameters = new[] { function.ReturnType.ToString() };
			}

			SetSystem(@$"You job is to map which %variable% in user input maps to <input_parameters> and which to <output_parameters> if it applies

<input_parameters> are parameters of a c# method
<output_parameters> is the return value of the method

<input_parameters>
{JsonConvert.SerializeObject(inputParameters)}
<input_parameters>

<output_parameters>
{JsonConvert.SerializeObject(outParameters)}
<output_parameters>

<example>
user: run c# Parse %text%, write to %parseText%

when <input_parameters> parameter is 'string content', then Inputs: {{ ""content"": ""%text%"" }}
when <output_parameters> parameter is 'System.String', then Outputs: {{ ""System.String"": ""%parseText%"" }}

This would map the user statement to the parameter 'content' of the code and have a string return value
<example>
");
			var hasher = programFactory.GetProgram<CryptographicModule.Program>(step);
			var hashResult = await hasher.GetHashOfFile(fileToUse.FileName);
			if (hashResult.Error != null) return (null, new BuilderError(hashResult.Error));

			var buildResult = await Build<CodeParameters>(step);
			if (buildResult.BuilderError != null) return buildResult;

			var codeParams = buildResult.Instruction.Action as CodeParameters;

			if (@namespace == null)
			{
				source = $"namespace {defaultNamespace};\n\n{source}";
				@namespace = defaultNamespace;
			}

			var c = new FileCodeImplementationResponse(
				fileToUse.FileName,
				hashResult.Hash,
				source,
				@namespace,
				className,
				methodName,
				InputParameters: codeParams.Inputs,
				OutputParameters: codeParams.ReturnVariable
			);


			var compiler = new CSharpCompiler(fileSystem, prParser, logger);
			var dllName = compiler.GetPreviousBuildDllNamesToExclude(step);

			var error = await compiler.BuildFile(c, step, memoryStack);
			if (error != null) return (null, error);

			var newInstruction = new Instruction(c!);
			newInstruction.LlmRequest = instruction.LlmRequest;
			return (newInstruction, null);
		}

		public record FileToUse(string? FileName = null);
		public record CodeParameters(Dictionary<string, object> Inputs, Dictionary<string, object> ReturnVariable);
		public record FileCodeImplementationResponse(string FileName, string Hash, string SourceCode, string Namespace, string ClassName, string MethodName, Dictionary<string, object> InputParameters, Dictionary<string, object> OutputParameters);
		public async Task<(Instruction?, IBuilderError?)> MakeCode(GoalStep step, CompilerError? error = null, int errorCount = 0)
		{
			if (errorCount++ > 3)
			{
				return (null, error ?? new StepBuilderError("Could not compile code for this step", step));
			}


			var compiler = new CSharpCompiler(fileSystem, prParser, logger);
			var dllName = compiler.GetPreviousBuildDllNamesToExclude(step);

			//TODO: Any file access should have IPLangFileSystem fileSystem injected and use it as fileSystem.File... or fileSystem.Directory....
			SetSystem(@$"Act as a senior C# developer, that converts the user statement into a C#(Version. 9) code. 

## Rules ##
- Generate static class. The code generated should have 1 method with the static method named ExecutePlangCode and return void. 
- A variable in user intent is defined by starting and ending %.
- Variables defined in the user intent can be passed into the ExecutePlangCode function by value, but only if defined by user intent. 
- Variable names passed to ExecutePlangCode function MUST be unmodified from the user statement
- The code will not be modified after you generate it.
- If condition fails, throw Exception, unless defined otherwise by user command
- Exception message should be for non-technical user
- ALWAYS use long or long? instead of int or int?
- Use long.TryParse When validating if variable is long
- Do not reference any DTO classes. Choose the type that seems to fit best when not defined by user input. Use dynamic? if complex object is needed.
- Strings are defined with double quote ("")
- Any class from System.IO, should be replaced with PLang.SafeFileSystem.PLangFileSystem. It contains same classes and methods. 
- If PLangFileSystem is needed, add parameter PLang.SafeFileSystem.PLangFileSystem fileSystem into ExecutePlangCode method, but ONLY if needed. Assembly for PLangFileSystem is already include, do not list it in Assemblies response.
- System.IO.Path needs to be mapped to PLang.SafeFileSystem.Path which DOES not contain static methods, e.g. Path.GetFileName => fileSystem.Path.GetFileName. fileSystem IS provided as parameter as part of ExecutePlangCode method 
- When condition is checking if variable is null, the variable needs to be defined with ? in the parameter, e.g. ExecutePlangCode(dynamic? variable)
- Variables that are injected into ExecutePlangCode method and contain dot(.), then replace dot(.) with the letter α in the parameter list. e.g. %user.id% to userαid, %product.items[0].title% to productαitemsα0ααtitle, %list[1]% to listα1α
- Keep underscore in variables if defined by user, e.g.  if %data.user_id%(string) is null => ExecutePlangCode(string? dataαuser_id)
- Consider top security measures when generating code and validate code
- When checking type and converting variables to type, use Convert.ChangeType method
- When user defines assembly or using, include them in your answer
- append @ sign for reserved variable in C#
- when input and output variable is same only define it once
- on error in step is handled by external system, DO NOT generate code for it
## Rules ##

## Response information ##
- Namespace: MUST be PLangGeneratedCode
- Name: is name of class, it should represent the intent of what the code is doing. 
{dllName}
- Using: must include namespaces that are needed to compile code.
- Assemblies: dll to reference to compile using Roslyn
- InputParameters: InputParameters MUST match parameter count sent to ExecutePlangCode. Keep format as is defined by user, e.g. user: 'convert %name% to upper, write to %nameUpper%' => InputParameters would be [""%name%""]. user: 'check %items.count% > 0 and %isValid% and %!error.status%, write ""yes"" to %answer%' => InputParameters would be [""%list[0]%"", ""%isValid%"", ""%!error.status%""]
- OutParameters: keep as is defined by user, e.g. user: 'is leap year, write ""yes"" to %answer% => OutParameters would be [""%answer%""]
## Response information ##
");

			AppendToAssistantCommand($@"
## examples ##
replace ""<strong>"" with """" from %html%, write to %html% => ExecutePlangCode(ref string? html) {{
    //validate input parameter 
    html = html.Replace(""<strong>"", """");
}}
InputParameters: [""%html%""]
OutParameters: [""%html%""]

%list.Count%*50, write to %result% => ExecutePlangCode(long? listαCount, out long result) {{
    //validate input parameter 
    result = listαCount*50;
}}
InputParameters: [""%list.Count%""]
OutParameters: [""%result%""]

%response.data.total%*%response.data.total_amount%, write to %allTotal%, => ExecutePlangCode(dynamic? response.data.total, dynamic? response.data.total_amount, out long allTotal) {{ 
      //validate input parameter 
      long allTotal = response.data.total*response.data.total_amount;
}}
InputParameters: [""%response.data.total%"", ""%response.data.total_amount%""]
OutParameters: [""%allTotal%""]

check if %dirPath% exists, write to %folderExists% => ExecutePlangCode(IPlangFileSystem fileSystem, string dirPath, out bool folderExists) {{
	//validate input parameter 
	folderExists = fileSystem.Directory.Exists(dirPath);
}}
InputParameters: [""%dirPath%""]
OutParameters: [""%folderExists%""]

get filename of %filePath%, write to %fileName% => ExecutePlangCode(IPlangFileSystem fileSystem, string filePath, out string fileName) {{
	//validate input parameter 
	fileName = fileSystem.Path.GetFileName(filePath);
}}
InputParameters: [""fileSystem"", ""%filePath%""]
OutParameters: [""%fileName%""]
## examples ##");

			if (error != null)
			{
				AppendToAssistantCommand(error.LlmInstruction);
			}

			base.SetContentExtractor(new CSharpExtractor());

			(var instruction, var buildError) = await Build<CodeImplementationResponse>(step);
			if (buildError != null) return (null, buildError);

			if (instruction == null)
			{
				return (null, new StepBuilderError("Could not create instruction file", step));
			}

			//go back to default extractor
			base.SetContentExtractor(new JsonExtractor());
			var answer = (CodeImplementationResponse)instruction.Action;

			(var implementation, var compilerError) = await compiler.BuildCode(answer, step, memoryStack);
			if (compilerError != null)
			{
				logger.LogWarning($"- Error compiling code - will ask LLM again - Error:{compilerError} - Code:{compilerError.LlmInstruction}");
				return await MakeCode(step, compilerError, errorCount);
			}

			var newInstruction = new Instruction(implementation!);
			newInstruction.LlmRequest = instruction.LlmRequest;
			return (newInstruction, null);


		}

		public async Task<IBuilderError?> BuilderRun(GenericFunction gf, GoalStep step)
		{
			int i =0 ;

			return null;
		}


	}





}

