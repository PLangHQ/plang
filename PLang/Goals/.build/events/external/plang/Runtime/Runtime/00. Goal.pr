{
  "GoalName": "Runtime",
  "Comment": null,
  "Text": "Runtime",
  "GoalSteps": [
    {
      "Text": "start webserver, name: \"Runtime.Debug.RunStep\", port 60878",
      "Comment": null,
      "ModuleType": "PLang.Modules.WebserverModule",
      "Name": "StartWebServer",
      "Description": "Start a web server with the name 'Runtime.Debug.RunStep' on port 60878.",
      "PrFileName": "01. StartWebServer.pr",
      "RelativePrPath": ".build\\events\\external\\plang\\Runtime\\Runtime\\01. StartWebServer.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2025-01-13T12:26:41.4557529+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 0,
      "LineNumber": 2,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}",
        "model": "gpt-4o",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set [\"N/A\"]\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nRead the description of each module, then determine which module to use.\r\nMake sure to return valid JSON, escape double quote if needed\r\n\r\nBe Concise\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error. Allows user to return out of goal or stop(end) running goal.. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n]\r\n## modules available ends ##\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "start webserver, name: \"Runtime.Debug.RunStep\", port 60878"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "```json\n{\n\t\"StepName\": \"StartWebServer\",\n\t\"StepDescription\": \"Start a web server with the name 'Runtime.Debug.RunStep' on port 60878.\",\n\t\"Modules\": [\"PLang.Modules.WebserverModule\"]\n}\n```"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "3239ed2e6ded5e0092a4f2219fc747a073b2e811df68bff49828f1c6fc6903bd",
      "BuilderVersion": null,
      "PrFile": {
        "Action": {
          "FunctionName": "StartWebserver",
          "Parameters": [
            {
              "Type": "String",
              "Name": "webserverName",
              "Value": "Runtime.Debug.RunStep"
            },
            {
              "Type": "Int32",
              "Name": "port",
              "Value": 60878
            }
          ],
          "ReturnValues": null
        },
        "Text": "start webserver, name: \"Runtime.Debug.RunStep\", port 60878",
        "Reload": false,
        "LlmRequest": {
          "temperature": 0.0,
          "top_p": 0.0,
          "frequencyPenalty": 0.0,
          "presencePenalty": 0.0,
          "maxLength": 4000,
          "llmResponseType": "json",
          "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
          "model": "gpt-4o",
          "promptMessage": [
            {
              "role": "system",
              "content": [
                {
                  "type": "text",
                  "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\n%Variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See == QuoteExample ==\r\n\r\n== QuoteExample ==\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n== QuoteExample ==\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\n\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
                },
                {
                  "type": "text",
                  "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "## functions available starts ##\r\nShutdownWebserver(String webserverName)  : WebserverInfo \nRestartWebserver(String? webserverName = \"default\")  : Boolean \nAddRoute(String path, GoalToCall? goalToCall, String? method, String? ContentType = \"text/html\", Dictionary`2<String, Object>? Parameters, Nullable`1<Int64>? MaxContentLength, String? DefaultResponseContentEncoding, String? webserverName)  : void \nStartWebserver(String? webserverName = \"default\", String? scheme = \"http\", String? host = \"localhost\", Int32? port = 8080, Int64? maxContentLengthInBytes = 4194304, String? defaultResponseContentEncoding = \"utf-8\", Boolean? signedRequestRequired = False, List`1<Routing>? routings)  : WebserverInfo \nRedirect(String url)  : void\nWriteToResponseHeader(Dictionary`2<String, Object> headers)  : void\nGetUserIp(String? headerKey)  : String  // headerKey should be null unless specified by user. \nGetRequestHeader(String key)  : String \nGetCookie(String name)  : String \nWriteCookie(String name, String value, Int32? expiresInSeconds = 604800)  : void\nDeleteCookie(String name)  : void\nSendFileToClient(String path, String? fileName)  : void\nVerifySignature(HttpListenerRequest request, String body, MemoryStack memoryStack)  : void\nSendToWebSocket(GoalToCall goalToCall, Dictionary`2<String, Object>? parameters, String? webSocketName = \"default\")  : void\nStartWebSocketConnection(String url, GoalToCall goalToCall, String? webSocketName = \"default\", String? contentRecievedVariableName = \"%content%\")  : WebSocketInfo\r\n## functions available ends ##"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "start webserver, name: \"Runtime.Debug.RunStep\", port 60878"
                }
              ]
            }
          ],
          "type": "PLang.Modules.GenericFunctionBuilder",
          "caching": true,
          "RawResponse": "```json\n{\n\t\"FunctionName\": \"StartWebserver\",\n\t\"Parameters\": [\n\t\t{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"webserverName\",\n\t\t\t\"Value\": \"Runtime.Debug.RunStep\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"Int32\",\n\t\t\t\"Name\": \"port\",\n\t\t\t\"Value\": 60878\n\t\t}\n\t],\n\t\"ReturnValues\": null\n}\n```"
        },
        "RunOnBuild": false
      }
    },
    {
      "Text": "add route \"/events/external/plang/Runtime/RunStep\" (POST), webserver: \"Runtime.Debug.RunStep\", call RunStep",
      "Comment": null,
      "ModuleType": "PLang.Modules.WebserverModule",
      "Name": "AddRouteToWebserver",
      "Description": "Add a POST route '/events/external/plang/Runtime/RunStep' to the webserver 'Runtime.Debug.RunStep' and call the RunStep function when this route is accessed.",
      "PrFileName": "02. AddRouteToWebserver.pr",
      "RelativePrPath": ".build\\events\\external\\plang\\Runtime\\Runtime\\02. AddRouteToWebserver.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2025-01-13T12:29:42.855444+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 1,
      "LineNumber": 3,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}",
        "model": "gpt-4o",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set [\"N/A\"]\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nRead the description of each module, then determine which module to use.\r\nMake sure to return valid JSON, escape double quote if needed\r\n\r\nBe Concise\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error. Allows user to return out of goal or stop(end) running goal.. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n]\r\n## modules available ends ##\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "add route \"/events/external/plang/Runtime/RunStep\" (POST), webserver: \"Runtime.Debug.RunStep\", call RunStep"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "```json\n{\n\t\"StepName\": \"AddRouteToWebserver\",\n\t\"StepDescription\": \"Add a POST route '/events/external/plang/Runtime/RunStep' to the webserver 'Runtime.Debug.RunStep' and call the RunStep function when this route is accessed.\",\n\t\"Modules\": [\"PLang.Modules.WebserverModule\", \"PLang.Modules.CallGoalModule\"]\n}\n```"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "4eb98b5eb6fbeccf26df5af8cf33a62fc580cdbbacf575b1e09650a1c3db0b5b",
      "BuilderVersion": null,
      "PrFile": {
        "Action": {
          "FunctionName": "AddRoute",
          "Parameters": [
            {
              "Type": "String",
              "Name": "path",
              "Value": "/events/external/plang/Runtime/RunStep"
            },
            {
              "Type": "GoalToCall",
              "Name": "goalToCall",
              "Value": "RunStep"
            },
            {
              "Type": "String",
              "Name": "method",
              "Value": "POST"
            },
            {
              "Type": "String",
              "Name": "webserverName",
              "Value": "Runtime.Debug.RunStep"
            }
          ],
          "ReturnValues": null
        },
        "Text": "add route \"/events/external/plang/Runtime/RunStep\" (POST), webserver: \"Runtime.Debug.RunStep\", call RunStep",
        "Reload": false,
        "LlmRequest": {
          "temperature": 0.0,
          "top_p": 0.0,
          "frequencyPenalty": 0.0,
          "presencePenalty": 0.0,
          "maxLength": 4000,
          "llmResponseType": "json",
          "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
          "model": "gpt-4o",
          "promptMessage": [
            {
              "role": "system",
              "content": [
                {
                  "type": "text",
                  "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\n%Variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See == QuoteExample ==\r\n\r\n== QuoteExample ==\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n== QuoteExample ==\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\n\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
                },
                {
                  "type": "text",
                  "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "## functions available starts ##\r\nShutdownWebserver(String webserverName)  : WebserverInfo \nRestartWebserver(String? webserverName = \"default\")  : Boolean \nAddRoute(String path, GoalToCall? goalToCall, String? method, String? ContentType = \"text/html\", Dictionary`2<String, Object>? Parameters, Nullable`1<Int64>? MaxContentLength, String? DefaultResponseContentEncoding, String? webserverName = \"default\")  : void \nStartWebserver(String? webserverName = \"default\", String? scheme = \"http\", String? host = \"localhost\", Int32? port = 8080, Int64? maxContentLengthInBytes = 4194304, String? defaultResponseContentEncoding = \"utf-8\", Boolean? signedRequestRequired = False, List`1<Routing>? routings)  : WebserverInfo \nRedirect(String url)  : void\nWriteToResponseHeader(Dictionary`2<String, Object> headers)  : void\nGetUserIp(String? headerKey)  : String  // headerKey should be null unless specified by user. \nGetRequestHeader(String key)  : String \nGetCookie(String name)  : String \nWriteCookie(String name, String value, Int32? expiresInSeconds = 604800)  : void\nDeleteCookie(String name)  : void\nSendFileToClient(String path, String? fileName)  : void\nVerifySignature(HttpListenerRequest request, String body, MemoryStack memoryStack)  : void\nSendToWebSocket(GoalToCall goalToCall, Dictionary`2<String, Object>? parameters, String? webSocketName = \"default\")  : void\nStartWebSocketConnection(String url, GoalToCall goalToCall, String? webSocketName = \"default\", String? contentRecievedVariableName = \"%content%\")  : WebSocketInfo\r\n## functions available ends ##"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "add route \"/events/external/plang/Runtime/RunStep\" (POST), webserver: \"Runtime.Debug.RunStep\", call RunStep"
                }
              ]
            }
          ],
          "type": "PLang.Modules.GenericFunctionBuilder",
          "caching": true,
          "RawResponse": "```json\n{\n\t\"FunctionName\": \"AddRoute\",\n\t\"Parameters\": [\n\t\t{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"path\",\n\t\t\t\"Value\": \"/events/external/plang/Runtime/RunStep\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"GoalToCall\",\n\t\t\t\"Name\": \"goalToCall\",\n\t\t\t\"Value\": \"RunStep\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"method\",\n\t\t\t\"Value\": \"POST\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"webserverName\",\n\t\t\t\"Value\": \"Runtime.Debug.RunStep\"\n\t\t}\n\t]\n}\n```"
        },
        "RunOnBuild": false
      }
    }
  ],
  "SubGoals": [
    "RunStep"
  ],
  "Description": "The Runtime goal initializes a web server named 'Runtime.Debug.RunStep' on port 60878 and sets up a POST route at '/events/external/plang/Runtime/RunStep' that triggers the RunStep function when accessed.",
  "Visibility": 1,
  "GoalFileName": "Runtime.goal",
  "RelativeGoalPath": "\\events\\external\\plang\\Runtime\\Runtime.goal",
  "RelativeGoalFolderPath": "\\events\\external\\plang\\Runtime",
  "RelativePrPath": ".build\\events\\external\\plang\\Runtime\\Runtime\\00. Goal.pr",
  "RelativePrFolderPath": ".build\\events\\external\\plang\\Runtime\\Runtime",
  "BuilderVersion": "1.0.0.0",
  "GoalInfo": null,
  "Injections": [],
  "Signature": null,
  "Hash": "5cb1f6a90c1c31af5ed0a136cd516c566347a1e86281a1d98333735e81396409",
  "IncomingVariablesRequired": null
}