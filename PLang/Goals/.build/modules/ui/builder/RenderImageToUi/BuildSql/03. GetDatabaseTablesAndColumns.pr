{
  "Action": {
    "FunctionName": "GetDatabaseStructure",
    "Parameters": [
      {
        "Type": "String[]",
        "Name": "tables",
        "Value": null
      },
      {
        "Type": "String",
        "Name": "dataSourceName",
        "Value": "%dataSource%"
      }
    ],
    "ReturnValues": [
      {
        "Type": "Dictionary<String, Object>",
        "VariableName": "%tablesAndColumns%"
      }
    ]
  },
  "Text": "get all tables and columns in database, datasource: %dataSource% , write to %tablesAndColumns%",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "json",
    "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
    "model": "gpt-4o-2024-08-06",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Generate the SQL statement from user command. \r\nThe SQL statement MUST be a valid SQL statement for SQLite. \r\nMake sure to use correct data types that match SQLite\r\nYou MUST provide Parameters if SQL has @parameter.\r\n\r\n"
          },
          {
            "type": "text",
            "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## functions available defined in csharp ##\r\nCreateDataSource(String? name = \"data\", String? localPath, String? databaseType = \"sqlite\", Boolean? setAsDefaultForApp = False, Boolean? keepHistoryEventSourcing = False)  : void // localPath is location of the database on the drive for sqlite. localPath can be string with variables, default is null. \nSetDataSourceName(String name, String? localPath)  : void \nBeginTransaction()  : void\nEndTransaction()  : void\nRollback()  : void\nLoadExtension(String fileName, String? procName)  : void \nGetDatabaseStructure(String[]? tables, String? dataSourceName)  : Dicionary<String, Object>  // Returns tables and views in database with the columns description. \nInsertEventSourceData(Int64 id, String data, String keyHash)  : Int32 \nExecute(String sql, String? dataSourceName)  : Int32 \nCreateTable(String sql, String? dataSourceName)  : Int32 \nSelectOneRow(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Object \nSelect(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : List<Object> \nUpdate(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Int32 \nDelete(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Int32 \nInsert(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Int32  // Basic insert statement. Will return affected row count. \nInsertAndSelectIdOfInsertedRow(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Object  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \nInsertBulk(String tableName, List`1<Object> itemsToInsert, Dictionary`2<String, Object>? columnMapping)  : Int32  // Insert a list(bulk) into database, return number of rows inserted. columnMapping maps which property of itemsToInsert should match with a column. \nGetAdditionalSystemErrorInfo()  : String \nGetAdditionalAssistantErrorInfo()  : String \n\r\n## functions available ends ##\r\n"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "get all tables and columns in database, datasource: %dataSource% , write to %tablesAndColumns%"
          }
        ]
      }
    ],
    "type": "PLang.Modules.DbModule.Builder",
    "caching": true,
    "RawResponse": "```json\n{\n\t\"FunctionName\": \"GetDatabaseStructure\",\n\t\"Parameters\": [{\n\t\t\"Type\": \"String[]\",\n\t\t\"Name\": \"tables\",\n\t\t\"Value\": null\n\t}, {\n\t\t\"Type\": \"String\",\n\t\t\"Name\": \"dataSourceName\",\n\t\t\"Value\": \"%dataSource%\"\n\t}],\n\t\"ReturnValues\": [{\n\t\t\"Type\": \"Dictionary<String, Object>\",\n\t\t\"VariableName\": \"%tablesAndColumns%\"\n\t}]\n}\n```"
  },
  "RunOnBuild": false
}