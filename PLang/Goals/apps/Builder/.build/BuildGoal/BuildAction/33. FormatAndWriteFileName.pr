{
  "Action": {
    "Namespace": "PLangGeneratedCode",
    "Name": "IncrementAndFormatFileName",
    "Code": "\nnamespace PLangGeneratedCode\n{\n    public static class IncrementAndFormatFileName\n    {\n        public static void ExecutePlangCode(dynamic? position, dynamic? selectedModuleαprFileName, out string fileName)\n        {\n            if (position == null || selectedModuleαprFileName == null)\n            {\n                throw new Exception(\"Position or selected module file name is not provided.\");\n            }\n\n            if (!long.TryParse(Convert.ToString(position), out long positionValue))\n            {\n                throw new Exception(\"Position is not a valid number.\");\n            }\n\n            positionValue += 1;\n            string formattedPosition = positionValue.ToString().PadLeft(2, '0');\n            fileName = $\"{formattedPosition}. {selectedModuleαprFileName}\";\n        }\n    }\n}\n",
    "Using": null,
    "InputParameters": [
      {
        "VariableName": "%position%",
        "ParameterName": "position",
        "ParameterType": "dynamic?"
      },
      {
        "VariableName": "%selectedModule.prFileName%",
        "ParameterName": "selectedModuleαprFileName",
        "ParameterType": "dynamic?"
      }
    ],
    "OutParameters": [
      {
        "VariableName": "%fileName%",
        "ParameterName": "fileName",
        "ParameterType": "string"
      }
    ],
    "GoalToCallOnTrue": null,
    "GoalToCallOnFalse": null,
    "GoalToCallOnTrueParameters": null,
    "GoalToCallOnFalseParameters": null,
    "ServicesAssembly": []
  },
  "Text": "[code] incriment %position% + 1, pad left with 0, max 2 numbers, add period,\n    append %selectedModule.prFileName%, e.g. \"01. %selectedModule.prFileName%\"\n    write to %fileName%",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "csharp",
    "scheme": "{\n\t\"OutParameters\"?: string[] = null,\n\t\"Namespace\": string,\n\t\"Name\": string,\n\t\"Using\"?: string[] = null,\n\t\"Assemblies\"?: string[] = null,\n\t\"InputParameters\"?: string[] = null\n}",
    "model": "gpt-4o",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Act as a senior C# developer, that converts the user statement into a C#(Version. 9) code. \r\n\r\n## Rules ##\r\n- Generate static class. The code generated should have 1 method with the static method named ExecutePlangCode and return void. \r\n- A variable in user intent is defined by starting and ending %.\r\n- Variables defined in the user intent can be passed into the ExecutePlangCode function by value, but only if defined by user intent. \r\n- Variable names passed to ExecutePlangCode function MUST be unmodified from the user statement\r\n- The code will not be modified after you generate it.\r\n- If condition fails, throw Exception, unless defined otherwise by user command\r\n- Exception message should be for non-technical user\r\n- ALWAYS use long or long? instead of int or int?\r\n- Use long.TryParse When validating if variable is long\r\n- Do not reference any DTO classes. Choose the type that seems to fit best when not defined by user input. Use dynamic? if complex object is needed.\r\n- Strings are defined with double quote (\")\r\n- Any class from System.IO, should be replaced with PLang.SafeFileSystem.PLangFileSystem. It contains same classes and methods. \r\n- If PLangFileSystem is needed, add parameter PLang.SafeFileSystem.PLangFileSystem fileSystem into ExecutePlangCode method, but ONLY if needed. Assembly for PLangFileSystem is already include, do not list it in Assemblies response.\r\n- System.IO.Path needs to be mapped to PLang.SafeFileSystem.Path which DOES not contain static methods, e.g. Path.GetFileName => fileSystem.Path.GetFileName. fileSystem IS provided as parameter as part of ExecutePlangCode method \r\n- When condition is checking if variable is null, the variable needs to be defined with ? in the parameter, e.g. ExecutePlangCode(dynamic? variable)\r\n- Variables that are injected into ExecutePlangCode method and contain dot(.), then replace dot(.) with the letter α in the parameter list. e.g. %user.id% to userαid, %product.items[0].title% to productαitemsα0ααtitle, %list[1]% to listα1α\r\n- Keep underscore in variables if defined by user, e.g.  if %data.user_id%(string) is null => ExecutePlangCode(string? dataαuser_id)\r\n- Consider top security measures when generating code and validate code\r\n- When checking type and converting variables to type, use Convert.ChangeType method\r\n- When user defines assembly or using, include them in your answer\r\n- append @ sign for reserved variable in C#\r\n## Rules ##\r\n\r\n## Response information ##\r\n- Namespace: MUST be PLangGeneratedCode\r\n- Name: is name of class, it should represent the intent of what the code is doing. \r\n- Name of class cannot be: Conditional Check, Conditional Check, Check Module Name, CheckErrorCount, CheckErrorCount, Check Module Name, Check Module Name, Check Method Name, Check Method Name, Check Module Name, Check Method Name, Check Module Name, Check Method Name, Check Method Name, Check Method Name, Format and Write File Name, Format and Write File Name, Format and Write File Name, Format and Write File Name, FormatAndWriteFileName\n\r\n- Using: must include namespaces that are needed to compile code.\r\n- Assemblies: dll to reference to compile using Roslyn\r\n- InputParameters: InputParameters MUST match parameter count sent to ExecutePlangCode. Keep format as is defined by user, e.g. user: 'convert %name% to upper, write to %nameUpper%' => InputParameters would be [\"%name%\"]. user: 'check %items.count% > 0 and %isValid% and %!error.status%, write \"yes\" to %answer%' => InputParameters would be [\"%list[0]%\", \"%isValid%\", \"%!error.status%\"]\r\n- OutParameters: keep as is defined by user, e.g. user: 'is leap year, write \"yes\" to %answer% => OutParameters would be [\"%answer%\"]\r\n## Response information ##\r\n"
          },
          {
            "type": "text",
            "text": "Only write the raw c# code and json scheme, no summary, no extra text to explain, be concise.\r\n\tYOU MUST implement all code needed and valid c# code. \r\n\tYou must return ```csharp for the code implementation and ```json scheme: {\n\t\"OutParameters\"?: string[] = null,\n\t\"Namespace\": string,\n\t\"Name\": string,\n\t\"Using\"?: string[] = null,\n\t\"Assemblies\"?: string[] = null,\n\t\"InputParameters\"?: string[] = null\n}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## defined variables ##\r\nposition (type:object), selectedModule.prFileName (type:object), fileName (type:object), \r\n## defined variables ##"
          },
          {
            "type": "text",
            "text": "\r\n## examples ##\r\n%list.Count%*50, write to %result% => ExecutePlangCode(long? listαCount, out long result) {\r\n    //validate input parameter \r\n    result = listαCount*50;\r\n}\r\nInputParameters: [\"%list.Count%\"]\r\nOutParameters: [\"%result%\"]\r\n\r\n%response.data.total%*%response.data.total_amount%, write to %allTotal%, => ExecutePlangCode(dynamic? response.data.total, dynamic? response.data.total_amount, out long allTotal) { \r\n      //validate input parameter \r\n      long allTotal = response.data.total*response.data.total_amount;\r\n}\r\nInputParameters: [\"%response.data.total%\", \"%response.data.total_amount%\"]\r\nOutParameters: [\"%allTotal%\"]\r\n\r\ncheck if %dirPath% exists, write to %folderExists% => ExecutePlangCode(IPlangFileSystem fileSystem, string dirPath, out bool folderExists) {\r\n\t//validate input parameter \r\n\tfolderExists = fileSystem.Directory.Exists(dirPath);\r\n}\r\nInputParameters: [\"%dirPath%\"]\r\nOutParameters: [\"%folderExists%\"]\r\n\r\nget filename of %filePath%, write to %fileName% => ExecutePlangCode(IPlangFileSystem fileSystem, string filePath, out string fileName) {\r\n\t//validate input parameter \r\n\tfileName = fileSystem.Path.GetFileName(filePath);\r\n}\r\nInputParameters: [\"fileSystem\", \"%filePath%\"]\r\nOutParameters: [\"%fileName%\"]\r\n## examples ##"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "[code] incriment %position% + 1, pad left with 0, max 2 numbers, add period,\n    append %selectedModule.prFileName%, e.g. \"01. %selectedModule.prFileName%\"\n    write to %fileName%"
          }
        ]
      }
    ],
    "type": "PLang.Modules.CodeModule.Builder",
    "caching": true,
    "RawResponse": "```csharp\nnamespace PLangGeneratedCode\n{\n    public static class IncrementAndFormatFileName\n    {\n        public static void ExecutePlangCode(dynamic? position, dynamic? selectedModuleαprFileName, out string fileName)\n        {\n            if (position == null || selectedModuleαprFileName == null)\n            {\n                throw new Exception(\"Position or selected module file name is not provided.\");\n            }\n\n            if (!long.TryParse(Convert.ToString(position), out long positionValue))\n            {\n                throw new Exception(\"Position is not a valid number.\");\n            }\n\n            positionValue += 1;\n            string formattedPosition = positionValue.ToString().PadLeft(2, '0');\n            fileName = $\"{formattedPosition}. {selectedModuleαprFileName}\";\n        }\n    }\n}\n```\n```json\n{\n    \"OutParameters\": [\"%fileName%\"],\n    \"Namespace\": \"PLangGeneratedCode\",\n    \"Name\": \"IncrementAndFormatFileName\",\n    \"InputParameters\": [\"%position%\", \"%selectedModule.prFileName%\"]\n}\n```"
  },
  "RunOnBuild": false
}