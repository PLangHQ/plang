{
  "Text": "[code] when %file.FileName% contains \"Lesson\", set %isLesson%=true, write to %isLesson%",
  "ModuleType": "PLang.Modules.CodeModule",
  "GenericFunctionType": "PLang.Modules.BaseBuilder+GenericFunction",
  "Function": {
    "Reasoning": "The code checks if the input file name contains the word 'Lesson' and sets the boolean flag isLesson accordingly. It validates that the file name is not null and throws a user-friendly exception if it is.",
    "Name": "RunInlineCode",
    "Parameters": [
      {
        "Type": "PLang.Services.CompilerService.CodeImplementationResponse",
        "Name": "implementation",
        "Value": {
          "Reasoning": "The code checks if the input file name contains the word 'Lesson' and sets the boolean flag isLesson accordingly. It validates that the file name is not null and throws a user-friendly exception if it is.",
          "Namespace": "PLangGeneratedCode",
          "Name": "CheckIfFileNameContainsLesson",
          "Implementation": "using System.Diagnostics;\nusing System;\n\nusing System;\n\nnamespace PLangGeneratedCode\n{\n    public static class CheckIfFileNameContainsLesson\n    {\n        public static bool ExecutePlangCode(string? fileαFileName)\n        {\r\n    if (!AppContext.TryGetSwitch(\"skipCode\", out bool _))\r\n\t{\r\n        Debugger.Break();\r\n\t}\r\n\r\n\n            if (fileαFileName == null)\n            {\n                throw new Exception(\"The file name cannot be empty. Please provide a valid file name.\");\n            }\n\n            bool isLesson = fileαFileName.Contains(\"Lesson\");\n            return isLesson;\n        }\n    }\n}\n",
          "Using": [
            "System"
          ],
          "Assemblies": [
            "System.Private.CoreLib.dll"
          ],
          "Parameters": [
            {
              "Type": "string?",
              "Name": "fileαFileName",
              "Value": "%file.FileName%"
            }
          ],
          "ReturnValues": [
            {
              "Type": "bool",
              "VariableName": "%isLesson%"
            }
          ]
        }
      }
    ],
    "ReturnValues": [
      {
        "Type": "bool",
        "VariableName": "%isLesson%"
      }
    ]
  },
  "Properties": {
    "Parameters": {
      "implementation": [
        {
          "Name": "Reasoning",
          "FullTypeName": "System.String"
        },
        {
          "Name": "Namespace",
          "FullTypeName": "System.String"
        },
        {
          "Name": "Name",
          "FullTypeName": "System.String"
        },
        {
          "Name": "Implementation",
          "FullTypeName": "System.String"
        },
        {
          "Name": "Using",
          "FullTypeName": "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"
        },
        {
          "Name": "Assemblies",
          "FullTypeName": "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"
        },
        {
          "Name": "Parameters",
          "FullTypeName": "System.Collections.Generic.List`1[[PLang.Modules.BaseBuilder+Parameter, PLangLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
        },
        {
          "Name": "ReturnValues",
          "FullTypeName": "System.Collections.Generic.List`1[[PLang.Modules.BaseBuilder+ReturnValue, PLangLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"
        },
        {
          "Name": "Instruction",
          "FullTypeName": "PLang.Building.Model.Instruction"
        }
      ]
    },
    "ReturnValues": {
      "%isLesson%": []
    }
  },
  "LlmRequest": [
    {
      "temperature": 0.0,
      "top_p": 0.0,
      "frequencyPenalty": 0.0,
      "presencePenalty": 0.0,
      "maxLength": 4000,
      "llmResponseType": "json",
      "scheme": "{\n\t\"Reasoning\": string,\n\t\"Namespace\": string,\n\t\"Name\": string,\n\t\"Using\"?: string[] = null,\n\t\"Assemblies\"?: string[] = null,\n\t\"Parameters\"?: [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}] = null,\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
      "model": "gpt-4.1-mini",
      "promptMessage": [
        {
          "role": "system",
          "content": [
            {
              "type": "text",
              "text": "Act as a senior C# developer, that converts the user statement into a C#(Version. 9) code. \r\n\r\n## Rules ##\r\n- Generate static class. The code generated should have 1 method with the static method named ExecutePlangCode. \r\n- A variable in user intent is defined by starting and ending %.\r\n- Variables defined in the user intent can be passed into the ExecutePlangCode function by value, but only if defined by user. \r\n- Variable names passed to ExecutePlangCode function MUST be unmodified from the user statement\r\n- The code will not be modified after you generate it.\r\n- If condition fails, throw Exception, unless defined otherwise by user command\r\n- Exception message should be for non-technical user\r\n- ALWAYS use long or long? instead of int or int?\r\n- Use long.TryParse When validating if variable is long\r\n- Do not reference any DTO classes. Choose the type that seems to fit best when not defined by user input. Use dynamic? if complex object is needed.\r\n- Strings are defined with double quote (\")\r\n- Any class from System.IO, should be replaced with PLang.SafeFileSystem.PLangFileSystem. It contains same classes and methods. \r\n- If PLangFileSystem is needed, add parameter PLang.SafeFileSystem.PLangFileSystem fileSystem into ExecutePlangCode method, but ONLY if needed. Assembly for PLangFileSystem is already include, do not list it in Assemblies response.\r\n- System.IO.Path needs to be mapped to PLang.SafeFileSystem.Path which DOES not contain static methods, e.g. Path.GetFileName => fileSystem.Path.GetFileName. fileSystem IS provided as parameter as part of ExecutePlangCode method \r\n- When condition is checking if variable is null, the variable needs to be defined with ? in the parameter, e.g. ExecutePlangCode(dynamic? variable)\r\n- Variables that are injected into ExecutePlangCode method and contain dot(.), then replace dot(.) with the letter α in the parameter list. e.g. %user.id% to userαid, %product.items[0].title% to productαitemsα0ααtitle, %list[1]% to listα1α\r\n- Keep underscore in variables if defined by user, e.g.  if %data.user_id%(string) is null => ExecutePlangCode(string? dataαuser_id)\r\n- Consider top security measures when generating code and validate code\r\n- When checking type and converting variables to type, use Convert.ChangeType method\r\n- When user defines assembly or using, include them in your answer\r\n- append @ sign for reserved variable in C#\r\n- on error in step is handled by external system, DO NOT generate code for it\r\n- follow user instruction when generating code\r\n## Rules ##\r\n\r\n## Response information ##\r\n- Namespace: MUST be PLangGeneratedCode\r\n- Name: is name of class, it should represent the intent of what the code is doing. \r\n- Name of class cannot be: check_and_set_variable\n\r\n- Using: must include namespaces that are needed to compile code.\r\n- Assemblies: dll to reference to compile using Roslyn\r\n- Parameters: Parameters MUST match parameter count sent to ExecutePlangCode.\r\n- PLang.Modules.BaseBuilder+Parameter has scheme => { Name:string, Value:string, Type:string } Name is the name of the parameter in the ExecutePlangCode method, Value is the %variable% name that matches and Type is .net object type\r\n- ReturnValues: keep as is defined by user, e.g. user: 'is leap year, write \"yes\" to %answer% => ReturnValues would be [\"%answer%\"], only return 1 value\r\n## Response information ##\r\n"
            },
            {
              "type": "text",
              "text": "Only write the raw c# code and json scheme, no summary, no extra text to explain, be concise.\r\n\tYOU MUST implement all code needed and valid c# code. \r\n\tYou must return ```csharp for the code implementation and ```json scheme: {\n\t\"Reasoning\": string,\n\t\"Namespace\": string,\n\t\"Name\": string,\n\t\"Using\"?: string[] = null,\n\t\"Assemblies\"?: string[] = null,\n\t\"Parameters\"?: [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}] = null,\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
            }
          ]
        },
        {
          "role": "assistant",
          "content": [
            {
              "type": "text",
              "text": "## Canonical User Intent (already disambiguated by LLM)\r\nDetermine if the file name contains the word 'Lesson' and set a boolean flag accordingly\n## functions available starts ##\r\n{\"Methods\":[{\"MethodName\":\"RunInlineCode\",\"Parameters\":[{\"Type\":\"PLang.Services.CompilerService.CodeImplementationResponse\",\"Name\":\"implementation\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"MethodName\":\"RunFileCode\",\"Parameters\":[{\"Type\":\"PLang.Modules.CodeModule.Builder+FileCodeImplementationResponse\",\"Name\":\"implementation\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"System.Object\"}}],\"SupportingObjects\":[{\"Type\":\"PLang.Services.CompilerService.CodeImplementationResponse\",\"Name\":\"implementation\",\"TypeProperties\":[{\"Type\":\"System.String\",\"Name\":\"Reasoning\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Namespace\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Name\",\"IsRequired\":true},{\"Type\":\"List<string>\",\"Name\":\"Using\",\"IsRequired\":true},{\"Type\":\"List<string>\",\"Name\":\"Assemblies\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+Parameter]\",\"Name\":\"Parameters\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+ReturnValue]\",\"Name\":\"ReturnValues\",\"IsRequired\":true}],\"IsRequired\":false},{\"Type\":\"PLang.Building.Model.Instruction\",\"Name\":\"Instruction\",\"TypeProperties\":[{\"Type\":\"System.String\",\"Name\":\"Text\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"ModuleType\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"GenericFunctionType\",\"IsRequired\":true}],\"IsRequired\":true},{\"Type\":\"PLang.Modules.CodeModule.Builder+FileCodeImplementationResponse\",\"Name\":\"implementation\",\"TypeProperties\":[{\"Type\":\"System.String\",\"Name\":\"Reasoning\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Name\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"FileName\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Hash\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"SourceCode\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Namespace\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"ClassName\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"MethodName\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+Parameter]\",\"Name\":\"Parameters\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+ReturnValue]\",\"Name\":\"ReturnValues\",\"IsRequired\":true},{\"Type\":\"PLang.Building.Model.Instruction\",\"Name\":\"Instruction\",\"Description\":\"System.Collections.Generic.List`1[PLang.Building.Model.IPropertyDescription] (see Type information in SupportingObjects)\",\"IsRequired\":true}],\"IsRequired\":false}]}\r\n## functions available ends ##\r\n## defined variables ##\r\nfile.filename (type:object), islesson (type:object), islesson (type:object), \r\n## defined variables ##\n\r\n\r\n\r\n\r\n\r\n## examples ##\r\nreplace \"<strong>\" with \"\" from %html%, write to %html% => string ExecutePlangCode(string? html) {\r\n    //validate input parameter \r\n    html = html.Replace(\"<strong>\", \"\");\r\n\treturn html;\r\n}\r\nParameters: [{Name:\"html\", Value:\"%html%\", Type:\"string\"}]\r\nReturnValue: \"%html%\"\r\n\r\n%list.Count%*50, write to %result% => long ExecutePlangCode(long? listαCount) {\r\n    //validate input parameter \r\n    result = listαCount*50;\r\n\treturn result;\r\n}\r\nParameters: [{Name:\"listαCount\", Value:\"%list.Count%\", Type:\"long\"}]\r\nReturnValues: \"%result%\"\r\n\r\n%response.data.total%*%response.data.total_amount%, write to %allTotal%, => long ExecutePlangCode(dynamic? response.data.total, dynamic? response.data.total_amount) { \r\n    //validate input parameter \r\n\tlong allTotal = response.data.total*response.data.total_amount;\r\n\treturn allTotal;\r\n}\r\nParameters: [{Name:\"response.data.total\", Value:\"%response.data.total%\", Type:\"dynamic\"}, Name:\"response.data.total_amount\", Value:\"%response.data.total_amount%\", Type:\"dynamic\"}]\r\nReturnValues: \"%allTotal%\"\r\n\r\n\r\nget filename of %filePath%, write to %fileName% => string ExecutePlangCode(IPlangFileSystem fileSystem, string filePath) {\r\n\t//validate input parameter \r\n\tfileName = fileSystem.Path.GetFileName(filePath);\r\n\treturn fileName;\r\n}\r\nParameters: [{Name:\"fileSystem\", Value:\"%filePath%\", Type:\"string\"}]\r\nReturnValues: \"%fileName%\"\r\n## examples ##"
            }
          ]
        },
        {
          "role": "user",
          "content": [
            {
              "type": "text",
              "text": "[code] when %file.FileName% contains \"Lesson\", set %isLesson%=true, write to %isLesson%"
            }
          ]
        }
      ],
      "type": "PLang.Modules.CodeModule.Builder",
      "caching": true,
      "RawResponse": "```csharp\nusing System;\n\nnamespace PLangGeneratedCode\n{\n    public static class CheckIfFileNameContainsLesson\n    {\n        public static bool ExecutePlangCode(string? fileαFileName)\n        {\n            if (fileαFileName == null)\n            {\n                throw new Exception(\"The file name cannot be empty. Please provide a valid file name.\");\n            }\n\n            bool isLesson = fileαFileName.Contains(\"Lesson\");\n            return isLesson;\n        }\n    }\n}\n```\n```json\n{\n  \"Reasoning\": \"The code checks if the input file name contains the word 'Lesson' and sets the boolean flag isLesson accordingly. It validates that the file name is not null and throws a user-friendly exception if it is.\",\n  \"Namespace\": \"PLangGeneratedCode\",\n  \"Name\": \"CheckIfFileNameContainsLesson\",\n  \"Using\": [\n    \"System\"\n  ],\n  \"Assemblies\": [],\n  \"Parameters\": [\n    {\n      \"Type\": \"string?\",\n      \"Name\": \"fileαFileName\",\n      \"Value\": \"%file.FileName%\"\n    }\n  ],\n  \"ReturnValues\": [\n    {\n      \"Type\": \"bool\",\n      \"VariableName\": \"%isLesson%\"\n    }\n  ]\n}\n```"
    }
  ]
}