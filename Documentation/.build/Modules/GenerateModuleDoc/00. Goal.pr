{
  "GoalName": "GenerateModuleDoc",
  "Comment": null,
  "Text": "GenerateModuleDoc",
  "GoalSteps": [
    {
      "Text": "read file 'template/modules/GenerateModuleDocumentation/system.txt', into %system%, load variables",
      "Comment": null,
      "ModuleType": "PLang.Modules.FileModule",
      "Name": "read_file_into_system_and_load_variables",
      "Description": "Open and read the text file located at 'template/modules/GenerateModuleDocumentation/system.txt', store its entire content into the variable %system%, and then load variables from that content for further use",
      "PrFileName": "01. read_file_into_system_and_load_variables.pr",
      "RelativePrPath": ".build\\Modules\\GenerateModuleDoc\\01. read_file_into_system_and_load_variables.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-07-05T15:55:14.4824452-05:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 0,
      "LineNumber": 6,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Solves math expressions. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists. Prefer predefined methods over SimpleCondition and CompoundCondition. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nsystem(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "read file 'template/modules/GenerateModuleDocumentation/system.txt', into %system%, load variables"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Read the contents of a specified text file into a variable and load variables from it\",\n  \"Reason\": \"The step involves reading a file and loading variables, which aligns with file system access and reading file content capabilities described in the FileModule\",\n  \"StepDescription\": \"Open and read the text file located at 'template/modules/GenerateModuleDocumentation/system.txt', store its entire content into the variable %system%, and then load variables from that content for further use\",\n  \"Modules\": [\"PLang.Modules.FileModule\", \"PLang.Modules.VariableModule\"],\n  \"StepName\": \"read_file_into_system_and_load_variables\",\n  \"Confidence\": \"High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "1be715ecc35b0f2593f3a9853dc04ef7608995e5a0cc61c27085c58a3d5761c3",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Modules.goal",
      "UserIntent": null
    },
    {
      "Text": "read %file%, into %content%",
      "Comment": null,
      "ModuleType": "PLang.Modules.FileModule",
      "Name": "read_file_into_content",
      "Description": "Access the file specified by the variable %file%, read its entire content, and store the resulting data into the variable %content% for further use",
      "PrFileName": "02. read_file_into_content.pr",
      "RelativePrPath": ".build\\Modules\\GenerateModuleDoc\\02. read_file_into_content.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-07-05T15:55:20.3307817-05:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 1,
      "LineNumber": 7,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Solves math expressions. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists. Prefer predefined methods over SimpleCondition and CompoundCondition. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nfile(System.Nullable),content(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "read %file%, into %content%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Read the contents of a specified file and store it into a variable\",\n  \"Reason\": \"The step explicitly describes reading a file and storing its content, which matches the FileModule's capability to handle file system access and read files\",\n  \"StepDescription\": \"Access the file specified by the variable %file%, read its entire content, and store the resulting data into the variable %content% for further use\",\n  \"Modules\": [\"PLang.Modules.FileModule\"],\n  \"StepName\": \"read_file_into_content\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "3b1b1e35a2855cca8cadf6ee9afd6c3ecac029d7c0d0fc416b089ba7e21bea40",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Modules.goal",
      "UserIntent": null
    },
    {
      "Text": "write out 'Asking for: %ModuleName%'",
      "Comment": null,
      "ModuleType": "PLang.Modules.OutputModule",
      "Name": "write_out_module_name",
      "Description": "Output the text 'Asking for: ' followed by the value of the variable %ModuleName% to the user or output stream",
      "PrFileName": "03. write_out_module_name.pr",
      "RelativePrPath": ".build\\Modules\\GenerateModuleDoc\\03. write_out_module_name.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-07-05T15:55:25.0323306-05:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 2,
      "LineNumber": 8,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Solves math expressions. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists. Prefer predefined methods over SimpleCondition and CompoundCondition. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nModuleName(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "write out 'Asking for: %ModuleName%'"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Display a message to the user indicating the module name being asked for\",\n  \"Reason\": \"The step involves writing out a message to the output stream, which is the primary function of the OutputModule\",\n  \"StepDescription\": \"Output the text 'Asking for: ' followed by the value of the variable %ModuleName% to the user or output stream\",\n  \"Modules\": [\"PLang.Modules.OutputModule\"],\n  \"StepName\": \"write_out_module_name\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "62278ed1731b02da35263b2148d297e76d652038147be749e3dd63c11044e4c2",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Modules.goal",
      "UserIntent": null
    },
    {
      "Text": "[llm] system: %system%\n    user:%content%\n    scheme: {moduleName:string, namespace:string, desc:string, [{functions:string[], parameters:[{type:string, name:string, (defaultValue:string|required:yes)}, ...], returns:type|void}]}\n    write to %module%",
      "Comment": null,
      "ModuleType": "PLang.Modules.LlmModule",
      "Name": "generate_module_description_with_llm",
      "Description": "Send a prompt to the language model with the system context and user content, requesting a response formatted according to the specified module schema, and write the generated module description to the variable %module%",
      "PrFileName": "04. generate_module_description_with_llm.pr",
      "RelativePrPath": ".build\\Modules\\GenerateModuleDoc\\04. generate_module_description_with_llm.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-07-05T15:55:39.2729125-05:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 3,
      "LineNumber": 9,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\nPLang.Modules.LlmModule, PLang.Modules.InstallModule\r\n<modules>\r\n\r\n<variables>\r\nsystem(System.Nullable),content(System.Nullable),module(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[llm] system: %system%\n    user:%content%\n    scheme: {moduleName:string, namespace:string, desc:string, [{functions:string[], parameters:[{type:string, name:string, (defaultValue:string|required:yes)}, ...], returns:type|void}]}\n    write to %module%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Use a language model to generate a structured module description based on the provided system and user content inputs\",\n  \"Reason\": \"The step explicitly uses the [llm] tag and constructs a prompt with system and user inputs, specifying a scheme for the output, which matches the capabilities of the LlmModule\",\n  \"StepDescription\": \"Send a prompt to the language model with the system context and user content, requesting a response formatted according to the specified module schema, and write the generated module description to the variable %module%\",\n  \"Modules\": [\"PLang.Modules.LlmModule\"],\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null,\n  \"StepName\": \"generate_module_description_with_llm\"\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "ffc1009692b8d7408950eb977b820c33c83240b05a6e5b8e96e3a2e2b94f91fe",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Modules.goal",
      "UserIntent": null
    },
    {
      "Text": "get folder access to '../Tests'",
      "Comment": null,
      "ModuleType": "PLang.Modules.FileModule",
      "Name": "get_folder_access_to_tests",
      "Description": "Attempt to obtain or verify access permissions to the folder '../Tests' in the file system, enabling subsequent operations on that folder if access is granted.",
      "PrFileName": "05. get_folder_access_to_tests.pr",
      "RelativePrPath": ".build\\Modules\\GenerateModuleDoc\\05. get_folder_access_to_tests.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-07-05T15:55:41.8886034-05:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 4,
      "LineNumber": 13,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Solves math expressions. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists. Prefer predefined methods over SimpleCondition and CompoundCondition. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "get folder access to '../Tests'"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Request permission or access rights to the folder located at '../Tests'\",\n  \"Reason\": \"The step involves handling file system permissions or access, which is covered by the FileModule that manages file system access and permissions.\",\n  \"StepDescription\": \"Attempt to obtain or verify access permissions to the folder '../Tests' in the file system, enabling subsequent operations on that folder if access is granted.\",\n  \"Modules\": [\"PLang.Modules.FileModule\"],\n  \"StepName\": \"get_folder_access_to_tests\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "194c8bbd539a537704c968234ed72bb35f4b156c20e93d84768081e93ffc9876",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Modules.goal",
      "UserIntent": null
    },
    {
      "Text": "[cond] if dir \"../Tests/%module.moduleName%/\" exists, call CreateDocs, else PathNotFound",
      "Comment": null,
      "ModuleType": "PLang.Modules.ConditionalModule",
      "Name": "check_directory_and_call_goal",
      "Description": "Evaluate whether the directory path '../Tests/%module.moduleName%/' exists. If it does, invoke the 'CreateDocs' goal. If it does not exist, invoke the 'PathNotFound' goal to handle the missing directory case.",
      "PrFileName": "06. check_directory_and_call_goal.pr",
      "RelativePrPath": ".build\\Modules\\GenerateModuleDoc\\06. check_directory_and_call_goal.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-07-05T16:25:09.4558744-05:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 5,
      "LineNumber": 14,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\nPLang.Modules.ConditionalModule\r\n<modules>\r\n\r\n<variables>\r\nmodule.moduleName(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[cond] if dir \"../Tests/%module.moduleName%/\" exists, call CreateDocs, else PathNotFound"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Check if a specific directory exists and based on that condition, either call a documentation creation goal or handle the path not found scenario\",\n  \"Reason\": \"The step involves a conditional check (if-else) on the existence of a directory and branching logic accordingly, which is the primary function of the ConditionalModule\",\n  \"StepDescription\": \"Evaluate whether the directory path '../Tests/%module.moduleName%/' exists. If it does, invoke the 'CreateDocs' goal. If it does not exist, invoke the 'PathNotFound' goal to handle the missing directory case.\",\n  \"Modules\": [\"PLang.Modules.ConditionalModule\"],\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null,\n  \"StepName\": \"check_directory_and_call_goal\"\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "146bc832e60e6dd7899fc1c8e70da0b06ce44c740fa53924b96ad213ffa5ab63",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Modules.goal",
      "UserIntent": null
    }
  ],
  "SubGoals": [],
  "Description": "The GenerateModuleDoc goal is designed to generate documentation for a module based on a template. It begins by reading a system template from a specified file and loading necessary variables. It then reads the content from a provided file and outputs a message indicating the module name being processed. The goal utilizes a language model to extract structured information about the module, including its name, namespace, description, functions, parameters, and return types. After gathering this information, it checks for the existence of a directory corresponding to the module in a specified tests folder. If the directory exists, it proceeds to create documentation; otherwise, it indicates that the path was not found.",
  "Visibility": 0,
  "GoalFileName": "Modules.goal",
  "RelativeGoalPath": "\\Modules.goal",
  "RelativeGoalFolderPath": "\\",
  "RelativePrPath": ".build\\Modules\\GenerateModuleDoc\\00. Goal.pr",
  "RelativePrFolderPath": ".build\\Modules\\GenerateModuleDoc",
  "BuilderVersion": "1.0.0.0",
  "GoalInfo": null,
  "Injections": [],
  "Signature": null,
  "FileHash": "97f9ea1c733f85d67fc5b3a907e8d36f606134ceff47224a20778633083b6b90",
  "Hash": "c40354675740f7d0ef1fc96c463f8017562974f16fdd3abd31e2c1859b48a391",
  "IncomingVariablesRequired": {
    "file": "The path to the file containing the content to be documented.",
    "ModuleName": "The name of the module for which documentation is being generated."
  },
  "DataSourceName": null,
  "IsSetup": false
}