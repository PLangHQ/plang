{
  "Hash": null,
  "SignedMessage": null,
  "Text": "if %result.ask% is not empty then call AskUser ask=%result.ask%, else SaveTemplate",
  "ModuleType": "PLang.Modules.ConditionalModule",
  "GenericFunctionType": "PLang.Modules.BaseBuilder+GenericFunction",
  "Function": {
    "Reasoning": "The user wants to check if %result.ask% is not empty and based on that condition call either the AskUser goal with the ask parameter set to %result.ask% or call the SaveTemplate goal. The IsNotEmpty function is suitable for this conditional check and branching.",
    "Name": "IsNotEmpty",
    "Parameters": [
      {
        "Type": "System.Object",
        "Name": "item",
        "Value": "%result.ask%"
      },
      {
        "Type": "PLang.Models.GoalToCallInfo",
        "Name": "goalToCallIfTrue",
        "Value": {
          "Path": ".build\\modules\\UiModule\\CreateTemplateFile\\AskUser\\00. Goal.pr",
          "Name": "AskUser",
          "Parameters": {
            "ask": "%result.ask%"
          }
        }
      },
      {
        "Type": "PLang.Models.GoalToCallInfo",
        "Name": "goalToCallIfFalse",
        "Value": {
          "Path": ".build\\modules\\UiModule\\CreateTemplateFile\\SaveTemplate\\00. Goal.pr",
          "Name": "SaveTemplate",
          "Parameters": {}
        }
      }
    ],
    "ReturnValues": null
  },
  "Properties": {
    "Parameters": {
      "item": {
        "Name": "item",
        "FullTypeName": "System.Object"
      },
      "goalToCallIfTrue": {
        "Name": "goalToCallIfTrue",
        "FullTypeName": "PLang.Models.GoalToCallInfo"
      },
      "goalToCallIfFalse": {
        "Name": "goalToCallIfFalse",
        "FullTypeName": "PLang.Models.GoalToCallInfo"
      }
    },
    "ReturnValues": {}
  },
  "LlmRequest": [
    {
      "temperature": 0.0,
      "top_p": 0.0,
      "frequencyPenalty": 0.0,
      "presencePenalty": 0.0,
      "maxLength": 4000,
      "llmResponseType": "json",
      "scheme": "{\"Reasoning\" : System.String, \"Name\" : System.String, \"Parameters\" : System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+Parameter] = null, \"ReturnValues\" : System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+ReturnValue] = null}\n\nAdditional information about objects:\nPLang.Modules.BaseBuilder+Parameter : {\"Type\" : System.String, \"Name\" : System.String, \"Value\" : System.Object}\nPLang.Modules.BaseBuilder+ReturnValue : {\"Type\" : System.String, \"VariableName\" : System.String}",
      "model": "gpt-4.1-mini",
      "promptMessage": [
        {
          "role": "system",
          "content": [
            {
              "type": "text",
              "text": "User is writing code in plang programming language.\r\n\r\nYour job is: \r\n1. Parse and understand user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\n## Rules\r\n%variable% in plang is defined with starting and ending percentage sign (%)\r\n%variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nleave %variable% as is and do not change text to a variable\r\nnull is used to represent no value, e.g. { \"name\": null }\r\nVariables MUST not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameters that is type System.String MUST be without escaping quotes. See <Example>\r\nError handling is process by another step, if you see 'on error...' you can ignore it\r\nIf there is some api key, settings, config replace it with %Settings.NameOfApiKey% \r\n- NameOfApiKey should named in relation to what is happening if change is needed\r\nDictionary<T1, T2> value is {key: value, ... } => a dictionary parameter defined as %variable% without key should have the same key and value as %variable%, e.g. %userId% => { key: \"userId\", value:\"%userId%\"}\r\nVariable with ToString with date/time formatting, assume it is System.DateTime, e.g. %updated.ToString(\"yyyy-MM-dd\")% then type of %updated% is System.DateTime \r\nList, ReadOnlyList are array of the object => e.g. user defines single property for List, return it as array\r\n\r\n<Example>\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n<Example>\r\n\r\n## JSON scheme information\r\nReasoning: A brief description of the reasoning behind the selection of the function and parameters based on the user's intent. This property provides context for why a particular function was chosen and how it aligns with the user intent.\r\nName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
            },
            {
              "type": "text",
              "text": "You MUST respond in JSON, scheme:\r\n {\"Reasoning\" : System.String, \"Name\" : System.String, \"Parameters\" : System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+Parameter] = null, \"ReturnValues\" : System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+ReturnValue] = null}  Additional information about objects: PLang.Modules.BaseBuilder+Parameter : {\"Type\" : System.String, \"Name\" : System.String, \"Value\" : System.Object} PLang.Modules.BaseBuilder+ReturnValue : {\"Type\" : System.String, \"VariableName\" : System.String}"
            }
          ]
        },
        {
          "role": "assistant",
          "content": [
            {
              "type": "text",
              "text": "## Canonical User Intent (already disambiguated by LLM)\r\nCheck if the variable %result.ask% contains a value and based on that condition, either call the AskUser goal with the ask parameter set or call the SaveTemplate goal.\n## functions available starts ##\r\n{\"Methods\":[{\"MethodName\":\"FileExists\",\"Parameters\":[{\"Type\":\"System.String\",\"Name\":\"filePathOrVariableName\",\"IsRequired\":true},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"MethodName\":\"DirectoryExists\",\"Parameters\":[{\"Type\":\"System.String\",\"Name\":\"dirPathOrVariableName\",\"IsRequired\":true},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"MethodName\":\"HasAccessToPath\",\"Parameters\":[{\"Type\":\"System.String\",\"Name\":\"dirOrFilePathOrVariableName\",\"IsRequired\":true},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"Description\":\"Operator: ==|!=|<|>|<=|>=|in|isEmpty|contains|startswith|endswith|indexOf. IsNot property indicates if the condition is a negation of the specified operator. \\r\\nIsNot=True for ‘is not’, ‘does not’, \\r\\nLogic: convert \\\"&&\\\" => \\\"AND\\\", \\\"||\\\" => \\\"OR\\\"\\r\\n\",\"MethodName\":\"SimpleCondition\",\"Parameters\":[{\"Type\":\"PLang.Modules.ConditionalModule.ConditionEvaluator+SimpleCondition\",\"Name\":\"condition\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":true},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"Description\":\"Operator: ==|!=|<|>|<=|>=|in|contains|startswith|endswith|indexOf.  IsNot property indicates if the condition is a negation of the specified operator. True for ‘is not’, ‘does not’, etc.\",\"MethodName\":\"CompoundCondition\",\"Parameters\":[{\"Type\":\"PLang.Modules.ConditionalModule.ConditionEvaluator+CompoundCondition\",\"Name\":\"condition\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":true},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"MethodName\":\"SetVariableWithCondition\",\"Parameters\":[{\"Type\":\"System.String\",\"Name\":\"variableName\",\"IsRequired\":true},{\"Type\":\"System.Boolean\",\"Name\":\"boolValue\",\"IsRequired\":true},{\"Type\":\"System.Object\",\"Name\":\"valueIfTrue\",\"IsRequired\":true},{\"Type\":\"System.Object\",\"Name\":\"valueIfFalse\",\"IsRequired\":true}]},{\"MethodName\":\"IsFalse\",\"Parameters\":[{\"Type\":\"System.Nullable`1[System.Boolean]\",\"Name\":\"item\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"MethodName\":\"IsSystemPath\",\"Parameters\":[{\"Type\":\"System.String\",\"Name\":\"path\",\"IsRequired\":true},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"MethodName\":\"IsOsPath\",\"Parameters\":[{\"Type\":\"System.String\",\"Name\":\"path\",\"IsRequired\":true},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"MethodName\":\"IsTrue\",\"Parameters\":[{\"Type\":\"System.Nullable`1[System.Boolean]\",\"Name\":\"item\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"MethodName\":\"IsMod\",\"Parameters\":[{\"Type\":\"System.Double\",\"Name\":\"leftValue\",\"IsRequired\":true},{\"Type\":\"System.Double\",\"Name\":\"modValue\",\"IsRequired\":true},{\"Type\":\"System.Double\",\"Name\":\"equalsValue\",\"IsRequired\":true},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"MethodName\":\"IsNotEmpty\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"item\",\"IsRequired\":true},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"MethodName\":\"IsEmpty\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"item\",\"IsRequired\":true},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"Description\":\"example: `if %code% contains 123, 345 then ....`, `if %zip% is one of (223,333) then...`\",\"MethodName\":\"ContainsNumbers\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"item\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.List`1[System.Int32]\",\"Name\":\"contains\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"Description\":\"isNot property reverse true to false, example: `if %name% contains \\\"john\\\" then`, `if %product% contains %title% then call goal DoProdudct`, `if %name% does not contain \\\"bill\\\"` (isNot=true)\",\"MethodName\":\"ContainsString\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"item\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"contains\",\"IsRequired\":true},{\"Type\":\"System.Boolean\",\"Name\":\"isNot\",\"DefaultValue\":false,\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"Description\":\"Check if item equals(==) another object. \\r\\n`if %id% == 100 then IsEqual, else IsNotEqual....` => IsEqual is goalToCallIfTrue, IsNotEqual is goalToCallIfFalse\\r\\n`if %name% is 'john'....`\\r\\n`if %zip equals 123....\\r\\n\",\"MethodName\":\"IsEqual\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"item1\",\"IsRequired\":true},{\"Type\":\"System.Object\",\"Name\":\"item2\",\"IsRequired\":true},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"System.Boolean\",\"Name\":\"ignoreCase\",\"DefaultValue\":true,\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnFalse\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"Description\":\"Choose RunInlineCode when no other method matches user intent. Implementation variable can be set to null.\",\"MethodName\":\"RunInlineCode\",\"Parameters\":[{\"Type\":\"PLang.Services.CompilerService.ConditionImplementationResponse\",\"Name\":\"implementation\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"System.Object\"}}],\"SupportingObjects\":[{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCallIfTrue\",\"Description\":\"Name of goal and parameters that is called, e.g. in condition, loops, run goal. Keep Name as user defines it with path\",\"TypeProperties\":[{\"Type\":\"System.String\",\"Name\":\"Name\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.Dictionary`2[System.String,System.Object]\",\"Name\":\"Parameters\",\"Description\":\"Name of goal and parameters that is called, e.g. in condition, loops, run goal. Keep Name as user defines it with path\",\"IsRequired\":true}],\"IsRequired\":false},{\"Type\":\"PLang.Modules.ThrowErrorModule.ErrorInfo\",\"Name\":\"throwErrorOnTrue\",\"TypeProperties\":[{\"Type\":\"System.String\",\"Name\":\"errorMessage\",\"IsRequired\":false},{\"Type\":\"System.String\",\"Name\":\"type\",\"IsRequired\":true},{\"Type\":\"System.Int32\",\"Name\":\"statusCode\",\"IsRequired\":true}],\"IsRequired\":false},{\"Type\":\"PLang.Modules.ConditionalModule.ConditionEvaluator+SimpleCondition\",\"Name\":\"condition\",\"Description\":\"Operator: ==|!=|<|>|<=|>=|in|isEmpty|contains|startswith|endswith|indexOf\",\"TypeProperties\":[{\"Type\":\"PLang.Modules.ConditionalModule.ConditionEvaluator+ConditionKind\",\"Name\":\"Kind\",\"AvailableValues\":\"Simple|Compound\",\"IsRequired\":true},{\"Type\":\"System.Object\",\"Name\":\"LeftValue\",\"IsRequired\":false},{\"Type\":\"System.String\",\"Name\":\"Operator\",\"IsRequired\":false},{\"Type\":\"System.Object\",\"Name\":\"RightValue\",\"IsRequired\":false},{\"Type\":\"System.String\",\"Name\":\"Logic\",\"IsRequired\":false},{\"Type\":\"System.Collections.Generic.IReadOnlyList`1[PLang.Modules.ConditionalModule.ConditionEvaluator+Condition]\",\"Name\":\"Conditions\",\"Description\":\"Operator: ==|!=|<|>|<=|>=|in|isEmpty|contains|startswith|endswith|indexOf\",\"IsRequired\":false},{\"Type\":\"System.Boolean\",\"Name\":\"IsNot\",\"IsRequired\":true}],\"IsRequired\":false},{\"Type\":\"PLang.Modules.ConditionalModule.ConditionEvaluator+CompoundCondition\",\"Name\":\"condition\",\"Description\":\"\\r\\nFor CompundCondition, use Conditions list to construct the condition. LeftValue and RightValue are used only at in SimpleCondition\\r\\nOperator: ==|!=|<|>|<=|>=|in|isEmpty|contains|startswith|endswith|indexOf\\r\\n\\r\\n\",\"TypeProperties\":[{\"Type\":\"PLang.Modules.ConditionalModule.ConditionEvaluator+ConditionKind\",\"Name\":\"Kind\",\"AvailableValues\":\"Simple|Compound\",\"IsRequired\":true},{\"Type\":\"System.Object\",\"Name\":\"LeftValue\",\"IsRequired\":false},{\"Type\":\"System.String\",\"Name\":\"Operator\",\"IsRequired\":false},{\"Type\":\"System.Object\",\"Name\":\"RightValue\",\"IsRequired\":false},{\"Type\":\"System.String\",\"Name\":\"Logic\",\"IsRequired\":false},{\"Type\":\"System.Collections.Generic.IReadOnlyList`1[PLang.Modules.ConditionalModule.ConditionEvaluator+Condition]\",\"Name\":\"Conditions\",\"Description\":\"\\r\\nFor CompundCondition, use Conditions list to construct the condition. LeftValue and RightValue are used only at in SimpleCondition\\r\\nOperator: ==|!=|<|>|<=|>=|in|isEmpty|contains|startswith|endswith|indexOf\\r\\n\\r\\n\",\"IsRequired\":false},{\"Type\":\"System.Boolean\",\"Name\":\"IsNot\",\"IsRequired\":true}],\"IsRequired\":false},{\"Type\":\"PLang.Services.CompilerService.ConditionImplementationResponse\",\"Name\":\"implementation\",\"TypeProperties\":[{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"GoalToCallOnTrue\",\"Description\":\"(see PLang.Models.GoalToCallInfo type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"GoalToCallOnFalse\",\"Description\":\"(see PLang.Models.GoalToCallInfo type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"System.String\",\"Name\":\"Reasoning\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Namespace\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Name\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.List`1[System.String]\",\"Name\":\"Using\",\"IsRequired\":false},{\"Type\":\"System.Collections.Generic.List`1[System.String]\",\"Name\":\"Assemblies\",\"IsRequired\":false},{\"Type\":\"System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+Parameter]\",\"Name\":\"Parameters\",\"IsRequired\":false},{\"Type\":\"System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+ReturnValue]\",\"Name\":\"ReturnValues\",\"IsRequired\":false}],\"IsRequired\":false}]}\r\n## functions available ends ##\r\n## defined variables ##\r\nresult.ask (type:object), \r\n## defined variables ##"
            }
          ]
        },
        {
          "role": "user",
          "content": [
            {
              "type": "text",
              "text": "if %result.ask% is not empty then call AskUser ask=%result.ask%, else SaveTemplate"
            }
          ]
        }
      ],
      "type": "PLang.Modules.ConditionalModule.Builder",
      "caching": true,
      "RawResponse": "{\n  \"Reasoning\": \"The user wants to check if %result.ask% is not empty and based on that condition call either the AskUser goal with the ask parameter set to %result.ask% or call the SaveTemplate goal. The IsNotEmpty function is suitable for this conditional check and branching.\",\n  \"Name\": \"IsNotEmpty\",\n  \"Parameters\": [\n    {\n      \"Type\": \"System.Object\",\n      \"Name\": \"item\",\n      \"Value\": \"%result.ask%\"\n    },\n    {\n      \"Type\": \"PLang.Models.GoalToCallInfo\",\n      \"Name\": \"goalToCallIfTrue\",\n      \"Value\": {\n        \"Name\": \"AskUser\",\n        \"Parameters\": {\n          \"ask\": \"%result.ask%\"\n        }\n      }\n    },\n    {\n      \"Type\": \"PLang.Models.GoalToCallInfo\",\n      \"Name\": \"goalToCallIfFalse\",\n      \"Value\": {\n        \"Name\": \"SaveTemplate\",\n        \"Parameters\": {}\n      }\n    }\n  ],\n  \"ReturnValues\": null\n}"
    }
  ]
}