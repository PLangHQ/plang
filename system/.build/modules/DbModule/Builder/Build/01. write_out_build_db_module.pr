{
  "Hash": null,
  "SignedMessage": null,
  "Text": "write out \"build db module\"",
  "ModuleType": "PLang.Modules.OutputModule",
  "GenericFunctionType": "PLang.Modules.BaseBuilder+GenericFunction",
  "Function": {
    "Reasoning": "The user wants to write out the message 'build db module'. The appropriate function for writing out a message is 'Write'.",
    "Name": "Write",
    "Parameters": [
      {
        "Type": "PLang.Services.OutputStream.Messages.TextMessage",
        "Name": "textMessage",
        "Value": {
          "Kind": "Text",
          "Level": "info",
          "StatusCode": 200,
          "Channel": "default",
          "Actor": "user",
          "Content": "build db module"
        }
      }
    ],
    "ReturnValues": null
  },
  "Properties": {
    "Parameters": {
      "textMessage": {
        "Name": "textMessage",
        "FullTypeName": "PLang.Services.OutputStream.Messages.TextMessage"
      }
    },
    "ReturnValues": {}
  },
  "LlmRequest": [
    {
      "temperature": 0.0,
      "top_p": 0.0,
      "frequencyPenalty": 0.0,
      "presencePenalty": 0.0,
      "maxLength": 4000,
      "llmResponseType": "json",
      "scheme": "{\"Reasoning\" : System.String, \"Name\" : System.String, \"Parameters\" : System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+Parameter] = null, \"ReturnValues\" : System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+ReturnValue] = null}\n\nAdditional information about objects:\nPLang.Modules.BaseBuilder+Parameter : {\"Type\" : System.String, \"Name\" : System.String, \"Value\" : System.Object}\nPLang.Modules.BaseBuilder+ReturnValue : {\"Type\" : System.String, \"VariableName\" : System.String}",
      "model": "gpt-4o",
      "promptMessage": [
        {
          "role": "system",
          "content": [
            {
              "type": "text",
              "text": "User is writing code in plang programming language.\r\n\r\nYour job is: \r\n1. Parse and understand user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\n## Rules\r\n%variable% in plang is defined with starting and ending percentage sign (%)\r\n%variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nleave %variable% as is and do not change text to a variable\r\nnull is used to represent no value, e.g. { \"name\": null }\r\nVariables MUST not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameters that is type System.String MUST be without escaping quotes. See <Example>\r\nError handling is process by another step, if you see 'on error...' you can ignore it\r\nIf there is some api key, settings, config replace it with %Settings.NameOfApiKey% \r\n- NameOfApiKey should named in relation to what is happening if change is needed\r\nDictionary<T1, T2> value is {key: value, ... } => a dictionary parameter defined as %variable% without key should have the same key and value as %variable%, e.g. %userId% => { key: \"userId\", value:\"%userId%\"}\r\nVariable with ToString with date/time formatting, assume it is System.DateTime, e.g. %updated.ToString(\"yyyy-MM-dd\")% then type of %updated% is System.DateTime \r\nList, ReadOnlyList are array of the object => e.g. user defines single property for List, return it as array\r\n\r\n<Example>\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n<Example>\r\n\r\n## JSON scheme information\r\nReasoning: A brief description of the reasoning behind the selection of the function and parameters based on the user's intent. This property provides context for why a particular function was chosen and how it aligns with the user intent.\r\nName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
            },
            {
              "type": "text",
              "text": "You MUST respond in JSON, scheme:\r\n {\"Reasoning\" : System.String, \"Name\" : System.String, \"Parameters\" : System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+Parameter] = null, \"ReturnValues\" : System.Collections.Generic.List`1[PLang.Modules.BaseBuilder+ReturnValue] = null}  Additional information about objects: PLang.Modules.BaseBuilder+Parameter : {\"Type\" : System.String, \"Name\" : System.String, \"Value\" : System.Object} PLang.Modules.BaseBuilder+ReturnValue : {\"Type\" : System.String, \"VariableName\" : System.String}"
            }
          ]
        },
        {
          "role": "assistant",
          "content": [
            {
              "type": "text",
              "text": "## functions available starts ##\r\n{\"Methods\":[{\"MethodName\":\"SetOutputStream\",\"Parameters\":[{\"Type\":\"System.String\",\"Name\":\"channel\",\"IsRequired\":true},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCall\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.Dictionary`2[System.String,System.Object]\",\"Name\":\"parameters\",\"IsRequired\":false}]},{\"Description\":\"Send to a question to the output stream and waits for answer. It always returns and answer will be written into variable\",\"MethodName\":\"Ask\",\"Parameters\":[{\"Type\":\"PLang.Services.OutputStream.Messages.AskMessage\",\"Name\":\"askMessage\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"Description\":\"Write out json content. Only choose this method when it's clear user is defining a json output, e.g. `- write out '{name:John}'. Do your best to make sure that TextMessage.Content is valid json. Any %variable% should have double quotes around it. statusCode(like http status code) should be defined by user. type=error should have statusCode between 400-599, depending on text. actor=user|system, channel=default|trace|debug|info(default for log)|warning|error|audit|metric|security|. User can also define his custom channel\",\"MethodName\":\"WriteJson\",\"Parameters\":[{\"Type\":\"PLang.Services.OutputStream.Messages.TextMessage\",\"Name\":\"textMessage\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":true},{\"Type\":\"PLang.Modules.OutputModule.Program+JsonOptions\",\"Name\":\"jsonOptions\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":false}]},{\"Description\":\"Write to the output. . statusCode(like http status code) should be defined by user. type=error should have statusCode between 400-599, depending on text. actor=user|system.\",\"MethodName\":\"Write\",\"Parameters\":[{\"Type\":\"PLang.Services.OutputStream.Messages.TextMessage\",\"Name\":\"textMessage\",\"Description\":\"(see Type information in SupportingObjects)\",\"IsRequired\":true}]}],\"SupportingObjects\":[{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"goalToCall\",\"Description\":\"Name of goal and parameters that is called, e.g. in condition, loops, run goal. Keep Name as user defines it with path\",\"TypeProperties\":[{\"Type\":\"System.String\",\"Name\":\"Name\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.Dictionary`2[System.String,System.Object]\",\"Name\":\"Parameters\",\"Description\":\"Name of goal and parameters that is called, e.g. in condition, loops, run goal. Keep Name as user defines it with path\",\"IsRequired\":true}],\"IsRequired\":false},{\"Type\":\"PLang.Utils.StepHelper+CallbackInfo\",\"Name\":\"CallbackInfo\",\"TypeProperties\":[{\"Type\":\"System.String\",\"Name\":\"GoalName\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"GoalHash\",\"IsRequired\":true},{\"Type\":\"System.Int32\",\"Name\":\"StepIndex\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Answer\",\"IsRequired\":false}],\"IsRequired\":true},{\"Type\":\"PLang.Models.HashedData\",\"Name\":\"Data\",\"TypeProperties\":[{\"Type\":\"System.String\",\"Name\":\"Type\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Format\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Hash\",\"IsRequired\":true}],\"IsRequired\":false},{\"Type\":\"PLang.Models.SignedMessage\",\"Name\":\"Signature\",\"TypeProperties\":[{\"Type\":\"System.String\",\"Name\":\"Type\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Nonce\",\"IsRequired\":true},{\"Type\":\"System.DateTimeOffset\",\"Name\":\"Created\",\"IsRequired\":true},{\"Type\":\"System.DateTimeOffset\",\"Name\":\"Expires\",\"IsRequired\":false},{\"Type\":\"System.String\",\"Name\":\"Name\",\"IsRequired\":false},{\"Type\":\"PLang.Models.HashedData\",\"Name\":\"Data\",\"Description\":\"(see PLang.Models.HashedData type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"System.Collections.Generic.List`1[System.String]\",\"Name\":\"Contracts\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.Dictionary`2[System.String,System.Object]\",\"Name\":\"Headers\",\"IsRequired\":false},{\"Type\":\"PLang.Models.SignedMessage\",\"Name\":\"Parent\",\"TypeProperties\":[],\"IsRequired\":false},{\"Type\":\"System.String\",\"Name\":\"Identity\",\"IsRequired\":false},{\"Type\":\"System.String\",\"Name\":\"Signature\",\"IsRequired\":false}],\"IsRequired\":true},{\"Type\":\"PLang.Utils.StepHelper+Callback\",\"Name\":\"Callback\",\"Description\":\"\\r\\nContent can be a filename or a text that will be written to stream, e.g. `render template.html` => Content=\\\"template.html\\\". \\r\\nTarget defines where in the UI to write the content, this can be null and will be controlled by external system\\r\\nActions are actions executed on the content, built in actions are: 'replace, append, prepend, clear, remove, scrollIntoView, focus, highlight, show, hide, notify, alert, badge, vibrate, navigate, reload, open, close'. \\r\\nA user can define multiple actions, user:`render 'product.html' to #main, replace the content, navigate and scroll into view => Actions:[\\\"replace\\\", \\\"navigate\\\", \\\"scrollIntoView\\\"]\\r\\nLevel: trace|debug|info|warning|error|critical. info is default. when user defines a level without a channel, assume channel=log\\r\\nChannel: default|log|audit|security|metric or custom defined by user\\r\\nActor: user|system => user is the default actor when Channel=default, for other channels use system as actor unless defined by user.\\r\\nCallbackData: %variables% that are sent with the form\\r\\nOnCallback: Goal to call after recieving an answer.\\r\\n\",\"TypeProperties\":[{\"Type\":\"System.String\",\"Name\":\"Path\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.Dictionary`2[System.String,System.Object]\",\"Name\":\"CallbackData\",\"IsRequired\":false},{\"Type\":\"PLang.Utils.StepHelper+CallbackInfo\",\"Name\":\"CallbackInfo\",\"Description\":\"(see PLang.Utils.StepHelper+CallbackInfo type information in SupportingObjects)\",\"IsRequired\":true},{\"Type\":\"PLang.Models.SignedMessage\",\"Name\":\"Signature\",\"Description\":\"(see PLang.Models.SignedMessage type information in SupportingObjects)\",\"IsRequired\":true}],\"IsRequired\":false},{\"Type\":\"PLang.Services.OutputStream.Messages.AskMessage\",\"Name\":\"askMessage\",\"Description\":\"\\r\\nContent can be a filename or a text that will be written to stream, e.g. `render template.html` => Content=\\\"template.html\\\". \\r\\nTarget defines where in the UI to write the content, this can be null and will be controlled by external system\\r\\nActions are actions executed on the content, built in actions are: 'replace, append, prepend, clear, remove, scrollIntoView, focus, highlight, show, hide, notify, alert, badge, vibrate, navigate, reload, open, close'. \\r\\nA user can define multiple actions, user:`render 'product.html' to #main, replace the content, navigate and scroll into view => Actions:[\\\"replace\\\", \\\"navigate\\\", \\\"scrollIntoView\\\"]\\r\\nLevel: trace|debug|info|warning|error|critical. info is default. when user defines a level without a channel, assume channel=log\\r\\nChannel: default|log|audit|security|metric or custom defined by user\\r\\nActor: user|system => user is the default actor when Channel=default, for other channels use system as actor unless defined by user.\\r\\nCallbackData: %variables% that are sent with the form\\r\\nOnCallback: Goal to call after recieving an answer.\\r\\n\",\"TypeProperties\":[{\"Type\":\"System.String\",\"Name\":\"Content\",\"Description\":\"file name or general text content or %variable%\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.Dictionary`2[System.String,System.Object]\",\"Name\":\"CallbackData\",\"Description\":\"\\r\\nContent can be a filename or a text that will be written to stream, e.g. `render template.html` => Content=\\\"template.html\\\". \\r\\nTarget defines where in the UI to write the content, this can be null and will be controlled by external system\\r\\nActions are actions executed on the content, built in actions are: 'replace, append, prepend, clear, remove, scrollIntoView, focus, highlight, show, hide, notify, alert, badge, vibrate, navigate, reload, open, close'. \\r\\nA user can define multiple actions, user:`render 'product.html' to #main, replace the content, navigate and scroll into view => Actions:[\\\"replace\\\", \\\"navigate\\\", \\\"scrollIntoView\\\"]\\r\\nLevel: trace|debug|info|warning|error|critical. info is default. when user defines a level without a channel, assume channel=log\\r\\nChannel: default|log|audit|security|metric or custom defined by user\\r\\nActor: user|system => user is the default actor when Channel=default, for other channels use system as actor unless defined by user.\\r\\nCallbackData: %variables% that are sent with the form\\r\\nOnCallback: Goal to call after recieving an answer.\\r\\n\",\"IsRequired\":false},{\"Type\":\"PLang.Models.GoalToCallInfo\",\"Name\":\"OnCallback\",\"Description\":\"(see PLang.Models.GoalToCallInfo type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Utils.StepHelper+Callback\",\"Name\":\"Callback\",\"Description\":\"(see PLang.Utils.StepHelper+Callback type information in SupportingObjects)\",\"IsRequired\":false},{\"Type\":\"PLang.Services.OutputStream.Messages.MessageKind\",\"Name\":\"Kind\",\"AvailableValues\":\"Text|Render|Error|Execute|Ask|Stream\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Level\",\"IsRequired\":true},{\"Type\":\"System.Int32\",\"Name\":\"StatusCode\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Target\",\"IsRequired\":false},{\"Type\":\"System.Collections.Generic.IReadOnlyList`1[System.String]\",\"Name\":\"Actions\",\"Description\":\"\\r\\nContent can be a filename or a text that will be written to stream, e.g. `render template.html` => Content=\\\"template.html\\\". \\r\\nTarget defines where in the UI to write the content, this can be null and will be controlled by external system\\r\\nActions are actions executed on the content, built in actions are: 'replace, append, prepend, clear, remove, scrollIntoView, focus, highlight, show, hide, notify, alert, badge, vibrate, navigate, reload, open, close'. \\r\\nA user can define multiple actions, user:`render 'product.html' to #main, replace the content, navigate and scroll into view => Actions:[\\\"replace\\\", \\\"navigate\\\", \\\"scrollIntoView\\\"]\\r\\nLevel: trace|debug|info|warning|error|critical. info is default. when user defines a level without a channel, assume channel=log\\r\\nChannel: default|log|audit|security|metric or custom defined by user\\r\\nActor: user|system => user is the default actor when Channel=default, for other channels use system as actor unless defined by user.\\r\\nCallbackData: %variables% that are sent with the form\\r\\nOnCallback: Goal to call after recieving an answer.\\r\\n\",\"IsRequired\":false},{\"Type\":\"System.String\",\"Name\":\"Channel\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Actor\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.IReadOnlyDictionary`2[System.String,System.Object]\",\"Name\":\"Properties\",\"Description\":\"\\r\\nContent can be a filename or a text that will be written to stream, e.g. `render template.html` => Content=\\\"template.html\\\". \\r\\nTarget defines where in the UI to write the content, this can be null and will be controlled by external system\\r\\nActions are actions executed on the content, built in actions are: 'replace, append, prepend, clear, remove, scrollIntoView, focus, highlight, show, hide, notify, alert, badge, vibrate, navigate, reload, open, close'. \\r\\nA user can define multiple actions, user:`render 'product.html' to #main, replace the content, navigate and scroll into view => Actions:[\\\"replace\\\", \\\"navigate\\\", \\\"scrollIntoView\\\"]\\r\\nLevel: trace|debug|info|warning|error|critical. info is default. when user defines a level without a channel, assume channel=log\\r\\nChannel: default|log|audit|security|metric or custom defined by user\\r\\nActor: user|system => user is the default actor when Channel=default, for other channels use system as actor unless defined by user.\\r\\nCallbackData: %variables% that are sent with the form\\r\\nOnCallback: Goal to call after recieving an answer.\\r\\n\",\"IsRequired\":false}],\"IsRequired\":false},{\"Type\":\"PLang.Services.OutputStream.Messages.TextMessage\",\"Name\":\"textMessage\",\"Description\":\"Content can be a filename or a text that will be written to stream. \\r\\nTarget defines where in the UI to write the content, this can be null and will be controlled by external system\\r\\nActions are actions executed on the content. null is default value unless defined by user. \\r\\nBuilt in actions are: 'null(default), append, prepend, replace, replaceSelf, clear, remove, scrollIntoView, focus, highlight, show, hide, notify, alert, badge, vibrate, navigate, reload, open, close'. \\r\\nA user can define multiple actions, user:`render 'product.html' to #main, replace the content, navigate and scroll into view => Actions:[\\\"replace\\\", \\\"navigate\\\", \\\"scrollIntoView\\\"]\\r\\nLevel: trace|debug|info|warning|error|critical. info is default. when user defines a level without a channel, assume channel=log\\r\\nChannel: default|log|audit|security|metric or custom defined by user intent\\r\\nActor: user|system => user is the default actor when Channel=default, for other channels use 'system' as actor unless defined by user intent, e.g. `write out to user log \\\"analyzing\\\"` => actor=user, channel=log\\r\\n\",\"TypeProperties\":[{\"Type\":\"PLang.Services.OutputStream.Messages.MessageKind\",\"Name\":\"Kind\",\"AvailableValues\":\"Text|Render|Error|Execute|Ask|Stream\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Level\",\"IsRequired\":true},{\"Type\":\"System.Int32\",\"Name\":\"StatusCode\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Target\",\"IsRequired\":false},{\"Type\":\"System.Collections.Generic.IReadOnlyList`1[System.String]\",\"Name\":\"Actions\",\"Description\":\"Content can be a filename or a text that will be written to stream. \\r\\nTarget defines where in the UI to write the content, this can be null and will be controlled by external system\\r\\nActions are actions executed on the content. null is default value unless defined by user. \\r\\nBuilt in actions are: 'null(default), append, prepend, replace, replaceSelf, clear, remove, scrollIntoView, focus, highlight, show, hide, notify, alert, badge, vibrate, navigate, reload, open, close'. \\r\\nA user can define multiple actions, user:`render 'product.html' to #main, replace the content, navigate and scroll into view => Actions:[\\\"replace\\\", \\\"navigate\\\", \\\"scrollIntoView\\\"]\\r\\nLevel: trace|debug|info|warning|error|critical. info is default. when user defines a level without a channel, assume channel=log\\r\\nChannel: default|log|audit|security|metric or custom defined by user intent\\r\\nActor: user|system => user is the default actor when Channel=default, for other channels use 'system' as actor unless defined by user intent, e.g. `write out to user log \\\"analyzing\\\"` => actor=user, channel=log\\r\\n\",\"IsRequired\":false},{\"Type\":\"System.String\",\"Name\":\"Channel\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Actor\",\"IsRequired\":true},{\"Type\":\"System.Collections.Generic.IReadOnlyDictionary`2[System.String,System.Object]\",\"Name\":\"Properties\",\"Description\":\"Content can be a filename or a text that will be written to stream. \\r\\nTarget defines where in the UI to write the content, this can be null and will be controlled by external system\\r\\nActions are actions executed on the content. null is default value unless defined by user. \\r\\nBuilt in actions are: 'null(default), append, prepend, replace, replaceSelf, clear, remove, scrollIntoView, focus, highlight, show, hide, notify, alert, badge, vibrate, navigate, reload, open, close'. \\r\\nA user can define multiple actions, user:`render 'product.html' to #main, replace the content, navigate and scroll into view => Actions:[\\\"replace\\\", \\\"navigate\\\", \\\"scrollIntoView\\\"]\\r\\nLevel: trace|debug|info|warning|error|critical. info is default. when user defines a level without a channel, assume channel=log\\r\\nChannel: default|log|audit|security|metric or custom defined by user intent\\r\\nActor: user|system => user is the default actor when Channel=default, for other channels use 'system' as actor unless defined by user intent, e.g. `write out to user log \\\"analyzing\\\"` => actor=user, channel=log\\r\\n\",\"IsRequired\":false},{\"Type\":\"System.String\",\"Name\":\"Content\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"Path\",\"IsRequired\":false}],\"IsRequired\":false},{\"Type\":\"PLang.Modules.OutputModule.Program+JsonOptions\",\"Name\":\"jsonOptions\",\"TypeProperties\":[{\"Type\":\"Newtonsoft.Json.NullValueHandling\",\"Name\":\"NullValueHandling\",\"AvailableValues\":\"Include|Ignore\",\"IsRequired\":true},{\"Type\":\"Newtonsoft.Json.DateFormatHandling\",\"Name\":\"DateFormatHandling\",\"AvailableValues\":\"IsoDateFormat|MicrosoftDateFormat\",\"IsRequired\":true},{\"Type\":\"System.String\",\"Name\":\"DateFormatString\",\"IsRequired\":false},{\"Type\":\"Newtonsoft.Json.DefaultValueHandling\",\"Name\":\"DefaultValueHandling\",\"AvailableValues\":\"Include|Ignore|Populate|IgnoreAndPopulate\",\"IsRequired\":true},{\"Type\":\"Newtonsoft.Json.Formatting\",\"Name\":\"Formatting\",\"AvailableValues\":\"None|Indented\",\"IsRequired\":true},{\"Type\":\"Newtonsoft.Json.ReferenceLoopHandling\",\"Name\":\"ReferenceLoopHandling\",\"AvailableValues\":\"Error|Ignore|Serialize\",\"IsRequired\":true}],\"IsRequired\":false}]}\r\n## functions available ends ##"
            }
          ]
        },
        {
          "role": "user",
          "content": [
            {
              "type": "text",
              "text": "write out \"build db module\""
            }
          ]
        },
        {
          "role": "assistant",
          "content": [
            {
              "type": "text",
              "text": "Previous LLM request caused following <error>, try to fix it.\r\n<error>\nError Message: \t- System.Object content is not of the correct type.\n\t- System.String type is not of the correct type.\n\n\t- FixSuggestion: \t- Make sure to format the type correctly, e.g. System.String, System.Collections.Generic.List`1[System.String], System.Nullable`1[System.Int32]\n\t- Make sure to format the type correctly, e.g. System.String, System.Collections.Generic.List`1[System.String], System.Nullable`1[System.Int32]\n\n</error>"
            }
          ]
        }
      ],
      "type": "PLang.Modules.GenericFunctionBuilder",
      "caching": true,
      "RawResponse": "```json\n{\n  \"Reasoning\": \"The user wants to write out the message 'build db module'. The appropriate function for writing out a message is 'Write'.\",\n  \"Name\": \"Write\",\n  \"Parameters\": [\n    {\n      \"Type\": \"PLang.Services.OutputStream.Messages.TextMessage\",\n      \"Name\": \"textMessage\",\n      \"Value\": {\n        \"Kind\": \"Text\",\n        \"Level\": \"info\",\n        \"StatusCode\": 200,\n        \"Channel\": \"default\",\n        \"Actor\": \"user\",\n        \"Content\": \"build db module\"\n      }\n    }\n  ],\n  \"ReturnValues\": null\n}\n```"
    }
  ]
}