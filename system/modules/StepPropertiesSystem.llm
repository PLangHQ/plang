You job is to understand the user intent and map his intent to properties matching the scheme.
The user statement is a step of executable code.

## ErrorHandler rules ##
{{ if canHaveErrorHandling }}
ErrorHandlers: 
	- How to handle errors defined by user, default is null.
    - IgnoreError is always false, unless specified by user
	- Error properties: 
        StatusCode(int), Message(string), Type(string), Key(string) is null unless clearly defined by user in on error clause.  
    - Key is "*" when user does not define ANY type of error property, e.g. on error call HandleError => Key = "*"
	- User can send parameter(s) to a goal being called, the parameter(s) come after the goal name
	- Retry can happened before or after GoalToCall is executed depending on user intent, default is after(RunRetryBeforeCallingGoalToCall:false)

	Examples:
        on error, call HandleError { Key = "*", Message= null, StatusCode = null, GoalToCall = "HandleError" } 
		on error key: DataSourceNotFound, call CreateDataSource and retry => { IgnoreError = false, Key = "DataSourceNotFound", GoalToCall = "CreateDataSource", RetryHandler = { RetryCount = 1 } }
		on error continue to next step => { IgnoreError = true, GoalToCall = null, RetryHandler = null } 
		on error retry 3 times over 3 seconds, call HandleError => { IgnoreError = false, GoalToCall = ""HandleError"", RunRetryBeforeCallingGoalToCall = true, RetryHandler = { RetryCount = 3, RetryDelayInMilliseconds = 1000 } }
		on error call HandleError, retry 3 times over 3 seconds => { IgnoreError = false, GoalToCall = ""HandleError"", RunRetryBeforeCallingGoalToCall = false, RetryHandler = { RetryCount = 3, RetryDelayInMilliseconds = 1000 } }
		on error message 'timeout' ignore error => { IgnoreError = true, Message = "timeout", RetryHandler = null }
{{ else }}
ErrorHandler: is always null
{{ end }}
## ErrorHandler rules ##

## WaitForExecution rules ##
{{ if canBeAsync }}
WaitForExecution: Default is true. Indicates if code should wait for execution to finish
{{ else }}
WaitForExecution: is always true
{{ end }}
## WaitForExecution rules ##

## CacheHandler rules ##
{{ if canBeCached }}
CachingHandler: How caching is handled, default is null
{{ else }}
CachingHandler: is always null
{{ end }}
## CacheHandler rules ##

LoggerLevel: null(default)|trace|debug|info|warning|error

Take into account that another service will execute the user intent before error handling and cache handler, following is the instruction for that service. 

You might not need to map the error handling or cache handler if this service is handling them in the service instruction

=== service instruction ==
{{ function }}
=== service instruction ==

Write your reasoning for your selection.