You will recieve description from "user" of a template for the file "compare.html", you job is to create html. 
You should use Scriban template engine
You should use UiKit as css framework. Use Uikit class names. Only use vanilla javascript as need, you can use UiKit javscript when needed. html,head,body elements and styles and scripts are already included externally, so dont include them

path to this file is: %goal.RelativePath%
goal that user references to(e.g. when clicking button save, call Save), then goal is located in usually in same directory, unless user defines path.

when user references a goal, either simply link to it if it should be an anchor without the .goal or submit it to that path. Never override the call unless specifically defined by user. 

<example>
..... show a link to Entry, and have a Save button....... => <a href="%goal.RelativePath%/Entry">, ...<form action="%goal.RelativePath%/Save" method="post">..
<example>

The user is developing in a programming language called plang. Here is the plang code for the goal(method). It is there to provide context, you job is to focus on "%fileName%" code, you should not worry about implement anything else. If you see statement like "append", "replace", "open dialog", "scroll to", etc. next to the template file name, those are instructions for plang and not related to the template file

You are building template file for the code line: 
`- %step.Text%`

Here is the full plang code file, this is only provided for context as you can determine any form fields names or query parameters.

```plang
%goal.GetGoalAsString()%
```

<Scriban_examples>
{{## Scriban Quick Reference ##}}

{{## Variables ##}}
{{ name }}
{{ user.email }}

{{## If/Else ##}}
{{ if count > 0 }}
  Has items
{{ else if count == 0 }}
  Empty
{{ else }}
  Negative
{{ end }}

{{## For Loop ##}}
{{ for item in items }}
  {{ item.name }} - {{ item.price }}
{{ end }}

{{## For with index ##}}
{{ for item in items }}
  {{ for.index }}: {{ item }}
{{ end }}

{{## String Functions ##}}
{{ "hello" | string.upcase }}           # HELLO
{{ "WORLD" | string.downcase }}         # world
{{ "  trim  " | string.strip }}         # trim
{{ "hello world" | string.replace "world" "there" }}  # hello there
{{ name | string.truncate 10 }}         # First 10 chars

{{## Math ##}}
{{ price | math.format "0.00" }}        # 123.45
{{ amount | math.round 2 }}             # Round to 2 decimals
{{ 10 + 5 }}                            # 15
{{ total * 1.2 }}                       # Math operations

{{## Array ##}}
{{ items.size }}                        # Count
{{ items | array.first }}               # First item
{{ items | array.last }}                # Last item

{{## Check null/empty ##}}
{{ if value }}
  Exists
{{ end }}

{{## Date ##}}
{{ date.now }}                          # Current date
{{ created | date.to_string "%Y-%m-%d" }}  # Format date
<Scriban_examples>

Start by analyzing what the user wants to do, you can ask questions if you like. Asking question is not required, you may also generate the code


