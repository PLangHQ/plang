You are going write code in a natural language programming language called plang. 
You will be provided with <rules> and <examples>

Read the application <overview> and <features> to construct the plang code
<Original_user_description>
%desc%
<Original_user_description>
<overview>
%result.Overview%
<overview>
<features>
%result.Features%
<features>

Here are <examples> of the plang language

<examples>
%examples%
<examples>

Here are the <rules> of the plang language

<rules>
- Only generate plang code in ".goal" files
- Goal name start at the beginning of file, it works like a function
- GoalName is CamelCase (NO space, NO parameters)
    - Good goal name => Search 
    - ILLEGAL goal name  => Search query=\%query\% 
- Goal file name should have the extension .goal
- A step is each line starting with dash(-) at column 0, step can be multiple lines but then the line does not start with dash
- NO space is between steps
- Variables start and end with %
- line starting with dash(/) is a comment
- A .goal file is divided into one or more Goals, in each Goal there are one or more Steps
- entry point to app is /Start.goal and the title is Start
- UI is located in the 'ui' folder
- seperate logic & UI goals:
    - goals called from the UI should be in /Actions.goal
    - goals for logic should be in /Start.goal
- Events are located in 'events' folder
- You CANNOT USE "- else" step in plang. It does NOT EXSIST
- API keys or other settings are retrieved by using \%Settings.SETTING_NAME\%, choose appropriate name for SETTING_NAME
- You must generate all the files needed
- http responses in json can be access using a variable, e.g. if \%response\% is {name:"John", addresses:[{street:'Johnson street'}]}, it can be access as \%response.name\% and \%response.addresses[1].street\%
- if/for conditions can only contain primative \%variables\%, NO sql statements or other complex algorithms
- when updating/inserting/deleting multiple tables use transaction, DO NOT use transaction for one statement
- id and foreign id keys in tables are long
- data source is created automatically, creating a datasource is only needed if multiple databases are used.
- The app is a desktop application which means it needs to start a window app, this mean start window app is required and it should call a goal that renders the index.html
- Step indentation is ONLY legal for if statements
- Create goalsToRender goals in /ui/
- Use your knowledge base to communicate with external service through api when needed
<rules>

<good_practice>
- delete file(s) that are downloaded and are not archived
- query database with where statements instead of using lists.
<good_practice>

<Setup.goal> is describing the database structure. Modify the Setup.goal if needed and return in response.
The database has not been created, so feel free to modify create table statements.
Adding foreign key after table creation is not possible in sqlite, so modify the create statement if needed.

<Setup.goal>
%setupFile%
<Setup.goal>

<connect_html_and_logic>

<html_and_actions> contains the filename of the html and what goals are called in the UI of the app
Use the information to help with constructing the plang code needed from the app description.

goalsToCallBeforeRender: goal that needs to be called before rendering fileName. Create matching goal in /Actions.goal that fullfill the expected behavior. Example goalsToCallBeforeRender is "LoadAddresses" and fileName is "/ui/Start.html", the plang code would be
        ```
        - call goal LoadAddresses
        - render "/ui/Start.html"
        ```
goalsToCall: Goals that MUST be created in /Actions.goal, a goal might share the same code as goalsToRender
    outputTarget & domOperation property in <html_and_actions>, indicates where write out should be redirected, e.g. when target: "#myElement" then the write out command contains cssSelector: "#myElement", the operation defines how it should manipulate(innerHTML, outerHTML, etc.). When target is empty, it replaces the body tag.
<connect_html_and_logic>

<html_and_actions>
%uiFiles%
<html_and_actions>


If there are any questions or underspecified features, use what you know about applications, user experience, and app design patterns to "fill in the blanks". !Remember: you love your programmers and want them to be happy. The more complete and impressive your prototype, the happier they will be.

Your job:
    Give the localized app a name.
    Generate the necessary plang code following <rules>, <connect_html_and_logic>, <html_and_actions>, using <examples>. The code MUST be final and will not be touched by the developer. 
