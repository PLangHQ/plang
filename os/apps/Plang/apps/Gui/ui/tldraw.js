"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack2) {
            {
              currentExtraStackFrame = stack2;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack2) {
              {
                currentExtraStackFrame = stack2;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack2 = "";
              if (currentExtraStackFrame) {
                stack2 += currentExtraStackFrame;
              }
              var impl2 = ReactDebugCurrentFrame.getCurrentStack;
              if (impl2) {
                stack2 += impl2() || "";
              }
              return stack2;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format2) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack2 !== "") {
                format2 += "%s";
                args = args.concat([stack2]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement6(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement4(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement2(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index2) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children, array2, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement2(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array2.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count3 = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count3++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement2(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext20(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef25(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo32(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext19(Context2) {
            var dispatcher = resolveDispatcher();
            {
              if (Context2._context !== void 0) {
                var realContext = Context2._context;
                if (realContext.Consumer === Context2) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context2) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context2);
          }
          function useState53(initialState2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState2);
          }
          function useReducer2(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef70(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect62(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect18(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback54(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo34(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle2(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId3() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore3(subscribe, getSnapshot2, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot2, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack2);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement2(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement2(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement2(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement6.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement4.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel2 = new MessageChannel();
                  channel2.port1.onmessage = callback;
                  channel2.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children5 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children5;
          exports.Component = Component2;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.act = act;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext20;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef25;
          exports.isValidElement = isValidElement2;
          exports.lazy = lazy;
          exports.memo = memo32;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback54;
          exports.useContext = useContext19;
          exports.useDebugValue = useDebugValue2;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect62;
          exports.useId = useId3;
          exports.useImperativeHandle = useImperativeHandle2;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect18;
          exports.useMemo = useMemo34;
          exports.useReducer = useReducer2;
          exports.useRef = useRef70;
          exports.useState = useState53;
          exports.useSyncExternalStore = useSyncExternalStore3;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index2 = heap.length;
            heap.push(node);
            siftUp(heap, node, index2);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last3 = heap.pop();
            if (last3 !== first) {
              heap[0] = last3;
              siftDown(heap, last3, 0);
            }
            return first;
          }
          function siftUp(heap, node, i) {
            var index2 = i;
            while (index2 > 0) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index2 = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index2 < halfLength) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node;
                  index2 = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler2) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler2();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler2) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler2();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel2 = new MessageChannel();
            var port = channel2.port2;
            channel2.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React68 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React68.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format2) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack2 !== "") {
                format2 += "%s";
                args = args.concat([stack2]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment52 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize2 = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment52:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              // The display name for this tags come from the user-provided type:
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track2(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React68.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string2) {
              return string2.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this list too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl2) {
            restoreImpl = impl2;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst3, registrationName) {
            var stateNode = inst3.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst3.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index3 = 0; index3 < TotalLanes; index3++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index3] & entangledLanes
              ) {
                entanglements[index3] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              // Used by SimpleEventPlugin:
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              // Used by polyfills:
              // eslint-disable-next-line no-fallthrough
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              // Only enableCreateEventHandleAPI:
              // eslint-disable-next-line no-fallthrough
              case "beforeblur":
              case "afterblur":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst3, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst3, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst3 = getTargetInstFunc(domEventName, targetInst);
              if (inst3) {
                createAndAccumulateChangeEvent(dispatchQueue, inst3, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset4) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset4 && nodeEnd >= offset4) {
                  return {
                    node,
                    offset: offset4 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              // Track the input node that has focus.
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              // falls through
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              /* falls through */
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              /* falls through */
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              // TODO: Disabled elements should not respond to mouse events
              /* falls through */
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop: while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst3) {
            if (inst3 === null) {
              return null;
            }
            do {
              inst3 = inst3.return;
            } while (inst3 && inst3.tag !== HostComponent);
            if (inst3) {
              return inst3;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop3() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop3;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement6(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case "option":
                  return tag === "#text";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case "colgroup":
                  return tag === "col" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string2 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement6(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string2 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack2;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack2 = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack: stack2
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst3 = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst3) {
              if (inst3.tag === HostComponent || inst3.tag === HostText || inst3.tag === SuspenseComponent || inst3.tag === HostRoot) {
                return inst3;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst3) {
            if (inst3.tag === HostComponent || inst3.tag === HostText) {
              return inst3.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index2 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push(cursor, value, fiber) {
            index2++;
            valueStack[index2] = cursor.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component2 = node.type;
                    if (isContextProvider(Component2)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index3) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index3 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number2) {
            return 32 - clz32(number2);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null) switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array2 = [];
              set2.forEach(function(value) {
                array2.push(value);
              });
              return array2.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst3;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst3 = ownerFiber.stateNode;
                }
                if (!inst3) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst3;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment52) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment52) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null) ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context) ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              // Intentional fallthrough
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout2 = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component2(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component2(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState2;
            if (init !== void 0) {
              initialState2 = init(initialArg);
            } else {
              initialState2 = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch2 = queue.dispatch;
            return [hook.memoizedState, dispatch2];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch2 = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch2];
          }
          function mountMutableSource(source, getSnapshot2, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot2, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot2, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot2();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot2();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot2, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst3 = {
              value: nextSnapshot,
              getSnapshot: getSnapshot2
            };
            hook.queue = inst3;
            mountEffect(subscribeToStore.bind(null, fiber, inst3, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst3, nextSnapshot, getSnapshot2), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot2, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot2();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot2();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst3 = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst3, subscribe), [subscribe]);
            if (inst3.getSnapshot !== getSnapshot2 || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst3, nextSnapshot, getSnapshot2), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot2, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot2, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot: getSnapshot2,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst3, nextSnapshot, getSnapshot2) {
            inst3.value = nextSnapshot;
            inst3.getSnapshot = getSnapshot2;
            if (checkIfSnapshotChanged(inst3)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst3, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst3)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst3) {
            var latestGetSnapshot = inst3.getSnapshot;
            var prevValue = inst3.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState2) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState2 === "function") {
              initialState2 = initialState2();
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateState(initialState2) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState2) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout2, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout2, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout2, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout2, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot2, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot2, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot2, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot2, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot2, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot2, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot2, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot2, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot2);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot2, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot2, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot2);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot2, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot2, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot2, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot2, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot2, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot2);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot2, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot2, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot2);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component2.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst3, payload, callback) {
              var fiber = get(inst3);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst3, payload, callback) {
              var fiber = get(inst3);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst3, callback) {
              var fiber = get(inst3);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack2) {
            return {
              value,
              source: null,
              stack: stack2 != null ? stack2 : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack2 = errorInfo.stack;
                var componentStack = stack2 !== null ? stack2 : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst3 = fiber.stateNode;
            if (inst3 !== null && typeof inst3.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack2 = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack2 !== null ? stack2 : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var render2 = Component2.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type;
              if (isSimpleFunctionComponent(type) && Component2.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component2.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component2.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component2.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component2.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component2, nextProps);
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
            {
              var inst3 = workInProgress2.stateNode;
              if (shouldUpdate && inst3.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component2 = init(payload);
            workInProgress2.type = Component2;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
            var resolvedProps = resolveDefaultProps(Component2, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2);
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component2)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component2,
                  resolveDefaultProps(Component2.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component2)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component2, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component2.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component2.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack2;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack2 = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack2);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry2 = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry2);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component2 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment52:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden2) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment52:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout2, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout2) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout2) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout2) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout2) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout2) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout2 | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout2 | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer: while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden2) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden2) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden2) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings: while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              // eslint-disable-next-line-no-fallthrough
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent: while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              // eslint-disable-next-line-no-fallthrough
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout2) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry2 = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry2, retry2);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout2 | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout2 | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden2 = newState !== null;
                  offscreenInstance.isHidden = isHidden2;
                  if (isHidden2) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden2 = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden2 || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout2, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout2, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden2 = fiber.memoizedState !== null;
                  if (isHidden2) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden2 = fiber.memoizedState !== null;
                if (isHidden2) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout2 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout2 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              // Flow knows about invariant, so it complains if I add a break
              // statement, but eslint doesn't know about invariant, so it complains
              // if I do. eslint-disable-next-line no-fallthrough
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot2 = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot2(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync5(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync5(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync5(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === "function") {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_SCOPE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_CACHE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_TRACING_MARKER_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_DEBUG_TRACING_MODE_TYPE:
                // eslint-disable-next-line no-fallthrough
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment52, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.3.1";
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type;
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync5(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index3) {
              var key = path[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index3 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index3, value) {
              if (index3 >= path.length) {
                return value;
              }
              var key = path[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync5(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync5();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync5(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync5(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync5);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync5(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/lodash.throttle/index.js
  var require_lodash = __commonJS({
    "node_modules/lodash.throttle/index.js"(exports, module) {
      var FUNC_ERROR_TEXT = "Expected a function";
      var NAN = 0 / 0;
      var symbolTag = "[object Symbol]";
      var reTrim = /^\s+|\s+$/g;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var objectProto = Object.prototype;
      var objectToString = objectProto.toString;
      var nativeMax = Math.max;
      var nativeMin = Math.min;
      var now = function() {
        return root.Date.now();
      };
      function debounce2(func, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time2) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time2;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time2) {
          lastInvokeTime = time2;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time2) : result;
        }
        function remainingWait(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, result2 = wait - timeSinceLastCall;
          return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
        }
        function shouldInvoke(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time2 = now();
          if (shouldInvoke(time2)) {
            return trailingEdge(time2);
          }
          timerId = setTimeout(timerExpired, remainingWait(time2));
        }
        function trailingEdge(time2) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time2);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush2() {
          return timerId === void 0 ? result : trailingEdge(now());
        }
        function debounced() {
          var time2 = now(), isInvoking = shouldInvoke(time2);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time2;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush2;
        return debounced;
      }
      function throttle(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce2(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, "");
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      module.exports = throttle;
    }
  });

  // node_modules/lodash.uniq/index.js
  var require_lodash2 = __commonJS({
    "node_modules/lodash.uniq/index.js"(exports, module) {
      var LARGE_ARRAY_SIZE = 200;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var INFINITY = 1 / 0;
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      function arrayIncludes(array2, value) {
        var length = array2 ? array2.length : 0;
        return !!length && baseIndexOf(array2, value, 0) > -1;
      }
      function arrayIncludesWith(array2, value, comparator) {
        var index2 = -1, length = array2 ? array2.length : 0;
        while (++index2 < length) {
          if (comparator(value, array2[index2])) {
            return true;
          }
        }
        return false;
      }
      function baseFindIndex(array2, predicate, fromIndex, fromRight) {
        var length = array2.length, index2 = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index2-- : ++index2 < length) {
          if (predicate(array2[index2], index2, array2)) {
            return index2;
          }
        }
        return -1;
      }
      function baseIndexOf(array2, value, fromIndex) {
        if (value !== value) {
          return baseFindIndex(array2, baseIsNaN, fromIndex);
        }
        var index2 = fromIndex - 1, length = array2.length;
        while (++index2 < length) {
          if (array2[index2] === value) {
            return index2;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function getValue(object2, key) {
        return object2 == null ? void 0 : object2[key];
      }
      function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "");
          } catch (e) {
          }
        }
        return result;
      }
      function setToArray(set) {
        var index2 = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index2] = value;
        });
        return result;
      }
      var arrayProto = Array.prototype;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var coreJsData = root["__core-js_shared__"];
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var splice = arrayProto.splice;
      var Map2 = getNative(root, "Map");
      var Set2 = getNative(root, "Set");
      var nativeCreate = getNative(Object, "create");
      function Hash(entries) {
        var index2 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index2 < length) {
          var entry2 = entries[index2];
          this.set(entry2[0], entry2[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
      }
      function hashDelete(key) {
        return this.has(key) && delete this.__data__[key];
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : void 0;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index2 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index2 < length) {
          var entry2 = entries[index2];
          this.set(entry2[0], entry2[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
      }
      function listCacheDelete(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index2, 1);
        }
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index2 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index2 < length) {
          var entry2 = entries[index2];
          this.set(entry2[0], entry2[1]);
        }
      }
      function mapCacheClear() {
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        return getMapData(this, key)["delete"](key);
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        getMapData(this, key).set(key, value);
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values) {
        var index2 = -1, length = values ? values.length : 0;
        this.__data__ = new MapCache();
        while (++index2 < length) {
          this.add(values[index2]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function assocIndexOf(array2, key) {
        var length = array2.length;
        while (length--) {
          if (eq(array2[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseUniq(array2, iteratee, comparator) {
        var index2 = -1, includes = arrayIncludes, length = array2.length, isCommon = true, result = [], seen = result;
        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array2);
          if (set) {
            return setToArray(set);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }
        outer:
          while (++index2 < length) {
            var value = array2[index2], computed2 = iteratee ? iteratee(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed2 === computed2) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed2) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed2);
              }
              result.push(value);
            } else if (!includes(seen, computed2, comparator)) {
              if (seen !== result) {
                seen.push(computed2);
              }
              result.push(value);
            }
          }
        return result;
      }
      var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop3 : function(values) {
        return new Set2(values);
      };
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getNative(object2, key) {
        var value = getValue(object2, key);
        return baseIsNative(value) ? value : void 0;
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function uniq2(array2) {
        return array2 && array2.length ? baseUniq(array2) : [];
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function noop3() {
      }
      module.exports = uniq2;
    }
  });

  // node_modules/core-js/internals/global-this.js
  var require_global_this = __commonJS({
    "node_modules/core-js/internals/global-this.js"(exports, module) {
      "use strict";
      var check = function(it) {
        return it && it.Math === Math && it;
      };
      module.exports = // eslint-disable-next-line es/no-global-this -- safe
      check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
      check(typeof self == "object" && self) || check(typeof global == "object" && global) || check(typeof exports == "object" && exports) || // eslint-disable-next-line no-new-func -- fallback
      /* @__PURE__ */ function() {
        return this;
      }() || Function("return this")();
    }
  });

  // node_modules/core-js/internals/fails.js
  var require_fails = __commonJS({
    "node_modules/core-js/internals/fails.js"(exports, module) {
      "use strict";
      module.exports = function(exec) {
        try {
          return !!exec();
        } catch (error) {
          return true;
        }
      };
    }
  });

  // node_modules/core-js/internals/descriptors.js
  var require_descriptors = __commonJS({
    "node_modules/core-js/internals/descriptors.js"(exports, module) {
      "use strict";
      var fails = require_fails();
      module.exports = !fails(function() {
        return Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1] !== 7;
      });
    }
  });

  // node_modules/core-js/internals/function-bind-native.js
  var require_function_bind_native = __commonJS({
    "node_modules/core-js/internals/function-bind-native.js"(exports, module) {
      "use strict";
      var fails = require_fails();
      module.exports = !fails(function() {
        var test2 = function() {
        }.bind();
        return typeof test2 != "function" || test2.hasOwnProperty("prototype");
      });
    }
  });

  // node_modules/core-js/internals/function-call.js
  var require_function_call = __commonJS({
    "node_modules/core-js/internals/function-call.js"(exports, module) {
      "use strict";
      var NATIVE_BIND = require_function_bind_native();
      var call2 = Function.prototype.call;
      module.exports = NATIVE_BIND ? call2.bind(call2) : function() {
        return call2.apply(call2, arguments);
      };
    }
  });

  // node_modules/core-js/internals/object-property-is-enumerable.js
  var require_object_property_is_enumerable = __commonJS({
    "node_modules/core-js/internals/object-property-is-enumerable.js"(exports) {
      "use strict";
      var $propertyIsEnumerable = {}.propertyIsEnumerable;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V2) {
        var descriptor = getOwnPropertyDescriptor(this, V2);
        return !!descriptor && descriptor.enumerable;
      } : $propertyIsEnumerable;
    }
  });

  // node_modules/core-js/internals/create-property-descriptor.js
  var require_create_property_descriptor = __commonJS({
    "node_modules/core-js/internals/create-property-descriptor.js"(exports, module) {
      "use strict";
      module.exports = function(bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value
        };
      };
    }
  });

  // node_modules/core-js/internals/function-uncurry-this.js
  var require_function_uncurry_this = __commonJS({
    "node_modules/core-js/internals/function-uncurry-this.js"(exports, module) {
      "use strict";
      var NATIVE_BIND = require_function_bind_native();
      var FunctionPrototype = Function.prototype;
      var call2 = FunctionPrototype.call;
      var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call2, call2);
      module.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
        return function() {
          return call2.apply(fn, arguments);
        };
      };
    }
  });

  // node_modules/core-js/internals/classof-raw.js
  var require_classof_raw = __commonJS({
    "node_modules/core-js/internals/classof-raw.js"(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this();
      var toString = uncurryThis({}.toString);
      var stringSlice = uncurryThis("".slice);
      module.exports = function(it) {
        return stringSlice(toString(it), 8, -1);
      };
    }
  });

  // node_modules/core-js/internals/indexed-object.js
  var require_indexed_object = __commonJS({
    "node_modules/core-js/internals/indexed-object.js"(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var classof = require_classof_raw();
      var $Object = Object;
      var split = uncurryThis("".split);
      module.exports = fails(function() {
        return !$Object("z").propertyIsEnumerable(0);
      }) ? function(it) {
        return classof(it) === "String" ? split(it, "") : $Object(it);
      } : $Object;
    }
  });

  // node_modules/core-js/internals/is-null-or-undefined.js
  var require_is_null_or_undefined = __commonJS({
    "node_modules/core-js/internals/is-null-or-undefined.js"(exports, module) {
      "use strict";
      module.exports = function(it) {
        return it === null || it === void 0;
      };
    }
  });

  // node_modules/core-js/internals/require-object-coercible.js
  var require_require_object_coercible = __commonJS({
    "node_modules/core-js/internals/require-object-coercible.js"(exports, module) {
      "use strict";
      var isNullOrUndefined = require_is_null_or_undefined();
      var $TypeError = TypeError;
      module.exports = function(it) {
        if (isNullOrUndefined(it)) throw new $TypeError("Can't call method on " + it);
        return it;
      };
    }
  });

  // node_modules/core-js/internals/to-indexed-object.js
  var require_to_indexed_object = __commonJS({
    "node_modules/core-js/internals/to-indexed-object.js"(exports, module) {
      "use strict";
      var IndexedObject = require_indexed_object();
      var requireObjectCoercible = require_require_object_coercible();
      module.exports = function(it) {
        return IndexedObject(requireObjectCoercible(it));
      };
    }
  });

  // node_modules/core-js/internals/is-callable.js
  var require_is_callable = __commonJS({
    "node_modules/core-js/internals/is-callable.js"(exports, module) {
      "use strict";
      var documentAll = typeof document == "object" && document.all;
      module.exports = typeof documentAll == "undefined" && documentAll !== void 0 ? function(argument) {
        return typeof argument == "function" || argument === documentAll;
      } : function(argument) {
        return typeof argument == "function";
      };
    }
  });

  // node_modules/core-js/internals/is-object.js
  var require_is_object = __commonJS({
    "node_modules/core-js/internals/is-object.js"(exports, module) {
      "use strict";
      var isCallable = require_is_callable();
      module.exports = function(it) {
        return typeof it == "object" ? it !== null : isCallable(it);
      };
    }
  });

  // node_modules/core-js/internals/get-built-in.js
  var require_get_built_in = __commonJS({
    "node_modules/core-js/internals/get-built-in.js"(exports, module) {
      "use strict";
      var globalThis2 = require_global_this();
      var isCallable = require_is_callable();
      var aFunction = function(argument) {
        return isCallable(argument) ? argument : void 0;
      };
      module.exports = function(namespace, method) {
        return arguments.length < 2 ? aFunction(globalThis2[namespace]) : globalThis2[namespace] && globalThis2[namespace][method];
      };
    }
  });

  // node_modules/core-js/internals/object-is-prototype-of.js
  var require_object_is_prototype_of = __commonJS({
    "node_modules/core-js/internals/object-is-prototype-of.js"(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this();
      module.exports = uncurryThis({}.isPrototypeOf);
    }
  });

  // node_modules/core-js/internals/environment-user-agent.js
  var require_environment_user_agent = __commonJS({
    "node_modules/core-js/internals/environment-user-agent.js"(exports, module) {
      "use strict";
      var globalThis2 = require_global_this();
      var navigator2 = globalThis2.navigator;
      var userAgent = navigator2 && navigator2.userAgent;
      module.exports = userAgent ? String(userAgent) : "";
    }
  });

  // node_modules/core-js/internals/environment-v8-version.js
  var require_environment_v8_version = __commonJS({
    "node_modules/core-js/internals/environment-v8-version.js"(exports, module) {
      "use strict";
      var globalThis2 = require_global_this();
      var userAgent = require_environment_user_agent();
      var process2 = globalThis2.process;
      var Deno = globalThis2.Deno;
      var versions = process2 && process2.versions || Deno && Deno.version;
      var v8 = versions && versions.v8;
      var match;
      var version2;
      if (v8) {
        match = v8.split(".");
        version2 = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
      }
      if (!version2 && userAgent) {
        match = userAgent.match(/Edge\/(\d+)/);
        if (!match || match[1] >= 74) {
          match = userAgent.match(/Chrome\/(\d+)/);
          if (match) version2 = +match[1];
        }
      }
      module.exports = version2;
    }
  });

  // node_modules/core-js/internals/symbol-constructor-detection.js
  var require_symbol_constructor_detection = __commonJS({
    "node_modules/core-js/internals/symbol-constructor-detection.js"(exports, module) {
      "use strict";
      var V8_VERSION = require_environment_v8_version();
      var fails = require_fails();
      var globalThis2 = require_global_this();
      var $String = globalThis2.String;
      module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
        var symbol = Symbol("symbol detection");
        return !$String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
        !Symbol.sham && V8_VERSION && V8_VERSION < 41;
      });
    }
  });

  // node_modules/core-js/internals/use-symbol-as-uid.js
  var require_use_symbol_as_uid = __commonJS({
    "node_modules/core-js/internals/use-symbol-as-uid.js"(exports, module) {
      "use strict";
      var NATIVE_SYMBOL = require_symbol_constructor_detection();
      module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
    }
  });

  // node_modules/core-js/internals/is-symbol.js
  var require_is_symbol = __commonJS({
    "node_modules/core-js/internals/is-symbol.js"(exports, module) {
      "use strict";
      var getBuiltIn = require_get_built_in();
      var isCallable = require_is_callable();
      var isPrototypeOf = require_object_is_prototype_of();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
      var $Object = Object;
      module.exports = USE_SYMBOL_AS_UID ? function(it) {
        return typeof it == "symbol";
      } : function(it) {
        var $Symbol = getBuiltIn("Symbol");
        return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
      };
    }
  });

  // node_modules/core-js/internals/try-to-string.js
  var require_try_to_string = __commonJS({
    "node_modules/core-js/internals/try-to-string.js"(exports, module) {
      "use strict";
      var $String = String;
      module.exports = function(argument) {
        try {
          return $String(argument);
        } catch (error) {
          return "Object";
        }
      };
    }
  });

  // node_modules/core-js/internals/a-callable.js
  var require_a_callable = __commonJS({
    "node_modules/core-js/internals/a-callable.js"(exports, module) {
      "use strict";
      var isCallable = require_is_callable();
      var tryToString = require_try_to_string();
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (isCallable(argument)) return argument;
        throw new $TypeError(tryToString(argument) + " is not a function");
      };
    }
  });

  // node_modules/core-js/internals/get-method.js
  var require_get_method = __commonJS({
    "node_modules/core-js/internals/get-method.js"(exports, module) {
      "use strict";
      var aCallable = require_a_callable();
      var isNullOrUndefined = require_is_null_or_undefined();
      module.exports = function(V2, P) {
        var func = V2[P];
        return isNullOrUndefined(func) ? void 0 : aCallable(func);
      };
    }
  });

  // node_modules/core-js/internals/ordinary-to-primitive.js
  var require_ordinary_to_primitive = __commonJS({
    "node_modules/core-js/internals/ordinary-to-primitive.js"(exports, module) {
      "use strict";
      var call2 = require_function_call();
      var isCallable = require_is_callable();
      var isObject = require_is_object();
      var $TypeError = TypeError;
      module.exports = function(input, pref) {
        var fn, val;
        if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = call2(fn, input))) return val;
        if (isCallable(fn = input.valueOf) && !isObject(val = call2(fn, input))) return val;
        if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = call2(fn, input))) return val;
        throw new $TypeError("Can't convert object to primitive value");
      };
    }
  });

  // node_modules/core-js/internals/is-pure.js
  var require_is_pure = __commonJS({
    "node_modules/core-js/internals/is-pure.js"(exports, module) {
      "use strict";
      module.exports = false;
    }
  });

  // node_modules/core-js/internals/define-global-property.js
  var require_define_global_property = __commonJS({
    "node_modules/core-js/internals/define-global-property.js"(exports, module) {
      "use strict";
      var globalThis2 = require_global_this();
      var defineProperty = Object.defineProperty;
      module.exports = function(key, value) {
        try {
          defineProperty(globalThis2, key, { value, configurable: true, writable: true });
        } catch (error) {
          globalThis2[key] = value;
        }
        return value;
      };
    }
  });

  // node_modules/core-js/internals/shared-store.js
  var require_shared_store = __commonJS({
    "node_modules/core-js/internals/shared-store.js"(exports, module) {
      "use strict";
      var IS_PURE = require_is_pure();
      var globalThis2 = require_global_this();
      var defineGlobalProperty = require_define_global_property();
      var SHARED = "__core-js_shared__";
      var store = module.exports = globalThis2[SHARED] || defineGlobalProperty(SHARED, {});
      (store.versions || (store.versions = [])).push({
        version: "3.40.0",
        mode: IS_PURE ? "pure" : "global",
        copyright: "\xA9 2014-2025 Denis Pushkarev (zloirock.ru)",
        license: "https://github.com/zloirock/core-js/blob/v3.40.0/LICENSE",
        source: "https://github.com/zloirock/core-js"
      });
    }
  });

  // node_modules/core-js/internals/shared.js
  var require_shared = __commonJS({
    "node_modules/core-js/internals/shared.js"(exports, module) {
      "use strict";
      var store = require_shared_store();
      module.exports = function(key, value) {
        return store[key] || (store[key] = value || {});
      };
    }
  });

  // node_modules/core-js/internals/to-object.js
  var require_to_object = __commonJS({
    "node_modules/core-js/internals/to-object.js"(exports, module) {
      "use strict";
      var requireObjectCoercible = require_require_object_coercible();
      var $Object = Object;
      module.exports = function(argument) {
        return $Object(requireObjectCoercible(argument));
      };
    }
  });

  // node_modules/core-js/internals/has-own-property.js
  var require_has_own_property = __commonJS({
    "node_modules/core-js/internals/has-own-property.js"(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this();
      var toObject = require_to_object();
      var hasOwnProperty2 = uncurryThis({}.hasOwnProperty);
      module.exports = Object.hasOwn || function hasOwn(it, key) {
        return hasOwnProperty2(toObject(it), key);
      };
    }
  });

  // node_modules/core-js/internals/uid.js
  var require_uid = __commonJS({
    "node_modules/core-js/internals/uid.js"(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this();
      var id = 0;
      var postfix = Math.random();
      var toString = uncurryThis(1 .toString);
      module.exports = function(key) {
        return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix, 36);
      };
    }
  });

  // node_modules/core-js/internals/well-known-symbol.js
  var require_well_known_symbol = __commonJS({
    "node_modules/core-js/internals/well-known-symbol.js"(exports, module) {
      "use strict";
      var globalThis2 = require_global_this();
      var shared = require_shared();
      var hasOwn = require_has_own_property();
      var uid = require_uid();
      var NATIVE_SYMBOL = require_symbol_constructor_detection();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
      var Symbol2 = globalThis2.Symbol;
      var WellKnownSymbolsStore = shared("wks");
      var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2["for"] || Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
      module.exports = function(name) {
        if (!hasOwn(WellKnownSymbolsStore, name)) {
          WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol2, name) ? Symbol2[name] : createWellKnownSymbol("Symbol." + name);
        }
        return WellKnownSymbolsStore[name];
      };
    }
  });

  // node_modules/core-js/internals/to-primitive.js
  var require_to_primitive = __commonJS({
    "node_modules/core-js/internals/to-primitive.js"(exports, module) {
      "use strict";
      var call2 = require_function_call();
      var isObject = require_is_object();
      var isSymbol = require_is_symbol();
      var getMethod2 = require_get_method();
      var ordinaryToPrimitive = require_ordinary_to_primitive();
      var wellKnownSymbol = require_well_known_symbol();
      var $TypeError = TypeError;
      var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
      module.exports = function(input, pref) {
        if (!isObject(input) || isSymbol(input)) return input;
        var exoticToPrim = getMethod2(input, TO_PRIMITIVE);
        var result;
        if (exoticToPrim) {
          if (pref === void 0) pref = "default";
          result = call2(exoticToPrim, input, pref);
          if (!isObject(result) || isSymbol(result)) return result;
          throw new $TypeError("Can't convert object to primitive value");
        }
        if (pref === void 0) pref = "number";
        return ordinaryToPrimitive(input, pref);
      };
    }
  });

  // node_modules/core-js/internals/to-property-key.js
  var require_to_property_key = __commonJS({
    "node_modules/core-js/internals/to-property-key.js"(exports, module) {
      "use strict";
      var toPrimitive = require_to_primitive();
      var isSymbol = require_is_symbol();
      module.exports = function(argument) {
        var key = toPrimitive(argument, "string");
        return isSymbol(key) ? key : key + "";
      };
    }
  });

  // node_modules/core-js/internals/document-create-element.js
  var require_document_create_element = __commonJS({
    "node_modules/core-js/internals/document-create-element.js"(exports, module) {
      "use strict";
      var globalThis2 = require_global_this();
      var isObject = require_is_object();
      var document2 = globalThis2.document;
      var EXISTS = isObject(document2) && isObject(document2.createElement);
      module.exports = function(it) {
        return EXISTS ? document2.createElement(it) : {};
      };
    }
  });

  // node_modules/core-js/internals/ie8-dom-define.js
  var require_ie8_dom_define = __commonJS({
    "node_modules/core-js/internals/ie8-dom-define.js"(exports, module) {
      "use strict";
      var DESCRIPTORS = require_descriptors();
      var fails = require_fails();
      var createElement6 = require_document_create_element();
      module.exports = !DESCRIPTORS && !fails(function() {
        return Object.defineProperty(createElement6("div"), "a", {
          get: function() {
            return 7;
          }
        }).a !== 7;
      });
    }
  });

  // node_modules/core-js/internals/object-get-own-property-descriptor.js
  var require_object_get_own_property_descriptor = __commonJS({
    "node_modules/core-js/internals/object-get-own-property-descriptor.js"(exports) {
      "use strict";
      var DESCRIPTORS = require_descriptors();
      var call2 = require_function_call();
      var propertyIsEnumerableModule = require_object_property_is_enumerable();
      var createPropertyDescriptor = require_create_property_descriptor();
      var toIndexedObject = require_to_indexed_object();
      var toPropertyKey = require_to_property_key();
      var hasOwn = require_has_own_property();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject(O);
        P = toPropertyKey(P);
        if (IE8_DOM_DEFINE) try {
          return $getOwnPropertyDescriptor(O, P);
        } catch (error) {
        }
        if (hasOwn(O, P)) return createPropertyDescriptor(!call2(propertyIsEnumerableModule.f, O, P), O[P]);
      };
    }
  });

  // node_modules/core-js/internals/v8-prototype-define-bug.js
  var require_v8_prototype_define_bug = __commonJS({
    "node_modules/core-js/internals/v8-prototype-define-bug.js"(exports, module) {
      "use strict";
      var DESCRIPTORS = require_descriptors();
      var fails = require_fails();
      module.exports = DESCRIPTORS && fails(function() {
        return Object.defineProperty(function() {
        }, "prototype", {
          value: 42,
          writable: false
        }).prototype !== 42;
      });
    }
  });

  // node_modules/core-js/internals/an-object.js
  var require_an_object = __commonJS({
    "node_modules/core-js/internals/an-object.js"(exports, module) {
      "use strict";
      var isObject = require_is_object();
      var $String = String;
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (isObject(argument)) return argument;
        throw new $TypeError($String(argument) + " is not an object");
      };
    }
  });

  // node_modules/core-js/internals/object-define-property.js
  var require_object_define_property = __commonJS({
    "node_modules/core-js/internals/object-define-property.js"(exports) {
      "use strict";
      var DESCRIPTORS = require_descriptors();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
      var anObject = require_an_object();
      var toPropertyKey = require_to_property_key();
      var $TypeError = TypeError;
      var $defineProperty = Object.defineProperty;
      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var ENUMERABLE = "enumerable";
      var CONFIGURABLE = "configurable";
      var WRITABLE = "writable";
      exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
          var current = $getOwnPropertyDescriptor(O, P);
          if (current && current[WRITABLE]) {
            O[P] = Attributes.value;
            Attributes = {
              configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
              enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
              writable: false
            };
          }
        }
        return $defineProperty(O, P, Attributes);
      } : $defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (IE8_DOM_DEFINE) try {
          return $defineProperty(O, P, Attributes);
        } catch (error) {
        }
        if ("get" in Attributes || "set" in Attributes) throw new $TypeError("Accessors not supported");
        if ("value" in Attributes) O[P] = Attributes.value;
        return O;
      };
    }
  });

  // node_modules/core-js/internals/create-non-enumerable-property.js
  var require_create_non_enumerable_property = __commonJS({
    "node_modules/core-js/internals/create-non-enumerable-property.js"(exports, module) {
      "use strict";
      var DESCRIPTORS = require_descriptors();
      var definePropertyModule = require_object_define_property();
      var createPropertyDescriptor = require_create_property_descriptor();
      module.exports = DESCRIPTORS ? function(object2, key, value) {
        return definePropertyModule.f(object2, key, createPropertyDescriptor(1, value));
      } : function(object2, key, value) {
        object2[key] = value;
        return object2;
      };
    }
  });

  // node_modules/core-js/internals/function-name.js
  var require_function_name = __commonJS({
    "node_modules/core-js/internals/function-name.js"(exports, module) {
      "use strict";
      var DESCRIPTORS = require_descriptors();
      var hasOwn = require_has_own_property();
      var FunctionPrototype = Function.prototype;
      var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
      var EXISTS = hasOwn(FunctionPrototype, "name");
      var PROPER = EXISTS && function something() {
      }.name === "something";
      var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
      module.exports = {
        EXISTS,
        PROPER,
        CONFIGURABLE
      };
    }
  });

  // node_modules/core-js/internals/inspect-source.js
  var require_inspect_source = __commonJS({
    "node_modules/core-js/internals/inspect-source.js"(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this();
      var isCallable = require_is_callable();
      var store = require_shared_store();
      var functionToString = uncurryThis(Function.toString);
      if (!isCallable(store.inspectSource)) {
        store.inspectSource = function(it) {
          return functionToString(it);
        };
      }
      module.exports = store.inspectSource;
    }
  });

  // node_modules/core-js/internals/weak-map-basic-detection.js
  var require_weak_map_basic_detection = __commonJS({
    "node_modules/core-js/internals/weak-map-basic-detection.js"(exports, module) {
      "use strict";
      var globalThis2 = require_global_this();
      var isCallable = require_is_callable();
      var WeakMap2 = globalThis2.WeakMap;
      module.exports = isCallable(WeakMap2) && /native code/.test(String(WeakMap2));
    }
  });

  // node_modules/core-js/internals/shared-key.js
  var require_shared_key = __commonJS({
    "node_modules/core-js/internals/shared-key.js"(exports, module) {
      "use strict";
      var shared = require_shared();
      var uid = require_uid();
      var keys = shared("keys");
      module.exports = function(key) {
        return keys[key] || (keys[key] = uid(key));
      };
    }
  });

  // node_modules/core-js/internals/hidden-keys.js
  var require_hidden_keys = __commonJS({
    "node_modules/core-js/internals/hidden-keys.js"(exports, module) {
      "use strict";
      module.exports = {};
    }
  });

  // node_modules/core-js/internals/internal-state.js
  var require_internal_state = __commonJS({
    "node_modules/core-js/internals/internal-state.js"(exports, module) {
      "use strict";
      var NATIVE_WEAK_MAP = require_weak_map_basic_detection();
      var globalThis2 = require_global_this();
      var isObject = require_is_object();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var hasOwn = require_has_own_property();
      var shared = require_shared_store();
      var sharedKey = require_shared_key();
      var hiddenKeys = require_hidden_keys();
      var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
      var TypeError2 = globalThis2.TypeError;
      var WeakMap2 = globalThis2.WeakMap;
      var set;
      var get;
      var has;
      var enforce = function(it) {
        return has(it) ? get(it) : set(it, {});
      };
      var getterFor = function(TYPE) {
        return function(it) {
          var state;
          if (!isObject(it) || (state = get(it)).type !== TYPE) {
            throw new TypeError2("Incompatible receiver, " + TYPE + " required");
          }
          return state;
        };
      };
      if (NATIVE_WEAK_MAP || shared.state) {
        store = shared.state || (shared.state = new WeakMap2());
        store.get = store.get;
        store.has = store.has;
        store.set = store.set;
        set = function(it, metadata) {
          if (store.has(it)) throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          store.set(it, metadata);
          return metadata;
        };
        get = function(it) {
          return store.get(it) || {};
        };
        has = function(it) {
          return store.has(it);
        };
      } else {
        STATE = sharedKey("state");
        hiddenKeys[STATE] = true;
        set = function(it, metadata) {
          if (hasOwn(it, STATE)) throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          createNonEnumerableProperty(it, STATE, metadata);
          return metadata;
        };
        get = function(it) {
          return hasOwn(it, STATE) ? it[STATE] : {};
        };
        has = function(it) {
          return hasOwn(it, STATE);
        };
      }
      var store;
      var STATE;
      module.exports = {
        set,
        get,
        has,
        enforce,
        getterFor
      };
    }
  });

  // node_modules/core-js/internals/make-built-in.js
  var require_make_built_in = __commonJS({
    "node_modules/core-js/internals/make-built-in.js"(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var isCallable = require_is_callable();
      var hasOwn = require_has_own_property();
      var DESCRIPTORS = require_descriptors();
      var CONFIGURABLE_FUNCTION_NAME = require_function_name().CONFIGURABLE;
      var inspectSource = require_inspect_source();
      var InternalStateModule = require_internal_state();
      var enforceInternalState = InternalStateModule.enforce;
      var getInternalState = InternalStateModule.get;
      var $String = String;
      var defineProperty = Object.defineProperty;
      var stringSlice = uncurryThis("".slice);
      var replace2 = uncurryThis("".replace);
      var join = uncurryThis([].join);
      var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function() {
        return defineProperty(function() {
        }, "length", { value: 8 }).length !== 8;
      });
      var TEMPLATE = String(String).split("String");
      var makeBuiltIn = module.exports = function(value, name, options) {
        if (stringSlice($String(name), 0, 7) === "Symbol(") {
          name = "[" + replace2($String(name), /^Symbol\(([^)]*)\).*$/, "$1") + "]";
        }
        if (options && options.getter) name = "get " + name;
        if (options && options.setter) name = "set " + name;
        if (!hasOwn(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
          if (DESCRIPTORS) defineProperty(value, "name", { value: name, configurable: true });
          else value.name = name;
        }
        if (CONFIGURABLE_LENGTH && options && hasOwn(options, "arity") && value.length !== options.arity) {
          defineProperty(value, "length", { value: options.arity });
        }
        try {
          if (options && hasOwn(options, "constructor") && options.constructor) {
            if (DESCRIPTORS) defineProperty(value, "prototype", { writable: false });
          } else if (value.prototype) value.prototype = void 0;
        } catch (error) {
        }
        var state = enforceInternalState(value);
        if (!hasOwn(state, "source")) {
          state.source = join(TEMPLATE, typeof name == "string" ? name : "");
        }
        return value;
      };
      Function.prototype.toString = makeBuiltIn(function toString() {
        return isCallable(this) && getInternalState(this).source || inspectSource(this);
      }, "toString");
    }
  });

  // node_modules/core-js/internals/define-built-in.js
  var require_define_built_in = __commonJS({
    "node_modules/core-js/internals/define-built-in.js"(exports, module) {
      "use strict";
      var isCallable = require_is_callable();
      var definePropertyModule = require_object_define_property();
      var makeBuiltIn = require_make_built_in();
      var defineGlobalProperty = require_define_global_property();
      module.exports = function(O, key, value, options) {
        if (!options) options = {};
        var simple = options.enumerable;
        var name = options.name !== void 0 ? options.name : key;
        if (isCallable(value)) makeBuiltIn(value, name, options);
        if (options.global) {
          if (simple) O[key] = value;
          else defineGlobalProperty(key, value);
        } else {
          try {
            if (!options.unsafe) delete O[key];
            else if (O[key]) simple = true;
          } catch (error) {
          }
          if (simple) O[key] = value;
          else definePropertyModule.f(O, key, {
            value,
            enumerable: false,
            configurable: !options.nonConfigurable,
            writable: !options.nonWritable
          });
        }
        return O;
      };
    }
  });

  // node_modules/core-js/internals/math-trunc.js
  var require_math_trunc = __commonJS({
    "node_modules/core-js/internals/math-trunc.js"(exports, module) {
      "use strict";
      var ceil = Math.ceil;
      var floor2 = Math.floor;
      module.exports = Math.trunc || function trunc(x) {
        var n = +x;
        return (n > 0 ? floor2 : ceil)(n);
      };
    }
  });

  // node_modules/core-js/internals/to-integer-or-infinity.js
  var require_to_integer_or_infinity = __commonJS({
    "node_modules/core-js/internals/to-integer-or-infinity.js"(exports, module) {
      "use strict";
      var trunc = require_math_trunc();
      module.exports = function(argument) {
        var number2 = +argument;
        return number2 !== number2 || number2 === 0 ? 0 : trunc(number2);
      };
    }
  });

  // node_modules/core-js/internals/to-absolute-index.js
  var require_to_absolute_index = __commonJS({
    "node_modules/core-js/internals/to-absolute-index.js"(exports, module) {
      "use strict";
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var max2 = Math.max;
      var min3 = Math.min;
      module.exports = function(index2, length) {
        var integer2 = toIntegerOrInfinity(index2);
        return integer2 < 0 ? max2(integer2 + length, 0) : min3(integer2, length);
      };
    }
  });

  // node_modules/core-js/internals/to-length.js
  var require_to_length = __commonJS({
    "node_modules/core-js/internals/to-length.js"(exports, module) {
      "use strict";
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var min3 = Math.min;
      module.exports = function(argument) {
        var len = toIntegerOrInfinity(argument);
        return len > 0 ? min3(len, 9007199254740991) : 0;
      };
    }
  });

  // node_modules/core-js/internals/length-of-array-like.js
  var require_length_of_array_like = __commonJS({
    "node_modules/core-js/internals/length-of-array-like.js"(exports, module) {
      "use strict";
      var toLength = require_to_length();
      module.exports = function(obj) {
        return toLength(obj.length);
      };
    }
  });

  // node_modules/core-js/internals/array-includes.js
  var require_array_includes = __commonJS({
    "node_modules/core-js/internals/array-includes.js"(exports, module) {
      "use strict";
      var toIndexedObject = require_to_indexed_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var lengthOfArrayLike = require_length_of_array_like();
      var createMethod = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
          var O = toIndexedObject($this);
          var length = lengthOfArrayLike(O);
          if (length === 0) return !IS_INCLUDES && -1;
          var index2 = toAbsoluteIndex(fromIndex, length);
          var value;
          if (IS_INCLUDES && el !== el) while (length > index2) {
            value = O[index2++];
            if (value !== value) return true;
          }
          else for (; length > index2; index2++) {
            if ((IS_INCLUDES || index2 in O) && O[index2] === el) return IS_INCLUDES || index2 || 0;
          }
          return !IS_INCLUDES && -1;
        };
      };
      module.exports = {
        // `Array.prototype.includes` method
        // https://tc39.es/ecma262/#sec-array.prototype.includes
        includes: createMethod(true),
        // `Array.prototype.indexOf` method
        // https://tc39.es/ecma262/#sec-array.prototype.indexof
        indexOf: createMethod(false)
      };
    }
  });

  // node_modules/core-js/internals/object-keys-internal.js
  var require_object_keys_internal = __commonJS({
    "node_modules/core-js/internals/object-keys-internal.js"(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this();
      var hasOwn = require_has_own_property();
      var toIndexedObject = require_to_indexed_object();
      var indexOf = require_array_includes().indexOf;
      var hiddenKeys = require_hidden_keys();
      var push = uncurryThis([].push);
      module.exports = function(object2, names) {
        var O = toIndexedObject(object2);
        var i = 0;
        var result = [];
        var key;
        for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
        while (names.length > i) if (hasOwn(O, key = names[i++])) {
          ~indexOf(result, key) || push(result, key);
        }
        return result;
      };
    }
  });

  // node_modules/core-js/internals/enum-bug-keys.js
  var require_enum_bug_keys = __commonJS({
    "node_modules/core-js/internals/enum-bug-keys.js"(exports, module) {
      "use strict";
      module.exports = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
      ];
    }
  });

  // node_modules/core-js/internals/object-get-own-property-names.js
  var require_object_get_own_property_names = __commonJS({
    "node_modules/core-js/internals/object-get-own-property-names.js"(exports) {
      "use strict";
      var internalObjectKeys = require_object_keys_internal();
      var enumBugKeys = require_enum_bug_keys();
      var hiddenKeys = enumBugKeys.concat("length", "prototype");
      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys(O, hiddenKeys);
      };
    }
  });

  // node_modules/core-js/internals/object-get-own-property-symbols.js
  var require_object_get_own_property_symbols = __commonJS({
    "node_modules/core-js/internals/object-get-own-property-symbols.js"(exports) {
      "use strict";
      exports.f = Object.getOwnPropertySymbols;
    }
  });

  // node_modules/core-js/internals/own-keys.js
  var require_own_keys = __commonJS({
    "node_modules/core-js/internals/own-keys.js"(exports, module) {
      "use strict";
      var getBuiltIn = require_get_built_in();
      var uncurryThis = require_function_uncurry_this();
      var getOwnPropertyNamesModule = require_object_get_own_property_names();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
      var anObject = require_an_object();
      var concat = uncurryThis([].concat);
      module.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys3(it) {
        var keys = getOwnPropertyNamesModule.f(anObject(it));
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
      };
    }
  });

  // node_modules/core-js/internals/copy-constructor-properties.js
  var require_copy_constructor_properties = __commonJS({
    "node_modules/core-js/internals/copy-constructor-properties.js"(exports, module) {
      "use strict";
      var hasOwn = require_has_own_property();
      var ownKeys3 = require_own_keys();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var definePropertyModule = require_object_define_property();
      module.exports = function(target, source, exceptions) {
        var keys = ownKeys3(source);
        var defineProperty = definePropertyModule.f;
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
            defineProperty(target, key, getOwnPropertyDescriptor(source, key));
          }
        }
      };
    }
  });

  // node_modules/core-js/internals/is-forced.js
  var require_is_forced = __commonJS({
    "node_modules/core-js/internals/is-forced.js"(exports, module) {
      "use strict";
      var fails = require_fails();
      var isCallable = require_is_callable();
      var replacement = /#|\.prototype\./;
      var isForced = function(feature, detection) {
        var value = data[normalize(feature)];
        return value === POLYFILL ? true : value === NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
      };
      var normalize = isForced.normalize = function(string2) {
        return String(string2).replace(replacement, ".").toLowerCase();
      };
      var data = isForced.data = {};
      var NATIVE = isForced.NATIVE = "N";
      var POLYFILL = isForced.POLYFILL = "P";
      module.exports = isForced;
    }
  });

  // node_modules/core-js/internals/export.js
  var require_export = __commonJS({
    "node_modules/core-js/internals/export.js"(exports, module) {
      "use strict";
      var globalThis2 = require_global_this();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var defineBuiltIn = require_define_built_in();
      var defineGlobalProperty = require_define_global_property();
      var copyConstructorProperties = require_copy_constructor_properties();
      var isForced = require_is_forced();
      module.exports = function(options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var FORCED, target, key, targetProperty, sourceProperty, descriptor;
        if (GLOBAL) {
          target = globalThis2;
        } else if (STATIC) {
          target = globalThis2[TARGET] || defineGlobalProperty(TARGET, {});
        } else {
          target = globalThis2[TARGET] && globalThis2[TARGET].prototype;
        }
        if (target) for (key in source) {
          sourceProperty = source[key];
          if (options.dontCallGetSet) {
            descriptor = getOwnPropertyDescriptor(target, key);
            targetProperty = descriptor && descriptor.value;
          } else targetProperty = target[key];
          FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
          if (!FORCED && targetProperty !== void 0) {
            if (typeof sourceProperty == typeof targetProperty) continue;
            copyConstructorProperties(sourceProperty, targetProperty);
          }
          if (options.sham || targetProperty && targetProperty.sham) {
            createNonEnumerableProperty(sourceProperty, "sham", true);
          }
          defineBuiltIn(target, key, sourceProperty, options);
        }
      };
    }
  });

  // node_modules/core-js/internals/object-keys.js
  var require_object_keys = __commonJS({
    "node_modules/core-js/internals/object-keys.js"(exports, module) {
      "use strict";
      var internalObjectKeys = require_object_keys_internal();
      var enumBugKeys = require_enum_bug_keys();
      module.exports = Object.keys || function keys(O) {
        return internalObjectKeys(O, enumBugKeys);
      };
    }
  });

  // node_modules/core-js/internals/object-define-properties.js
  var require_object_define_properties = __commonJS({
    "node_modules/core-js/internals/object-define-properties.js"(exports) {
      "use strict";
      var DESCRIPTORS = require_descriptors();
      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
      var definePropertyModule = require_object_define_property();
      var anObject = require_an_object();
      var toIndexedObject = require_to_indexed_object();
      var objectKeys = require_object_keys();
      exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var props = toIndexedObject(Properties);
        var keys = objectKeys(Properties);
        var length = keys.length;
        var index2 = 0;
        var key;
        while (length > index2) definePropertyModule.f(O, key = keys[index2++], props[key]);
        return O;
      };
    }
  });

  // node_modules/core-js/internals/html.js
  var require_html = __commonJS({
    "node_modules/core-js/internals/html.js"(exports, module) {
      "use strict";
      var getBuiltIn = require_get_built_in();
      module.exports = getBuiltIn("document", "documentElement");
    }
  });

  // node_modules/core-js/internals/object-create.js
  var require_object_create = __commonJS({
    "node_modules/core-js/internals/object-create.js"(exports, module) {
      "use strict";
      var anObject = require_an_object();
      var definePropertiesModule = require_object_define_properties();
      var enumBugKeys = require_enum_bug_keys();
      var hiddenKeys = require_hidden_keys();
      var html = require_html();
      var documentCreateElement = require_document_create_element();
      var sharedKey = require_shared_key();
      var GT = ">";
      var LT = "<";
      var PROTOTYPE = "prototype";
      var SCRIPT = "script";
      var IE_PROTO = sharedKey("IE_PROTO");
      var EmptyConstructor = function() {
      };
      var scriptTag = function(content) {
        return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
      };
      var NullProtoObjectViaActiveX = function(activeXDocument2) {
        activeXDocument2.write(scriptTag(""));
        activeXDocument2.close();
        var temp = activeXDocument2.parentWindow.Object;
        activeXDocument2 = null;
        return temp;
      };
      var NullProtoObjectViaIFrame = function() {
        var iframe = documentCreateElement("iframe");
        var JS = "java" + SCRIPT + ":";
        var iframeDocument;
        iframe.style.display = "none";
        html.appendChild(iframe);
        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag("document.F=Object"));
        iframeDocument.close();
        return iframeDocument.F;
      };
      var activeXDocument;
      var NullProtoObject = function() {
        try {
          activeXDocument = new ActiveXObject("htmlfile");
        } catch (error) {
        }
        NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
        var length = enumBugKeys.length;
        while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
        return NullProtoObject();
      };
      hiddenKeys[IE_PROTO] = true;
      module.exports = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
          EmptyConstructor[PROTOTYPE] = anObject(O);
          result = new EmptyConstructor();
          EmptyConstructor[PROTOTYPE] = null;
          result[IE_PROTO] = O;
        } else result = NullProtoObject();
        return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
      };
    }
  });

  // node_modules/core-js/internals/add-to-unscopables.js
  var require_add_to_unscopables = __commonJS({
    "node_modules/core-js/internals/add-to-unscopables.js"(exports, module) {
      "use strict";
      var wellKnownSymbol = require_well_known_symbol();
      var create = require_object_create();
      var defineProperty = require_object_define_property().f;
      var UNSCOPABLES = wellKnownSymbol("unscopables");
      var ArrayPrototype = Array.prototype;
      if (ArrayPrototype[UNSCOPABLES] === void 0) {
        defineProperty(ArrayPrototype, UNSCOPABLES, {
          configurable: true,
          value: create(null)
        });
      }
      module.exports = function(key) {
        ArrayPrototype[UNSCOPABLES][key] = true;
      };
    }
  });

  // node_modules/core-js/modules/es.array.at.js
  var require_es_array_at = __commonJS({
    "node_modules/core-js/modules/es.array.at.js"() {
      "use strict";
      var $ = require_export();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var addToUnscopables = require_add_to_unscopables();
      $({ target: "Array", proto: true }, {
        at: function at(index2) {
          var O = toObject(this);
          var len = lengthOfArrayLike(O);
          var relativeIndex = toIntegerOrInfinity(index2);
          var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
          return k < 0 || k >= len ? void 0 : O[k];
        }
      });
      addToUnscopables("at");
    }
  });

  // node_modules/core-js/internals/entry-unbind.js
  var require_entry_unbind = __commonJS({
    "node_modules/core-js/internals/entry-unbind.js"(exports, module) {
      "use strict";
      var globalThis2 = require_global_this();
      var uncurryThis = require_function_uncurry_this();
      module.exports = function(CONSTRUCTOR, METHOD) {
        return uncurryThis(globalThis2[CONSTRUCTOR].prototype[METHOD]);
      };
    }
  });

  // node_modules/core-js/es/array/at.js
  var require_at = __commonJS({
    "node_modules/core-js/es/array/at.js"(exports, module) {
      "use strict";
      require_es_array_at();
      var entryUnbind = require_entry_unbind();
      module.exports = entryUnbind("Array", "at");
    }
  });

  // node_modules/core-js/stable/array/at.js
  var require_at2 = __commonJS({
    "node_modules/core-js/stable/array/at.js"(exports, module) {
      "use strict";
      var parent = require_at();
      module.exports = parent;
    }
  });

  // node_modules/core-js/internals/is-array.js
  var require_is_array = __commonJS({
    "node_modules/core-js/internals/is-array.js"(exports, module) {
      "use strict";
      var classof = require_classof_raw();
      module.exports = Array.isArray || function isArray(argument) {
        return classof(argument) === "Array";
      };
    }
  });

  // node_modules/core-js/internals/does-not-exceed-safe-integer.js
  var require_does_not_exceed_safe_integer = __commonJS({
    "node_modules/core-js/internals/does-not-exceed-safe-integer.js"(exports, module) {
      "use strict";
      var $TypeError = TypeError;
      var MAX_SAFE_INTEGER = 9007199254740991;
      module.exports = function(it) {
        if (it > MAX_SAFE_INTEGER) throw $TypeError("Maximum allowed index exceeded");
        return it;
      };
    }
  });

  // node_modules/core-js/internals/function-uncurry-this-clause.js
  var require_function_uncurry_this_clause = __commonJS({
    "node_modules/core-js/internals/function-uncurry-this-clause.js"(exports, module) {
      "use strict";
      var classofRaw = require_classof_raw();
      var uncurryThis = require_function_uncurry_this();
      module.exports = function(fn) {
        if (classofRaw(fn) === "Function") return uncurryThis(fn);
      };
    }
  });

  // node_modules/core-js/internals/function-bind-context.js
  var require_function_bind_context = __commonJS({
    "node_modules/core-js/internals/function-bind-context.js"(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this_clause();
      var aCallable = require_a_callable();
      var NATIVE_BIND = require_function_bind_native();
      var bind2 = uncurryThis(uncurryThis.bind);
      module.exports = function(fn, that) {
        aCallable(fn);
        return that === void 0 ? fn : NATIVE_BIND ? bind2(fn, that) : function() {
          return fn.apply(that, arguments);
        };
      };
    }
  });

  // node_modules/core-js/internals/flatten-into-array.js
  var require_flatten_into_array = __commonJS({
    "node_modules/core-js/internals/flatten-into-array.js"(exports, module) {
      "use strict";
      var isArray = require_is_array();
      var lengthOfArrayLike = require_length_of_array_like();
      var doesNotExceedSafeInteger = require_does_not_exceed_safe_integer();
      var bind2 = require_function_bind_context();
      var flattenIntoArray = function(target, original, source, sourceLen, start, depth, mapper, thisArg) {
        var targetIndex = start;
        var sourceIndex = 0;
        var mapFn = mapper ? bind2(mapper, thisArg) : false;
        var element, elementLen;
        while (sourceIndex < sourceLen) {
          if (sourceIndex in source) {
            element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
            if (depth > 0 && isArray(element)) {
              elementLen = lengthOfArrayLike(element);
              targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;
            } else {
              doesNotExceedSafeInteger(targetIndex + 1);
              target[targetIndex] = element;
            }
            targetIndex++;
          }
          sourceIndex++;
        }
        return targetIndex;
      };
      module.exports = flattenIntoArray;
    }
  });

  // node_modules/core-js/internals/to-string-tag-support.js
  var require_to_string_tag_support = __commonJS({
    "node_modules/core-js/internals/to-string-tag-support.js"(exports, module) {
      "use strict";
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var test2 = {};
      test2[TO_STRING_TAG] = "z";
      module.exports = String(test2) === "[object z]";
    }
  });

  // node_modules/core-js/internals/classof.js
  var require_classof = __commonJS({
    "node_modules/core-js/internals/classof.js"(exports, module) {
      "use strict";
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var isCallable = require_is_callable();
      var classofRaw = require_classof_raw();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var $Object = Object;
      var CORRECT_ARGUMENTS = classofRaw(/* @__PURE__ */ function() {
        return arguments;
      }()) === "Arguments";
      var tryGet = function(it, key) {
        try {
          return it[key];
        } catch (error) {
        }
      };
      module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
        var O, tag, result;
        return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) === "Object" && isCallable(O.callee) ? "Arguments" : result;
      };
    }
  });

  // node_modules/core-js/internals/is-constructor.js
  var require_is_constructor = __commonJS({
    "node_modules/core-js/internals/is-constructor.js"(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var isCallable = require_is_callable();
      var classof = require_classof();
      var getBuiltIn = require_get_built_in();
      var inspectSource = require_inspect_source();
      var noop3 = function() {
      };
      var construct = getBuiltIn("Reflect", "construct");
      var constructorRegExp = /^\s*(?:class|function)\b/;
      var exec = uncurryThis(constructorRegExp.exec);
      var INCORRECT_TO_STRING = !constructorRegExp.test(noop3);
      var isConstructorModern = function isConstructor(argument) {
        if (!isCallable(argument)) return false;
        try {
          construct(noop3, [], argument);
          return true;
        } catch (error) {
          return false;
        }
      };
      var isConstructorLegacy = function isConstructor(argument) {
        if (!isCallable(argument)) return false;
        switch (classof(argument)) {
          case "AsyncFunction":
          case "GeneratorFunction":
          case "AsyncGeneratorFunction":
            return false;
        }
        try {
          return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
        } catch (error) {
          return true;
        }
      };
      isConstructorLegacy.sham = true;
      module.exports = !construct || fails(function() {
        var called;
        return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
          called = true;
        }) || called;
      }) ? isConstructorLegacy : isConstructorModern;
    }
  });

  // node_modules/core-js/internals/array-species-constructor.js
  var require_array_species_constructor = __commonJS({
    "node_modules/core-js/internals/array-species-constructor.js"(exports, module) {
      "use strict";
      var isArray = require_is_array();
      var isConstructor = require_is_constructor();
      var isObject = require_is_object();
      var wellKnownSymbol = require_well_known_symbol();
      var SPECIES = wellKnownSymbol("species");
      var $Array = Array;
      module.exports = function(originalArray) {
        var C;
        if (isArray(originalArray)) {
          C = originalArray.constructor;
          if (isConstructor(C) && (C === $Array || isArray(C.prototype))) C = void 0;
          else if (isObject(C)) {
            C = C[SPECIES];
            if (C === null) C = void 0;
          }
        }
        return C === void 0 ? $Array : C;
      };
    }
  });

  // node_modules/core-js/internals/array-species-create.js
  var require_array_species_create = __commonJS({
    "node_modules/core-js/internals/array-species-create.js"(exports, module) {
      "use strict";
      var arraySpeciesConstructor = require_array_species_constructor();
      module.exports = function(originalArray, length) {
        return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
      };
    }
  });

  // node_modules/core-js/modules/es.array.flat-map.js
  var require_es_array_flat_map = __commonJS({
    "node_modules/core-js/modules/es.array.flat-map.js"() {
      "use strict";
      var $ = require_export();
      var flattenIntoArray = require_flatten_into_array();
      var aCallable = require_a_callable();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var arraySpeciesCreate = require_array_species_create();
      $({ target: "Array", proto: true }, {
        flatMap: function flatMap(callbackfn) {
          var O = toObject(this);
          var sourceLen = lengthOfArrayLike(O);
          var A;
          aCallable(callbackfn);
          A = arraySpeciesCreate(O, 0);
          A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          return A;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.array.unscopables.flat-map.js
  var require_es_array_unscopables_flat_map = __commonJS({
    "node_modules/core-js/modules/es.array.unscopables.flat-map.js"() {
      "use strict";
      var addToUnscopables = require_add_to_unscopables();
      addToUnscopables("flatMap");
    }
  });

  // node_modules/core-js/es/array/flat-map.js
  var require_flat_map = __commonJS({
    "node_modules/core-js/es/array/flat-map.js"(exports, module) {
      "use strict";
      require_es_array_flat_map();
      require_es_array_unscopables_flat_map();
      var entryUnbind = require_entry_unbind();
      module.exports = entryUnbind("Array", "flatMap");
    }
  });

  // node_modules/core-js/stable/array/flat-map.js
  var require_flat_map2 = __commonJS({
    "node_modules/core-js/stable/array/flat-map.js"(exports, module) {
      "use strict";
      var parent = require_flat_map();
      module.exports = parent;
    }
  });

  // node_modules/core-js/modules/es.array.flat.js
  var require_es_array_flat = __commonJS({
    "node_modules/core-js/modules/es.array.flat.js"() {
      "use strict";
      var $ = require_export();
      var flattenIntoArray = require_flatten_into_array();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var arraySpeciesCreate = require_array_species_create();
      $({ target: "Array", proto: true }, {
        flat: function flat() {
          var depthArg = arguments.length ? arguments[0] : void 0;
          var O = toObject(this);
          var sourceLen = lengthOfArrayLike(O);
          var A = arraySpeciesCreate(O, 0);
          A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === void 0 ? 1 : toIntegerOrInfinity(depthArg));
          return A;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.array.unscopables.flat.js
  var require_es_array_unscopables_flat = __commonJS({
    "node_modules/core-js/modules/es.array.unscopables.flat.js"() {
      "use strict";
      var addToUnscopables = require_add_to_unscopables();
      addToUnscopables("flat");
    }
  });

  // node_modules/core-js/es/array/flat.js
  var require_flat = __commonJS({
    "node_modules/core-js/es/array/flat.js"(exports, module) {
      "use strict";
      require_es_array_flat();
      require_es_array_unscopables_flat();
      var entryUnbind = require_entry_unbind();
      module.exports = entryUnbind("Array", "flat");
    }
  });

  // node_modules/core-js/stable/array/flat.js
  var require_flat2 = __commonJS({
    "node_modules/core-js/stable/array/flat.js"(exports, module) {
      "use strict";
      var parent = require_flat();
      module.exports = parent;
    }
  });

  // node_modules/core-js/internals/to-string.js
  var require_to_string = __commonJS({
    "node_modules/core-js/internals/to-string.js"(exports, module) {
      "use strict";
      var classof = require_classof();
      var $String = String;
      module.exports = function(argument) {
        if (classof(argument) === "Symbol") throw new TypeError("Cannot convert a Symbol value to a string");
        return $String(argument);
      };
    }
  });

  // node_modules/core-js/modules/es.string.at-alternative.js
  var require_es_string_at_alternative = __commonJS({
    "node_modules/core-js/modules/es.string.at-alternative.js"() {
      "use strict";
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var requireObjectCoercible = require_require_object_coercible();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var toString = require_to_string();
      var fails = require_fails();
      var charAt = uncurryThis("".charAt);
      var FORCED = fails(function() {
        return "\u{20BB7}".at(-2) !== "\uD842";
      });
      $({ target: "String", proto: true, forced: FORCED }, {
        at: function at(index2) {
          var S = toString(requireObjectCoercible(this));
          var len = S.length;
          var relativeIndex = toIntegerOrInfinity(index2);
          var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
          return k < 0 || k >= len ? void 0 : charAt(S, k);
        }
      });
    }
  });

  // node_modules/core-js/es/string/at.js
  var require_at3 = __commonJS({
    "node_modules/core-js/es/string/at.js"(exports, module) {
      "use strict";
      require_es_string_at_alternative();
      var entryUnbind = require_entry_unbind();
      module.exports = entryUnbind("String", "at");
    }
  });

  // node_modules/core-js/stable/string/at.js
  var require_at4 = __commonJS({
    "node_modules/core-js/stable/string/at.js"(exports, module) {
      "use strict";
      var parent = require_at3();
      module.exports = parent;
    }
  });

  // node_modules/core-js/internals/regexp-flags.js
  var require_regexp_flags = __commonJS({
    "node_modules/core-js/internals/regexp-flags.js"(exports, module) {
      "use strict";
      var anObject = require_an_object();
      module.exports = function() {
        var that = anObject(this);
        var result = "";
        if (that.hasIndices) result += "d";
        if (that.global) result += "g";
        if (that.ignoreCase) result += "i";
        if (that.multiline) result += "m";
        if (that.dotAll) result += "s";
        if (that.unicode) result += "u";
        if (that.unicodeSets) result += "v";
        if (that.sticky) result += "y";
        return result;
      };
    }
  });

  // node_modules/core-js/internals/regexp-sticky-helpers.js
  var require_regexp_sticky_helpers = __commonJS({
    "node_modules/core-js/internals/regexp-sticky-helpers.js"(exports, module) {
      "use strict";
      var fails = require_fails();
      var globalThis2 = require_global_this();
      var $RegExp = globalThis2.RegExp;
      var UNSUPPORTED_Y = fails(function() {
        var re = $RegExp("a", "y");
        re.lastIndex = 2;
        return re.exec("abcd") !== null;
      });
      var MISSED_STICKY = UNSUPPORTED_Y || fails(function() {
        return !$RegExp("a", "y").sticky;
      });
      var BROKEN_CARET = UNSUPPORTED_Y || fails(function() {
        var re = $RegExp("^r", "gy");
        re.lastIndex = 2;
        return re.exec("str") !== null;
      });
      module.exports = {
        BROKEN_CARET,
        MISSED_STICKY,
        UNSUPPORTED_Y
      };
    }
  });

  // node_modules/core-js/internals/regexp-unsupported-dot-all.js
  var require_regexp_unsupported_dot_all = __commonJS({
    "node_modules/core-js/internals/regexp-unsupported-dot-all.js"(exports, module) {
      "use strict";
      var fails = require_fails();
      var globalThis2 = require_global_this();
      var $RegExp = globalThis2.RegExp;
      module.exports = fails(function() {
        var re = $RegExp(".", "s");
        return !(re.dotAll && re.test("\n") && re.flags === "s");
      });
    }
  });

  // node_modules/core-js/internals/regexp-unsupported-ncg.js
  var require_regexp_unsupported_ncg = __commonJS({
    "node_modules/core-js/internals/regexp-unsupported-ncg.js"(exports, module) {
      "use strict";
      var fails = require_fails();
      var globalThis2 = require_global_this();
      var $RegExp = globalThis2.RegExp;
      module.exports = fails(function() {
        var re = $RegExp("(?<a>b)", "g");
        return re.exec("b").groups.a !== "b" || "b".replace(re, "$<a>c") !== "bc";
      });
    }
  });

  // node_modules/core-js/internals/regexp-exec.js
  var require_regexp_exec = __commonJS({
    "node_modules/core-js/internals/regexp-exec.js"(exports, module) {
      "use strict";
      var call2 = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var toString = require_to_string();
      var regexpFlags = require_regexp_flags();
      var stickyHelpers = require_regexp_sticky_helpers();
      var shared = require_shared();
      var create = require_object_create();
      var getInternalState = require_internal_state().get;
      var UNSUPPORTED_DOT_ALL = require_regexp_unsupported_dot_all();
      var UNSUPPORTED_NCG = require_regexp_unsupported_ncg();
      var nativeReplace = shared("native-string-replace", String.prototype.replace);
      var nativeExec = RegExp.prototype.exec;
      var patchedExec = nativeExec;
      var charAt = uncurryThis("".charAt);
      var indexOf = uncurryThis("".indexOf);
      var replace2 = uncurryThis("".replace);
      var stringSlice = uncurryThis("".slice);
      var UPDATES_LAST_INDEX_WRONG = function() {
        var re1 = /a/;
        var re2 = /b*/g;
        call2(nativeExec, re1, "a");
        call2(nativeExec, re2, "a");
        return re1.lastIndex !== 0 || re2.lastIndex !== 0;
      }();
      var UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;
      var NPCG_INCLUDED = /()??/.exec("")[1] !== void 0;
      var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;
      if (PATCH) {
        patchedExec = function exec(string2) {
          var re = this;
          var state = getInternalState(re);
          var str = toString(string2);
          var raw = state.raw;
          var result, reCopy, lastIndex, match, i, object2, group;
          if (raw) {
            raw.lastIndex = re.lastIndex;
            result = call2(patchedExec, raw, str);
            re.lastIndex = raw.lastIndex;
            return result;
          }
          var groups = state.groups;
          var sticky = UNSUPPORTED_Y && re.sticky;
          var flags = call2(regexpFlags, re);
          var source = re.source;
          var charsAdded = 0;
          var strCopy = str;
          if (sticky) {
            flags = replace2(flags, "y", "");
            if (indexOf(flags, "g") === -1) {
              flags += "g";
            }
            strCopy = stringSlice(str, re.lastIndex);
            if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt(str, re.lastIndex - 1) !== "\n")) {
              source = "(?: " + source + ")";
              strCopy = " " + strCopy;
              charsAdded++;
            }
            reCopy = new RegExp("^(?:" + source + ")", flags);
          }
          if (NPCG_INCLUDED) {
            reCopy = new RegExp("^" + source + "$(?!\\s)", flags);
          }
          if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
          match = call2(nativeExec, sticky ? reCopy : re, strCopy);
          if (sticky) {
            if (match) {
              match.input = stringSlice(match.input, charsAdded);
              match[0] = stringSlice(match[0], charsAdded);
              match.index = re.lastIndex;
              re.lastIndex += match[0].length;
            } else re.lastIndex = 0;
          } else if (UPDATES_LAST_INDEX_WRONG && match) {
            re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
          }
          if (NPCG_INCLUDED && match && match.length > 1) {
            call2(nativeReplace, match[0], reCopy, function() {
              for (i = 1; i < arguments.length - 2; i++) {
                if (arguments[i] === void 0) match[i] = void 0;
              }
            });
          }
          if (match && groups) {
            match.groups = object2 = create(null);
            for (i = 0; i < groups.length; i++) {
              group = groups[i];
              object2[group[0]] = match[group[1]];
            }
          }
          return match;
        };
      }
      module.exports = patchedExec;
    }
  });

  // node_modules/core-js/modules/es.regexp.exec.js
  var require_es_regexp_exec = __commonJS({
    "node_modules/core-js/modules/es.regexp.exec.js"() {
      "use strict";
      var $ = require_export();
      var exec = require_regexp_exec();
      $({ target: "RegExp", proto: true, forced: /./.exec !== exec }, {
        exec
      });
    }
  });

  // node_modules/core-js/internals/function-apply.js
  var require_function_apply = __commonJS({
    "node_modules/core-js/internals/function-apply.js"(exports, module) {
      "use strict";
      var NATIVE_BIND = require_function_bind_native();
      var FunctionPrototype = Function.prototype;
      var apply = FunctionPrototype.apply;
      var call2 = FunctionPrototype.call;
      module.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call2.bind(apply) : function() {
        return call2.apply(apply, arguments);
      });
    }
  });

  // node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js
  var require_fix_regexp_well_known_symbol_logic = __commonJS({
    "node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js"(exports, module) {
      "use strict";
      require_es_regexp_exec();
      var call2 = require_function_call();
      var defineBuiltIn = require_define_built_in();
      var regexpExec = require_regexp_exec();
      var fails = require_fails();
      var wellKnownSymbol = require_well_known_symbol();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var SPECIES = wellKnownSymbol("species");
      var RegExpPrototype = RegExp.prototype;
      module.exports = function(KEY, exec, FORCED, SHAM) {
        var SYMBOL = wellKnownSymbol(KEY);
        var DELEGATES_TO_SYMBOL = !fails(function() {
          var O = {};
          O[SYMBOL] = function() {
            return 7;
          };
          return ""[KEY](O) !== 7;
        });
        var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function() {
          var execCalled = false;
          var re = /a/;
          if (KEY === "split") {
            re = {};
            re.constructor = {};
            re.constructor[SPECIES] = function() {
              return re;
            };
            re.flags = "";
            re[SYMBOL] = /./[SYMBOL];
          }
          re.exec = function() {
            execCalled = true;
            return null;
          };
          re[SYMBOL]("");
          return !execCalled;
        });
        if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
          var nativeRegExpMethod = /./[SYMBOL];
          var methods = exec(SYMBOL, ""[KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
            var $exec = regexp.exec;
            if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
              if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                return { done: true, value: call2(nativeRegExpMethod, regexp, str, arg2) };
              }
              return { done: true, value: call2(nativeMethod, str, regexp, arg2) };
            }
            return { done: false };
          });
          defineBuiltIn(String.prototype, KEY, methods[0]);
          defineBuiltIn(RegExpPrototype, SYMBOL, methods[1]);
        }
        if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], "sham", true);
      };
    }
  });

  // node_modules/core-js/internals/string-multibyte.js
  var require_string_multibyte = __commonJS({
    "node_modules/core-js/internals/string-multibyte.js"(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var toString = require_to_string();
      var requireObjectCoercible = require_require_object_coercible();
      var charAt = uncurryThis("".charAt);
      var charCodeAt = uncurryThis("".charCodeAt);
      var stringSlice = uncurryThis("".slice);
      var createMethod = function(CONVERT_TO_STRING) {
        return function($this, pos) {
          var S = toString(requireObjectCoercible($this));
          var position = toIntegerOrInfinity(pos);
          var size4 = S.length;
          var first, second;
          if (position < 0 || position >= size4) return CONVERT_TO_STRING ? "" : void 0;
          first = charCodeAt(S, position);
          return first < 55296 || first > 56319 || position + 1 === size4 || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
        };
      };
      module.exports = {
        // `String.prototype.codePointAt` method
        // https://tc39.es/ecma262/#sec-string.prototype.codepointat
        codeAt: createMethod(false),
        // `String.prototype.at` method
        // https://github.com/mathiasbynens/String.prototype.at
        charAt: createMethod(true)
      };
    }
  });

  // node_modules/core-js/internals/advance-string-index.js
  var require_advance_string_index = __commonJS({
    "node_modules/core-js/internals/advance-string-index.js"(exports, module) {
      "use strict";
      var charAt = require_string_multibyte().charAt;
      module.exports = function(S, index2, unicode) {
        return index2 + (unicode ? charAt(S, index2).length : 1);
      };
    }
  });

  // node_modules/core-js/internals/get-substitution.js
  var require_get_substitution = __commonJS({
    "node_modules/core-js/internals/get-substitution.js"(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this();
      var toObject = require_to_object();
      var floor2 = Math.floor;
      var charAt = uncurryThis("".charAt);
      var replace2 = uncurryThis("".replace);
      var stringSlice = uncurryThis("".slice);
      var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
      var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;
      module.exports = function(matched, str, position, captures, namedCaptures, replacement) {
        var tailPos = position + matched.length;
        var m = captures.length;
        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
        if (namedCaptures !== void 0) {
          namedCaptures = toObject(namedCaptures);
          symbols = SUBSTITUTION_SYMBOLS;
        }
        return replace2(replacement, symbols, function(match, ch) {
          var capture;
          switch (charAt(ch, 0)) {
            case "$":
              return "$";
            case "&":
              return matched;
            case "`":
              return stringSlice(str, 0, position);
            case "'":
              return stringSlice(str, tailPos);
            case "<":
              capture = namedCaptures[stringSlice(ch, 1, -1)];
              break;
            default:
              var n = +ch;
              if (n === 0) return match;
              if (n > m) {
                var f = floor2(n / 10);
                if (f === 0) return match;
                if (f <= m) return captures[f - 1] === void 0 ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);
                return match;
              }
              capture = captures[n - 1];
          }
          return capture === void 0 ? "" : capture;
        });
      };
    }
  });

  // node_modules/core-js/internals/regexp-exec-abstract.js
  var require_regexp_exec_abstract = __commonJS({
    "node_modules/core-js/internals/regexp-exec-abstract.js"(exports, module) {
      "use strict";
      var call2 = require_function_call();
      var anObject = require_an_object();
      var isCallable = require_is_callable();
      var classof = require_classof_raw();
      var regexpExec = require_regexp_exec();
      var $TypeError = TypeError;
      module.exports = function(R, S) {
        var exec = R.exec;
        if (isCallable(exec)) {
          var result = call2(exec, R, S);
          if (result !== null) anObject(result);
          return result;
        }
        if (classof(R) === "RegExp") return call2(regexpExec, R, S);
        throw new $TypeError("RegExp#exec called on incompatible receiver");
      };
    }
  });

  // node_modules/core-js/modules/es.string.replace.js
  var require_es_string_replace = __commonJS({
    "node_modules/core-js/modules/es.string.replace.js"() {
      "use strict";
      var apply = require_function_apply();
      var call2 = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
      var fails = require_fails();
      var anObject = require_an_object();
      var isCallable = require_is_callable();
      var isNullOrUndefined = require_is_null_or_undefined();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var toLength = require_to_length();
      var toString = require_to_string();
      var requireObjectCoercible = require_require_object_coercible();
      var advanceStringIndex = require_advance_string_index();
      var getMethod2 = require_get_method();
      var getSubstitution = require_get_substitution();
      var regExpExec = require_regexp_exec_abstract();
      var wellKnownSymbol = require_well_known_symbol();
      var REPLACE = wellKnownSymbol("replace");
      var max2 = Math.max;
      var min3 = Math.min;
      var concat = uncurryThis([].concat);
      var push = uncurryThis([].push);
      var stringIndexOf = uncurryThis("".indexOf);
      var stringSlice = uncurryThis("".slice);
      var maybeToString = function(it) {
        return it === void 0 ? it : String(it);
      };
      var REPLACE_KEEPS_$0 = function() {
        return "a".replace(/./, "$0") === "$0";
      }();
      var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function() {
        if (/./[REPLACE]) {
          return /./[REPLACE]("a", "$0") === "";
        }
        return false;
      }();
      var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
        var re = /./;
        re.exec = function() {
          var result = [];
          result.groups = { a: "7" };
          return result;
        };
        return "".replace(re, "$<a>") !== "7";
      });
      fixRegExpWellKnownSymbolLogic("replace", function(_, nativeReplace, maybeCallNative) {
        var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? "$" : "$0";
        return [
          // `String.prototype.replace` method
          // https://tc39.es/ecma262/#sec-string.prototype.replace
          function replace2(searchValue, replaceValue) {
            var O = requireObjectCoercible(this);
            var replacer = isNullOrUndefined(searchValue) ? void 0 : getMethod2(searchValue, REPLACE);
            return replacer ? call2(replacer, searchValue, O, replaceValue) : call2(nativeReplace, toString(O), searchValue, replaceValue);
          },
          // `RegExp.prototype[@@replace]` method
          // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
          function(string2, replaceValue) {
            var rx = anObject(this);
            var S = toString(string2);
            if (typeof replaceValue == "string" && stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 && stringIndexOf(replaceValue, "$<") === -1) {
              var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
              if (res.done) return res.value;
            }
            var functionalReplace = isCallable(replaceValue);
            if (!functionalReplace) replaceValue = toString(replaceValue);
            var global2 = rx.global;
            var fullUnicode;
            if (global2) {
              fullUnicode = rx.unicode;
              rx.lastIndex = 0;
            }
            var results = [];
            var result;
            while (true) {
              result = regExpExec(rx, S);
              if (result === null) break;
              push(results, result);
              if (!global2) break;
              var matchStr = toString(result[0]);
              if (matchStr === "") rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            }
            var accumulatedResult = "";
            var nextSourcePosition = 0;
            for (var i = 0; i < results.length; i++) {
              result = results[i];
              var matched = toString(result[0]);
              var position = max2(min3(toIntegerOrInfinity(result.index), S.length), 0);
              var captures = [];
              var replacement;
              for (var j = 1; j < result.length; j++) push(captures, maybeToString(result[j]));
              var namedCaptures = result.groups;
              if (functionalReplace) {
                var replacerArgs = concat([matched], captures, position, S);
                if (namedCaptures !== void 0) push(replacerArgs, namedCaptures);
                replacement = toString(apply(replaceValue, void 0, replacerArgs));
              } else {
                replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
              }
              if (position >= nextSourcePosition) {
                accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;
                nextSourcePosition = position + matched.length;
              }
            }
            return accumulatedResult + stringSlice(S, nextSourcePosition);
          }
        ];
      }, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);
    }
  });

  // node_modules/core-js/internals/is-regexp.js
  var require_is_regexp = __commonJS({
    "node_modules/core-js/internals/is-regexp.js"(exports, module) {
      "use strict";
      var isObject = require_is_object();
      var classof = require_classof_raw();
      var wellKnownSymbol = require_well_known_symbol();
      var MATCH = wellKnownSymbol("match");
      module.exports = function(it) {
        var isRegExp;
        return isObject(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) === "RegExp");
      };
    }
  });

  // node_modules/core-js/internals/regexp-get-flags.js
  var require_regexp_get_flags = __commonJS({
    "node_modules/core-js/internals/regexp-get-flags.js"(exports, module) {
      "use strict";
      var call2 = require_function_call();
      var hasOwn = require_has_own_property();
      var isPrototypeOf = require_object_is_prototype_of();
      var regExpFlags = require_regexp_flags();
      var RegExpPrototype = RegExp.prototype;
      module.exports = function(R) {
        var flags = R.flags;
        return flags === void 0 && !("flags" in RegExpPrototype) && !hasOwn(R, "flags") && isPrototypeOf(RegExpPrototype, R) ? call2(regExpFlags, R) : flags;
      };
    }
  });

  // node_modules/core-js/modules/es.string.replace-all.js
  var require_es_string_replace_all = __commonJS({
    "node_modules/core-js/modules/es.string.replace-all.js"() {
      "use strict";
      var $ = require_export();
      var call2 = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var requireObjectCoercible = require_require_object_coercible();
      var isCallable = require_is_callable();
      var isNullOrUndefined = require_is_null_or_undefined();
      var isRegExp = require_is_regexp();
      var toString = require_to_string();
      var getMethod2 = require_get_method();
      var getRegExpFlags = require_regexp_get_flags();
      var getSubstitution = require_get_substitution();
      var wellKnownSymbol = require_well_known_symbol();
      var IS_PURE = require_is_pure();
      var REPLACE = wellKnownSymbol("replace");
      var $TypeError = TypeError;
      var indexOf = uncurryThis("".indexOf);
      var replace2 = uncurryThis("".replace);
      var stringSlice = uncurryThis("".slice);
      var max2 = Math.max;
      $({ target: "String", proto: true }, {
        replaceAll: function replaceAll(searchValue, replaceValue) {
          var O = requireObjectCoercible(this);
          var IS_REG_EXP, flags, replacer, string2, searchString, functionalReplace, searchLength, advanceBy, position, replacement;
          var endOfLastMatch = 0;
          var result = "";
          if (!isNullOrUndefined(searchValue)) {
            IS_REG_EXP = isRegExp(searchValue);
            if (IS_REG_EXP) {
              flags = toString(requireObjectCoercible(getRegExpFlags(searchValue)));
              if (!~indexOf(flags, "g")) throw new $TypeError("`.replaceAll` does not allow non-global regexes");
            }
            replacer = getMethod2(searchValue, REPLACE);
            if (replacer) return call2(replacer, searchValue, O, replaceValue);
            if (IS_PURE && IS_REG_EXP) return replace2(toString(O), searchValue, replaceValue);
          }
          string2 = toString(O);
          searchString = toString(searchValue);
          functionalReplace = isCallable(replaceValue);
          if (!functionalReplace) replaceValue = toString(replaceValue);
          searchLength = searchString.length;
          advanceBy = max2(1, searchLength);
          position = indexOf(string2, searchString);
          while (position !== -1) {
            replacement = functionalReplace ? toString(replaceValue(searchString, position, string2)) : getSubstitution(searchString, string2, position, [], void 0, replaceValue);
            result += stringSlice(string2, endOfLastMatch, position) + replacement;
            endOfLastMatch = position + searchLength;
            position = position + advanceBy > string2.length ? -1 : indexOf(string2, searchString, position + advanceBy);
          }
          if (endOfLastMatch < string2.length) {
            result += stringSlice(string2, endOfLastMatch);
          }
          return result;
        }
      });
    }
  });

  // node_modules/core-js/es/string/replace-all.js
  var require_replace_all = __commonJS({
    "node_modules/core-js/es/string/replace-all.js"(exports, module) {
      "use strict";
      require_es_regexp_exec();
      require_es_string_replace();
      require_es_string_replace_all();
      var entryUnbind = require_entry_unbind();
      module.exports = entryUnbind("String", "replaceAll");
    }
  });

  // node_modules/core-js/stable/string/replace-all.js
  var require_replace_all2 = __commonJS({
    "node_modules/core-js/stable/string/replace-all.js"(exports, module) {
      "use strict";
      var parent = require_replace_all();
      module.exports = parent;
    }
  });

  // node_modules/lodash.isequal/index.js
  var require_lodash3 = __commonJS({
    "node_modules/lodash.isequal/index.js"(exports, module) {
      var LARGE_ARRAY_SIZE = 200;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      var MAX_SAFE_INTEGER = 9007199254740991;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var asyncTag = "[object AsyncFunction]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var nullTag = "[object Null]";
      var objectTag = "[object Object]";
      var promiseTag = "[object Promise]";
      var proxyTag = "[object Proxy]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var undefinedTag = "[object Undefined]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function arrayFilter(array2, predicate) {
        var index2 = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
        while (++index2 < length) {
          var value = array2[index2];
          if (predicate(value, index2, array2)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayPush(array2, values) {
        var index2 = -1, length = values.length, offset4 = array2.length;
        while (++index2 < length) {
          array2[offset4 + index2] = values[index2];
        }
        return array2;
      }
      function arraySome(array2, predicate) {
        var index2 = -1, length = array2 == null ? 0 : array2.length;
        while (++index2 < length) {
          if (predicate(array2[index2], index2, array2)) {
            return true;
          }
        }
        return false;
      }
      function baseTimes(n, iteratee) {
        var index2 = -1, result = Array(n);
        while (++index2 < n) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function getValue(object2, key) {
        return object2 == null ? void 0 : object2[key];
      }
      function mapToArray(map) {
        var index2 = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index2] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function setToArray(set) {
        var index2 = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index2] = value;
        });
        return result;
      }
      var arrayProto = Array.prototype;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var coreJsData = root["__core-js_shared__"];
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var nativeObjectToString = objectProto.toString;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var Buffer2 = moduleExports ? root.Buffer : void 0;
      var Symbol2 = root.Symbol;
      var Uint8Array2 = root.Uint8Array;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var splice = arrayProto.splice;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var nativeKeys = overArg(Object.keys, Object);
      var DataView2 = getNative(root, "DataView");
      var Map2 = getNative(root, "Map");
      var Promise2 = getNative(root, "Promise");
      var Set2 = getNative(root, "Set");
      var WeakMap2 = getNative(root, "WeakMap");
      var nativeCreate = getNative(Object, "create");
      var dataViewCtorString = toSource(DataView2);
      var mapCtorString = toSource(Map2);
      var promiseCtorString = toSource(Promise2);
      var setCtorString = toSource(Set2);
      var weakMapCtorString = toSource(WeakMap2);
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function Hash(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry2 = entries[index2];
          this.set(entry2[0], entry2[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : void 0;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry2 = entries[index2];
          this.set(entry2[0], entry2[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      function listCacheDelete(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry2 = entries[index2];
          this.set(entry2[0], entry2[1]);
        }
      }
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size4 = data.size;
        data.set(key, value);
        this.size += data.size == size4 ? 0 : 1;
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values) {
        var index2 = -1, length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();
        while (++index2 < length) {
          this.add(values[index2]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      function stackGet(key) {
        return this.__data__.get(key);
      }
      function stackHas(key) {
        return this.__data__.has(key);
      }
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
          (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
          isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      function assocIndexOf(array2, key) {
        var length = array2.length;
        while (length--) {
          if (eq(array2[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseGetAllKeys(object2, keysFunc, symbolsFunc) {
        var result = keysFunc(object2);
        return isArray(object2) ? result : arrayPush(result, symbolsFunc(object2));
      }
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      function baseIsEqual(value, other, bitmask, customizer, stack2) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack2);
      }
      function baseIsEqualDeep(object2, other, bitmask, customizer, equalFunc, stack2) {
        var objIsArr = isArray(object2), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object2), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer(object2)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack2 || (stack2 = new Stack());
          return objIsArr || isTypedArray(object2) ? equalArrays(object2, other, bitmask, customizer, equalFunc, stack2) : equalByTag(object2, other, objTag, bitmask, customizer, equalFunc, stack2);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
            stack2 || (stack2 = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack2);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack2 || (stack2 = new Stack());
        return equalObjects(object2, other, bitmask, customizer, equalFunc, stack2);
      }
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      function baseKeys(object2) {
        if (!isPrototype(object2)) {
          return nativeKeys(object2);
        }
        var result = [];
        for (var key in Object(object2)) {
          if (hasOwnProperty2.call(object2, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      function equalArrays(array2, other, bitmask, customizer, equalFunc, stack2) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var stacked = stack2.get(array2);
        if (stacked && stack2.get(other)) {
          return stacked == other;
        }
        var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
        stack2.set(array2, other);
        stack2.set(other, array2);
        while (++index2 < arrLength) {
          var arrValue = array2[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array2, stack2) : customizer(arrValue, othValue, index2, array2, other, stack2);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack2))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack2))) {
            result = false;
            break;
          }
        }
        stack2["delete"](array2);
        stack2["delete"](other);
        return result;
      }
      function equalByTag(object2, other, tag, bitmask, customizer, equalFunc, stack2) {
        switch (tag) {
          case dataViewTag:
            if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
              return false;
            }
            object2 = object2.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object2), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object2, +other);
          case errorTag:
            return object2.name == other.name && object2.message == other.message;
          case regexpTag:
          case stringTag:
            return object2 == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object2.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack2.get(object2);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack2.set(object2, other);
            var result = equalArrays(convert(object2), convert(other), bitmask, customizer, equalFunc, stack2);
            stack2["delete"](object2);
            return result;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object2) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      function equalObjects(object2, other, bitmask, customizer, equalFunc, stack2) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object2), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key = objProps[index2];
          if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
            return false;
          }
        }
        var stacked = stack2.get(object2);
        if (stacked && stack2.get(other)) {
          return stacked == other;
        }
        var result = true;
        stack2.set(object2, other);
        stack2.set(other, object2);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key = objProps[index2];
          var objValue = object2[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object2, stack2) : customizer(objValue, othValue, key, object2, other, stack2);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack2) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object2.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack2["delete"](object2);
        stack2["delete"](other);
        return result;
      }
      function getAllKeys(object2) {
        return baseGetAllKeys(object2, keys, getSymbols);
      }
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getNative(object2, key) {
        var value = getValue(object2, key);
        return baseIsNative(value) ? value : void 0;
      }
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      var getSymbols = !nativeGetSymbols ? stubArray : function(object2) {
        if (object2 == null) {
          return [];
        }
        object2 = Object(object2);
        return arrayFilter(nativeGetSymbols(object2), function(symbol) {
          return propertyIsEnumerable.call(object2, symbol);
        });
      };
      var getTag = baseGetTag;
      if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
        getTag = function(value) {
          var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var isArguments = baseIsArguments(/* @__PURE__ */ function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      var isArray = Array.isArray;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      var isBuffer = nativeIsBuffer || stubFalse;
      function isEqual3(value, other) {
        return baseIsEqual(value, other);
      }
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      function keys(object2) {
        return isArrayLike(object2) ? arrayLikeKeys(object2) : baseKeys(object2);
      }
      function stubArray() {
        return [];
      }
      function stubFalse() {
        return false;
      }
      module.exports = isEqual3;
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React68 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React68.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack2 !== "") {
                format2 += "%s";
                args = args.concat([stack2]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement2(object2) {
            {
              return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray(node)) {
                for (var i = 0; i < node.length; i++) {
                  var child = node[i];
                  if (isValidElement2(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement2(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement2(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          var didWarnAboutKeySpread = {};
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              {
                if (hasOwnProperty2.call(props, "key")) {
                  var componentName = getComponentNameFromType(type);
                  var keys = Object.keys(props).filter(function(k) {
                    return k !== "key";
                  });
                  var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
                  if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                    var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                    error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                    didWarnAboutKeySpread[componentName + beforeExample] = true;
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx175 = jsxWithValidationDynamic;
          var jsxs84 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx175;
          exports.jsxs = jsxs84;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "node_modules/classnames/index.js"(exports, module) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        function classNames32() {
          var classes = "";
          for (var i = 0; i < arguments.length; i++) {
            var arg = arguments[i];
            if (arg) {
              classes = appendClass(classes, parseValue(arg));
            }
          }
          return classes;
        }
        function parseValue(arg) {
          if (typeof arg === "string" || typeof arg === "number") {
            return arg;
          }
          if (typeof arg !== "object") {
            return "";
          }
          if (Array.isArray(arg)) {
            return classNames32.apply(null, arg);
          }
          if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
            return arg.toString();
          }
          var classes = "";
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes = appendClass(classes, key);
            }
          }
          return classes;
        }
        function appendClass(value, newClass) {
          if (!newClass) {
            return value;
          }
          if (value) {
            return value + " " + newClass;
          }
          return value + newClass;
        }
        if (typeof module !== "undefined" && module.exports) {
          classNames32.default = classNames32;
          module.exports = classNames32;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames32;
          });
        } else {
          window.classNames = classNames32;
        }
      })();
    }
  });

  // node_modules/eventemitter3/index.js
  var require_eventemitter3 = __commonJS({
    "node_modules/eventemitter3/index.js"(exports, module) {
      "use strict";
      var has = Object.prototype.hasOwnProperty;
      var prefix = "~";
      function Events() {
      }
      if (Object.create) {
        Events.prototype = /* @__PURE__ */ Object.create(null);
        if (!new Events().__proto__) prefix = false;
      }
      function EE(fn, context, once) {
        this.fn = fn;
        this.context = context;
        this.once = once || false;
      }
      function addListener(emitter, event, fn, context, once) {
        if (typeof fn !== "function") {
          throw new TypeError("The listener must be a function");
        }
        var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
        if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
        else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
        else emitter._events[evt] = [emitter._events[evt], listener];
        return emitter;
      }
      function clearEvent(emitter, evt) {
        if (--emitter._eventsCount === 0) emitter._events = new Events();
        else delete emitter._events[evt];
      }
      function EventEmitter2() {
        this._events = new Events();
        this._eventsCount = 0;
      }
      EventEmitter2.prototype.eventNames = function eventNames() {
        var names = [], events, name;
        if (this._eventsCount === 0) return names;
        for (name in events = this._events) {
          if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
        }
        if (Object.getOwnPropertySymbols) {
          return names.concat(Object.getOwnPropertySymbols(events));
        }
        return names;
      };
      EventEmitter2.prototype.listeners = function listeners(event) {
        var evt = prefix ? prefix + event : event, handlers = this._events[evt];
        if (!handlers) return [];
        if (handlers.fn) return [handlers.fn];
        for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
          ee[i] = handlers[i].fn;
        }
        return ee;
      };
      EventEmitter2.prototype.listenerCount = function listenerCount(event) {
        var evt = prefix ? prefix + event : event, listeners = this._events[evt];
        if (!listeners) return 0;
        if (listeners.fn) return 1;
        return listeners.length;
      };
      EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt]) return false;
        var listeners = this._events[evt], len = arguments.length, args, i;
        if (listeners.fn) {
          if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
          switch (len) {
            case 1:
              return listeners.fn.call(listeners.context), true;
            case 2:
              return listeners.fn.call(listeners.context, a1), true;
            case 3:
              return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
              return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
          }
          for (i = 1, args = new Array(len - 1); i < len; i++) {
            args[i - 1] = arguments[i];
          }
          listeners.fn.apply(listeners.context, args);
        } else {
          var length = listeners.length, j;
          for (i = 0; i < length; i++) {
            if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
            switch (len) {
              case 1:
                listeners[i].fn.call(listeners[i].context);
                break;
              case 2:
                listeners[i].fn.call(listeners[i].context, a1);
                break;
              case 3:
                listeners[i].fn.call(listeners[i].context, a1, a2);
                break;
              case 4:
                listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                break;
              default:
                if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
                listeners[i].fn.apply(listeners[i].context, args);
            }
          }
        }
        return true;
      };
      EventEmitter2.prototype.on = function on(event, fn, context) {
        return addListener(this, event, fn, context, false);
      };
      EventEmitter2.prototype.once = function once(event, fn, context) {
        return addListener(this, event, fn, context, true);
      };
      EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt]) return this;
        if (!fn) {
          clearEvent(this, evt);
          return this;
        }
        var listeners = this._events[evt];
        if (listeners.fn) {
          if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
            clearEvent(this, evt);
          }
        } else {
          for (var i = 0, events = [], length = listeners.length; i < length; i++) {
            if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
              events.push(listeners[i]);
            }
          }
          if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
          else clearEvent(this, evt);
        }
        return this;
      };
      EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
        var evt;
        if (event) {
          evt = prefix ? prefix + event : event;
          if (this._events[evt]) clearEvent(this, evt);
        } else {
          this._events = new Events();
          this._eventsCount = 0;
        }
        return this;
      };
      EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
      EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
      EventEmitter2.prefixed = prefix;
      EventEmitter2.EventEmitter = EventEmitter2;
      if ("undefined" !== typeof module) {
        module.exports = EventEmitter2;
      }
    }
  });

  // node_modules/lz-string/libs/lz-string.js
  var require_lz_string = __commonJS({
    "node_modules/lz-string/libs/lz-string.js"(exports, module) {
      var LZString = function() {
        var f = String.fromCharCode;
        var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
        var baseReverseDic = {};
        function getBaseValue(alphabet, character) {
          if (!baseReverseDic[alphabet]) {
            baseReverseDic[alphabet] = {};
            for (var i = 0; i < alphabet.length; i++) {
              baseReverseDic[alphabet][alphabet.charAt(i)] = i;
            }
          }
          return baseReverseDic[alphabet][character];
        }
        var LZString2 = {
          compressToBase64: function(input) {
            if (input == null) return "";
            var res = LZString2._compress(input, 6, function(a) {
              return keyStrBase64.charAt(a);
            });
            switch (res.length % 4) {
              // To produce valid Base64
              default:
              // When could this happen ?
              case 0:
                return res;
              case 1:
                return res + "===";
              case 2:
                return res + "==";
              case 3:
                return res + "=";
            }
          },
          decompressFromBase64: function(input) {
            if (input == null) return "";
            if (input == "") return null;
            return LZString2._decompress(input.length, 32, function(index2) {
              return getBaseValue(keyStrBase64, input.charAt(index2));
            });
          },
          compressToUTF16: function(input) {
            if (input == null) return "";
            return LZString2._compress(input, 15, function(a) {
              return f(a + 32);
            }) + " ";
          },
          decompressFromUTF16: function(compressed) {
            if (compressed == null) return "";
            if (compressed == "") return null;
            return LZString2._decompress(compressed.length, 16384, function(index2) {
              return compressed.charCodeAt(index2) - 32;
            });
          },
          //compress into uint8array (UCS-2 big endian format)
          compressToUint8Array: function(uncompressed) {
            var compressed = LZString2.compress(uncompressed);
            var buf = new Uint8Array(compressed.length * 2);
            for (var i = 0, TotalLen = compressed.length; i < TotalLen; i++) {
              var current_value = compressed.charCodeAt(i);
              buf[i * 2] = current_value >>> 8;
              buf[i * 2 + 1] = current_value % 256;
            }
            return buf;
          },
          //decompress from uint8array (UCS-2 big endian format)
          decompressFromUint8Array: function(compressed) {
            if (compressed === null || compressed === void 0) {
              return LZString2.decompress(compressed);
            } else {
              var buf = new Array(compressed.length / 2);
              for (var i = 0, TotalLen = buf.length; i < TotalLen; i++) {
                buf[i] = compressed[i * 2] * 256 + compressed[i * 2 + 1];
              }
              var result = [];
              buf.forEach(function(c) {
                result.push(f(c));
              });
              return LZString2.decompress(result.join(""));
            }
          },
          //compress into a string that is already URI encoded
          compressToEncodedURIComponent: function(input) {
            if (input == null) return "";
            return LZString2._compress(input, 6, function(a) {
              return keyStrUriSafe.charAt(a);
            });
          },
          //decompress from an output of compressToEncodedURIComponent
          decompressFromEncodedURIComponent: function(input) {
            if (input == null) return "";
            if (input == "") return null;
            input = input.replace(/ /g, "+");
            return LZString2._decompress(input.length, 32, function(index2) {
              return getBaseValue(keyStrUriSafe, input.charAt(index2));
            });
          },
          compress: function(uncompressed) {
            return LZString2._compress(uncompressed, 16, function(a) {
              return f(a);
            });
          },
          _compress: function(uncompressed, bitsPerChar, getCharFromInt) {
            if (uncompressed == null) return "";
            var i, value, context_dictionary = {}, context_dictionaryToCreate = {}, context_c = "", context_wc = "", context_w = "", context_enlargeIn = 2, context_dictSize = 3, context_numBits = 2, context_data = [], context_data_val = 0, context_data_position = 0, ii;
            for (ii = 0; ii < uncompressed.length; ii += 1) {
              context_c = uncompressed.charAt(ii);
              if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {
                context_dictionary[context_c] = context_dictSize++;
                context_dictionaryToCreate[context_c] = true;
              }
              context_wc = context_w + context_c;
              if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {
                context_w = context_wc;
              } else {
                if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                  if (context_w.charCodeAt(0) < 256) {
                    for (i = 0; i < context_numBits; i++) {
                      context_data_val = context_data_val << 1;
                      if (context_data_position == bitsPerChar - 1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                      } else {
                        context_data_position++;
                      }
                    }
                    value = context_w.charCodeAt(0);
                    for (i = 0; i < 8; i++) {
                      context_data_val = context_data_val << 1 | value & 1;
                      if (context_data_position == bitsPerChar - 1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                      } else {
                        context_data_position++;
                      }
                      value = value >> 1;
                    }
                  } else {
                    value = 1;
                    for (i = 0; i < context_numBits; i++) {
                      context_data_val = context_data_val << 1 | value;
                      if (context_data_position == bitsPerChar - 1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                      } else {
                        context_data_position++;
                      }
                      value = 0;
                    }
                    value = context_w.charCodeAt(0);
                    for (i = 0; i < 16; i++) {
                      context_data_val = context_data_val << 1 | value & 1;
                      if (context_data_position == bitsPerChar - 1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                      } else {
                        context_data_position++;
                      }
                      value = value >> 1;
                    }
                  }
                  context_enlargeIn--;
                  if (context_enlargeIn == 0) {
                    context_enlargeIn = Math.pow(2, context_numBits);
                    context_numBits++;
                  }
                  delete context_dictionaryToCreate[context_w];
                } else {
                  value = context_dictionary[context_w];
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                }
                context_enlargeIn--;
                if (context_enlargeIn == 0) {
                  context_enlargeIn = Math.pow(2, context_numBits);
                  context_numBits++;
                }
                context_dictionary[context_wc] = context_dictSize++;
                context_w = String(context_c);
              }
            }
            if (context_w !== "") {
              if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                if (context_w.charCodeAt(0) < 256) {
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val = context_data_val << 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                  }
                  value = context_w.charCodeAt(0);
                  for (i = 0; i < 8; i++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                } else {
                  value = 1;
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val = context_data_val << 1 | value;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = 0;
                  }
                  value = context_w.charCodeAt(0);
                  for (i = 0; i < 16; i++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                }
                context_enlargeIn--;
                if (context_enlargeIn == 0) {
                  context_enlargeIn = Math.pow(2, context_numBits);
                  context_numBits++;
                }
                delete context_dictionaryToCreate[context_w];
              } else {
                value = context_dictionary[context_w];
                for (i = 0; i < context_numBits; i++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              }
              context_enlargeIn--;
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
            }
            value = 2;
            for (i = 0; i < context_numBits; i++) {
              context_data_val = context_data_val << 1 | value & 1;
              if (context_data_position == bitsPerChar - 1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
            while (true) {
              context_data_val = context_data_val << 1;
              if (context_data_position == bitsPerChar - 1) {
                context_data.push(getCharFromInt(context_data_val));
                break;
              } else context_data_position++;
            }
            return context_data.join("");
          },
          decompress: function(compressed) {
            if (compressed == null) return "";
            if (compressed == "") return null;
            return LZString2._decompress(compressed.length, 32768, function(index2) {
              return compressed.charCodeAt(index2);
            });
          },
          _decompress: function(length, resetValue, getNextValue) {
            var dictionary = [], next, enlargeIn = 4, dictSize = 4, numBits = 3, entry2 = "", result = [], i, w, bits, resb, maxpower, power, c, data = { val: getNextValue(0), position: resetValue, index: 1 };
            for (i = 0; i < 3; i += 1) {
              dictionary[i] = i;
            }
            bits = 0;
            maxpower = Math.pow(2, 2);
            power = 1;
            while (power != maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (data.position == 0) {
                data.position = resetValue;
                data.val = getNextValue(data.index++);
              }
              bits |= (resb > 0 ? 1 : 0) * power;
              power <<= 1;
            }
            switch (next = bits) {
              case 0:
                bits = 0;
                maxpower = Math.pow(2, 8);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                c = f(bits);
                break;
              case 1:
                bits = 0;
                maxpower = Math.pow(2, 16);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                c = f(bits);
                break;
              case 2:
                return "";
            }
            dictionary[3] = c;
            w = c;
            result.push(c);
            while (true) {
              if (data.index > length) {
                return "";
              }
              bits = 0;
              maxpower = Math.pow(2, numBits);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              switch (c = bits) {
                case 0:
                  bits = 0;
                  maxpower = Math.pow(2, 8);
                  power = 1;
                  while (power != maxpower) {
                    resb = data.val & data.position;
                    data.position >>= 1;
                    if (data.position == 0) {
                      data.position = resetValue;
                      data.val = getNextValue(data.index++);
                    }
                    bits |= (resb > 0 ? 1 : 0) * power;
                    power <<= 1;
                  }
                  dictionary[dictSize++] = f(bits);
                  c = dictSize - 1;
                  enlargeIn--;
                  break;
                case 1:
                  bits = 0;
                  maxpower = Math.pow(2, 16);
                  power = 1;
                  while (power != maxpower) {
                    resb = data.val & data.position;
                    data.position >>= 1;
                    if (data.position == 0) {
                      data.position = resetValue;
                      data.val = getNextValue(data.index++);
                    }
                    bits |= (resb > 0 ? 1 : 0) * power;
                    power <<= 1;
                  }
                  dictionary[dictSize++] = f(bits);
                  c = dictSize - 1;
                  enlargeIn--;
                  break;
                case 2:
                  return result.join("");
              }
              if (enlargeIn == 0) {
                enlargeIn = Math.pow(2, numBits);
                numBits++;
              }
              if (dictionary[c]) {
                entry2 = dictionary[c];
              } else {
                if (c === dictSize) {
                  entry2 = w + w.charAt(0);
                } else {
                  return null;
                }
              }
              result.push(entry2);
              dictionary[dictSize++] = w + entry2.charAt(0);
              enlargeIn--;
              w = entry2;
              if (enlargeIn == 0) {
                enlargeIn = Math.pow(2, numBits);
                numBits++;
              }
            }
          }
        };
        return LZString2;
      }();
      if (typeof define === "function" && define.amd) {
        define(function() {
          return LZString;
        });
      } else if (typeof module !== "undefined" && module != null) {
        module.exports = LZString;
      } else if (typeof angular !== "undefined" && angular != null) {
        angular.module("LZString", []).factory("LZString", function() {
          return LZString;
        });
      }
    }
  });

  // index.tsx
  var import_react124 = __toESM(require_react());
  var import_client2 = __toESM(require_client());

  // node_modules/@tldraw/utils/dist-esm/lib/version.mjs
  var TLDRAW_LIBRARY_VERSION_KEY = "__TLDRAW_LIBRARY_VERSIONS__";
  function getLibraryVersions() {
    if (globalThis[TLDRAW_LIBRARY_VERSION_KEY]) {
      return globalThis[TLDRAW_LIBRARY_VERSION_KEY];
    }
    const info = {
      versions: [],
      didWarn: false,
      scheduledNotice: null
    };
    Object.defineProperty(globalThis, TLDRAW_LIBRARY_VERSION_KEY, {
      value: info,
      writable: false,
      configurable: false,
      enumerable: false
    });
    return info;
  }
  function registerTldrawLibraryVersion(name, version2, modules) {
    if (!name || !version2 || !modules) {
      if (true) {
        throw new Error("Missing name/version/module system in built version of tldraw library");
      }
      return;
    }
    const info = getLibraryVersions();
    info.versions.push({ name, version: version2, modules });
    if (!info.scheduledNotice) {
      try {
        info.scheduledNotice = setTimeout(() => {
          info.scheduledNotice = null;
          checkLibraryVersions(info);
        }, 100);
      } catch {
        checkLibraryVersions(info);
      }
    }
  }
  function checkLibraryVersions(info) {
    if (!info.versions.length) return;
    if (info.didWarn) return;
    const sorted = info.versions.sort((a, b) => compareVersions(a.version, b.version));
    const latestVersion = sorted[sorted.length - 1].version;
    const matchingVersions = /* @__PURE__ */ new Set();
    const nonMatchingVersions = /* @__PURE__ */ new Map();
    for (const lib of sorted) {
      if (nonMatchingVersions.has(lib.name)) {
        matchingVersions.delete(lib.name);
        entry(nonMatchingVersions, lib.name, /* @__PURE__ */ new Set()).add(lib.version);
        continue;
      }
      if (lib.version === latestVersion) {
        matchingVersions.add(lib.name);
      } else {
        matchingVersions.delete(lib.name);
        entry(nonMatchingVersions, lib.name, /* @__PURE__ */ new Set()).add(lib.version);
      }
    }
    if (nonMatchingVersions.size > 0) {
      const message = [
        `${format("[tldraw]", ["bold", "bgRed", "textWhite"])} ${format("You have multiple versions of tldraw libraries installed. This can lead to bugs and unexpected behavior.", ["textRed", "bold"])}`,
        "",
        `The latest version you have installed is ${format(`v${latestVersion}`, ["bold", "textBlue"])}. The following libraries are on the latest version:`,
        ...Array.from(matchingVersions, (name) => `  \u2022 \u2705 ${format(name, ["bold"])}`),
        "",
        `The following libraries are not on the latest version, or have multiple versions installed:`,
        ...Array.from(nonMatchingVersions, ([name, versions]) => {
          const sortedVersions = Array.from(versions).sort(compareVersions).map((v) => format(`v${v}`, v === latestVersion ? ["textGreen"] : ["textRed"]));
          return `  \u2022 \u274C ${format(name, ["bold"])} (${sortedVersions.join(", ")})`;
        })
      ];
      console.log(message.join("\n"));
      info.didWarn = true;
      return;
    }
    const potentialDuplicates = /* @__PURE__ */ new Map();
    for (const lib of sorted) {
      entry(potentialDuplicates, lib.name, { version: lib.version, modules: [] }).modules.push(
        lib.modules
      );
    }
    const duplicates = /* @__PURE__ */ new Map();
    for (const [name, lib] of potentialDuplicates) {
      if (lib.modules.length > 1) duplicates.set(name, lib);
    }
    if (duplicates.size > 0) {
      const message = [
        `${format("[tldraw]", ["bold", "bgRed", "textWhite"])} ${format("You have multiple instances of some tldraw libraries active. This can lead to bugs and unexpected behavior. ", ["textRed", "bold"])}`,
        "",
        "This usually means that your bundler is misconfigured, and is importing the same library multiple times - usually once as an ES Module, and once as a CommonJS module.",
        "",
        "The following libraries have been imported multiple times:",
        ...Array.from(duplicates, ([name, lib]) => {
          const modules = lib.modules.map((m, i) => m === "esm" ? `      ${i + 1}. ES Modules` : `      ${i + 1}. CommonJS`).join("\n");
          return `  \u2022 \u274C ${format(name, ["bold"])} v${lib.version}: 
${modules}`;
        }),
        "",
        "You should configure your bundler to only import one version of each library."
      ];
      console.log(message.join("\n"));
      info.didWarn = true;
      return;
    }
  }
  function compareVersions(a, b) {
    const aMatch = a.match(/^(\d+)\.(\d+)\.(\d+)(?:-(\w+))?$/);
    const bMatch = b.match(/^(\d+)\.(\d+)\.(\d+)(?:-(\w+))?$/);
    if (!aMatch || !bMatch) return a.localeCompare(b);
    if (aMatch[1] !== bMatch[1]) return Number(aMatch[1]) - Number(bMatch[1]);
    if (aMatch[2] !== bMatch[2]) return Number(aMatch[2]) - Number(bMatch[2]);
    if (aMatch[3] !== bMatch[3]) return Number(aMatch[3]) - Number(bMatch[3]);
    if (aMatch[4] && bMatch[4]) return aMatch[4].localeCompare(bMatch[4]);
    if (aMatch[4]) return 1;
    if (bMatch[4]) return -1;
    return 0;
  }
  var formats = {
    bold: "1",
    textBlue: "94",
    textRed: "31",
    textGreen: "32",
    bgRed: "41",
    textWhite: "97"
  };
  function format(value, formatters = []) {
    return `\x1B[${formatters.map((f) => formats[f]).join(";")}m${value}\x1B[m`;
  }
  function entry(map, key, defaultValue) {
    if (map.has(key)) {
      return map.get(key);
    }
    map.set(key, defaultValue);
    return defaultValue;
  }

  // node_modules/@tldraw/utils/dist-esm/index.mjs
  var import_lodash = __toESM(require_lodash(), 1);
  var import_lodash2 = __toESM(require_lodash2(), 1);

  // node_modules/@tldraw/utils/dist-esm/lib/function.mjs
  function omitFromStackTrace(fn) {
    const wrappedFn = (...args) => {
      try {
        return fn(...args);
      } catch (error) {
        if (error instanceof Error && Error.captureStackTrace) {
          Error.captureStackTrace(error, wrappedFn);
        }
        throw error;
      }
    };
    return wrappedFn;
  }
  var noop = () => {
  };

  // node_modules/@tldraw/utils/dist-esm/lib/control.mjs
  var Result = {
    ok(value) {
      return { ok: true, value };
    },
    err(error) {
      return { ok: false, error };
    }
  };
  function exhaustiveSwitchError(value, property) {
    const debugValue = property && value && typeof value === "object" && property in value ? value[property] : value;
    throw new Error(`Unknown switch case ${debugValue}`);
  }
  var assert = omitFromStackTrace(
    (value, message) => {
      if (!value) {
        throw new Error(message || "Assertion Error");
      }
    }
  );
  var assertExists = omitFromStackTrace((value, message) => {
    if (value == null) {
      throw new Error(message ?? "value must be defined");
    }
    return value;
  });
  function promiseWithResolve() {
    let resolve;
    let reject;
    const promise = new Promise((res, rej) => {
      resolve = res;
      reject = rej;
    });
    return Object.assign(promise, {
      resolve,
      reject
    });
  }
  function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  // node_modules/@tldraw/utils/dist-esm/lib/perf.mjs
  var PERFORMANCE_COLORS = {
    Good: "#40C057",
    Mid: "#FFC078",
    Poor: "#E03131"
  };
  var PERFORMANCE_PREFIX_COLOR = PERFORMANCE_COLORS.Good;

  // node_modules/@tldraw/utils/dist-esm/lib/PerformanceTracker.mjs
  var PerformanceTracker = class {
    startTime = 0;
    name = "";
    frames = 0;
    started = false;
    frame = null;
    // eslint-disable-next-line local/prefer-class-methods
    recordFrame = () => {
      this.frames++;
      if (!this.started) return;
      this.frame = requestAnimationFrame(this.recordFrame);
    };
    start(name) {
      this.name = name;
      this.frames = 0;
      this.started = true;
      if (this.frame !== null) cancelAnimationFrame(this.frame);
      this.frame = requestAnimationFrame(this.recordFrame);
      this.startTime = performance.now();
    }
    stop() {
      this.started = false;
      if (this.frame !== null) cancelAnimationFrame(this.frame);
      const duration = (performance.now() - this.startTime) / 1e3;
      const fps = duration === 0 ? 0 : Math.floor(this.frames / duration);
      const background = fps > 55 ? PERFORMANCE_COLORS.Good : fps > 30 ? PERFORMANCE_COLORS.Mid : PERFORMANCE_COLORS.Poor;
      const color = background === PERFORMANCE_COLORS.Mid ? "black" : "white";
      const capitalized = this.name[0].toUpperCase() + this.name.slice(1);
      console.debug(
        `%cPerf%c ${capitalized} %c${fps}%c fps`,
        `color: white; background: ${PERFORMANCE_PREFIX_COLOR};padding: 2px;border-radius: 3px;`,
        "font-weight: normal",
        `font-weight: bold; padding: 2px; background: ${background};color: ${color};`,
        "font-weight: normal"
      );
    }
    isStarted() {
      return this.started;
    }
  };

  // node_modules/@tldraw/utils/dist-esm/lib/array.mjs
  function dedupe(input, equals2) {
    const result = [];
    mainLoop: for (const item of input) {
      for (const existing of result) {
        if (equals2 ? equals2(item, existing) : item === existing) {
          continue mainLoop;
        }
      }
      result.push(item);
    }
    return result;
  }
  function compact(arr) {
    return arr.filter((i) => i !== void 0 && i !== null);
  }
  function last(arr) {
    return arr[arr.length - 1];
  }
  function minBy(arr, fn) {
    let min3;
    let minVal = Infinity;
    for (const item of arr) {
      const val = fn(item);
      if (val < minVal) {
        min3 = item;
        minVal = val;
      }
    }
    return min3;
  }
  function maxBy(arr, fn) {
    let max2;
    let maxVal = -Infinity;
    for (const item of arr) {
      const val = fn(item);
      if (val > maxVal) {
        max2 = item;
        maxVal = val;
      }
    }
    return max2;
  }
  function areArraysShallowEqual(arr1, arr2) {
    if (arr1 === arr2) return true;
    if (arr1.length !== arr2.length) return false;
    for (let i = 0; i < arr1.length; i++) {
      if (!Object.is(arr1[i], arr2[i])) {
        return false;
      }
    }
    return true;
  }

  // node_modules/@tldraw/utils/dist-esm/lib/bind.mjs
  function bind(...args) {
    if (args.length === 2) {
      const [originalMethod, context] = args;
      context.addInitializer(function initializeMethod() {
        assert(Reflect.isExtensible(this), "Cannot bind to a non-extensible class.");
        const value = originalMethod.bind(this);
        const ok = Reflect.defineProperty(this, context.name, {
          value,
          writable: true,
          configurable: true
        });
        assert(ok, "Cannot bind a non-configurable class method.");
      });
    } else {
      const [_target, propertyKey, descriptor] = args;
      if (!descriptor || typeof descriptor.value !== "function") {
        throw new TypeError(
          `Only methods can be decorated with @bind. <${propertyKey}> is not a method!`
        );
      }
      return {
        configurable: true,
        get() {
          const bound = descriptor.value.bind(this);
          Object.defineProperty(this, propertyKey, {
            value: bound,
            configurable: true,
            writable: true
          });
          return bound;
        }
      };
    }
  }

  // node_modules/@tldraw/utils/dist-esm/lib/cache.mjs
  var WeakCache = class {
    /** The map of items to their cached values. */
    items = /* @__PURE__ */ new WeakMap();
    /**
     * Get the cached value for a given record. If the record is not present in the map, the callback
     * will be used to create the value (with the result being stored in the cache for next time).
     *
     * @param item - The item to get.
     * @param cb - The callback to use to create the value when a cached value is not found.
     */
    get(item, cb) {
      if (!this.items.has(item)) {
        this.items.set(item, cb(item));
      }
      return this.items.get(item);
    }
  };

  // node_modules/@tldraw/utils/dist-esm/lib/debounce.mjs
  function debounce(callback, wait) {
    let state = void 0;
    const fn = (...args) => {
      if (!state) {
        state = {};
        state.promise = new Promise((resolve, reject) => {
          state.resolve = resolve;
          state.reject = reject;
        });
      }
      clearTimeout(state.timeout);
      state.latestArgs = args;
      state.timeout = setTimeout(() => {
        const s = state;
        state = void 0;
        try {
          s.resolve(callback(...s.latestArgs));
        } catch (e) {
          s.reject(e);
        }
      }, wait);
      return state.promise;
    };
    fn.cancel = () => {
      if (!state) return;
      clearTimeout(state.timeout);
    };
    return fn;
  }

  // node_modules/@tldraw/utils/dist-esm/lib/error.mjs
  var annotationsByError = /* @__PURE__ */ new WeakMap();
  function annotateError(error, annotations) {
    if (typeof error !== "object" || error === null) return;
    let currentAnnotations = annotationsByError.get(error);
    if (!currentAnnotations) {
      currentAnnotations = { tags: {}, extras: {} };
      annotationsByError.set(error, currentAnnotations);
    }
    if (annotations.tags) {
      currentAnnotations.tags = {
        ...currentAnnotations.tags,
        ...annotations.tags
      };
    }
    if (annotations.extras) {
      currentAnnotations.extras = {
        ...currentAnnotations.extras,
        ...annotations.extras
      };
    }
  }

  // node_modules/@tldraw/utils/dist-esm/lib/network.mjs
  async function fetch(input, init) {
    return window.fetch(input, {
      // We want to make sure that the referrer is not sent to other domains.
      referrerPolicy: "strict-origin-when-cross-origin",
      ...init
    });
  }
  var Image = (width, height) => {
    const img = new window.Image(width, height);
    img.referrerPolicy = "strict-origin-when-cross-origin";
    return img;
  };

  // node_modules/@tldraw/utils/dist-esm/lib/file.mjs
  var FileHelpers = class {
    /**
     * @param dataURL - The file as a string.
     *
     * from https://stackoverflow.com/a/53817185
     */
    static async dataUrlToArrayBuffer(dataURL) {
      return fetch(dataURL).then(function(result) {
        return result.arrayBuffer();
      });
    }
    /**
     * Convert a file to a base64 encoded data url.
     *
     * @example
     *
     * ```ts
     * const A = FileHelpers.toDataUrl(myImageFile)
     * ```
     *
     * @param file - The file as a blob.
     */
    static async blobToDataUrl(file) {
      return await new Promise((resolve, reject) => {
        if (file) {
          const reader = new FileReader();
          reader.onload = () => resolve(reader.result);
          reader.onerror = (error) => reject(error);
          reader.onabort = (error) => reject(error);
          reader.readAsDataURL(file);
        }
      });
    }
    /**
     * Convert a file to a unicode text string.
     *
     * @example
     *
     * ```ts
     * const A = FileHelpers.fileToDataUrl(myTextFile)
     * ```
     *
     * @param file - The file as a blob.
     */
    static async blobToText(file) {
      return await new Promise((resolve, reject) => {
        if (file) {
          const reader = new FileReader();
          reader.onload = () => resolve(reader.result);
          reader.onerror = (error) => reject(error);
          reader.onabort = (error) => reject(error);
          reader.readAsText(file);
        }
      });
    }
    static rewriteMimeType(blob, newMimeType) {
      if (blob.type === newMimeType) return blob;
      if (blob instanceof File) {
        return new File([blob], blob.name, { type: newMimeType });
      }
      return new Blob([blob], { type: newMimeType });
    }
  };

  // node_modules/@tldraw/utils/dist-esm/lib/hash.mjs
  function getHashForString(string2) {
    let hash = 0;
    for (let i = 0; i < string2.length; i++) {
      hash = (hash << 5) - hash + string2.charCodeAt(i);
      hash |= 0;
    }
    return hash + "";
  }
  function getHashForBuffer(buffer) {
    const view = new DataView(buffer);
    let hash = 0;
    for (let i = 0; i < view.byteLength; i++) {
      hash = (hash << 5) - hash + view.getUint8(i);
      hash |= 0;
    }
    return hash + "";
  }

  // node_modules/@tldraw/utils/dist-esm/lib/id.mjs
  var crypto2 = globalThis.crypto;
  var urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
  var POOL_SIZE_MULTIPLIER = 128;
  var pool;
  var poolOffset;
  function fillPool(bytes) {
    if (!pool || pool.length < bytes) {
      pool = new Uint8Array(bytes * POOL_SIZE_MULTIPLIER);
      crypto2.getRandomValues(pool);
      poolOffset = 0;
    } else if (poolOffset + bytes > pool.length) {
      crypto2.getRandomValues(pool);
      poolOffset = 0;
    }
    poolOffset += bytes;
  }
  function nanoid(size4 = 21) {
    fillPool(size4 -= 0);
    let id = "";
    for (let i = poolOffset - size4; i < poolOffset; i++) {
      id += urlAlphabet[pool[i] & 63];
    }
    return id;
  }
  var impl = nanoid;
  function uniqueId(size4) {
    return impl(size4);
  }

  // node_modules/@tldraw/utils/dist-esm/lib/media/apng.mjs
  function isApngAnimated(buffer) {
    const view = new Uint8Array(buffer);
    if (!view || !(typeof Buffer !== "undefined" && Buffer.isBuffer(view) || view instanceof Uint8Array) || view.length < 16) {
      return false;
    }
    const isPNG = view[0] === 137 && view[1] === 80 && view[2] === 78 && view[3] === 71 && view[4] === 13 && view[5] === 10 && view[6] === 26 && view[7] === 10;
    if (!isPNG) {
      return false;
    }
    function indexOfSubstring(haystack, needle, fromIndex, upToIndex, chunksize = 1024) {
      if (!needle) {
        return -1;
      }
      needle = new RegExp(needle, "g");
      const needle_length = needle.source.length;
      const decoder = new TextDecoder();
      const full_haystack_length = haystack.length;
      if (typeof upToIndex === "undefined") {
        upToIndex = full_haystack_length;
      }
      if (fromIndex >= full_haystack_length || upToIndex <= 0 || fromIndex >= upToIndex) {
        return -1;
      }
      haystack = haystack.subarray(fromIndex, upToIndex);
      let position = -1;
      let current_index = 0;
      let full_length = 0;
      let needle_buffer = "";
      outer: while (current_index < haystack.length) {
        const next_index = current_index + chunksize;
        const chunk = haystack.subarray(current_index, next_index);
        const decoded = decoder.decode(chunk, { stream: true });
        const text = needle_buffer + decoded;
        let match;
        let last_index = -1;
        while ((match = needle.exec(text)) !== null) {
          last_index = match.index - needle_buffer.length;
          position = full_length + last_index;
          break outer;
        }
        current_index = next_index;
        full_length += decoded.length;
        const needle_index = last_index > -1 ? last_index + needle_length : decoded.length - needle_length;
        needle_buffer = decoded.slice(needle_index);
      }
      if (position >= 0) {
        position += fromIndex >= 0 ? fromIndex : full_haystack_length + fromIndex;
      }
      return position;
    }
    const idatIdx = indexOfSubstring(view, "IDAT", 12);
    if (idatIdx >= 12) {
      const actlIdx = indexOfSubstring(view, "acTL", 8, idatIdx);
      return actlIdx >= 8;
    }
    return false;
  }

  // node_modules/@tldraw/utils/dist-esm/lib/media/avif.mjs
  var isAvifAnimated = (buffer) => {
    const view = new Uint8Array(buffer);
    return view[3] === 44;
  };

  // node_modules/@tldraw/utils/dist-esm/lib/media/gif.mjs
  function getDataBlocksLength(buffer, offset4) {
    let length = 0;
    while (buffer[offset4 + length]) {
      length += buffer[offset4 + length] + 1;
    }
    return length + 1;
  }
  function isGIF(buffer) {
    const enc = new TextDecoder("ascii");
    const header = enc.decode(buffer.slice(0, 3));
    return header === "GIF";
  }
  function isGifAnimated(buffer) {
    const view = new Uint8Array(buffer);
    let hasColorTable, colorTableSize;
    let offset4 = 0;
    let imagesCount = 0;
    if (!isGIF(buffer)) {
      return false;
    }
    hasColorTable = view[10] & 128;
    colorTableSize = view[10] & 7;
    offset4 += 6;
    offset4 += 7;
    offset4 += hasColorTable ? 3 * Math.pow(2, colorTableSize + 1) : 0;
    while (imagesCount < 2 && offset4 < view.length) {
      switch (view[offset4]) {
        case 44:
          imagesCount += 1;
          hasColorTable = view[offset4 + 9] & 128;
          colorTableSize = view[offset4 + 9] & 7;
          offset4 += 10;
          offset4 += hasColorTable ? 3 * Math.pow(2, colorTableSize + 1) : 0;
          offset4 += getDataBlocksLength(view, offset4 + 1) + 1;
          break;
        case 33:
          offset4 += 2;
          offset4 += getDataBlocksLength(view, offset4);
          break;
        case 59:
          offset4 = view.length;
          break;
        default:
          offset4 = view.length;
          break;
      }
    }
    return imagesCount > 1;
  }

  // node_modules/@tldraw/utils/dist-esm/lib/media/png.mjs
  var TABLE = [
    0,
    1996959894,
    3993919788,
    2567524794,
    124634137,
    1886057615,
    3915621685,
    2657392035,
    249268274,
    2044508324,
    3772115230,
    2547177864,
    162941995,
    2125561021,
    3887607047,
    2428444049,
    498536548,
    1789927666,
    4089016648,
    2227061214,
    450548861,
    1843258603,
    4107580753,
    2211677639,
    325883990,
    1684777152,
    4251122042,
    2321926636,
    335633487,
    1661365465,
    4195302755,
    2366115317,
    997073096,
    1281953886,
    3579855332,
    2724688242,
    1006888145,
    1258607687,
    3524101629,
    2768942443,
    901097722,
    1119000684,
    3686517206,
    2898065728,
    853044451,
    1172266101,
    3705015759,
    2882616665,
    651767980,
    1373503546,
    3369554304,
    3218104598,
    565507253,
    1454621731,
    3485111705,
    3099436303,
    671266974,
    1594198024,
    3322730930,
    2970347812,
    795835527,
    1483230225,
    3244367275,
    3060149565,
    1994146192,
    31158534,
    2563907772,
    4023717930,
    1907459465,
    112637215,
    2680153253,
    3904427059,
    2013776290,
    251722036,
    2517215374,
    3775830040,
    2137656763,
    141376813,
    2439277719,
    3865271297,
    1802195444,
    476864866,
    2238001368,
    4066508878,
    1812370925,
    453092731,
    2181625025,
    4111451223,
    1706088902,
    314042704,
    2344532202,
    4240017532,
    1658658271,
    366619977,
    2362670323,
    4224994405,
    1303535960,
    984961486,
    2747007092,
    3569037538,
    1256170817,
    1037604311,
    2765210733,
    3554079995,
    1131014506,
    879679996,
    2909243462,
    3663771856,
    1141124467,
    855842277,
    2852801631,
    3708648649,
    1342533948,
    654459306,
    3188396048,
    3373015174,
    1466479909,
    544179635,
    3110523913,
    3462522015,
    1591671054,
    702138776,
    2966460450,
    3352799412,
    1504918807,
    783551873,
    3082640443,
    3233442989,
    3988292384,
    2596254646,
    62317068,
    1957810842,
    3939845945,
    2647816111,
    81470997,
    1943803523,
    3814918930,
    2489596804,
    225274430,
    2053790376,
    3826175755,
    2466906013,
    167816743,
    2097651377,
    4027552580,
    2265490386,
    503444072,
    1762050814,
    4150417245,
    2154129355,
    426522225,
    1852507879,
    4275313526,
    2312317920,
    282753626,
    1742555852,
    4189708143,
    2394877945,
    397917763,
    1622183637,
    3604390888,
    2714866558,
    953729732,
    1340076626,
    3518719985,
    2797360999,
    1068828381,
    1219638859,
    3624741850,
    2936675148,
    906185462,
    1090812512,
    3747672003,
    2825379669,
    829329135,
    1181335161,
    3412177804,
    3160834842,
    628085408,
    1382605366,
    3423369109,
    3138078467,
    570562233,
    1426400815,
    3317316542,
    2998733608,
    733239954,
    1555261956,
    3268935591,
    3050360625,
    752459403,
    1541320221,
    2607071920,
    3965973030,
    1969922972,
    40735498,
    2617837225,
    3943577151,
    1913087877,
    83908371,
    2512341634,
    3803740692,
    2075208622,
    213261112,
    2463272603,
    3855990285,
    2094854071,
    198958881,
    2262029012,
    4057260610,
    1759359992,
    534414190,
    2176718541,
    4139329115,
    1873836001,
    414664567,
    2282248934,
    4279200368,
    1711684554,
    285281116,
    2405801727,
    4167216745,
    1634467795,
    376229701,
    2685067896,
    3608007406,
    1308918612,
    956543938,
    2808555105,
    3495958263,
    1231636301,
    1047427035,
    2932959818,
    3654703836,
    1088359270,
    936918e3,
    2847714899,
    3736837829,
    1202900863,
    817233897,
    3183342108,
    3401237130,
    1404277552,
    615818150,
    3134207493,
    3453421203,
    1423857449,
    601450431,
    3009837614,
    3294710456,
    1567103746,
    711928724,
    3020668471,
    3272380065,
    1510334235,
    755167117
  ];
  if (typeof Int32Array !== "undefined") {
    TABLE = new Int32Array(TABLE);
  }
  var crc = (current, previous) => {
    let crc2 = previous === 0 ? 0 : ~~previous ^ -1;
    for (let index2 = 0; index2 < current.length; index2++) {
      crc2 = TABLE[(crc2 ^ current[index2]) & 255] ^ crc2 >>> 8;
    }
    return crc2 ^ -1;
  };
  var LEN_SIZE = 4;
  var CRC_SIZE = 4;
  var PngHelpers = class _PngHelpers {
    static isPng(view, offset4) {
      if (view.getUint8(offset4 + 0) === 137 && view.getUint8(offset4 + 1) === 80 && view.getUint8(offset4 + 2) === 78 && view.getUint8(offset4 + 3) === 71 && view.getUint8(offset4 + 4) === 13 && view.getUint8(offset4 + 5) === 10 && view.getUint8(offset4 + 6) === 26 && view.getUint8(offset4 + 7) === 10) {
        return true;
      }
      return false;
    }
    static getChunkType(view, offset4) {
      return [
        String.fromCharCode(view.getUint8(offset4)),
        String.fromCharCode(view.getUint8(offset4 + 1)),
        String.fromCharCode(view.getUint8(offset4 + 2)),
        String.fromCharCode(view.getUint8(offset4 + 3))
      ].join("");
    }
    static readChunks(view, offset4 = 0) {
      const chunks = {};
      if (!_PngHelpers.isPng(view, offset4)) {
        throw new Error("Not a PNG");
      }
      offset4 += 8;
      while (offset4 <= view.buffer.byteLength) {
        const start = offset4;
        const len = view.getInt32(offset4);
        offset4 += 4;
        const chunkType = _PngHelpers.getChunkType(view, offset4);
        if (chunkType === "IDAT" && chunks[chunkType]) {
          offset4 += len + LEN_SIZE + CRC_SIZE;
          continue;
        }
        if (chunkType === "IEND") {
          break;
        }
        chunks[chunkType] = {
          start,
          dataOffset: offset4 + 4,
          size: len
        };
        offset4 += len + LEN_SIZE + CRC_SIZE;
      }
      return chunks;
    }
    static parsePhys(view, offset4) {
      return {
        ppux: view.getUint32(offset4),
        ppuy: view.getUint32(offset4 + 4),
        unit: view.getUint8(offset4 + 4)
      };
    }
    static findChunk(view, type) {
      const chunks = _PngHelpers.readChunks(view);
      return chunks[type];
    }
    static setPhysChunk(view, dpr = 1, options) {
      let offset4 = 46;
      let size4 = 0;
      const res1 = _PngHelpers.findChunk(view, "pHYs");
      if (res1) {
        offset4 = res1.start;
        size4 = res1.size;
      }
      const res2 = _PngHelpers.findChunk(view, "IDAT");
      if (res2) {
        offset4 = res2.start;
        size4 = 0;
      }
      const pHYsData = new ArrayBuffer(21);
      const pHYsDataView = new DataView(pHYsData);
      pHYsDataView.setUint32(0, 9);
      pHYsDataView.setUint8(4, "p".charCodeAt(0));
      pHYsDataView.setUint8(5, "H".charCodeAt(0));
      pHYsDataView.setUint8(6, "Y".charCodeAt(0));
      pHYsDataView.setUint8(7, "s".charCodeAt(0));
      const DPI_96 = 2835.5;
      pHYsDataView.setInt32(8, DPI_96 * dpr);
      pHYsDataView.setInt32(12, DPI_96 * dpr);
      pHYsDataView.setInt8(16, 1);
      const crcBit = new Uint8Array(pHYsData.slice(4, 17));
      pHYsDataView.setInt32(17, crc(crcBit));
      const startBuf = view.buffer.slice(0, offset4);
      const endBuf = view.buffer.slice(offset4 + size4);
      return new Blob([startBuf, pHYsData, endBuf], options);
    }
  };

  // node_modules/@tldraw/utils/dist-esm/lib/media/webp.mjs
  function isWebp(view) {
    if (!view || view.length < 12) {
      return false;
    }
    return view[8] === 87 && view[9] === 69 && view[10] === 66 && view[11] === 80;
  }
  function isWebpAnimated(buffer) {
    const view = new Uint8Array(buffer);
    if (!isWebp(view)) {
      return false;
    }
    if (!view || view.length < 21) {
      return false;
    }
    return (view[20] >> 1 & 1) === 1;
  }

  // node_modules/@tldraw/utils/dist-esm/lib/media/media.mjs
  var DEFAULT_SUPPORTED_VECTOR_IMAGE_TYPES = Object.freeze(["image/svg+xml"]);
  var DEFAULT_SUPPORTED_STATIC_IMAGE_TYPES = Object.freeze([
    "image/jpeg",
    "image/png",
    "image/webp"
  ]);
  var DEFAULT_SUPPORTED_ANIMATED_IMAGE_TYPES = Object.freeze([
    "image/gif",
    "image/apng",
    "image/avif"
  ]);
  var DEFAULT_SUPPORTED_IMAGE_TYPES = Object.freeze([
    ...DEFAULT_SUPPORTED_STATIC_IMAGE_TYPES,
    ...DEFAULT_SUPPORTED_VECTOR_IMAGE_TYPES,
    ...DEFAULT_SUPPORTED_ANIMATED_IMAGE_TYPES
  ]);
  var DEFAULT_SUPPORT_VIDEO_TYPES = Object.freeze([
    "video/mp4",
    "video/webm",
    "video/quicktime"
  ]);
  var DEFAULT_SUPPORTED_MEDIA_TYPE_LIST = [
    ...DEFAULT_SUPPORTED_IMAGE_TYPES,
    ...DEFAULT_SUPPORT_VIDEO_TYPES
  ].join(",");
  var MediaHelpers = class _MediaHelpers {
    /**
     * Load a video from a url.
     * @public
     */
    static loadVideo(src) {
      return new Promise((resolve, reject) => {
        const video = document.createElement("video");
        video.onloadeddata = () => resolve(video);
        video.onerror = (e) => {
          console.error(e);
          reject(new Error("Could not load video"));
        };
        video.crossOrigin = "anonymous";
        video.src = src;
      });
    }
    static async getVideoFrameAsDataUrl(video, time2 = 0) {
      const promise = promiseWithResolve();
      let didSetTime = false;
      const onReadyStateChanged = () => {
        if (!didSetTime) {
          if (video.readyState >= video.HAVE_METADATA) {
            didSetTime = true;
            video.currentTime = time2;
          } else {
            return;
          }
        }
        if (video.readyState >= video.HAVE_CURRENT_DATA) {
          const canvas = document.createElement("canvas");
          canvas.width = video.videoWidth;
          canvas.height = video.videoHeight;
          const ctx = canvas.getContext("2d");
          if (!ctx) {
            throw new Error("Could not get 2d context");
          }
          ctx.drawImage(video, 0, 0);
          promise.resolve(canvas.toDataURL());
        }
      };
      const onError = (e) => {
        console.error(e);
        promise.reject(new Error("Could not get video frame"));
      };
      video.addEventListener("loadedmetadata", onReadyStateChanged);
      video.addEventListener("loadeddata", onReadyStateChanged);
      video.addEventListener("canplay", onReadyStateChanged);
      video.addEventListener("seeked", onReadyStateChanged);
      video.addEventListener("error", onError);
      video.addEventListener("stalled", onError);
      onReadyStateChanged();
      try {
        return await promise;
      } finally {
        video.removeEventListener("loadedmetadata", onReadyStateChanged);
        video.removeEventListener("loadeddata", onReadyStateChanged);
        video.removeEventListener("canplay", onReadyStateChanged);
        video.removeEventListener("seeked", onReadyStateChanged);
        video.removeEventListener("error", onError);
        video.removeEventListener("stalled", onError);
      }
    }
    /**
     * Load an image from a url.
     * @public
     */
    static loadImage(src) {
      return new Promise((resolve, reject) => {
        const img = Image();
        img.onload = () => resolve(img);
        img.onerror = (e) => {
          console.error(e);
          reject(new Error("Could not load image"));
        };
        img.crossOrigin = "anonymous";
        img.referrerPolicy = "strict-origin-when-cross-origin";
        img.src = src;
      });
    }
    /**
     * Get the size of a video blob
     *
     * @param blob - A SharedBlob containing the video
     * @public
     */
    static async getVideoSize(blob) {
      return _MediaHelpers.usingObjectURL(blob, async (url) => {
        const video = await _MediaHelpers.loadVideo(url);
        return { w: video.videoWidth, h: video.videoHeight };
      });
    }
    /**
     * Get the size of an image blob
     *
     * @param blob - A Blob containing the image.
     * @public
     */
    static async getImageSize(blob) {
      const image = await _MediaHelpers.usingObjectURL(blob, _MediaHelpers.loadImage);
      try {
        if (blob.type === "image/png") {
          const view = new DataView(await blob.arrayBuffer());
          if (PngHelpers.isPng(view, 0)) {
            const physChunk = PngHelpers.findChunk(view, "pHYs");
            if (physChunk) {
              const physData = PngHelpers.parsePhys(view, physChunk.dataOffset);
              if (physData.unit === 0 && physData.ppux === physData.ppuy) {
                const pixelRatio = Math.max(physData.ppux / 2834.5, 1);
                return {
                  w: Math.round(image.naturalWidth / pixelRatio),
                  h: Math.round(image.naturalHeight / pixelRatio)
                };
              }
            }
          }
        }
      } catch (err) {
        console.error(err);
        return { w: image.naturalWidth, h: image.naturalHeight };
      }
      return { w: image.naturalWidth, h: image.naturalHeight };
    }
    static async isAnimated(file) {
      if (file.type === "image/gif") {
        return isGifAnimated(await file.arrayBuffer());
      }
      if (file.type === "image/avif") {
        return isAvifAnimated(await file.arrayBuffer());
      }
      if (file.type === "image/webp") {
        return isWebpAnimated(await file.arrayBuffer());
      }
      if (file.type === "image/apng") {
        return isApngAnimated(await file.arrayBuffer());
      }
      return false;
    }
    static isAnimatedImageType(mimeType) {
      return DEFAULT_SUPPORTED_ANIMATED_IMAGE_TYPES.includes(mimeType || "");
    }
    static isStaticImageType(mimeType) {
      return DEFAULT_SUPPORTED_STATIC_IMAGE_TYPES.includes(mimeType || "");
    }
    static isVectorImageType(mimeType) {
      return DEFAULT_SUPPORTED_VECTOR_IMAGE_TYPES.includes(mimeType || "");
    }
    static isImageType(mimeType) {
      return DEFAULT_SUPPORTED_IMAGE_TYPES.includes(mimeType);
    }
    static async usingObjectURL(blob, fn) {
      const url = URL.createObjectURL(blob);
      try {
        return await fn(url);
      } finally {
        URL.revokeObjectURL(url);
      }
    }
  };

  // node_modules/@tldraw/utils/dist-esm/lib/number.mjs
  function lerp(a, b, t2) {
    return a + (b - a) * t2;
  }
  function rng(seed = "") {
    let x = 0;
    let y = 0;
    let z = 0;
    let w = 0;
    function next() {
      const t2 = x ^ x << 11;
      x = y;
      y = z;
      z = w;
      w ^= (w >>> 19 ^ t2 ^ t2 >>> 8) >>> 0;
      return w / 4294967296 * 2;
    }
    for (let k = 0; k < seed.length + 64; k++) {
      x ^= seed.charCodeAt(k) | 0;
      next();
    }
    return next;
  }
  function modulate(value, rangeA, rangeB, clamp5 = false) {
    const [fromLow, fromHigh] = rangeA;
    const [v0, v1] = rangeB;
    const result = v0 + (value - fromLow) / (fromHigh - fromLow) * (v1 - v0);
    return clamp5 ? v0 < v1 ? Math.max(Math.min(result, v1), v0) : Math.max(Math.min(result, v0), v1) : result;
  }

  // node_modules/@tldraw/utils/dist-esm/lib/object.mjs
  function hasOwnProperty(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  }
  function getOwnProperty(obj, key) {
    if (!hasOwnProperty(obj, key)) {
      return void 0;
    }
    return obj[key];
  }
  function objectMapKeys(object2) {
    return Object.keys(object2);
  }
  function objectMapValues(object2) {
    return Object.values(object2);
  }
  function objectMapEntries(object2) {
    return Object.entries(object2);
  }
  function objectMapFromEntries(entries) {
    return Object.fromEntries(entries);
  }
  function filterEntries(object2, predicate) {
    const result = {};
    let didChange = false;
    for (const [key, value] of objectMapEntries(object2)) {
      if (predicate(key, value)) {
        result[key] = value;
      } else {
        didChange = true;
      }
    }
    return didChange ? result : object2;
  }
  function mapObjectMapValues(object2, mapper) {
    const result = {};
    for (const [key, value] of objectMapEntries(object2)) {
      const newValue = mapper(key, value);
      result[key] = newValue;
    }
    return result;
  }
  function areObjectsShallowEqual(obj1, obj2) {
    if (obj1 === obj2) return true;
    const keys1 = new Set(Object.keys(obj1));
    const keys2 = new Set(Object.keys(obj2));
    if (keys1.size !== keys2.size) return false;
    for (const key of keys1) {
      if (!keys2.has(key)) return false;
      if (!Object.is(obj1[key], obj2[key])) return false;
    }
    return true;
  }

  // node_modules/fractional-indexing-jittered/lib/index.js
  function indexCharacterSet(options) {
    const dicts = createCharSetDicts(options.chars);
    const limits = integerLimits(
      dicts,
      options.firstPositive,
      options.mostPositive,
      options.mostNegative
    );
    const jitterRange = options.jitterRange ?? Math.floor(Math.pow(dicts.length, 3) / 5);
    const paddingRange = paddingDict(jitterRange, dicts.length);
    return {
      chars: options.chars,
      byChar: dicts.byChar,
      byCode: dicts.byCode,
      length: dicts.length,
      first: dicts.byCode[0],
      last: dicts.byCode[dicts.length - 1],
      firstPositive: limits.firstPositive,
      mostPositive: limits.mostPositive,
      firstNegative: limits.firstNegative,
      mostNegative: limits.mostNegative,
      jitterRange,
      paddingDict: paddingRange
    };
  }
  function createCharSetDicts(charSet) {
    const byCode = {};
    const byChar = {};
    const length = charSet.length;
    for (let i = 0; i < length; i++) {
      const char = charSet[i];
      byCode[i] = char;
      byChar[char] = i;
    }
    return {
      byCode,
      byChar,
      length
    };
  }
  function integerLimits(dicts, firstPositive, mostPositive, mostNegative) {
    const firstPositiveIndex = firstPositive ? dicts.byChar[firstPositive] : Math.ceil(dicts.length / 2);
    const mostPositiveIndex = mostPositive ? dicts.byChar[mostPositive] : dicts.length - 1;
    const mostNegativeIndex = mostNegative ? dicts.byChar[mostNegative] : 0;
    if (firstPositiveIndex === void 0 || mostPositiveIndex === void 0 || mostNegativeIndex === void 0) {
      throw new Error("invalid charSet");
    }
    if (mostPositiveIndex - firstPositiveIndex < 3) {
      throw new Error(
        "mostPositive must be at least 3 characters away from neutral"
      );
    }
    if (firstPositiveIndex - mostNegativeIndex < 3) {
      throw new Error(
        "mostNegative must be at least 3 characters away from neutral"
      );
    }
    return {
      firstPositive: dicts.byCode[firstPositiveIndex],
      mostPositive: dicts.byCode[mostPositiveIndex],
      firstNegative: dicts.byCode[firstPositiveIndex - 1],
      mostNegative: dicts.byCode[mostNegativeIndex]
    };
  }
  function paddingDict(jitterRange, charSetLength) {
    const paddingDict2 = {};
    let distance = 0;
    for (let i = 0; i < 100; i++) {
      paddingDict2[i] = Math.pow(charSetLength, i);
      if (paddingDict2[i] > jitterRange) {
        break;
      }
    }
    return paddingDict2;
  }
  var _base62CharSet = null;
  function base62CharSet() {
    if (_base62CharSet)
      return _base62CharSet;
    return _base62CharSet = indexCharacterSet({
      // Base62 are all the alphanumeric characters, database and user friendly
      // For shorter strings and more room you could opt for more characters
      chars: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
      // This gives us nice human readable keys to start with a0 a1 etc
      firstPositive: "a",
      mostPositive: "z",
      mostNegative: "A"
    });
  }
  function distanceBetween(a, b, charSet) {
    const indexA = charSet.byChar[a];
    const indexB = charSet.byChar[b];
    return Math.abs(indexA - indexB);
  }
  function integerLength(head, charSet) {
    const firstChar = head[0];
    if (firstChar > charSet.mostPositive || firstChar < charSet.mostNegative) {
      throw new Error("invalid firstChar on key");
    }
    if (firstChar === charSet.mostPositive) {
      const firstLevel = distanceBetween(firstChar, charSet.firstPositive, charSet) + 1;
      return firstLevel + integerLengthFromSecondLevel(head.slice(1), "positive", charSet);
    }
    if (firstChar === charSet.mostNegative) {
      const firstLevel = distanceBetween(firstChar, charSet.firstNegative, charSet) + 1;
      return firstLevel + integerLengthFromSecondLevel(head.slice(1), "negative", charSet);
    }
    const isPositiveRange = firstChar >= charSet.firstPositive;
    if (isPositiveRange) {
      return distanceBetween(firstChar, charSet.firstPositive, charSet) + 2;
    } else {
      return distanceBetween(firstChar, charSet.firstNegative, charSet) + 2;
    }
  }
  function integerLengthFromSecondLevel(key, direction, charSet) {
    const firstChar = key[0];
    if (firstChar > charSet.mostPositive || firstChar < charSet.mostNegative) {
      throw new Error("invalid firstChar on key");
    }
    if (firstChar === charSet.mostPositive && direction === "positive") {
      const totalPositiveRoom = distanceBetween(firstChar, charSet.mostNegative, charSet) + 1;
      return totalPositiveRoom + integerLengthFromSecondLevel(key.slice(1), direction, charSet);
    }
    if (firstChar === charSet.mostNegative && direction === "negative") {
      const totalNegativeRoom = distanceBetween(firstChar, charSet.mostPositive, charSet) + 1;
      return totalNegativeRoom + integerLengthFromSecondLevel(key.slice(1), direction, charSet);
    }
    if (direction === "positive") {
      return distanceBetween(firstChar, charSet.mostNegative, charSet) + 2;
    } else {
      return distanceBetween(firstChar, charSet.mostPositive, charSet) + 2;
    }
  }
  function makeSameLength(a, b, pad, fillChar, forceLength) {
    const max2 = forceLength ?? Math.max(a.length, b.length);
    if (pad === "start") {
      return [a.padStart(max2, fillChar), b.padStart(max2, fillChar)];
    }
    return [a.padEnd(max2, fillChar), b.padEnd(max2, fillChar)];
  }
  function midPoint(lower, upper, charSet) {
    let [paddedLower, paddedUpper] = makeSameLength(
      lower,
      upper,
      "end",
      charSet.first
    );
    let distance = lexicalDistance(paddedLower, paddedUpper, charSet);
    if (distance === 1) {
      paddedLower = paddedLower.padEnd(paddedLower.length + 1, charSet.first);
      distance = charSet.length;
    }
    const mid = encodeToCharSet(Math.floor(distance / 2), charSet);
    return addCharSetKeys(paddedLower, mid, charSet);
  }
  function lexicalDistance(a, b, charSet) {
    const [lower, upper] = makeSameLength(a, b, "end", charSet.first).sort();
    const distance = subtractCharSetKeys(upper, lower, charSet);
    return decodeCharSetToNumber(distance, charSet);
  }
  function addCharSetKeys(a, b, charSet) {
    const base = charSet.length;
    const [paddedA, paddedB] = makeSameLength(a, b, "start", charSet.first);
    const result = [];
    let carry = 0;
    for (let i = paddedA.length - 1; i >= 0; i--) {
      const digitA = charSet.byChar[paddedA[i]];
      const digitB = charSet.byChar[paddedB[i]];
      const sum = digitA + digitB + carry;
      carry = Math.floor(sum / base);
      const remainder = sum % base;
      result.unshift(charSet.byCode[remainder]);
    }
    if (carry > 0) {
      result.unshift(charSet.byCode[carry]);
    }
    return result.join("");
  }
  function subtractCharSetKeys(a, b, charSet) {
    const base = charSet.length;
    const [paddedA, paddedB] = makeSameLength(a, b, "start", charSet.first);
    const result = [];
    let borrow = 0;
    for (let i = paddedA.length - 1; i >= 0; i--) {
      let digitA = charSet.byChar[paddedA[i]];
      const digitB = charSet.byChar[paddedB[i]] + borrow;
      if (digitA < digitB) {
        borrow = 1;
        digitA += base;
      } else {
        borrow = 0;
      }
      const difference = digitA - digitB;
      result.unshift(charSet.byCode[difference]);
    }
    if (borrow > 0) {
      throw new Error(
        "Subtraction result is negative. Ensure a is greater than or equal to b."
      );
    }
    while (result.length > 1 && result[0] === charSet.byCode[0]) {
      result.shift();
    }
    return result.join("");
  }
  function incrementKey(key, charSet) {
    return addCharSetKeys(key, charSet.byCode[1], charSet);
  }
  function decrementKey(key, charSet) {
    return subtractCharSetKeys(key, charSet.byCode[1], charSet);
  }
  function encodeToCharSet(int, charSet) {
    if (int === 0) {
      return charSet.byCode[0];
    }
    let res = "";
    const max2 = charSet.length;
    while (int > 0) {
      res = charSet.byCode[int % max2] + res;
      int = Math.floor(int / max2);
    }
    return res;
  }
  function decodeCharSetToNumber(key, charSet) {
    let res = 0;
    const length = key.length;
    const max2 = charSet.length;
    for (let i = 0; i < length; i++) {
      res += charSet.byChar[key[i]] * Math.pow(max2, length - i - 1);
    }
    return res;
  }
  function startKey(charSet) {
    return charSet.firstPositive + charSet.byCode[0];
  }
  function validInteger(integer2, charSet) {
    const length = integerLength(integer2, charSet);
    return length === integer2.length;
  }
  function validateOrderKey(orderKey, charSet) {
    getIntegerPart(orderKey, charSet);
  }
  function getIntegerPart(orderKey, charSet) {
    const head = integerHead(orderKey, charSet);
    const integerPartLength = integerLength(head, charSet);
    if (integerPartLength > orderKey.length) {
      throw new Error("invalid order key length: " + orderKey);
    }
    return orderKey.slice(0, integerPartLength);
  }
  function validateInteger(integer2, charSet) {
    if (!validInteger(integer2, charSet)) {
      throw new Error("invalid integer length: " + integer2);
    }
  }
  function incrementInteger(integer2, charSet) {
    validateInteger(integer2, charSet);
    const [head, digs] = splitInteger(integer2, charSet);
    const anyNonMaxedDigit = digs.split("").some((d) => d !== charSet.byCode[charSet.length - 1]);
    if (anyNonMaxedDigit) {
      const newDigits = incrementKey(digs, charSet);
      return head + newDigits;
    }
    const nextHead = incrementIntegerHead(head, charSet);
    return startOnNewHead(nextHead, "lower", charSet);
  }
  function decrementInteger(integer2, charSet) {
    validateInteger(integer2, charSet);
    const [head, digs] = splitInteger(integer2, charSet);
    const anyNonLimitDigit = digs.split("").some((d) => d !== charSet.byCode[0]);
    if (anyNonLimitDigit) {
      const newDigits = decrementKey(digs, charSet);
      return head + newDigits;
    }
    const nextHead = decrementIntegerHead(head, charSet);
    return startOnNewHead(nextHead, "upper", charSet);
  }
  function integerHead(integer2, charSet) {
    let i = 0;
    if (integer2[0] === charSet.mostPositive) {
      while (integer2[i] === charSet.mostPositive) {
        i = i + 1;
      }
    }
    if (integer2[0] === charSet.mostNegative) {
      while (integer2[i] === charSet.mostNegative) {
        i = i + 1;
      }
    }
    return integer2.slice(0, i + 1);
  }
  function splitInteger(integer2, charSet) {
    const head = integerHead(integer2, charSet);
    const tail = integer2.slice(head.length);
    return [head, tail];
  }
  function incrementIntegerHead(head, charSet) {
    const inPositiveRange = head >= charSet.firstPositive;
    const nextHead = incrementKey(head, charSet);
    const headIsLimitMax = head[head.length - 1] === charSet.mostPositive;
    const nextHeadIsLimitMax = nextHead[nextHead.length - 1] === charSet.mostPositive;
    if (inPositiveRange && nextHeadIsLimitMax) {
      return nextHead + charSet.mostNegative;
    }
    if (!inPositiveRange && headIsLimitMax) {
      return head.slice(0, head.length - 1);
    }
    return nextHead;
  }
  function decrementIntegerHead(head, charSet) {
    const inPositiveRange = head >= charSet.firstPositive;
    const headIsLimitMin = head[head.length - 1] === charSet.mostNegative;
    if (inPositiveRange && headIsLimitMin) {
      const nextLevel = head.slice(0, head.length - 1);
      return decrementKey(nextLevel, charSet);
    }
    if (!inPositiveRange && headIsLimitMin) {
      return head + charSet.mostPositive;
    }
    return decrementKey(head, charSet);
  }
  function startOnNewHead(head, limit, charSet) {
    const newLength = integerLength(head, charSet);
    const fillChar = limit === "upper" ? charSet.byCode[charSet.length - 1] : charSet.byCode[0];
    return head + fillChar.repeat(newLength - head.length);
  }
  function jitterString(orderKey, charSet) {
    const shift4 = encodeToCharSet(
      Math.floor(Math.random() * charSet.jitterRange),
      charSet
    );
    return addCharSetKeys(orderKey, shift4, charSet);
  }
  function padAndJitterString(orderKey, numberOfChars, charSet) {
    const paddedKey = orderKey.padEnd(
      orderKey.length + numberOfChars,
      charSet.first
    );
    return jitterString(paddedKey, charSet);
  }
  function paddingNeededForJitter(orderKey, b, charSet) {
    const integer2 = getIntegerPart(orderKey, charSet);
    const nextInteger = incrementInteger(integer2, charSet);
    let needed = 0;
    if (b !== null) {
      const distanceToB = lexicalDistance(orderKey, b, charSet);
      if (distanceToB < charSet.jitterRange + 1) {
        needed = Math.max(needed, paddingNeededForDistance(distanceToB, charSet));
      }
    }
    const distanceToNextInteger = lexicalDistance(orderKey, nextInteger, charSet);
    if (distanceToNextInteger < charSet.jitterRange + 1) {
      needed = Math.max(
        needed,
        paddingNeededForDistance(distanceToNextInteger, charSet)
      );
    }
    return needed;
  }
  function paddingNeededForDistance(distance, charSet) {
    const gap = charSet.jitterRange - distance;
    const firstBigger = Object.entries(charSet.paddingDict).find(
      ([_key, value]) => {
        return value > gap;
      }
    );
    return firstBigger ? parseInt(firstBigger[0]) : 0;
  }
  function generateKeyBetween(lower, upper, charSet = base62CharSet()) {
    if (lower !== null) {
      validateOrderKey(lower, charSet);
    }
    if (upper !== null) {
      validateOrderKey(upper, charSet);
    }
    if (lower === null && upper === null) {
      return startKey(charSet);
    }
    if (lower === null) {
      const integer2 = getIntegerPart(upper, charSet);
      return decrementInteger(integer2, charSet);
    }
    if (upper === null) {
      const integer2 = getIntegerPart(lower, charSet);
      return incrementInteger(integer2, charSet);
    }
    if (lower >= upper) {
      throw new Error(lower + " >= " + upper);
    }
    return midPoint(lower, upper, charSet);
  }
  function generateJitteredKeyBetween(lower, upper, charSet = base62CharSet()) {
    const key = generateKeyBetween(lower, upper, charSet);
    const paddingNeeded = paddingNeededForJitter(key, upper, charSet);
    if (paddingNeeded) {
      return padAndJitterString(key, paddingNeeded, charSet);
    }
    return jitterString(key, charSet);
  }
  function generateNJitteredKeysBetween(lower, upper, n, charSet = base62CharSet()) {
    return spreadGeneratorResults(
      lower,
      upper,
      n,
      charSet,
      generateJitteredKeyBetween,
      generateNJitteredKeysBetween
    );
  }
  function spreadGeneratorResults(lower, upper, n, charSet, generateKey, generateNKeys) {
    if (n === 0) {
      return [];
    }
    if (n === 1) {
      return [generateKey(lower, upper, charSet)];
    }
    if (upper == null) {
      let newUpper = generateKey(lower, upper, charSet);
      const result = [newUpper];
      for (let i = 0; i < n - 1; i++) {
        newUpper = generateKey(newUpper, upper, charSet);
        result.push(newUpper);
      }
      return result;
    }
    if (lower == null) {
      let newLower = generateKey(lower, upper, charSet);
      const result = [newLower];
      for (let i = 0; i < n - 1; i++) {
        newLower = generateKey(lower, newLower, charSet);
        result.push(newLower);
      }
      result.reverse();
      return result;
    }
    const mid = Math.floor(n / 2);
    const midOrderKey = generateKey(lower, upper, charSet);
    return [
      ...generateNKeys(lower, midOrderKey, mid, charSet),
      midOrderKey,
      ...generateNKeys(midOrderKey, upper, n - mid - 1, charSet)
    ];
  }

  // node_modules/@tldraw/utils/dist-esm/lib/reordering.mjs
  var generateKeysFn = false ? generateNKeysBetween : generateNJitteredKeysBetween;
  var ZERO_INDEX_KEY = "a0";
  function validateIndexKey(index2) {
    try {
      generateJitteredKeyBetween(index2, null);
    } catch {
      throw new Error("invalid index: " + index2);
    }
  }
  function getIndicesBetween(below, above, n) {
    return generateKeysFn(below ?? null, above ?? null, n);
  }
  function getIndicesAbove(below, n) {
    return generateKeysFn(below ?? null, null, n);
  }
  function getIndexBetween(below, above) {
    return generateKeysFn(below ?? null, above ?? null, 1)[0];
  }
  function getIndexAbove(below = null) {
    return generateKeysFn(below, null, 1)[0];
  }
  function getIndexBelow(above = null) {
    return generateKeysFn(null, above, 1)[0];
  }
  function getIndices(n, start = "a1") {
    return [start, ...generateKeysFn(start, null, n)];
  }
  function sortByIndex(a, b) {
    if (a.index < b.index) {
      return -1;
    } else if (a.index > b.index) {
      return 1;
    }
    return 0;
  }

  // node_modules/@tldraw/utils/dist-esm/lib/sort.mjs
  function sortById(a, b) {
    return a.id > b.id ? 1 : -1;
  }

  // node_modules/@tldraw/utils/dist-esm/lib/storage.mjs
  function getFromLocalStorage(key) {
    try {
      return localStorage.getItem(key);
    } catch {
      return null;
    }
  }
  function setInLocalStorage(key, value) {
    try {
      localStorage.setItem(key, value);
    } catch {
    }
  }
  function clearLocalStorage() {
    try {
      localStorage.clear();
    } catch {
    }
  }
  function getFromSessionStorage(key) {
    try {
      return sessionStorage.getItem(key);
    } catch {
      return null;
    }
  }
  function setInSessionStorage(key, value) {
    try {
      sessionStorage.setItem(key, value);
    } catch {
    }
  }
  function deleteFromSessionStorage(key) {
    try {
      sessionStorage.removeItem(key);
    } catch {
    }
  }
  function clearSessionStorage() {
    try {
      sessionStorage.clear();
    } catch {
    }
  }

  // node_modules/@tldraw/utils/dist-esm/lib/throttle.mjs
  var isTest = () => typeof process !== "undefined" && false;
  var fpsQueue = [];
  var targetFps = 60;
  var targetTimePerFrame = Math.ceil(1e3 / targetFps);
  var frame;
  var time = 0;
  var last2 = 0;
  var flush = () => {
    const queue = fpsQueue.splice(0, fpsQueue.length);
    for (const fn of queue) {
      fn();
    }
  };
  function tick() {
    if (frame) {
      return;
    }
    const now = Date.now();
    const elapsed = now - last2;
    if (time + elapsed < targetTimePerFrame) {
      frame = requestAnimationFrame(() => {
        frame = void 0;
        tick();
      });
      return;
    }
    frame = requestAnimationFrame(() => {
      frame = void 0;
      last2 = now;
      time = Math.min(time + elapsed - targetTimePerFrame, targetTimePerFrame * 10);
      flush();
    });
  }
  var started = false;
  function throttleToNextFrame(fn) {
    if (isTest()) {
      fn();
      return () => {
      };
    }
    if (!fpsQueue.includes(fn)) {
      fpsQueue.push(fn);
      if (!started) {
        started = true;
        last2 = Date.now() - targetTimePerFrame - 1;
      }
      tick();
    }
    return () => {
      const index2 = fpsQueue.indexOf(fn);
      if (index2 > -1) {
        fpsQueue.splice(index2, 1);
      }
    };
  }

  // node_modules/@tldraw/utils/dist-esm/lib/timers.mjs
  var Timers = class {
    timeouts = /* @__PURE__ */ new Map();
    intervals = /* @__PURE__ */ new Map();
    rafs = /* @__PURE__ */ new Map();
    constructor() {
      this.setTimeout = this.setTimeout.bind(this);
      this.setInterval = this.setInterval.bind(this);
      this.requestAnimationFrame = this.requestAnimationFrame.bind(this);
      this.dispose = this.dispose.bind(this);
    }
    /** @public */
    setTimeout(contextId, handler, timeout, ...args) {
      const id = window.setTimeout(handler, timeout, args);
      const current = this.timeouts.get(contextId) ?? [];
      this.timeouts.set(contextId, [...current, id]);
      return id;
    }
    /** @public */
    setInterval(contextId, handler, timeout, ...args) {
      const id = window.setInterval(handler, timeout, args);
      const current = this.intervals.get(contextId) ?? [];
      this.intervals.set(contextId, [...current, id]);
      return id;
    }
    /** @public */
    requestAnimationFrame(contextId, callback) {
      const id = window.requestAnimationFrame(callback);
      const current = this.rafs.get(contextId) ?? [];
      this.rafs.set(contextId, [...current, id]);
      return id;
    }
    /** @public */
    dispose(contextId) {
      this.timeouts.get(contextId)?.forEach((id) => clearTimeout(id));
      this.intervals.get(contextId)?.forEach((id) => clearInterval(id));
      this.rafs.get(contextId)?.forEach((id) => cancelAnimationFrame(id));
      this.timeouts.delete(contextId);
      this.intervals.delete(contextId);
      this.rafs.delete(contextId);
    }
    disposeAll() {
      for (const contextId of this.timeouts.keys()) {
        this.dispose(contextId);
      }
    }
    forContext(contextId) {
      return {
        setTimeout: (handler, timeout, ...args) => this.setTimeout(contextId, handler, timeout, args),
        setInterval: (handler, timeout, ...args) => this.setInterval(contextId, handler, timeout, args),
        requestAnimationFrame: (callback) => this.requestAnimationFrame(contextId, callback),
        dispose: () => this.dispose(contextId)
      };
    }
  };

  // node_modules/@tldraw/utils/dist-esm/lib/url.mjs
  var safeParseUrl = (url, baseUrl) => {
    try {
      return new URL(url, baseUrl);
    } catch {
      return;
    }
  };

  // node_modules/@tldraw/utils/dist-esm/lib/value.mjs
  function isDefined(value) {
    return value !== void 0;
  }
  function getStructuredClone() {
    if (typeof globalThis !== "undefined" && globalThis.structuredClone) {
      return [globalThis.structuredClone, true];
    }
    if (typeof global !== "undefined" && global.structuredClone) {
      return [global.structuredClone, true];
    }
    if (typeof window !== "undefined" && window.structuredClone) {
      return [window.structuredClone, true];
    }
    return [(i) => i ? JSON.parse(JSON.stringify(i)) : i, false];
  }
  var _structuredClone = getStructuredClone();
  var structuredClone = _structuredClone[0];
  var isNativeStructuredClone = _structuredClone[1];
  var STRUCTURED_CLONE_OBJECT_PROTOTYPE = Object.getPrototypeOf(structuredClone({}));

  // node_modules/@tldraw/utils/dist-esm/index.mjs
  registerTldrawLibraryVersion(
    "@tldraw/utils",
    "3.7.2",
    "esm"
  );

  // node_modules/@tldraw/editor/dist-esm/index.mjs
  var import_at = __toESM(require_at2(), 1);
  var import_flat_map = __toESM(require_flat_map2(), 1);
  var import_flat = __toESM(require_flat2(), 1);
  var import_at2 = __toESM(require_at4(), 1);
  var import_replace_all = __toESM(require_replace_all2(), 1);

  // node_modules/@tldraw/state/dist-esm/lib/helpers.mjs
  function isChild(x) {
    return x && typeof x === "object" && "parents" in x;
  }
  function haveParentsChanged(child) {
    for (let i = 0, n = child.parents.length; i < n; i++) {
      child.parents[i].__unsafe__getWithoutCapture(true);
      if (child.parents[i].lastChangedEpoch !== child.parentEpochs[i]) {
        return true;
      }
    }
    return false;
  }
  function detach(parent, child) {
    if (!parent.children.remove(child)) {
      return;
    }
    if (parent.children.isEmpty && isChild(parent)) {
      for (let i = 0, n = parent.parents.length; i < n; i++) {
        detach(parent.parents[i], parent);
      }
    }
  }
  function attach(parent, child) {
    if (!parent.children.add(child)) {
      return;
    }
    if (isChild(parent)) {
      for (let i = 0, n = parent.parents.length; i < n; i++) {
        attach(parent.parents[i], parent);
      }
    }
  }
  function equals(a, b) {
    const shallowEquals = a === b || Object.is(a, b) || Boolean(a && b && typeof a.equals === "function" && a.equals(b));
    return shallowEquals;
  }
  function singleton(key, init) {
    const symbol = Symbol.for(`com.tldraw.state/${key}`);
    const global2 = globalThis;
    global2[symbol] ??= init();
    return global2[symbol];
  }
  var EMPTY_ARRAY = singleton("empty_array", () => Object.freeze([]));

  // node_modules/@tldraw/state/dist-esm/lib/ArraySet.mjs
  var ARRAY_SIZE_THRESHOLD = 8;
  var ArraySet = class {
    arraySize = 0;
    array = Array(ARRAY_SIZE_THRESHOLD);
    set = null;
    /**
     * Get whether this ArraySet has any elements.
     *
     * @returns True if this ArraySet has any elements, false otherwise.
     */
    // eslint-disable-next-line no-restricted-syntax
    get isEmpty() {
      if (this.array) {
        return this.arraySize === 0;
      }
      if (this.set) {
        return this.set.size === 0;
      }
      throw new Error("no set or array");
    }
    /**
     * Add an item to the ArraySet if it is not already present.
     *
     * @param elem - The element to add.
     */
    add(elem) {
      if (this.array) {
        const idx = this.array.indexOf(elem);
        if (idx !== -1) {
          return false;
        }
        if (this.arraySize < ARRAY_SIZE_THRESHOLD) {
          this.array[this.arraySize] = elem;
          this.arraySize++;
          return true;
        } else {
          this.set = new Set(this.array);
          this.array = null;
          this.set.add(elem);
          return true;
        }
      }
      if (this.set) {
        if (this.set.has(elem)) {
          return false;
        }
        this.set.add(elem);
        return true;
      }
      throw new Error("no set or array");
    }
    /**
     * Remove an item from the ArraySet if it is present.
     *
     * @param elem - The element to remove
     */
    remove(elem) {
      if (this.array) {
        const idx = this.array.indexOf(elem);
        if (idx === -1) {
          return false;
        }
        this.array[idx] = void 0;
        this.arraySize--;
        if (idx !== this.arraySize) {
          this.array[idx] = this.array[this.arraySize];
          this.array[this.arraySize] = void 0;
        }
        return true;
      }
      if (this.set) {
        if (!this.set.has(elem)) {
          return false;
        }
        this.set.delete(elem);
        return true;
      }
      throw new Error("no set or array");
    }
    /**
     * Run a callback for each element in the ArraySet.
     *
     * @param visitor - The callback to run for each element.
     */
    visit(visitor) {
      if (this.array) {
        for (let i = 0; i < this.arraySize; i++) {
          const elem = this.array[i];
          if (typeof elem !== "undefined") {
            visitor(elem);
          }
        }
        return;
      }
      if (this.set) {
        this.set.forEach(visitor);
        return;
      }
      throw new Error("no set or array");
    }
    has(elem) {
      if (this.array) {
        return this.array.indexOf(elem) !== -1;
      } else {
        return this.set.has(elem);
      }
    }
    clear() {
      if (this.set) {
        this.set.clear();
      } else {
        this.arraySize = 0;
        this.array = [];
      }
    }
    size() {
      if (this.set) {
        return this.set.size;
      } else {
        return this.arraySize;
      }
    }
  };

  // node_modules/@tldraw/state/dist-esm/lib/types.mjs
  var RESET_VALUE = Symbol.for("com.tldraw.state/RESET_VALUE");

  // node_modules/@tldraw/state/dist-esm/lib/HistoryBuffer.mjs
  var HistoryBuffer = class {
    constructor(capacity) {
      this.capacity = capacity;
      this.buffer = new Array(capacity);
    }
    index = 0;
    // use a wrap around buffer to store the last N values
    buffer;
    /**
     * Add a diff to the history buffer.
     *
     * @param lastComputedEpoch - The epoch when the diff was computed.
     * @param currentEpoch - The current epoch.
     * @param diff - The diff to add, or else a reset value.
     */
    pushEntry(lastComputedEpoch, currentEpoch, diff) {
      if (diff === void 0) {
        return;
      }
      if (diff === RESET_VALUE) {
        this.clear();
        return;
      }
      this.buffer[this.index] = [lastComputedEpoch, currentEpoch, diff];
      this.index = (this.index + 1) % this.capacity;
    }
    /**
     * Clear the history buffer.
     */
    clear() {
      this.index = 0;
      this.buffer.fill(void 0);
    }
    /**
     * Get the diffs since the given epoch.
     *
     * @param sinceEpoch - The epoch to get diffs since.
     * @returns An array of diffs or a flag to reset the history buffer.
     */
    getChangesSince(sinceEpoch) {
      const { index: index2, capacity, buffer } = this;
      for (let i = 0; i < capacity; i++) {
        const offset4 = (index2 - 1 + capacity - i) % capacity;
        const elem = buffer[offset4];
        if (!elem) {
          return RESET_VALUE;
        }
        const [fromEpoch, toEpoch] = elem;
        if (i === 0 && sinceEpoch >= toEpoch) {
          return [];
        }
        if (fromEpoch <= sinceEpoch && sinceEpoch < toEpoch) {
          const len = i + 1;
          const result = new Array(len);
          for (let j = 0; j < len; j++) {
            result[j] = buffer[(offset4 + j) % capacity][2];
          }
          return result;
        }
      }
      return RESET_VALUE;
    }
  };

  // node_modules/@tldraw/state/dist-esm/lib/capture.mjs
  var CaptureStackFrame = class {
    constructor(below, child) {
      this.below = below;
      this.child = child;
    }
    offset = 0;
    maybeRemoved;
  };
  var inst = singleton("capture", () => ({ stack: null }));
  function unsafe__withoutCapture(fn) {
    const oldStack = inst.stack;
    inst.stack = null;
    try {
      return fn();
    } finally {
      inst.stack = oldStack;
    }
  }
  function startCapturingParents(child) {
    inst.stack = new CaptureStackFrame(inst.stack, child);
    child.parentSet.clear();
  }
  function stopCapturingParents() {
    const frame2 = inst.stack;
    inst.stack = frame2.below;
    if (frame2.offset < frame2.child.parents.length) {
      for (let i = frame2.offset; i < frame2.child.parents.length; i++) {
        const maybeRemovedParent = frame2.child.parents[i];
        if (!frame2.child.parentSet.has(maybeRemovedParent)) {
          detach(maybeRemovedParent, frame2.child);
        }
      }
      frame2.child.parents.length = frame2.offset;
      frame2.child.parentEpochs.length = frame2.offset;
    }
    if (frame2.maybeRemoved) {
      for (let i = 0; i < frame2.maybeRemoved.length; i++) {
        const maybeRemovedParent = frame2.maybeRemoved[i];
        if (!frame2.child.parentSet.has(maybeRemovedParent)) {
          detach(maybeRemovedParent, frame2.child);
        }
      }
    }
  }
  function maybeCaptureParent(p) {
    if (inst.stack) {
      const wasCapturedAlready = inst.stack.child.parentSet.has(p);
      if (wasCapturedAlready) {
        return;
      }
      inst.stack.child.parentSet.add(p);
      if (inst.stack.child.isActivelyListening) {
        attach(p, inst.stack.child);
      }
      if (inst.stack.offset < inst.stack.child.parents.length) {
        const maybeRemovedParent = inst.stack.child.parents[inst.stack.offset];
        if (maybeRemovedParent !== p) {
          if (!inst.stack.maybeRemoved) {
            inst.stack.maybeRemoved = [maybeRemovedParent];
          } else {
            inst.stack.maybeRemoved.push(maybeRemovedParent);
          }
        }
      }
      inst.stack.child.parents[inst.stack.offset] = p;
      inst.stack.child.parentEpochs[inst.stack.offset] = p.lastChangedEpoch;
      inst.stack.offset++;
    }
  }

  // node_modules/@tldraw/state/dist-esm/lib/constants.mjs
  var GLOBAL_START_EPOCH = -1;

  // node_modules/@tldraw/state/dist-esm/lib/EffectScheduler.mjs
  var __EffectScheduler__ = class {
    constructor(name, runEffect, options) {
      this.name = name;
      this.runEffect = runEffect;
      this._scheduleEffect = options?.scheduleEffect;
    }
    _isActivelyListening = false;
    /**
     * Whether this scheduler is attached and actively listening to its parents.
     * @public
     */
    // eslint-disable-next-line no-restricted-syntax
    get isActivelyListening() {
      return this._isActivelyListening;
    }
    /** @internal */
    lastTraversedEpoch = GLOBAL_START_EPOCH;
    lastReactedEpoch = GLOBAL_START_EPOCH;
    _scheduleCount = 0;
    /**
     * The number of times this effect has been scheduled.
     * @public
     */
    // eslint-disable-next-line no-restricted-syntax
    get scheduleCount() {
      return this._scheduleCount;
    }
    /** @internal */
    parentSet = new ArraySet();
    /** @internal */
    parentEpochs = [];
    /** @internal */
    parents = [];
    _scheduleEffect;
    /** @internal */
    maybeScheduleEffect() {
      if (!this._isActivelyListening) return;
      if (this.lastReactedEpoch === getGlobalEpoch()) return;
      if (this.parents.length && !haveParentsChanged(this)) {
        this.lastReactedEpoch = getGlobalEpoch();
        return;
      }
      this.scheduleEffect();
    }
    /** @internal */
    scheduleEffect() {
      this._scheduleCount++;
      if (this._scheduleEffect) {
        this._scheduleEffect(this.maybeExecute);
      } else {
        this.execute();
      }
    }
    /** @internal */
    // eslint-disable-next-line local/prefer-class-methods
    maybeExecute = () => {
      if (!this._isActivelyListening) return;
      this.execute();
    };
    /**
     * Makes this scheduler become 'actively listening' to its parents.
     * If it has been executed before it will immediately become eligible to receive 'maybeScheduleEffect' calls.
     * If it has not executed before it will need to be manually executed once to become eligible for scheduling, i.e. by calling [[EffectScheduler.execute]].
     * @public
     */
    attach() {
      this._isActivelyListening = true;
      for (let i = 0, n = this.parents.length; i < n; i++) {
        attach(this.parents[i], this);
      }
    }
    /**
     * Makes this scheduler stop 'actively listening' to its parents.
     * It will no longer be eligible to receive 'maybeScheduleEffect' calls until [[EffectScheduler.attach]] is called again.
     */
    detach() {
      this._isActivelyListening = false;
      for (let i = 0, n = this.parents.length; i < n; i++) {
        detach(this.parents[i], this);
      }
    }
    /**
     * Executes the effect immediately and returns the result.
     * @returns The result of the effect.
     */
    execute() {
      try {
        startCapturingParents(this);
        const currentEpoch = getGlobalEpoch();
        const result = this.runEffect(this.lastReactedEpoch);
        this.lastReactedEpoch = currentEpoch;
        return result;
      } finally {
        stopCapturingParents();
      }
    }
  };
  var EffectScheduler = singleton(
    "EffectScheduler",
    () => __EffectScheduler__
  );
  function react(name, fn, options) {
    const scheduler = new EffectScheduler(name, fn, options);
    scheduler.attach();
    scheduler.scheduleEffect();
    return () => {
      scheduler.detach();
    };
  }
  function reactor(name, fn, options) {
    const scheduler = new EffectScheduler(name, fn, options);
    return {
      scheduler,
      start: (options2) => {
        const force = options2?.force ?? false;
        scheduler.attach();
        if (force) {
          scheduler.scheduleEffect();
        } else {
          scheduler.maybeScheduleEffect();
        }
      },
      stop: () => {
        scheduler.detach();
      }
    };
  }

  // node_modules/@tldraw/state/dist-esm/lib/transactions.mjs
  var Transaction = class {
    constructor(parent) {
      this.parent = parent;
    }
    initialAtomValues = /* @__PURE__ */ new Map();
    /**
     * Get whether this transaction is a root (no parents).
     *
     * @public
     */
    // eslint-disable-next-line no-restricted-syntax
    get isRoot() {
      return this.parent === null;
    }
    /**
     * Commit the transaction's changes.
     *
     * @public
     */
    commit() {
      if (inst2.globalIsReacting) {
        for (const atom2 of this.initialAtomValues.keys()) {
          traverseAtomForCleanup(atom2);
        }
      } else if (this.isRoot) {
        flushChanges(this.initialAtomValues.keys());
      } else {
        this.initialAtomValues.forEach((value, atom2) => {
          if (!this.parent.initialAtomValues.has(atom2)) {
            this.parent.initialAtomValues.set(atom2, value);
          }
        });
      }
    }
    /**
     * Abort the transaction.
     *
     * @public
     */
    abort() {
      inst2.globalEpoch++;
      this.initialAtomValues.forEach((value, atom2) => {
        atom2.set(value);
        atom2.historyBuffer?.clear();
      });
      this.commit();
    }
  };
  var inst2 = singleton("transactions", () => ({
    // The current epoch (global to all atoms).
    globalEpoch: GLOBAL_START_EPOCH + 1,
    // Whether any transaction is reacting.
    globalIsReacting: false,
    currentTransaction: null,
    cleanupReactors: null,
    reactionEpoch: GLOBAL_START_EPOCH + 1
  }));
  function getReactionEpoch() {
    return inst2.reactionEpoch;
  }
  function getGlobalEpoch() {
    return inst2.globalEpoch;
  }
  function getIsReacting() {
    return inst2.globalIsReacting;
  }
  function traverse(reactors, child) {
    if (child.lastTraversedEpoch === inst2.globalEpoch) {
      return;
    }
    child.lastTraversedEpoch = inst2.globalEpoch;
    if (child instanceof EffectScheduler) {
      reactors.add(child);
    } else {
      ;
      child.children.visit((c) => traverse(reactors, c));
    }
  }
  function flushChanges(atoms) {
    if (inst2.globalIsReacting) {
      throw new Error("flushChanges cannot be called during a reaction");
    }
    const outerTxn = inst2.currentTransaction;
    try {
      inst2.currentTransaction = null;
      inst2.globalIsReacting = true;
      inst2.reactionEpoch = inst2.globalEpoch;
      const reactors = /* @__PURE__ */ new Set();
      for (const atom2 of atoms) {
        atom2.children.visit((child) => traverse(reactors, child));
      }
      for (const r of reactors) {
        r.maybeScheduleEffect();
      }
      let updateDepth = 0;
      while (inst2.cleanupReactors?.size) {
        if (updateDepth++ > 1e3) {
          throw new Error("Reaction update depth limit exceeded");
        }
        const reactors2 = inst2.cleanupReactors;
        inst2.cleanupReactors = null;
        for (const r of reactors2) {
          r.maybeScheduleEffect();
        }
      }
    } finally {
      inst2.cleanupReactors = null;
      inst2.globalIsReacting = false;
      inst2.currentTransaction = outerTxn;
    }
  }
  function atomDidChange(atom2, previousValue) {
    if (inst2.currentTransaction) {
      if (!inst2.currentTransaction.initialAtomValues.has(atom2)) {
        inst2.currentTransaction.initialAtomValues.set(atom2, previousValue);
      }
    } else if (inst2.globalIsReacting) {
      traverseAtomForCleanup(atom2);
    } else {
      flushChanges([atom2]);
    }
  }
  function traverseAtomForCleanup(atom2) {
    const rs = inst2.cleanupReactors ??= /* @__PURE__ */ new Set();
    atom2.children.visit((child) => traverse(rs, child));
  }
  function advanceGlobalEpoch() {
    inst2.globalEpoch++;
  }
  function transaction(fn) {
    const txn = new Transaction(inst2.currentTransaction);
    inst2.currentTransaction = txn;
    try {
      let result = void 0;
      let rollback = false;
      try {
        result = fn(() => rollback = true);
      } catch (e) {
        txn.abort();
        throw e;
      }
      if (rollback) {
        txn.abort();
      } else {
        txn.commit();
      }
      return result;
    } finally {
      inst2.currentTransaction = inst2.currentTransaction.parent;
    }
  }
  function transact(fn) {
    if (inst2.currentTransaction) {
      return fn();
    }
    return transaction(fn);
  }

  // node_modules/@tldraw/state/dist-esm/lib/Atom.mjs
  var __Atom__ = class {
    constructor(name, current, options) {
      this.name = name;
      this.current = current;
      this.isEqual = options?.isEqual ?? null;
      if (!options) return;
      if (options.historyLength) {
        this.historyBuffer = new HistoryBuffer(options.historyLength);
      }
      this.computeDiff = options.computeDiff;
    }
    isEqual;
    computeDiff;
    lastChangedEpoch = getGlobalEpoch();
    children = new ArraySet();
    historyBuffer;
    __unsafe__getWithoutCapture(_ignoreErrors) {
      return this.current;
    }
    get() {
      maybeCaptureParent(this);
      return this.current;
    }
    set(value, diff) {
      if (this.isEqual?.(this.current, value) ?? equals(this.current, value)) {
        return this.current;
      }
      advanceGlobalEpoch();
      if (this.historyBuffer) {
        this.historyBuffer.pushEntry(
          this.lastChangedEpoch,
          getGlobalEpoch(),
          diff ?? this.computeDiff?.(this.current, value, this.lastChangedEpoch, getGlobalEpoch()) ?? RESET_VALUE
        );
      }
      this.lastChangedEpoch = getGlobalEpoch();
      const oldValue = this.current;
      this.current = value;
      atomDidChange(this, oldValue);
      return value;
    }
    update(updater) {
      return this.set(updater(this.current));
    }
    getDiffSince(epoch) {
      maybeCaptureParent(this);
      if (epoch >= this.lastChangedEpoch) {
        return EMPTY_ARRAY;
      }
      return this.historyBuffer?.getChangesSince(epoch) ?? RESET_VALUE;
    }
  };
  var _Atom = singleton("Atom", () => __Atom__);
  function atom(name, initialValue, options) {
    return new _Atom(name, initialValue, options);
  }

  // node_modules/@tldraw/state/dist-esm/lib/warnings.mjs
  var didWarnComputedGetter = false;
  function logComputedGetterWarning() {
    if (didWarnComputedGetter) return;
    didWarnComputedGetter = true;
    console.warn(
      `Using \`@computed\` as a decorator for getters is deprecated and will be removed in the near future. Please refactor to use \`@computed\` as a decorator for methods.

// Before
@computed
get foo() {
	return 'foo'
}

// After
@computed
getFoo() {
	return 'foo'
}
`
    );
  }

  // node_modules/@tldraw/state/dist-esm/lib/Computed.mjs
  var UNINITIALIZED = Symbol.for("com.tldraw.state/UNINITIALIZED");
  function isUninitialized(value) {
    return value === UNINITIALIZED;
  }
  var WithDiff = singleton(
    "WithDiff",
    () => class WithDiff {
      constructor(value, diff) {
        this.value = value;
        this.diff = diff;
      }
    }
  );
  function withDiff(value, diff) {
    return new WithDiff(value, diff);
  }
  var __UNSAFE__Computed = class {
    constructor(name, derive, options) {
      this.name = name;
      this.derive = derive;
      if (options?.historyLength) {
        this.historyBuffer = new HistoryBuffer(options.historyLength);
      }
      this.computeDiff = options?.computeDiff;
      this.isEqual = options?.isEqual ?? equals;
    }
    lastChangedEpoch = GLOBAL_START_EPOCH;
    lastTraversedEpoch = GLOBAL_START_EPOCH;
    /**
     * The epoch when the reactor was last checked.
     */
    lastCheckedEpoch = GLOBAL_START_EPOCH;
    parentSet = new ArraySet();
    parents = [];
    parentEpochs = [];
    children = new ArraySet();
    // eslint-disable-next-line no-restricted-syntax
    get isActivelyListening() {
      return !this.children.isEmpty;
    }
    historyBuffer;
    // The last-computed value of this signal.
    state = UNINITIALIZED;
    // If the signal throws an error we stash it so we can rethrow it on the next get()
    error = null;
    computeDiff;
    isEqual;
    __unsafe__getWithoutCapture(ignoreErrors) {
      const isNew = this.lastChangedEpoch === GLOBAL_START_EPOCH;
      const globalEpoch = getGlobalEpoch();
      if (!isNew && (this.lastCheckedEpoch === globalEpoch || this.isActivelyListening && getIsReacting() && this.lastTraversedEpoch < getReactionEpoch() || !haveParentsChanged(this))) {
        this.lastCheckedEpoch = globalEpoch;
        if (this.error) {
          if (!ignoreErrors) {
            throw this.error.thrownValue;
          } else {
            return this.state;
          }
        } else {
          return this.state;
        }
      }
      try {
        startCapturingParents(this);
        const result = this.derive(this.state, this.lastCheckedEpoch);
        const newState = result instanceof WithDiff ? result.value : result;
        const isUninitialized2 = this.state === UNINITIALIZED;
        if (isUninitialized2 || !this.isEqual(newState, this.state)) {
          if (this.historyBuffer && !isUninitialized2) {
            const diff = result instanceof WithDiff ? result.diff : void 0;
            this.historyBuffer.pushEntry(
              this.lastChangedEpoch,
              getGlobalEpoch(),
              diff ?? this.computeDiff?.(this.state, newState, this.lastCheckedEpoch, getGlobalEpoch()) ?? RESET_VALUE
            );
          }
          this.lastChangedEpoch = getGlobalEpoch();
          this.state = newState;
        }
        this.error = null;
        this.lastCheckedEpoch = getGlobalEpoch();
        return this.state;
      } catch (e) {
        if (this.state !== UNINITIALIZED) {
          this.state = UNINITIALIZED;
          this.lastChangedEpoch = getGlobalEpoch();
        }
        this.lastCheckedEpoch = getGlobalEpoch();
        if (this.historyBuffer) {
          this.historyBuffer.clear();
        }
        this.error = { thrownValue: e };
        if (!ignoreErrors) throw e;
        return this.state;
      } finally {
        stopCapturingParents();
      }
    }
    get() {
      try {
        return this.__unsafe__getWithoutCapture();
      } finally {
        maybeCaptureParent(this);
      }
    }
    getDiffSince(epoch) {
      this.__unsafe__getWithoutCapture(true);
      maybeCaptureParent(this);
      if (epoch >= this.lastChangedEpoch) {
        return EMPTY_ARRAY;
      }
      return this.historyBuffer?.getChangesSince(epoch) ?? RESET_VALUE;
    }
  };
  var _Computed = singleton("Computed", () => __UNSAFE__Computed);
  function computedMethodLegacyDecorator(options = {}, _target, key, descriptor) {
    const originalMethod = descriptor.value;
    const derivationKey = Symbol.for("__@tldraw/state__computed__" + key);
    descriptor.value = function() {
      let d = this[derivationKey];
      if (!d) {
        d = new _Computed(key, originalMethod.bind(this), options);
        Object.defineProperty(this, derivationKey, {
          enumerable: false,
          configurable: false,
          writable: false,
          value: d
        });
      }
      return d.get();
    };
    descriptor.value[isComputedMethodKey] = true;
    return descriptor;
  }
  function computedGetterLegacyDecorator(options = {}, _target, key, descriptor) {
    const originalMethod = descriptor.get;
    const derivationKey = Symbol.for("__@tldraw/state__computed__" + key);
    descriptor.get = function() {
      let d = this[derivationKey];
      if (!d) {
        d = new _Computed(key, originalMethod.bind(this), options);
        Object.defineProperty(this, derivationKey, {
          enumerable: false,
          configurable: false,
          writable: false,
          value: d
        });
      }
      return d.get();
    };
    return descriptor;
  }
  function computedMethodTc39Decorator(options, compute, context) {
    assert(context.kind === "method", "@computed can only be used on methods");
    const derivationKey = Symbol.for("__@tldraw/state__computed__" + String(context.name));
    const fn = function() {
      let d = this[derivationKey];
      if (!d) {
        d = new _Computed(String(context.name), compute.bind(this), options);
        Object.defineProperty(this, derivationKey, {
          enumerable: false,
          configurable: false,
          writable: false,
          value: d
        });
      }
      return d.get();
    };
    fn[isComputedMethodKey] = true;
    return fn;
  }
  function computedDecorator(options = {}, args) {
    if (args.length === 2) {
      const [originalMethod, context] = args;
      return computedMethodTc39Decorator(options, originalMethod, context);
    } else {
      const [_target, key, descriptor] = args;
      if (descriptor.get) {
        logComputedGetterWarning();
        return computedGetterLegacyDecorator(options, _target, key, descriptor);
      } else {
        return computedMethodLegacyDecorator(options, _target, key, descriptor);
      }
    }
  }
  var isComputedMethodKey = "@@__isComputedMethod__@@";
  function computed() {
    if (arguments.length === 1) {
      const options = arguments[0];
      return (...args) => computedDecorator(options, args);
    } else if (typeof arguments[0] === "string") {
      return new _Computed(arguments[0], arguments[1], arguments[2]);
    } else {
      return computedDecorator(void 0, arguments);
    }
  }

  // node_modules/@tldraw/state/dist-esm/index.mjs
  var currentApiVersion = 1;
  var actualApiVersion = singleton("apiVersion", () => currentApiVersion);
  if (actualApiVersion !== currentApiVersion) {
    throw new Error(
      `You have multiple incompatible versions of @tldraw/state in your app. Please deduplicate the package.`
    );
  }
  registerTldrawLibraryVersion(
    "@tldraw/state",
    "3.7.2",
    "esm"
  );

  // node_modules/@tldraw/state-react/dist-esm/lib/track.mjs
  var import_react2 = __toESM(require_react(), 1);

  // node_modules/@tldraw/state-react/dist-esm/lib/useStateTracking.mjs
  var import_react = __toESM(require_react(), 1);
  function useStateTracking(name, render, deps = []) {
    const renderRef = import_react.default.useRef(render);
    renderRef.current = render;
    const [scheduler, subscribe, getSnapshot2] = import_react.default.useMemo(() => {
      let scheduleUpdate = null;
      const subscribe2 = (cb) => {
        scheduleUpdate = cb;
        return () => {
          scheduleUpdate = null;
        };
      };
      const scheduler2 = new EffectScheduler(
        `useStateTracking(${name})`,
        // this is what `scheduler.execute()` will call
        () => renderRef.current?.(),
        // this is what will be invoked when @tldraw/state detects a change in an upstream reactive value
        {
          scheduleEffect() {
            scheduleUpdate?.();
          }
        }
      );
      const getSnapshot22 = () => scheduler2.scheduleCount;
      return [scheduler2, subscribe2, getSnapshot22];
    }, [name, ...deps]);
    import_react.default.useSyncExternalStore(subscribe, getSnapshot2, getSnapshot2);
    import_react.default.useEffect(() => {
      scheduler.attach();
      scheduler.maybeScheduleEffect();
      return () => {
        scheduler.detach();
      };
    }, [scheduler]);
    return scheduler.execute();
  }

  // node_modules/@tldraw/state-react/dist-esm/lib/track.mjs
  var ProxyHandlers = {
    /**
     * This is a function call trap for functional components. When this is called, we know it means
     * React did run 'Component()', that means we can use any hooks here to setup our effect and
     * store.
     *
     * With the native Proxy, all other calls such as access/setting to/of properties will be
     * forwarded to the target Component, so we don't need to copy the Component's own or inherited
     * properties.
     *
     * @see https://github.com/facebook/react/blob/2d80a0cd690bb5650b6c8a6c079a87b5dc42bd15/packages/react-reconciler/src/ReactFiberHooks.old.js#L460
     */
    apply(Component2, thisArg, argumentsList) {
      return useStateTracking(
        Component2.displayName ?? Component2.name ?? "tracked(???)",
        () => Component2.apply(thisArg, argumentsList)
      );
    }
  };
  var ReactMemoSymbol = Symbol.for("react.memo");
  var ReactForwardRefSymbol = Symbol.for("react.forward_ref");
  function track(baseComponent) {
    let compare = null;
    const $$typeof = baseComponent["$$typeof"];
    if ($$typeof === ReactMemoSymbol) {
      baseComponent = baseComponent.type;
      compare = baseComponent.compare;
    }
    if ($$typeof === ReactForwardRefSymbol) {
      return (0, import_react2.memo)((0, import_react2.forwardRef)(new Proxy(baseComponent.render, ProxyHandlers)));
    }
    return (0, import_react2.memo)(new Proxy(baseComponent, ProxyHandlers), compare);
  }

  // node_modules/@tldraw/state-react/dist-esm/lib/useAtom.mjs
  var import_react3 = __toESM(require_react(), 1);
  function useAtom(name, valueOrInitialiser, options) {
    return (0, import_react3.useState)(() => {
      const initialValue = typeof valueOrInitialiser === "function" ? valueOrInitialiser() : valueOrInitialiser;
      return atom(`useAtom(${name})`, initialValue, options);
    })[0];
  }

  // node_modules/@tldraw/state-react/dist-esm/lib/useComputed.mjs
  var import_react4 = __toESM(require_react(), 1);
  function useComputed() {
    const name = arguments[0];
    const compute = arguments[1];
    const opts = arguments.length === 3 ? void 0 : arguments[2];
    const deps = arguments.length === 3 ? arguments[2] : arguments[3];
    return (0, import_react4.useMemo)(() => computed(`useComputed(${name})`, compute, opts), deps);
  }

  // node_modules/@tldraw/state-react/dist-esm/lib/useQuickReactor.mjs
  var import_react5 = __toESM(require_react(), 1);
  function useQuickReactor(name, reactFn, deps = EMPTY_ARRAY) {
    (0, import_react5.useEffect)(() => {
      const scheduler = new EffectScheduler(name, reactFn);
      scheduler.attach();
      scheduler.execute();
      return () => {
        scheduler.detach();
      };
    }, deps);
  }

  // node_modules/@tldraw/state-react/dist-esm/lib/useReactor.mjs
  var import_react6 = __toESM(require_react(), 1);

  // node_modules/@tldraw/state-react/dist-esm/lib/useValue.mjs
  var import_react7 = __toESM(require_react(), 1);
  function useValue() {
    const args = arguments;
    const deps = args.length === 3 ? args[2] : [args[0]];
    const name = args.length === 3 ? args[0] : `useValue(${args[0].name})`;
    const isInRender = (0, import_react7.useRef)(true);
    isInRender.current = true;
    const $val = (0, import_react7.useMemo)(() => {
      if (args.length === 1) {
        return args[0];
      }
      return computed(name, () => {
        if (isInRender.current) {
          return args[1]();
        } else {
          try {
            return args[1]();
          } catch {
            return {};
          }
        }
      });
    }, deps);
    try {
      const { subscribe, getSnapshot: getSnapshot2 } = (0, import_react7.useMemo)(() => {
        return {
          subscribe: (listen) => {
            return react(`useValue(${name})`, () => {
              $val.get();
              listen();
            });
          },
          getSnapshot: () => $val.get()
        };
      }, [$val]);
      return (0, import_react7.useSyncExternalStore)(subscribe, getSnapshot2, getSnapshot2);
    } finally {
      isInRender.current = false;
    }
  }

  // node_modules/@tldraw/state-react/dist-esm/index.mjs
  registerTldrawLibraryVersion(
    "@tldraw/state-react",
    "3.7.2",
    "esm"
  );

  // node_modules/idb/build/wrap-idb-value.js
  var instanceOfAny = (object2, constructors) => constructors.some((c) => object2 instanceof c);
  var idbProxyableTypes;
  var cursorAdvanceMethods;
  function getIdbProxyableTypes() {
    return idbProxyableTypes || (idbProxyableTypes = [
      IDBDatabase,
      IDBObjectStore,
      IDBIndex,
      IDBCursor,
      IDBTransaction
    ]);
  }
  function getCursorAdvanceMethods() {
    return cursorAdvanceMethods || (cursorAdvanceMethods = [
      IDBCursor.prototype.advance,
      IDBCursor.prototype.continue,
      IDBCursor.prototype.continuePrimaryKey
    ]);
  }
  var cursorRequestMap = /* @__PURE__ */ new WeakMap();
  var transactionDoneMap = /* @__PURE__ */ new WeakMap();
  var transactionStoreNamesMap = /* @__PURE__ */ new WeakMap();
  var transformCache = /* @__PURE__ */ new WeakMap();
  var reverseTransformCache = /* @__PURE__ */ new WeakMap();
  function promisifyRequest(request) {
    const promise = new Promise((resolve, reject) => {
      const unlisten = () => {
        request.removeEventListener("success", success);
        request.removeEventListener("error", error);
      };
      const success = () => {
        resolve(wrap(request.result));
        unlisten();
      };
      const error = () => {
        reject(request.error);
        unlisten();
      };
      request.addEventListener("success", success);
      request.addEventListener("error", error);
    });
    promise.then((value) => {
      if (value instanceof IDBCursor) {
        cursorRequestMap.set(value, request);
      }
    }).catch(() => {
    });
    reverseTransformCache.set(promise, request);
    return promise;
  }
  function cacheDonePromiseForTransaction(tx) {
    if (transactionDoneMap.has(tx))
      return;
    const done = new Promise((resolve, reject) => {
      const unlisten = () => {
        tx.removeEventListener("complete", complete);
        tx.removeEventListener("error", error);
        tx.removeEventListener("abort", error);
      };
      const complete = () => {
        resolve();
        unlisten();
      };
      const error = () => {
        reject(tx.error || new DOMException("AbortError", "AbortError"));
        unlisten();
      };
      tx.addEventListener("complete", complete);
      tx.addEventListener("error", error);
      tx.addEventListener("abort", error);
    });
    transactionDoneMap.set(tx, done);
  }
  var idbProxyTraps = {
    get(target, prop, receiver) {
      if (target instanceof IDBTransaction) {
        if (prop === "done")
          return transactionDoneMap.get(target);
        if (prop === "objectStoreNames") {
          return target.objectStoreNames || transactionStoreNamesMap.get(target);
        }
        if (prop === "store") {
          return receiver.objectStoreNames[1] ? void 0 : receiver.objectStore(receiver.objectStoreNames[0]);
        }
      }
      return wrap(target[prop]);
    },
    set(target, prop, value) {
      target[prop] = value;
      return true;
    },
    has(target, prop) {
      if (target instanceof IDBTransaction && (prop === "done" || prop === "store")) {
        return true;
      }
      return prop in target;
    }
  };
  function replaceTraps(callback) {
    idbProxyTraps = callback(idbProxyTraps);
  }
  function wrapFunction(func) {
    if (func === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype)) {
      return function(storeNames, ...args) {
        const tx = func.call(unwrap(this), storeNames, ...args);
        transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
        return wrap(tx);
      };
    }
    if (getCursorAdvanceMethods().includes(func)) {
      return function(...args) {
        func.apply(unwrap(this), args);
        return wrap(cursorRequestMap.get(this));
      };
    }
    return function(...args) {
      return wrap(func.apply(unwrap(this), args));
    };
  }
  function transformCachableValue(value) {
    if (typeof value === "function")
      return wrapFunction(value);
    if (value instanceof IDBTransaction)
      cacheDonePromiseForTransaction(value);
    if (instanceOfAny(value, getIdbProxyableTypes()))
      return new Proxy(value, idbProxyTraps);
    return value;
  }
  function wrap(value) {
    if (value instanceof IDBRequest)
      return promisifyRequest(value);
    if (transformCache.has(value))
      return transformCache.get(value);
    const newValue = transformCachableValue(value);
    if (newValue !== value) {
      transformCache.set(value, newValue);
      reverseTransformCache.set(newValue, value);
    }
    return newValue;
  }
  var unwrap = (value) => reverseTransformCache.get(value);

  // node_modules/idb/build/index.js
  function openDB(name, version2, { blocked, upgrade, blocking, terminated } = {}) {
    const request = indexedDB.open(name, version2);
    const openPromise = wrap(request);
    if (upgrade) {
      request.addEventListener("upgradeneeded", (event) => {
        upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);
      });
    }
    if (blocked) {
      request.addEventListener("blocked", (event) => blocked(
        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion,
        event.newVersion,
        event
      ));
    }
    openPromise.then((db) => {
      if (terminated)
        db.addEventListener("close", () => terminated());
      if (blocking) {
        db.addEventListener("versionchange", (event) => blocking(event.oldVersion, event.newVersion, event));
      }
    }).catch(() => {
    });
    return openPromise;
  }
  function deleteDB(name, { blocked } = {}) {
    const request = indexedDB.deleteDatabase(name);
    if (blocked) {
      request.addEventListener("blocked", (event) => blocked(
        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion,
        event
      ));
    }
    return wrap(request).then(() => void 0);
  }
  var readMethods = ["get", "getKey", "getAll", "getAllKeys", "count"];
  var writeMethods = ["put", "add", "delete", "clear"];
  var cachedMethods = /* @__PURE__ */ new Map();
  function getMethod(target, prop) {
    if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === "string")) {
      return;
    }
    if (cachedMethods.get(prop))
      return cachedMethods.get(prop);
    const targetFuncName = prop.replace(/FromIndex$/, "");
    const useIndex = prop !== targetFuncName;
    const isWrite = writeMethods.includes(targetFuncName);
    if (
      // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
      !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))
    ) {
      return;
    }
    const method = async function(storeName, ...args) {
      const tx = this.transaction(storeName, isWrite ? "readwrite" : "readonly");
      let target2 = tx.store;
      if (useIndex)
        target2 = target2.index(args.shift());
      return (await Promise.all([
        target2[targetFuncName](...args),
        isWrite && tx.done
      ]))[0];
    };
    cachedMethods.set(prop, method);
    return method;
  }
  replaceTraps((oldTraps) => ({
    ...oldTraps,
    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)
  }));

  // node_modules/@tldraw/editor/dist-esm/lib/utils/sync/LocalIndexedDb.mjs
  var STORE_PREFIX = "TLDRAW_DOCUMENT_v2";
  var LEGACY_ASSET_STORE_PREFIX = "TLDRAW_ASSET_STORE_v1";
  var dbNameIndexKey = "TLDRAW_DB_NAME_INDEX_v2";
  var Table = {
    Records: "records",
    Schema: "schema",
    SessionState: "session_state",
    Assets: "assets"
  };
  async function openLocalDb(persistenceKey) {
    const storeId = STORE_PREFIX + persistenceKey;
    addDbName(storeId);
    return await openDB(storeId, 4, {
      upgrade(database) {
        if (!database.objectStoreNames.contains(Table.Records)) {
          database.createObjectStore(Table.Records);
        }
        if (!database.objectStoreNames.contains(Table.Schema)) {
          database.createObjectStore(Table.Schema);
        }
        if (!database.objectStoreNames.contains(Table.SessionState)) {
          database.createObjectStore(Table.SessionState);
        }
        if (!database.objectStoreNames.contains(Table.Assets)) {
          database.createObjectStore(Table.Assets);
        }
      }
    });
  }
  async function migrateLegacyAssetDbIfNeeded(persistenceKey) {
    const databases = window.indexedDB.databases ? (await window.indexedDB.databases()).map((db) => db.name) : getAllIndexDbNames();
    const oldStoreId = LEGACY_ASSET_STORE_PREFIX + persistenceKey;
    const existing = databases.find((dbName) => dbName === oldStoreId);
    if (!existing) return;
    const oldAssetDb = await openDB(oldStoreId, 1, {
      upgrade(database) {
        if (!database.objectStoreNames.contains("assets")) {
          database.createObjectStore("assets");
        }
      }
    });
    if (!oldAssetDb.objectStoreNames.contains("assets")) return;
    const oldTx = oldAssetDb.transaction(["assets"], "readonly");
    const oldAssetStore = oldTx.objectStore("assets");
    const oldAssetsKeys = await oldAssetStore.getAllKeys();
    const oldAssets = await Promise.all(
      oldAssetsKeys.map(async (key) => [key, await oldAssetStore.get(key)])
    );
    await oldTx.done;
    const newDb = await openLocalDb(persistenceKey);
    const newTx = newDb.transaction([Table.Assets], "readwrite");
    const newAssetTable = newTx.objectStore(Table.Assets);
    for (const [key, value] of oldAssets) {
      newAssetTable.put(value, key);
    }
    await newTx.done;
    oldAssetDb.close();
    newDb.close();
    await deleteDB(oldStoreId);
  }
  var LocalIndexedDb = class _LocalIndexedDb {
    getDbPromise;
    isClosed = false;
    pendingTransactionSet = /* @__PURE__ */ new Set();
    /** @internal */
    static connectedInstances = /* @__PURE__ */ new Set();
    constructor(persistenceKey) {
      _LocalIndexedDb.connectedInstances.add(this);
      this.getDbPromise = (async () => {
        await migrateLegacyAssetDbIfNeeded(persistenceKey);
        return await openLocalDb(persistenceKey);
      })();
    }
    getDb() {
      return this.getDbPromise;
    }
    /**
     * Wait for any pending transactions to be completed. Useful for tests.
     *
     * @internal
     */
    pending() {
      return Promise.allSettled([this.getDbPromise, ...this.pendingTransactionSet]).then(noop);
    }
    async close() {
      if (this.isClosed) return;
      this.isClosed = true;
      await this.pending();
      (await this.getDb()).close();
      _LocalIndexedDb.connectedInstances.delete(this);
    }
    tx(mode, names, cb) {
      const txPromise = (async () => {
        assert(!this.isClosed, "db is closed");
        const db = await this.getDb();
        const tx = db.transaction(names, mode);
        const done = tx.done.catch((e) => {
          if (!this.isClosed) {
            throw e;
          }
        });
        try {
          return await cb(tx);
        } finally {
          if (!this.isClosed) {
            await done;
          } else {
            tx.abort();
          }
        }
      })();
      this.pendingTransactionSet.add(txPromise);
      txPromise.finally(() => this.pendingTransactionSet.delete(txPromise));
      return txPromise;
    }
    async load({ sessionId } = {}) {
      return await this.tx(
        "readonly",
        [Table.Records, Table.Schema, Table.SessionState],
        async (tx) => {
          const recordsStore = tx.objectStore(Table.Records);
          const schemaStore = tx.objectStore(Table.Schema);
          const sessionStateStore = tx.objectStore(Table.SessionState);
          let sessionStateSnapshot = sessionId ? (await sessionStateStore.get(sessionId))?.snapshot : null;
          if (!sessionStateSnapshot) {
            const all = await sessionStateStore.getAll();
            sessionStateSnapshot = all.sort((a, b) => a.updatedAt - b.updatedAt).pop()?.snapshot;
          }
          const result = {
            records: await recordsStore.getAll(),
            schema: await schemaStore.get(Table.Schema),
            sessionStateSnapshot
          };
          return result;
        }
      );
    }
    async storeChanges({
      schema,
      changes,
      sessionId,
      sessionStateSnapshot
    }) {
      await this.tx("readwrite", [Table.Records, Table.Schema, Table.SessionState], async (tx) => {
        const recordsStore = tx.objectStore(Table.Records);
        const schemaStore = tx.objectStore(Table.Schema);
        const sessionStateStore = tx.objectStore(Table.SessionState);
        for (const [id, record] of Object.entries(changes.added)) {
          await recordsStore.put(record, id);
        }
        for (const [_prev, updated] of Object.values(changes.updated)) {
          await recordsStore.put(updated, updated.id);
        }
        for (const id of Object.keys(changes.removed)) {
          await recordsStore.delete(id);
        }
        schemaStore.put(schema.serialize(), Table.Schema);
        if (sessionStateSnapshot && sessionId) {
          sessionStateStore.put(
            {
              snapshot: sessionStateSnapshot,
              updatedAt: Date.now(),
              id: sessionId
            },
            sessionId
          );
        } else if (sessionStateSnapshot || sessionId) {
          console.error("sessionStateSnapshot and instanceId must be provided together");
        }
      });
    }
    async storeSnapshot({
      schema,
      snapshot,
      sessionId,
      sessionStateSnapshot
    }) {
      await this.tx("readwrite", [Table.Records, Table.Schema, Table.SessionState], async (tx) => {
        const recordsStore = tx.objectStore(Table.Records);
        const schemaStore = tx.objectStore(Table.Schema);
        const sessionStateStore = tx.objectStore(Table.SessionState);
        await recordsStore.clear();
        for (const [id, record] of Object.entries(snapshot)) {
          await recordsStore.put(record, id);
        }
        schemaStore.put(schema.serialize(), Table.Schema);
        if (sessionStateSnapshot && sessionId) {
          sessionStateStore.put(
            {
              snapshot: sessionStateSnapshot,
              updatedAt: Date.now(),
              id: sessionId
            },
            sessionId
          );
        } else if (sessionStateSnapshot || sessionId) {
          console.error("sessionStateSnapshot and instanceId must be provided together");
        }
      });
    }
    async pruneSessions() {
      await this.tx("readwrite", [Table.SessionState], async (tx) => {
        const sessionStateStore = tx.objectStore(Table.SessionState);
        const all = (await sessionStateStore.getAll()).sort((a, b) => a.updatedAt - b.updatedAt);
        if (all.length < 10) {
          await tx.done;
          return;
        }
        const toDelete = all.slice(0, all.length - 10);
        for (const { id } of toDelete) {
          await sessionStateStore.delete(id);
        }
      });
    }
    async getAsset(assetId) {
      return await this.tx("readonly", [Table.Assets], async (tx) => {
        const assetsStore = tx.objectStore(Table.Assets);
        return await assetsStore.get(assetId);
      });
    }
    async storeAsset(assetId, blob) {
      await this.tx("readwrite", [Table.Assets], async (tx) => {
        const assetsStore = tx.objectStore(Table.Assets);
        await assetsStore.put(blob, assetId);
      });
    }
  };
  function getAllIndexDbNames() {
    const result = JSON.parse(getFromLocalStorage(dbNameIndexKey) || "[]") ?? [];
    if (!Array.isArray(result)) {
      return [];
    }
    return result;
  }
  function addDbName(name) {
    const all = new Set(getAllIndexDbNames());
    all.add(name);
    setInLocalStorage(dbNameIndexKey, JSON.stringify([...all]));
  }

  // node_modules/@tldraw/store/dist-esm/lib/IncrementalSetConstructor.mjs
  var IncrementalSetConstructor = class {
    constructor(previousValue) {
      this.previousValue = previousValue;
    }
    /**
     * The next value of the set.
     *
     * @internal
     */
    nextValue;
    /**
     * The diff of the set.
     *
     * @internal
     */
    diff;
    /**
     * Get the next value of the set.
     *
     * @public
     */
    get() {
      const numRemoved = this.diff?.removed?.size ?? 0;
      const numAdded = this.diff?.added?.size ?? 0;
      if (numRemoved === 0 && numAdded === 0) {
        return void 0;
      }
      return { value: this.nextValue, diff: this.diff };
    }
    /**
     * Add an item to the set.
     *
     * @param item - The item to add.
     * @param wasAlreadyPresent - Whether the item was already present in the set.
     * @internal
     */
    _add(item, wasAlreadyPresent) {
      this.nextValue ??= new Set(this.previousValue);
      this.nextValue.add(item);
      this.diff ??= {};
      if (wasAlreadyPresent) {
        this.diff.removed?.delete(item);
      } else {
        this.diff.added ??= /* @__PURE__ */ new Set();
        this.diff.added.add(item);
      }
    }
    /**
     * Add an item to the set.
     *
     * @param item - The item to add.
     * @public
     */
    add(item) {
      const wasAlreadyPresent = this.previousValue.has(item);
      if (wasAlreadyPresent) {
        const wasRemoved = this.diff?.removed?.has(item);
        if (!wasRemoved) return;
        return this._add(item, wasAlreadyPresent);
      }
      const isCurrentlyPresent = this.nextValue?.has(item);
      if (isCurrentlyPresent) return;
      this._add(item, wasAlreadyPresent);
    }
    /**
     * Remove an item from the set.
     *
     * @param item - The item to remove.
     * @param wasAlreadyPresent - Whether the item was already present in the set.
     * @internal
     */
    _remove(item, wasAlreadyPresent) {
      this.nextValue ??= new Set(this.previousValue);
      this.nextValue.delete(item);
      this.diff ??= {};
      if (wasAlreadyPresent) {
        this.diff.removed ??= /* @__PURE__ */ new Set();
        this.diff.removed.add(item);
      } else {
        this.diff.added?.delete(item);
      }
    }
    /**
     * Remove an item from the set.
     *
     * @param item - The item to remove.
     * @public
     */
    remove(item) {
      const wasAlreadyPresent = this.previousValue.has(item);
      if (!wasAlreadyPresent) {
        const wasAdded = this.diff?.added?.has(item);
        if (!wasAdded) return;
        return this._remove(item, wasAlreadyPresent);
      }
      const hasAlreadyBeenRemoved = this.diff?.removed?.has(item);
      if (hasAlreadyBeenRemoved) return;
      this._remove(item, wasAlreadyPresent);
    }
  };

  // node_modules/@tldraw/store/dist-esm/lib/RecordType.mjs
  var RecordType = class _RecordType {
    constructor(typeName, config) {
      this.typeName = typeName;
      this.createDefaultProperties = config.createDefaultProperties;
      this.validator = config.validator ?? { validate: (r) => r };
      this.scope = config.scope ?? "document";
      this.ephemeralKeys = config.ephemeralKeys;
      const ephemeralKeySet = /* @__PURE__ */ new Set();
      if (config.ephemeralKeys) {
        for (const [key, isEphemeral] of objectMapEntries(config.ephemeralKeys)) {
          if (isEphemeral) ephemeralKeySet.add(key);
        }
      }
      this.ephemeralKeySet = ephemeralKeySet;
    }
    createDefaultProperties;
    validator;
    ephemeralKeys;
    ephemeralKeySet;
    scope;
    /**
     * Create a new record of this type.
     *
     * @param properties - The properties of the record.
     * @returns The new record.
     */
    create(properties) {
      const result = { ...this.createDefaultProperties(), id: this.createId() };
      for (const [k, v] of Object.entries(properties)) {
        if (v !== void 0) {
          result[k] = v;
        }
      }
      result.typeName = this.typeName;
      return result;
    }
    /**
     * Clone a record of this type.
     *
     * @param record - The record to clone.
     * @returns The cloned record.
     * @public
     */
    clone(record) {
      return { ...structuredClone(record), id: this.createId() };
    }
    /**
     * Create a new ID for this record type.
     *
     * @example
     *
     * ```ts
     * const id = recordType.createId()
     * ```
     *
     * @returns The new ID.
     * @public
     */
    createId(customUniquePart) {
      return this.typeName + ":" + (customUniquePart ?? uniqueId());
    }
    /**
     * Create a new ID for this record type based on the given ID.
     *
     * @example
     *
     * ```ts
     * const id = recordType.createCustomId('myId')
     * ```
     *
     * @deprecated - Use `createId` instead.
     * @param id - The ID to base the new ID on.
     * @returns The new ID.
     */
    createCustomId(id) {
      return this.typeName + ":" + id;
    }
    /**
     * Takes an id like `user:123` and returns the part after the colon `123`
     *
     * @param id - The id
     * @returns
     */
    parseId(id) {
      if (!this.isId(id)) {
        throw new Error(`ID "${id}" is not a valid ID for type "${this.typeName}"`);
      }
      return id.slice(this.typeName.length + 1);
    }
    /**
     * Check whether a record is an instance of this record type.
     *
     * @example
     *
     * ```ts
     * const result = recordType.isInstance(someRecord)
     * ```
     *
     * @param record - The record to check.
     * @returns Whether the record is an instance of this record type.
     */
    isInstance(record) {
      return record?.typeName === this.typeName;
    }
    /**
     * Check whether an id is an id of this type.
     *
     * @example
     *
     * ```ts
     * const result = recordType.isIn('someId')
     * ```
     *
     * @param id - The id to check.
     * @returns Whether the id is an id of this type.
     */
    isId(id) {
      if (!id) return false;
      for (let i = 0; i < this.typeName.length; i++) {
        if (id[i] !== this.typeName[i]) return false;
      }
      return id[this.typeName.length] === ":";
    }
    /**
     * Create a new RecordType that has the same type name as this RecordType and includes the given
     * default properties.
     *
     * @example
     *
     * ```ts
     * const authorType = createRecordType('author', () => ({ living: true }))
     * const deadAuthorType = authorType.withDefaultProperties({ living: false })
     * ```
     *
     * @param createDefaultProperties - A function that returns the default properties of the new RecordType.
     * @returns The new RecordType.
     */
    withDefaultProperties(createDefaultProperties) {
      return new _RecordType(this.typeName, {
        createDefaultProperties,
        validator: this.validator,
        scope: this.scope,
        ephemeralKeys: this.ephemeralKeys
      });
    }
    /**
     * Check that the passed in record passes the validations for this type. Returns its input
     * correctly typed if it does, but throws an error otherwise.
     */
    validate(record, recordBefore) {
      if (recordBefore && this.validator.validateUsingKnownGoodVersion) {
        return this.validator.validateUsingKnownGoodVersion(recordBefore, record);
      }
      return this.validator.validate(record);
    }
  };
  function createRecordType(typeName, config) {
    return new RecordType(typeName, {
      createDefaultProperties: () => ({}),
      validator: config.validator,
      scope: config.scope,
      ephemeralKeys: config.ephemeralKeys
    });
  }

  // node_modules/@tldraw/store/dist-esm/lib/RecordsDiff.mjs
  function createEmptyRecordsDiff() {
    return { added: {}, updated: {}, removed: {} };
  }
  function reverseRecordsDiff(diff) {
    const result = { added: diff.removed, removed: diff.added, updated: {} };
    for (const [from, to] of Object.values(diff.updated)) {
      result.updated[from.id] = [to, from];
    }
    return result;
  }
  function isRecordsDiffEmpty(diff) {
    return Object.keys(diff.added).length === 0 && Object.keys(diff.updated).length === 0 && Object.keys(diff.removed).length === 0;
  }
  function squashRecordDiffs(diffs) {
    const result = { added: {}, removed: {}, updated: {} };
    squashRecordDiffsMutable(result, diffs);
    return result;
  }
  function squashRecordDiffsMutable(target, diffs) {
    for (const diff of diffs) {
      for (const [id, value] of objectMapEntries(diff.added)) {
        if (target.removed[id]) {
          const original = target.removed[id];
          delete target.removed[id];
          if (original !== value) {
            target.updated[id] = [original, value];
          }
        } else {
          target.added[id] = value;
        }
      }
      for (const [id, [_from, to]] of objectMapEntries(diff.updated)) {
        if (target.added[id]) {
          target.added[id] = to;
          delete target.updated[id];
          delete target.removed[id];
          continue;
        }
        if (target.updated[id]) {
          target.updated[id] = [target.updated[id][0], to];
          delete target.removed[id];
          continue;
        }
        target.updated[id] = diff.updated[id];
        delete target.removed[id];
      }
      for (const [id, value] of objectMapEntries(diff.removed)) {
        if (target.added[id]) {
          delete target.added[id];
        } else if (target.updated[id]) {
          target.removed[id] = target.updated[id][0];
          delete target.updated[id];
        } else {
          target.removed[id] = value;
        }
      }
    }
  }

  // node_modules/@tldraw/store/dist-esm/lib/StoreQueries.mjs
  var import_lodash3 = __toESM(require_lodash3(), 1);

  // node_modules/@tldraw/store/dist-esm/lib/setUtils.mjs
  function intersectSets(sets) {
    if (sets.length === 0) return /* @__PURE__ */ new Set();
    const first = sets[0];
    const rest = sets.slice(1);
    const result = /* @__PURE__ */ new Set();
    for (const val of first) {
      if (rest.every((set) => set.has(val))) {
        result.add(val);
      }
    }
    return result;
  }
  function diffSets(prev, next) {
    const result = {};
    for (const val of next) {
      if (!prev.has(val)) {
        result.added ??= /* @__PURE__ */ new Set();
        result.added.add(val);
      }
    }
    for (const val of prev) {
      if (!next.has(val)) {
        result.removed ??= /* @__PURE__ */ new Set();
        result.removed.add(val);
      }
    }
    return result.added || result.removed ? result : void 0;
  }

  // node_modules/@tldraw/store/dist-esm/lib/executeQuery.mjs
  function objectMatchesQuery(query, object2) {
    for (const [key, _matcher] of Object.entries(query)) {
      const matcher = _matcher;
      const value = object2[key];
      if ("eq" in matcher && value !== matcher.eq) return false;
      if ("neq" in matcher && value === matcher.neq) return false;
      if ("gt" in matcher && (typeof value !== "number" || value <= matcher.gt)) return false;
    }
    return true;
  }
  function executeQuery(store, typeName, query) {
    const matchIds = Object.fromEntries(Object.keys(query).map((key) => [key, /* @__PURE__ */ new Set()]));
    for (const [k, matcher] of Object.entries(query)) {
      if ("eq" in matcher) {
        const index2 = store.index(typeName, k);
        const ids = index2.get().get(matcher.eq);
        if (ids) {
          for (const id of ids) {
            matchIds[k].add(id);
          }
        }
      } else if ("neq" in matcher) {
        const index2 = store.index(typeName, k);
        for (const [value, ids] of index2.get()) {
          if (value !== matcher.neq) {
            for (const id of ids) {
              matchIds[k].add(id);
            }
          }
        }
      } else if ("gt" in matcher) {
        const index2 = store.index(typeName, k);
        for (const [value, ids] of index2.get()) {
          if (value > matcher.gt) {
            for (const id of ids) {
              matchIds[k].add(id);
            }
          }
        }
      }
    }
    return intersectSets(Object.values(matchIds));
  }

  // node_modules/@tldraw/store/dist-esm/lib/StoreQueries.mjs
  var StoreQueries = class {
    constructor(atoms, history) {
      this.atoms = atoms;
      this.history = history;
    }
    /**
     * A cache of derivations (indexes).
     *
     * @internal
     */
    indexCache = /* @__PURE__ */ new Map();
    /**
     * A cache of derivations (filtered histories).
     *
     * @internal
     */
    historyCache = /* @__PURE__ */ new Map();
    /**
     * Create a derivation that contains the history for a given type
     *
     * @param typeName - The name of the type to filter by.
     * @returns A derivation that returns the ids of all records of the given type.
     * @public
     */
    filterHistory(typeName) {
      if (this.historyCache.has(typeName)) {
        return this.historyCache.get(typeName);
      }
      const filtered = computed(
        "filterHistory:" + typeName,
        (lastValue, lastComputedEpoch) => {
          if (isUninitialized(lastValue)) {
            return this.history.get();
          }
          const diff = this.history.getDiffSince(lastComputedEpoch);
          if (diff === RESET_VALUE) return this.history.get();
          const res = { added: {}, removed: {}, updated: {} };
          let numAdded = 0;
          let numRemoved = 0;
          let numUpdated = 0;
          for (const changes of diff) {
            for (const added of objectMapValues(changes.added)) {
              if (added.typeName === typeName) {
                if (res.removed[added.id]) {
                  const original = res.removed[added.id];
                  delete res.removed[added.id];
                  numRemoved--;
                  if (original !== added) {
                    res.updated[added.id] = [original, added];
                    numUpdated++;
                  }
                } else {
                  res.added[added.id] = added;
                  numAdded++;
                }
              }
            }
            for (const [from, to] of objectMapValues(changes.updated)) {
              if (to.typeName === typeName) {
                if (res.added[to.id]) {
                  res.added[to.id] = to;
                } else if (res.updated[to.id]) {
                  res.updated[to.id] = [res.updated[to.id][0], to];
                } else {
                  res.updated[to.id] = [from, to];
                  numUpdated++;
                }
              }
            }
            for (const removed of objectMapValues(changes.removed)) {
              if (removed.typeName === typeName) {
                if (res.added[removed.id]) {
                  delete res.added[removed.id];
                  numAdded--;
                } else if (res.updated[removed.id]) {
                  res.removed[removed.id] = res.updated[removed.id][0];
                  delete res.updated[removed.id];
                  numUpdated--;
                  numRemoved++;
                } else {
                  res.removed[removed.id] = removed;
                  numRemoved++;
                }
              }
            }
          }
          if (numAdded || numRemoved || numUpdated) {
            return withDiff(this.history.get(), res);
          } else {
            return lastValue;
          }
        },
        { historyLength: 100 }
      );
      this.historyCache.set(typeName, filtered);
      return filtered;
    }
    /**
     * Create a derivation that returns an index on a property for the given type.
     *
     * @param typeName - The name of the type.
     * @param property - The name of the property.
     * @public
     */
    index(typeName, property) {
      const cacheKey = typeName + ":" + property;
      if (this.indexCache.has(cacheKey)) {
        return this.indexCache.get(cacheKey);
      }
      const index2 = this.__uncached_createIndex(typeName, property);
      this.indexCache.set(cacheKey, index2);
      return index2;
    }
    /**
     * Create a derivation that returns an index on a property for the given type.
     *
     * @param typeName - The name of the type?.
     * @param property - The name of the property?.
     * @internal
     */
    __uncached_createIndex(typeName, property) {
      const typeHistory = this.filterHistory(typeName);
      const fromScratch = () => {
        typeHistory.get();
        const res = /* @__PURE__ */ new Map();
        for (const atom2 of objectMapValues(this.atoms.get())) {
          const record = atom2.get();
          if (record.typeName === typeName) {
            const value = record[property];
            if (!res.has(value)) {
              res.set(value, /* @__PURE__ */ new Set());
            }
            res.get(value).add(record.id);
          }
        }
        return res;
      };
      return computed(
        "index:" + typeName + ":" + property,
        (prevValue, lastComputedEpoch) => {
          if (isUninitialized(prevValue)) return fromScratch();
          const history = typeHistory.getDiffSince(lastComputedEpoch);
          if (history === RESET_VALUE) {
            return fromScratch();
          }
          const setConstructors = /* @__PURE__ */ new Map();
          const add = (value, id) => {
            let setConstructor = setConstructors.get(value);
            if (!setConstructor)
              setConstructor = new IncrementalSetConstructor(
                prevValue.get(value) ?? /* @__PURE__ */ new Set()
              );
            setConstructor.add(id);
            setConstructors.set(value, setConstructor);
          };
          const remove2 = (value, id) => {
            let set = setConstructors.get(value);
            if (!set) set = new IncrementalSetConstructor(prevValue.get(value) ?? /* @__PURE__ */ new Set());
            set.remove(id);
            setConstructors.set(value, set);
          };
          for (const changes of history) {
            for (const record of objectMapValues(changes.added)) {
              if (record.typeName === typeName) {
                const value = record[property];
                add(value, record.id);
              }
            }
            for (const [from, to] of objectMapValues(changes.updated)) {
              if (to.typeName === typeName) {
                const prev = from[property];
                const next = to[property];
                if (prev !== next) {
                  remove2(prev, to.id);
                  add(next, to.id);
                }
              }
            }
            for (const record of objectMapValues(changes.removed)) {
              if (record.typeName === typeName) {
                const value = record[property];
                remove2(value, record.id);
              }
            }
          }
          let nextValue = void 0;
          let nextDiff = void 0;
          for (const [value, setConstructor] of setConstructors) {
            const result = setConstructor.get();
            if (!result) continue;
            if (!nextValue) nextValue = new Map(prevValue);
            if (!nextDiff) nextDiff = /* @__PURE__ */ new Map();
            if (result.value.size === 0) {
              nextValue.delete(value);
            } else {
              nextValue.set(value, result.value);
            }
            nextDiff.set(value, result.diff);
          }
          if (nextValue && nextDiff) {
            return withDiff(nextValue, nextDiff);
          }
          return prevValue;
        },
        { historyLength: 100 }
      );
    }
    /**
     * Create a derivation that will return a signle record matching the given query.
     *
     * It will return undefined if there is no matching record
     *
     * @param typeName - The name of the type?
     * @param queryCreator - A function that returns the query expression.
     * @param name - (optinal) The name of the query.
     */
    record(typeName, queryCreator = () => ({}), name = "record:" + typeName + (queryCreator ? ":" + queryCreator.toString() : "")) {
      const ids = this.ids(typeName, queryCreator, name);
      return computed(name, () => {
        for (const id of ids.get()) {
          return this.atoms.get()[id]?.get();
        }
        return void 0;
      });
    }
    /**
     * Create a derivation that will return an array of records matching the given query
     *
     * @param typeName - The name of the type?
     * @param queryCreator - A function that returns the query expression.
     * @param name - (optinal) The name of the query.
     */
    records(typeName, queryCreator = () => ({}), name = "records:" + typeName + (queryCreator ? ":" + queryCreator.toString() : "")) {
      const ids = this.ids(typeName, queryCreator, "ids:" + name);
      return computed(
        name,
        () => {
          const atoms = this.atoms.get();
          return [...ids.get()].map((id) => {
            const atom2 = atoms[id];
            if (!atom2) {
              throw new Error("no atom found for record id: " + id);
            }
            return atom2.get();
          });
        },
        {
          isEqual: areArraysShallowEqual
        }
      );
    }
    /**
     * Create a derivation that will return the ids of all records of the given type.
     *
     * @param typeName - The name of the type.
     * @param queryCreator - A function that returns the query expression.
     * @param name - (optinal) The name of the query.
     */
    ids(typeName, queryCreator = () => ({}), name = "ids:" + typeName + (queryCreator ? ":" + queryCreator.toString() : "")) {
      const typeHistory = this.filterHistory(typeName);
      const fromScratch = () => {
        typeHistory.get();
        const query = queryCreator();
        if (Object.keys(query).length === 0) {
          return new Set(
            objectMapValues(this.atoms.get()).flatMap((v) => {
              const r = v.get();
              if (r.typeName === typeName) {
                return r.id;
              } else {
                return [];
              }
            })
          );
        }
        return executeQuery(this, typeName, query);
      };
      const fromScratchWithDiff = (prevValue) => {
        const nextValue = fromScratch();
        const diff = diffSets(prevValue, nextValue);
        if (diff) {
          return withDiff(nextValue, diff);
        } else {
          return prevValue;
        }
      };
      const cachedQuery = computed("ids_query:" + name, queryCreator, {
        isEqual: import_lodash3.default
      });
      return computed(
        "query:" + name,
        (prevValue, lastComputedEpoch) => {
          const query = cachedQuery.get();
          if (isUninitialized(prevValue)) {
            return fromScratch();
          }
          if (lastComputedEpoch < cachedQuery.lastChangedEpoch) {
            return fromScratchWithDiff(prevValue);
          }
          const history = typeHistory.getDiffSince(lastComputedEpoch);
          if (history === RESET_VALUE) {
            return fromScratchWithDiff(prevValue);
          }
          const setConstructor = new IncrementalSetConstructor(
            prevValue
          );
          for (const changes of history) {
            for (const added of objectMapValues(changes.added)) {
              if (added.typeName === typeName && objectMatchesQuery(query, added)) {
                setConstructor.add(added.id);
              }
            }
            for (const [_, updated] of objectMapValues(changes.updated)) {
              if (updated.typeName === typeName) {
                if (objectMatchesQuery(query, updated)) {
                  setConstructor.add(updated.id);
                } else {
                  setConstructor.remove(updated.id);
                }
              }
            }
            for (const removed of objectMapValues(changes.removed)) {
              if (removed.typeName === typeName) {
                setConstructor.remove(removed.id);
              }
            }
          }
          const result = setConstructor.get();
          if (!result) {
            return prevValue;
          }
          return withDiff(result.value, result.diff);
        },
        { historyLength: 50 }
      );
    }
    exec(typeName, query) {
      const ids = executeQuery(this, typeName, query);
      if (ids.size === 0) {
        return EMPTY_ARRAY;
      }
      const atoms = this.atoms.get();
      return [...ids].map((id) => atoms[id].get());
    }
  };

  // node_modules/@tldraw/store/dist-esm/lib/StoreSideEffects.mjs
  var StoreSideEffects = class {
    constructor(store) {
      this.store = store;
    }
    _beforeCreateHandlers = {};
    _afterCreateHandlers = {};
    _beforeChangeHandlers = {};
    _afterChangeHandlers = {};
    _beforeDeleteHandlers = {};
    _afterDeleteHandlers = {};
    _operationCompleteHandlers = [];
    _isEnabled = true;
    /** @internal */
    isEnabled() {
      return this._isEnabled;
    }
    /** @internal */
    setIsEnabled(enabled) {
      this._isEnabled = enabled;
    }
    /** @internal */
    handleBeforeCreate(record, source) {
      if (!this._isEnabled) return record;
      const handlers = this._beforeCreateHandlers[record.typeName];
      if (handlers) {
        let r = record;
        for (const handler of handlers) {
          r = handler(r, source);
        }
        return r;
      }
      return record;
    }
    /** @internal */
    handleAfterCreate(record, source) {
      if (!this._isEnabled) return;
      const handlers = this._afterCreateHandlers[record.typeName];
      if (handlers) {
        for (const handler of handlers) {
          handler(record, source);
        }
      }
    }
    /** @internal */
    handleBeforeChange(prev, next, source) {
      if (!this._isEnabled) return next;
      const handlers = this._beforeChangeHandlers[next.typeName];
      if (handlers) {
        let r = next;
        for (const handler of handlers) {
          r = handler(prev, r, source);
        }
        return r;
      }
      return next;
    }
    /** @internal */
    handleAfterChange(prev, next, source) {
      if (!this._isEnabled) return;
      const handlers = this._afterChangeHandlers[next.typeName];
      if (handlers) {
        for (const handler of handlers) {
          handler(prev, next, source);
        }
      }
    }
    /** @internal */
    handleBeforeDelete(record, source) {
      if (!this._isEnabled) return true;
      const handlers = this._beforeDeleteHandlers[record.typeName];
      if (handlers) {
        for (const handler of handlers) {
          if (handler(record, source) === false) {
            return false;
          }
        }
      }
      return true;
    }
    /** @internal */
    handleAfterDelete(record, source) {
      if (!this._isEnabled) return;
      const handlers = this._afterDeleteHandlers[record.typeName];
      if (handlers) {
        for (const handler of handlers) {
          handler(record, source);
        }
      }
    }
    /** @internal */
    handleOperationComplete(source) {
      if (!this._isEnabled) return;
      for (const handler of this._operationCompleteHandlers) {
        handler(source);
      }
    }
    /**
     * Internal helper for registering a bunch of side effects at once and keeping them organized.
     * @internal
     */
    register(handlersByType) {
      const disposes = [];
      for (const [type, handlers] of Object.entries(handlersByType)) {
        if (handlers?.beforeCreate) {
          disposes.push(this.registerBeforeCreateHandler(type, handlers.beforeCreate));
        }
        if (handlers?.afterCreate) {
          disposes.push(this.registerAfterCreateHandler(type, handlers.afterCreate));
        }
        if (handlers?.beforeChange) {
          disposes.push(this.registerBeforeChangeHandler(type, handlers.beforeChange));
        }
        if (handlers?.afterChange) {
          disposes.push(this.registerAfterChangeHandler(type, handlers.afterChange));
        }
        if (handlers?.beforeDelete) {
          disposes.push(this.registerBeforeDeleteHandler(type, handlers.beforeDelete));
        }
        if (handlers?.afterDelete) {
          disposes.push(this.registerAfterDeleteHandler(type, handlers.afterDelete));
        }
      }
      return () => {
        for (const dispose of disposes) dispose();
      };
    }
    /**
     * Register a handler to be called before a record of a certain type is created. Return a
     * modified record from the handler to change the record that will be created.
     *
     * Use this handle only to modify the creation of the record itself. If you want to trigger a
     * side-effect on a different record (for example, moving one shape when another is created),
     * use {@link StoreSideEffects.registerAfterCreateHandler} instead.
     *
     * @example
     * ```ts
     * editor.sideEffects.registerBeforeCreateHandler('shape', (shape, source) => {
     *     // only modify shapes created by the user
     *     if (source !== 'user') return shape
     *
     *     //by default, arrow shapes have no label. Let's make sure they always have a label.
     *     if (shape.type === 'arrow') {
     *         return {...shape, props: {...shape.props, text: 'an arrow'}}
     *     }
     *
     *     // other shapes get returned unmodified
     *     return shape
     * })
     * ```
     *
     * @param typeName - The type of record to listen for
     * @param handler - The handler to call
     *
     * @returns A callback that removes the handler.
     */
    registerBeforeCreateHandler(typeName, handler) {
      const handlers = this._beforeCreateHandlers[typeName];
      if (!handlers) this._beforeCreateHandlers[typeName] = [];
      this._beforeCreateHandlers[typeName].push(handler);
      return () => remove(this._beforeCreateHandlers[typeName], handler);
    }
    /**
     * Register a handler to be called after a record is created. This is useful for side-effects
     * that would update _other_ records. If you want to modify the record being created use
     * {@link StoreSideEffects.registerBeforeCreateHandler} instead.
     *
     * @example
     * ```ts
     * editor.sideEffects.registerAfterCreateHandler('page', (page, source) => {
     *     // Automatically create a shape when a page is created
     *     editor.createShape({
     *         id: createShapeId(),
     *         type: 'text',
     *         props: { text: page.name },
     *     })
     * })
     * ```
     *
     * @param typeName - The type of record to listen for
     * @param handler - The handler to call
     *
     * @returns A callback that removes the handler.
     */
    registerAfterCreateHandler(typeName, handler) {
      const handlers = this._afterCreateHandlers[typeName];
      if (!handlers) this._afterCreateHandlers[typeName] = [];
      this._afterCreateHandlers[typeName].push(handler);
      return () => remove(this._afterCreateHandlers[typeName], handler);
    }
    /**
     * Register a handler to be called before a record is changed. The handler is given the old and
     * new record - you can return a modified record to apply a different update, or the old record
     * to block the update entirely.
     *
     * Use this handler only for intercepting updates to the record itself. If you want to update
     * other records in response to a change, use
     * {@link StoreSideEffects.registerAfterChangeHandler} instead.
     *
     * @example
     * ```ts
     * editor.sideEffects.registerBeforeChangeHandler('shape', (prev, next, source) => {
     *     if (next.isLocked && !prev.isLocked) {
     *         // prevent shapes from ever being locked:
     *         return prev
     *     }
     *     // other types of change are allowed
     *     return next
     * })
     * ```
     *
     * @param typeName - The type of record to listen for
     * @param handler - The handler to call
     *
     * @returns A callback that removes the handler.
     */
    registerBeforeChangeHandler(typeName, handler) {
      const handlers = this._beforeChangeHandlers[typeName];
      if (!handlers) this._beforeChangeHandlers[typeName] = [];
      this._beforeChangeHandlers[typeName].push(handler);
      return () => remove(this._beforeChangeHandlers[typeName], handler);
    }
    /**
     * Register a handler to be called after a record is changed. This is useful for side-effects
     * that would update _other_ records - if you want to modify the record being changed, use
     * {@link StoreSideEffects.registerBeforeChangeHandler} instead.
     *
     * @example
     * ```ts
     * editor.sideEffects.registerAfterChangeHandler('shape', (prev, next, source) => {
     *     if (next.props.color === 'red') {
     *         // there can only be one red shape at a time:
     *         const otherRedShapes = editor.getCurrentPageShapes().filter(s => s.props.color === 'red' && s.id !== next.id)
     *         editor.updateShapes(otherRedShapes.map(s => ({...s, props: {...s.props, color: 'blue'}})))
     *     }
     * })
     * ```
     *
     * @param typeName - The type of record to listen for
     * @param handler - The handler to call
     *
     * @returns A callback that removes the handler.
     */
    registerAfterChangeHandler(typeName, handler) {
      const handlers = this._afterChangeHandlers[typeName];
      if (!handlers) this._afterChangeHandlers[typeName] = [];
      this._afterChangeHandlers[typeName].push(handler);
      return () => remove(this._afterChangeHandlers[typeName], handler);
    }
    /**
     * Register a handler to be called before a record is deleted. The handler can return `false` to
     * prevent the deletion.
     *
     * Use this handler only for intercepting deletions of the record itself. If you want to do
     * something to other records in response to a deletion, use
     * {@link StoreSideEffects.registerAfterDeleteHandler} instead.
     *
     * @example
     * ```ts
     * editor.sideEffects.registerBeforeDeleteHandler('shape', (shape, source) => {
     *     if (shape.props.color === 'red') {
     *         // prevent red shapes from being deleted
     * 	       return false
     *     }
     * })
     * ```
     *
     * @param typeName - The type of record to listen for
     * @param handler - The handler to call
     *
     * @returns A callback that removes the handler.
     */
    registerBeforeDeleteHandler(typeName, handler) {
      const handlers = this._beforeDeleteHandlers[typeName];
      if (!handlers) this._beforeDeleteHandlers[typeName] = [];
      this._beforeDeleteHandlers[typeName].push(handler);
      return () => remove(this._beforeDeleteHandlers[typeName], handler);
    }
    /**
     * Register a handler to be called after a record is deleted. This is useful for side-effects
     * that would update _other_ records - if you want to block the deletion of the record itself,
     * use {@link StoreSideEffects.registerBeforeDeleteHandler} instead.
     *
     * @example
     * ```ts
     * editor.sideEffects.registerAfterDeleteHandler('shape', (shape, source) => {
     *     // if the last shape in a frame is deleted, delete the frame too:
     *     const parentFrame = editor.getShape(shape.parentId)
     *     if (!parentFrame || parentFrame.type !== 'frame') return
     *
     *     const siblings = editor.getSortedChildIdsForParent(parentFrame)
     *     if (siblings.length === 0) {
     *         editor.deleteShape(parentFrame.id)
     *     }
     * })
     * ```
     *
     * @param typeName - The type of record to listen for
     * @param handler - The handler to call
     *
     * @returns A callback that removes the handler.
     */
    registerAfterDeleteHandler(typeName, handler) {
      const handlers = this._afterDeleteHandlers[typeName];
      if (!handlers) this._afterDeleteHandlers[typeName] = [];
      this._afterDeleteHandlers[typeName].push(handler);
      return () => remove(this._afterDeleteHandlers[typeName], handler);
    }
    /**
     * Register a handler to be called when a store completes an atomic operation.
     *
     * @example
     * ```ts
     * let count = 0
     *
     * editor.sideEffects.registerOperationCompleteHandler(() => count++)
     *
     * editor.selectAll()
     * expect(count).toBe(1)
     *
     * editor.store.atomic(() => {
     *	editor.selectNone()
     * 	editor.selectAll()
     * })
     *
     * expect(count).toBe(2)
     * ```
     *
     * @param handler - The handler to call
     *
     * @returns A callback that removes the handler.
     *
     * @public
     */
    registerOperationCompleteHandler(handler) {
      this._operationCompleteHandlers.push(handler);
      return () => remove(this._operationCompleteHandlers, handler);
    }
  };
  function remove(array2, item) {
    const index2 = array2.indexOf(item);
    if (index2 >= 0) {
      array2.splice(index2, 1);
    }
  }

  // node_modules/@tldraw/store/dist-esm/lib/devFreeze.mjs
  function devFreeze(object2) {
    if (false) {
      return object2;
    }
    const proto = Object.getPrototypeOf(object2);
    if (proto && !(Array.isArray(object2) || proto === Object.prototype || proto === null || proto === STRUCTURED_CLONE_OBJECT_PROTOTYPE)) {
      console.error("cannot include non-js data in a record", object2);
      throw new Error("cannot include non-js data in a record");
    }
    const propNames = Object.getOwnPropertyNames(object2);
    for (const name of propNames) {
      const value = object2[name];
      if (value && typeof value === "object") {
        devFreeze(value);
      }
    }
    return Object.freeze(object2);
  }

  // node_modules/@tldraw/store/dist-esm/lib/Store.mjs
  var Store = class {
    /**
     * The random id of the store.
     */
    id;
    /**
     * An atom containing the store's atoms.
     *
     * @internal
     * @readonly
     */
    atoms = atom("store_atoms", {});
    /**
     * An atom containing the store's history.
     *
     * @public
     * @readonly
     */
    history = atom("history", 0, {
      historyLength: 1e3
    });
    /**
     * A StoreQueries instance for this store.
     *
     * @public
     * @readonly
     */
    query = new StoreQueries(this.atoms, this.history);
    /**
     * A set containing listeners that have been added to this store.
     *
     * @internal
     */
    listeners = /* @__PURE__ */ new Set();
    /**
     * An array of history entries that have not yet been flushed.
     *
     * @internal
     */
    historyAccumulator = new HistoryAccumulator();
    /**
     * A reactor that responds to changes to the history by squashing the accumulated history and
     * notifying listeners of the changes.
     *
     * @internal
     */
    historyReactor;
    /**
     * Function to dispose of any in-flight timeouts.
     *
     * @internal
     */
    cancelHistoryReactor() {
    }
    schema;
    props;
    scopedTypes;
    sideEffects = new StoreSideEffects(this);
    constructor(config) {
      const { initialData, schema, id } = config;
      this.id = id ?? uniqueId();
      this.schema = schema;
      this.props = config.props;
      if (initialData) {
        this.atoms.set(
          objectMapFromEntries(
            objectMapEntries(initialData).map(([id2, record]) => [
              id2,
              atom(
                "atom:" + id2,
                devFreeze(this.schema.validateRecord(this, record, "initialize", null))
              )
            ])
          )
        );
      }
      this.historyReactor = reactor(
        "Store.historyReactor",
        () => {
          this.history.get();
          this._flushHistory();
        },
        { scheduleEffect: (cb) => this.cancelHistoryReactor = throttleToNextFrame(cb) }
      );
      this.scopedTypes = {
        document: new Set(
          objectMapValues(this.schema.types).filter((t2) => t2.scope === "document").map((t2) => t2.typeName)
        ),
        session: new Set(
          objectMapValues(this.schema.types).filter((t2) => t2.scope === "session").map((t2) => t2.typeName)
        ),
        presence: new Set(
          objectMapValues(this.schema.types).filter((t2) => t2.scope === "presence").map((t2) => t2.typeName)
        )
      };
    }
    _flushHistory() {
      if (this.historyAccumulator.hasChanges()) {
        const entries = this.historyAccumulator.flush();
        for (const { changes, source } of entries) {
          let instanceChanges = null;
          let documentChanges = null;
          let presenceChanges = null;
          for (const { onHistory, filters } of this.listeners) {
            if (filters.source !== "all" && filters.source !== source) {
              continue;
            }
            if (filters.scope !== "all") {
              if (filters.scope === "document") {
                documentChanges ??= this.filterChangesByScope(changes, "document");
                if (!documentChanges) continue;
                onHistory({ changes: documentChanges, source });
              } else if (filters.scope === "session") {
                instanceChanges ??= this.filterChangesByScope(changes, "session");
                if (!instanceChanges) continue;
                onHistory({ changes: instanceChanges, source });
              } else {
                presenceChanges ??= this.filterChangesByScope(changes, "presence");
                if (!presenceChanges) continue;
                onHistory({ changes: presenceChanges, source });
              }
            } else {
              onHistory({ changes, source });
            }
          }
        }
      }
    }
    dispose() {
      this.cancelHistoryReactor();
    }
    /**
     * Filters out non-document changes from a diff. Returns null if there are no changes left.
     * @param change - the records diff
     * @param scope - the records scope
     * @returns
     */
    filterChangesByScope(change, scope) {
      const result = {
        added: filterEntries(change.added, (_, r) => this.scopedTypes[scope].has(r.typeName)),
        updated: filterEntries(change.updated, (_, r) => this.scopedTypes[scope].has(r[1].typeName)),
        removed: filterEntries(change.removed, (_, r) => this.scopedTypes[scope].has(r.typeName))
      };
      if (Object.keys(result.added).length === 0 && Object.keys(result.updated).length === 0 && Object.keys(result.removed).length === 0) {
        return null;
      }
      return result;
    }
    /**
     * Update the history with a diff of changes.
     *
     * @param changes - The changes to add to the history.
     */
    updateHistory(changes) {
      this.historyAccumulator.add({
        changes,
        source: this.isMergingRemoteChanges ? "remote" : "user"
      });
      if (this.listeners.size === 0) {
        this.historyAccumulator.clear();
      }
      this.history.set(this.history.get() + 1, changes);
    }
    validate(phase) {
      this.allRecords().forEach((record) => this.schema.validateRecord(this, record, phase, null));
    }
    /**
     * Add some records to the store. It's an error if they already exist.
     *
     * @param records - The records to add.
     * @param phaseOverride - The phase override.
     * @public
     */
    put(records, phaseOverride) {
      this.atomic(() => {
        const updates = {};
        const additions = {};
        const currentMap = this.atoms.__unsafe__getWithoutCapture();
        let map = null;
        let record;
        let didChange = false;
        const source = this.isMergingRemoteChanges ? "remote" : "user";
        for (let i = 0, n = records.length; i < n; i++) {
          record = records[i];
          const recordAtom = (map ?? currentMap)[record.id];
          if (recordAtom) {
            const initialValue = recordAtom.__unsafe__getWithoutCapture();
            record = this.sideEffects.handleBeforeChange(initialValue, record, source);
            const validated = this.schema.validateRecord(
              this,
              record,
              phaseOverride ?? "updateRecord",
              initialValue
            );
            if (validated === initialValue) continue;
            recordAtom.set(devFreeze(record));
            didChange = true;
            const updated = recordAtom.__unsafe__getWithoutCapture();
            updates[record.id] = [initialValue, updated];
            this.addDiffForAfterEvent(initialValue, updated);
          } else {
            record = this.sideEffects.handleBeforeCreate(record, source);
            didChange = true;
            record = this.schema.validateRecord(
              this,
              record,
              phaseOverride ?? "createRecord",
              null
            );
            additions[record.id] = record;
            this.addDiffForAfterEvent(null, record);
            if (!map) {
              map = { ...currentMap };
            }
            map[record.id] = atom("atom:" + record.id, record);
          }
        }
        if (map) {
          this.atoms.set(map);
        }
        if (!didChange) return;
        this.updateHistory({
          added: additions,
          updated: updates,
          removed: {}
        });
      });
    }
    /**
     * Remove some records from the store via their ids.
     *
     * @param ids - The ids of the records to remove.
     * @public
     */
    remove(ids) {
      this.atomic(() => {
        const cancelled = /* @__PURE__ */ new Set();
        const source = this.isMergingRemoteChanges ? "remote" : "user";
        if (this.sideEffects.isEnabled()) {
          for (const id of ids) {
            const atom2 = this.atoms.__unsafe__getWithoutCapture()[id];
            if (!atom2) continue;
            if (this.sideEffects.handleBeforeDelete(atom2.get(), source) === false) {
              cancelled.add(id);
            }
          }
        }
        let removed = void 0;
        this.atoms.update((atoms) => {
          let result = void 0;
          for (const id of ids) {
            if (cancelled.has(id)) continue;
            if (!(id in atoms)) continue;
            if (!result) result = { ...atoms };
            if (!removed) removed = {};
            delete result[id];
            const record = atoms[id].get();
            removed[id] = record;
            this.addDiffForAfterEvent(record, null);
          }
          return result ?? atoms;
        });
        if (!removed) return;
        this.updateHistory({ added: {}, updated: {}, removed });
      });
    }
    /**
     * Get the value of a store record by its id.
     *
     * @param id - The id of the record to get.
     * @public
     */
    get(id) {
      return this.atoms.get()[id]?.get();
    }
    /**
     * Get the value of a store record by its id without updating its epoch.
     *
     * @param id - The id of the record to get.
     * @public
     */
    unsafeGetWithoutCapture(id) {
      return this.atoms.__unsafe__getWithoutCapture()[id]?.__unsafe__getWithoutCapture();
    }
    /**
     * Creates a JSON payload from the record store.
     *
     * @param scope - The scope of records to serialize. Defaults to 'document'.
     * @returns The record store snapshot as a JSON payload.
     */
    serialize(scope = "document") {
      const result = {};
      for (const [id, atom2] of objectMapEntries(this.atoms.get())) {
        const record = atom2.get();
        if (scope === "all" || this.scopedTypes[scope].has(record.typeName)) {
          result[id] = record;
        }
      }
      return result;
    }
    /**
     * Get a serialized snapshot of the store and its schema.
     *
     * ```ts
     * const snapshot = store.getStoreSnapshot()
     * store.loadStoreSnapshot(snapshot)
     * ```
     *
     * @param scope - The scope of records to serialize. Defaults to 'document'.
     *
     * @public
     */
    getStoreSnapshot(scope = "document") {
      return {
        store: this.serialize(scope),
        schema: this.schema.serialize()
      };
    }
    /**
     * @deprecated use `getSnapshot` from the 'tldraw' package instead.
     */
    getSnapshot(scope = "document") {
      console.warn(
        "[tldraw] `Store.getSnapshot` is deprecated and will be removed in a future release. Use `getSnapshot` from the `tldraw` package instead."
      );
      return this.getStoreSnapshot(scope);
    }
    /**
     * Migrate a serialized snapshot of the store and its schema.
     *
     * ```ts
     * const snapshot = store.getSnapshot()
     * store.migrateSnapshot(snapshot)
     * ```
     *
     * @param snapshot - The snapshot to load.
     * @public
     */
    migrateSnapshot(snapshot) {
      const migrationResult = this.schema.migrateStoreSnapshot(snapshot);
      if (migrationResult.type === "error") {
        throw new Error(`Failed to migrate snapshot: ${migrationResult.reason}`);
      }
      return {
        store: migrationResult.value,
        schema: this.schema.serialize()
      };
    }
    /**
     * Load a serialized snapshot.
     *
     * ```ts
     * const snapshot = store.getStoreSnapshot()
     * store.loadStoreSnapshot(snapshot)
     * ```
     *
     * @param snapshot - The snapshot to load.
     * @public
     */
    loadStoreSnapshot(snapshot) {
      const migrationResult = this.schema.migrateStoreSnapshot(snapshot);
      if (migrationResult.type === "error") {
        throw new Error(`Failed to migrate snapshot: ${migrationResult.reason}`);
      }
      const prevSideEffectsEnabled = this.sideEffects.isEnabled();
      try {
        this.sideEffects.setIsEnabled(false);
        this.atomic(() => {
          this.clear();
          this.put(Object.values(migrationResult.value));
          this.ensureStoreIsUsable();
        });
      } finally {
        this.sideEffects.setIsEnabled(prevSideEffectsEnabled);
      }
    }
    /**
     * @public
     * @deprecated use `loadSnapshot` from the 'tldraw' package instead.
     */
    loadSnapshot(snapshot) {
      console.warn(
        "[tldraw] `Store.loadSnapshot` is deprecated and will be removed in a future release. Use `loadSnapshot` from the 'tldraw' package instead."
      );
      this.loadStoreSnapshot(snapshot);
    }
    /**
     * Get an array of all values in the store.
     *
     * @returns An array of all values in the store.
     * @public
     */
    allRecords() {
      return objectMapValues(this.atoms.get()).map((atom2) => atom2.get());
    }
    /**
     * Removes all records from the store.
     *
     * @public
     */
    clear() {
      this.remove(objectMapKeys(this.atoms.get()));
    }
    /**
     * Update a record. To update multiple records at once, use the `update` method of the
     * `TypedStore` class.
     *
     * @param id - The id of the record to update.
     * @param updater - A function that updates the record.
     */
    update(id, updater) {
      const atom2 = this.atoms.get()[id];
      if (!atom2) {
        console.error(`Record ${id} not found. This is probably an error`);
        return;
      }
      this.put([updater(atom2.__unsafe__getWithoutCapture())]);
    }
    /**
     * Get whether the record store has a id.
     *
     * @param id - The id of the record to check.
     * @public
     */
    has(id) {
      return !!this.atoms.get()[id];
    }
    /**
     * Add a new listener to the store.
     *
     * @param onHistory - The listener to call when the store updates.
     * @param filters - Filters to apply to the listener.
     * @returns A function to remove the listener.
     */
    listen(onHistory, filters) {
      this._flushHistory();
      const listener = {
        onHistory,
        filters: {
          source: filters?.source ?? "all",
          scope: filters?.scope ?? "all"
        }
      };
      if (!this.historyReactor.scheduler.isActivelyListening) {
        this.historyReactor.start();
        this.historyReactor.scheduler.execute();
      }
      this.listeners.add(listener);
      return () => {
        this.listeners.delete(listener);
        if (this.listeners.size === 0) {
          this.historyReactor.stop();
        }
      };
    }
    isMergingRemoteChanges = false;
    /**
     * Merge changes from a remote source without triggering listeners.
     *
     * @param fn - A function that merges the external changes.
     * @public
     */
    mergeRemoteChanges(fn) {
      if (this.isMergingRemoteChanges) {
        return fn();
      }
      if (this._isInAtomicOp) {
        throw new Error("Cannot merge remote changes while in atomic operation");
      }
      try {
        this.isMergingRemoteChanges = true;
        transact(fn);
      } finally {
        this.isMergingRemoteChanges = false;
        this.ensureStoreIsUsable();
      }
    }
    /**
     * Run `fn` and return a {@link RecordsDiff} of the changes that occurred as a result.
     */
    extractingChanges(fn) {
      const changes = [];
      const dispose = this.historyAccumulator.addInterceptor((entry2) => changes.push(entry2.changes));
      try {
        transact(fn);
        return squashRecordDiffs(changes);
      } finally {
        dispose();
      }
    }
    applyDiff(diff, {
      runCallbacks = true,
      ignoreEphemeralKeys = false
    } = {}) {
      this.atomic(() => {
        const toPut = objectMapValues(diff.added);
        for (const [_from, to] of objectMapValues(diff.updated)) {
          const type = this.schema.getType(to.typeName);
          if (ignoreEphemeralKeys && type.ephemeralKeySet.size) {
            const existing = this.get(to.id);
            if (!existing) {
              toPut.push(to);
              continue;
            }
            let changed = null;
            for (const [key, value] of Object.entries(to)) {
              if (type.ephemeralKeySet.has(key) || Object.is(value, getOwnProperty(existing, key))) {
                continue;
              }
              if (!changed) changed = { ...existing };
              changed[key] = value;
            }
            if (changed) toPut.push(changed);
          } else {
            toPut.push(to);
          }
        }
        const toRemove = objectMapKeys(diff.removed);
        if (toPut.length) {
          this.put(toPut);
        }
        if (toRemove.length) {
          this.remove(toRemove);
        }
      }, runCallbacks);
    }
    /**
     * Create a computed cache.
     *
     * @param name - The name of the derivation cache.
     * @param derive - A function used to derive the value of the cache.
     * @param isEqual - A function that determines equality between two records.
     * @public
     */
    createComputedCache(name, derive, isEqual3) {
      const cache = new WeakCache();
      return {
        get: (id) => {
          const atom2 = this.atoms.get()[id];
          if (!atom2) {
            return void 0;
          }
          return cache.get(atom2, () => {
            const recordSignal = isEqual3 ? computed(atom2.name + ":equals", () => atom2.get(), { isEqual: isEqual3 }) : atom2;
            return computed(name + ":" + id, () => {
              return derive(recordSignal.get());
            });
          }).get();
        }
      };
    }
    /**
     * Create a computed cache from a selector
     *
     * @param name - The name of the derivation cache.
     * @param selector - A function that returns a subset of the original shape
     * @param derive - A function used to derive the value of the cache.
     * @public
     */
    createSelectedComputedCache(name, selector, derive) {
      const cache = new WeakCache();
      return {
        get: (id) => {
          const atom2 = this.atoms.get()[id];
          if (!atom2) {
            return void 0;
          }
          return cache.get(atom2, () => {
            const d = computed(
              name + ":" + id + ":selector",
              () => selector(atom2.get())
            );
            return computed(name + ":" + id, () => derive(d.get()));
          }).get();
        }
      };
    }
    _integrityChecker;
    /** @internal */
    ensureStoreIsUsable() {
      this.atomic(() => {
        this._integrityChecker ??= this.schema.createIntegrityChecker(this);
        this._integrityChecker?.();
      });
    }
    _isPossiblyCorrupted = false;
    /** @internal */
    markAsPossiblyCorrupted() {
      this._isPossiblyCorrupted = true;
    }
    /** @internal */
    isPossiblyCorrupted() {
      return this._isPossiblyCorrupted;
    }
    pendingAfterEvents = null;
    addDiffForAfterEvent(before, after) {
      assert(this.pendingAfterEvents, "must be in event operation");
      if (before === after) return;
      if (before && after) assert(before.id === after.id);
      if (!before && !after) return;
      const id = (before || after).id;
      const existing = this.pendingAfterEvents.get(id);
      if (existing) {
        existing.after = after;
      } else {
        this.pendingAfterEvents.set(id, { before, after });
      }
    }
    flushAtomicCallbacks() {
      let updateDepth = 0;
      const source = this.isMergingRemoteChanges ? "remote" : "user";
      while (this.pendingAfterEvents) {
        const events = this.pendingAfterEvents;
        this.pendingAfterEvents = null;
        if (!this.sideEffects.isEnabled()) continue;
        updateDepth++;
        if (updateDepth > 100) {
          throw new Error("Maximum store update depth exceeded, bailing out");
        }
        for (const { before, after } of events.values()) {
          if (before && after) {
            this.sideEffects.handleAfterChange(before, after, source);
          } else if (before && !after) {
            this.sideEffects.handleAfterDelete(before, source);
          } else if (!before && after) {
            this.sideEffects.handleAfterCreate(after, source);
          }
        }
        if (!this.pendingAfterEvents) {
          this.sideEffects.handleOperationComplete(source);
        }
      }
    }
    _isInAtomicOp = false;
    /** @internal */
    atomic(fn, runCallbacks = true) {
      return transact(() => {
        if (this._isInAtomicOp) {
          if (!this.pendingAfterEvents) this.pendingAfterEvents = /* @__PURE__ */ new Map();
          return fn();
        }
        this.pendingAfterEvents = /* @__PURE__ */ new Map();
        const prevSideEffectsEnabled = this.sideEffects.isEnabled();
        this.sideEffects.setIsEnabled(runCallbacks ?? prevSideEffectsEnabled);
        this._isInAtomicOp = true;
        try {
          const result = fn();
          this.flushAtomicCallbacks();
          return result;
        } finally {
          this.pendingAfterEvents = null;
          this.sideEffects.setIsEnabled(prevSideEffectsEnabled);
          this._isInAtomicOp = false;
        }
      });
    }
    /** @internal */
    addHistoryInterceptor(fn) {
      return this.historyAccumulator.addInterceptor(
        (entry2) => fn(entry2, this.isMergingRemoteChanges ? "remote" : "user")
      );
    }
  };
  function squashHistoryEntries(entries) {
    if (entries.length === 0) return [];
    const chunked = [];
    let chunk = [entries[0]];
    let entry2;
    for (let i = 1, n = entries.length; i < n; i++) {
      entry2 = entries[i];
      if (chunk[0].source !== entry2.source) {
        chunked.push(chunk);
        chunk = [];
      }
      chunk.push(entry2);
    }
    chunked.push(chunk);
    return devFreeze(
      chunked.map((chunk2) => ({
        source: chunk2[0].source,
        changes: squashRecordDiffs(chunk2.map((e) => e.changes))
      }))
    );
  }
  var HistoryAccumulator = class {
    _history = [];
    _interceptors = /* @__PURE__ */ new Set();
    addInterceptor(fn) {
      this._interceptors.add(fn);
      return () => {
        this._interceptors.delete(fn);
      };
    }
    add(entry2) {
      this._history.push(entry2);
      for (const interceptor of this._interceptors) {
        interceptor(entry2);
      }
    }
    flush() {
      const history = squashHistoryEntries(this._history);
      this._history = [];
      return history;
    }
    clear() {
      this._history = [];
    }
    hasChanges() {
      return this._history.length > 0;
    }
  };
  function createComputedCache(name, derive, isEqual3) {
    const cache = new WeakCache();
    return {
      get(context, id) {
        const computedCache = cache.get(context, () => {
          const store = context instanceof Store ? context : context.store;
          return store.createComputedCache(name, (record) => derive(context, record), isEqual3);
        });
        return computedCache.get(id);
      }
    };
  }

  // node_modules/@tldraw/store/dist-esm/lib/migrate.mjs
  function squashDependsOn(sequence) {
    const result = [];
    for (let i = sequence.length - 1; i >= 0; i--) {
      const elem = sequence[i];
      if (!("id" in elem)) {
        const dependsOn = elem.dependsOn;
        const prev = result[0];
        if (prev) {
          result[0] = {
            ...prev,
            dependsOn: dependsOn.concat(prev.dependsOn ?? [])
          };
        }
      } else {
        result.unshift(elem);
      }
    }
    return result;
  }
  function createMigrationSequence({
    sequence,
    sequenceId,
    retroactive = true
  }) {
    const migrations = {
      sequenceId,
      retroactive,
      sequence: squashDependsOn(sequence)
    };
    validateMigrations(migrations);
    return migrations;
  }
  function createMigrationIds(sequenceId, versions) {
    return Object.fromEntries(
      objectMapEntries(versions).map(([key, version2]) => [key, `${sequenceId}/${version2}`])
    );
  }
  function createRecordMigrationSequence(opts) {
    const sequenceId = opts.sequenceId;
    return createMigrationSequence({
      sequenceId,
      retroactive: opts.retroactive ?? true,
      sequence: opts.sequence.map(
        (m) => "id" in m ? {
          ...m,
          scope: "record",
          filter: (r) => r.typeName === opts.recordType && (m.filter?.(r) ?? true) && (opts.filter?.(r) ?? true)
        } : m
      )
    });
  }
  function sortMigrations(migrations) {
    const byId = new Map(migrations.map((m) => [m.id, m]));
    const isProcessing = /* @__PURE__ */ new Set();
    const result = [];
    function process2(m) {
      assert(!isProcessing.has(m.id), `Circular dependency in migrations: ${m.id}`);
      isProcessing.add(m.id);
      const { version: version2, sequenceId } = parseMigrationId(m.id);
      const parent = byId.get(`${sequenceId}/${version2 - 1}`);
      if (parent) {
        process2(parent);
      }
      if (m.dependsOn) {
        for (const dep of m.dependsOn) {
          const depMigration = byId.get(dep);
          if (depMigration) {
            process2(depMigration);
          }
        }
      }
      byId.delete(m.id);
      result.push(m);
    }
    for (const m of byId.values()) {
      process2(m);
    }
    return result;
  }
  function parseMigrationId(id) {
    const [sequenceId, version2] = id.split("/");
    return { sequenceId, version: parseInt(version2) };
  }
  function validateMigrationId(id, expectedSequenceId) {
    if (expectedSequenceId) {
      assert(
        id.startsWith(expectedSequenceId + "/"),
        `Every migration in sequence '${expectedSequenceId}' must have an id starting with '${expectedSequenceId}/'. Got invalid id: '${id}'`
      );
    }
    assert(id.match(/^(.*?)\/(0|[1-9]\d*)$/), `Invalid migration id: '${id}'`);
  }
  function validateMigrations(migrations) {
    assert(
      !migrations.sequenceId.includes("/"),
      `sequenceId cannot contain a '/', got ${migrations.sequenceId}`
    );
    assert(migrations.sequenceId.length, "sequenceId must be a non-empty string");
    if (migrations.sequence.length === 0) {
      return;
    }
    validateMigrationId(migrations.sequence[0].id, migrations.sequenceId);
    let n = parseMigrationId(migrations.sequence[0].id).version;
    assert(
      n === 1,
      `Expected the first migrationId to be '${migrations.sequenceId}/1' but got '${migrations.sequence[0].id}'`
    );
    for (let i = 1; i < migrations.sequence.length; i++) {
      const id = migrations.sequence[i].id;
      validateMigrationId(id, migrations.sequenceId);
      const m = parseMigrationId(id).version;
      assert(
        m === n + 1,
        `Migration id numbers must increase in increments of 1, expected ${migrations.sequenceId}/${n + 1} but got '${migrations.sequence[i].id}'`
      );
      n = m;
    }
  }
  var MigrationFailureReason = /* @__PURE__ */ ((MigrationFailureReason2) => {
    MigrationFailureReason2["IncompatibleSubtype"] = "incompatible-subtype";
    MigrationFailureReason2["UnknownType"] = "unknown-type";
    MigrationFailureReason2["TargetVersionTooNew"] = "target-version-too-new";
    MigrationFailureReason2["TargetVersionTooOld"] = "target-version-too-old";
    MigrationFailureReason2["MigrationError"] = "migration-error";
    MigrationFailureReason2["UnrecognizedSubtype"] = "unrecognized-subtype";
    return MigrationFailureReason2;
  })(MigrationFailureReason || {});

  // node_modules/@tldraw/store/dist-esm/lib/StoreSchema.mjs
  function upgradeSchema(schema) {
    if (schema.schemaVersion > 2 || schema.schemaVersion < 1) return Result.err("Bad schema version");
    if (schema.schemaVersion === 2) return Result.ok(schema);
    const result = {
      schemaVersion: 2,
      sequences: {
        "com.tldraw.store": schema.storeVersion
      }
    };
    for (const [typeName, recordVersion] of Object.entries(schema.recordVersions)) {
      result.sequences[`com.tldraw.${typeName}`] = recordVersion.version;
      if ("subTypeKey" in recordVersion) {
        for (const [subType, version2] of Object.entries(recordVersion.subTypeVersions)) {
          result.sequences[`com.tldraw.${typeName}.${subType}`] = version2;
        }
      }
    }
    return Result.ok(result);
  }
  var StoreSchema = class _StoreSchema {
    constructor(types, options) {
      this.types = types;
      this.options = options;
      for (const m of options.migrations ?? []) {
        assert(!this.migrations[m.sequenceId], `Duplicate migration sequenceId ${m.sequenceId}`);
        validateMigrations(m);
        this.migrations[m.sequenceId] = m;
      }
      const allMigrations = Object.values(this.migrations).flatMap((m) => m.sequence);
      this.sortedMigrations = sortMigrations(allMigrations);
      for (const migration of this.sortedMigrations) {
        if (!migration.dependsOn?.length) continue;
        for (const dep of migration.dependsOn) {
          const depMigration = allMigrations.find((m) => m.id === dep);
          assert(depMigration, `Migration '${migration.id}' depends on missing migration '${dep}'`);
        }
      }
    }
    static create(types, options) {
      return new _StoreSchema(types, options ?? {});
    }
    migrations = {};
    sortedMigrations;
    validateRecord(store, record, phase, recordBefore) {
      try {
        const recordType = getOwnProperty(this.types, record.typeName);
        if (!recordType) {
          throw new Error(`Missing definition for record type ${record.typeName}`);
        }
        return recordType.validate(record, recordBefore ?? void 0);
      } catch (error) {
        if (this.options.onValidationFailure) {
          return this.options.onValidationFailure({
            store,
            record,
            phase,
            recordBefore,
            error
          });
        } else {
          throw error;
        }
      }
    }
    // TODO: use a weakmap to store the result of this function
    getMigrationsSince(persistedSchema) {
      const upgradeResult = upgradeSchema(persistedSchema);
      if (!upgradeResult.ok) {
        return upgradeResult;
      }
      const schema = upgradeResult.value;
      const sequenceIdsToInclude = new Set(
        // start with any shared sequences
        Object.keys(schema.sequences).filter((sequenceId) => this.migrations[sequenceId])
      );
      for (const sequenceId in this.migrations) {
        if (schema.sequences[sequenceId] === void 0 && this.migrations[sequenceId].retroactive) {
          sequenceIdsToInclude.add(sequenceId);
        }
      }
      if (sequenceIdsToInclude.size === 0) {
        return Result.ok([]);
      }
      const allMigrationsToInclude = /* @__PURE__ */ new Set();
      for (const sequenceId of sequenceIdsToInclude) {
        const theirVersion = schema.sequences[sequenceId];
        if (typeof theirVersion !== "number" && this.migrations[sequenceId].retroactive || theirVersion === 0) {
          for (const migration of this.migrations[sequenceId].sequence) {
            allMigrationsToInclude.add(migration.id);
          }
          continue;
        }
        const theirVersionId = `${sequenceId}/${theirVersion}`;
        const idx = this.migrations[sequenceId].sequence.findIndex((m) => m.id === theirVersionId);
        if (idx === -1) {
          return Result.err("Incompatible schema?");
        }
        for (const migration of this.migrations[sequenceId].sequence.slice(idx + 1)) {
          allMigrationsToInclude.add(migration.id);
        }
      }
      return Result.ok(this.sortedMigrations.filter(({ id }) => allMigrationsToInclude.has(id)));
    }
    migratePersistedRecord(record, persistedSchema, direction = "up") {
      const migrations = this.getMigrationsSince(persistedSchema);
      if (!migrations.ok) {
        console.error("Error migrating record", migrations.error);
        return { type: "error", reason: MigrationFailureReason.MigrationError };
      }
      let migrationsToApply = migrations.value;
      if (migrationsToApply.length === 0) {
        return { type: "success", value: record };
      }
      if (migrationsToApply.some((m) => m.scope === "store")) {
        return {
          type: "error",
          reason: direction === "down" ? MigrationFailureReason.TargetVersionTooOld : MigrationFailureReason.TargetVersionTooNew
        };
      }
      if (direction === "down") {
        if (!migrationsToApply.every((m) => m.down)) {
          return {
            type: "error",
            reason: MigrationFailureReason.TargetVersionTooOld
          };
        }
        migrationsToApply = migrationsToApply.slice().reverse();
      }
      record = structuredClone(record);
      try {
        for (const migration of migrationsToApply) {
          if (migration.scope === "store") throw new Error(
            /* won't happen, just for TS */
          );
          const shouldApply = migration.filter ? migration.filter(record) : true;
          if (!shouldApply) continue;
          const result = migration[direction](record);
          if (result) {
            record = structuredClone(result);
          }
        }
      } catch (e) {
        console.error("Error migrating record", e);
        return { type: "error", reason: MigrationFailureReason.MigrationError };
      }
      return { type: "success", value: record };
    }
    migrateStoreSnapshot(snapshot) {
      let { store } = snapshot;
      const migrations = this.getMigrationsSince(snapshot.schema);
      if (!migrations.ok) {
        console.error("Error migrating store", migrations.error);
        return { type: "error", reason: MigrationFailureReason.MigrationError };
      }
      const migrationsToApply = migrations.value;
      if (migrationsToApply.length === 0) {
        return { type: "success", value: store };
      }
      store = structuredClone(store);
      try {
        for (const migration of migrationsToApply) {
          if (migration.scope === "record") {
            for (const [id, record] of Object.entries(store)) {
              const shouldApply = migration.filter ? migration.filter(record) : true;
              if (!shouldApply) continue;
              const result = migration.up(record);
              if (result) {
                store[id] = structuredClone(result);
              }
            }
          } else if (migration.scope === "store") {
            const result = migration.up(store);
            if (result) {
              store = structuredClone(result);
            }
          } else {
            exhaustiveSwitchError(migration);
          }
        }
      } catch (e) {
        console.error("Error migrating store", e);
        return { type: "error", reason: MigrationFailureReason.MigrationError };
      }
      return { type: "success", value: store };
    }
    /** @internal */
    createIntegrityChecker(store) {
      return this.options.createIntegrityChecker?.(store) ?? void 0;
    }
    serialize() {
      return {
        schemaVersion: 2,
        sequences: Object.fromEntries(
          Object.values(this.migrations).map(({ sequenceId, sequence }) => [
            sequenceId,
            sequence.length ? parseMigrationId(sequence.at(-1).id).version : 0
          ])
        )
      };
    }
    /**
     * @deprecated This is only here for legacy reasons, don't use it unless you have david's blessing!
     */
    serializeEarliestVersion() {
      return {
        schemaVersion: 2,
        sequences: Object.fromEntries(
          Object.values(this.migrations).map(({ sequenceId }) => [sequenceId, 0])
        )
      };
    }
    /** @internal */
    getType(typeName) {
      const type = getOwnProperty(this.types, typeName);
      assert(type, "record type does not exists");
      return type;
    }
  };

  // node_modules/@tldraw/store/dist-esm/index.mjs
  registerTldrawLibraryVersion(
    "@tldraw/store",
    "3.7.2",
    "esm"
  );

  // node_modules/@tldraw/validate/dist-esm/lib/validation.mjs
  var validation_exports = {};
  __export(validation_exports, {
    ArrayOfValidator: () => ArrayOfValidator,
    DictValidator: () => DictValidator,
    ObjectValidator: () => ObjectValidator,
    UnionValidator: () => UnionValidator,
    ValidationError: () => ValidationError,
    Validator: () => Validator,
    any: () => any,
    array: () => array,
    arrayOf: () => arrayOf,
    bigint: () => bigint,
    boolean: () => boolean,
    dict: () => dict,
    httpUrl: () => httpUrl,
    indexKey: () => indexKey,
    integer: () => integer,
    jsonDict: () => jsonDict,
    jsonValue: () => jsonValue,
    linkUrl: () => linkUrl,
    literal: () => literal,
    literalEnum: () => literalEnum,
    model: () => model,
    nonZeroInteger: () => nonZeroInteger,
    nonZeroNumber: () => nonZeroNumber,
    nullable: () => nullable,
    number: () => number,
    numberUnion: () => numberUnion,
    object: () => object,
    optional: () => optional,
    or: () => or,
    positiveInteger: () => positiveInteger,
    positiveNumber: () => positiveNumber,
    setEnum: () => setEnum,
    srcUrl: () => srcUrl,
    string: () => string,
    union: () => union,
    unknown: () => unknown,
    unknownObject: () => unknownObject
  });
  function formatPath(path) {
    if (!path.length) {
      return null;
    }
    let formattedPath = "";
    for (const item of path) {
      if (typeof item === "number") {
        formattedPath += `.${item}`;
      } else if (item.startsWith("(")) {
        if (formattedPath.endsWith(")")) {
          formattedPath = `${formattedPath.slice(0, -1)}, ${item.slice(1)}`;
        } else {
          formattedPath += item;
        }
      } else {
        formattedPath += `.${item}`;
      }
    }
    formattedPath = formattedPath.replace(/id = [^,]+, /, "").replace(/id = [^)]+/, "");
    if (formattedPath.startsWith(".")) {
      return formattedPath.slice(1);
    }
    return formattedPath;
  }
  var ValidationError = class extends Error {
    constructor(rawMessage, path = []) {
      const formattedPath = formatPath(path);
      const indentedMessage = rawMessage.split("\n").map((line, i) => i === 0 ? line : `  ${line}`).join("\n");
      super(path ? `At ${formattedPath}: ${indentedMessage}` : indentedMessage);
      this.rawMessage = rawMessage;
      this.path = path;
    }
    name = "ValidationError";
  };
  function prefixError(path, fn) {
    try {
      return fn();
    } catch (err) {
      if (err instanceof ValidationError) {
        throw new ValidationError(err.rawMessage, [path, ...err.path]);
      }
      throw new ValidationError(err.toString(), [path]);
    }
  }
  function typeToString(value) {
    if (value === null) return "null";
    if (Array.isArray(value)) return "an array";
    const type = typeof value;
    switch (type) {
      case "bigint":
      case "boolean":
      case "function":
      case "number":
      case "string":
      case "symbol":
        return `a ${type}`;
      case "object":
        return `an ${type}`;
      case "undefined":
        return "undefined";
      default:
        exhaustiveSwitchError(type);
    }
  }
  var Validator = class _Validator {
    constructor(validationFn, validateUsingKnownGoodVersionFn) {
      this.validationFn = validationFn;
      this.validateUsingKnownGoodVersionFn = validateUsingKnownGoodVersionFn;
    }
    /**
     * Asserts that the passed value is of the correct type and returns it. The returned value is
     * guaranteed to be referentially equal to the passed value.
     */
    validate(value) {
      const validated = this.validationFn(value);
      if (!Object.is(value, validated)) {
        throw new ValidationError("Validator functions must return the same value they were passed");
      }
      return validated;
    }
    validateUsingKnownGoodVersion(knownGoodValue, newValue) {
      if (Object.is(knownGoodValue, newValue)) {
        return knownGoodValue;
      }
      if (this.validateUsingKnownGoodVersionFn) {
        return this.validateUsingKnownGoodVersionFn(knownGoodValue, newValue);
      }
      return this.validate(newValue);
    }
    /** Checks that the passed value is of the correct type. */
    isValid(value) {
      try {
        this.validate(value);
        return true;
      } catch {
        return false;
      }
    }
    /**
     * Returns a new validator that also accepts null or undefined. The resulting value will always be
     * null.
     */
    nullable() {
      return nullable(this);
    }
    /**
     * Returns a new validator that also accepts null or undefined. The resulting value will always be
     * null.
     */
    optional() {
      return optional(this);
    }
    /**
     * Refine this validation to a new type. The passed-in validation function should throw an error
     * if the value can't be converted to the new type, or return the new type otherwise.
     */
    refine(otherValidationFn) {
      return new _Validator(
        (value) => {
          return otherValidationFn(this.validate(value));
        },
        (knownGoodValue, newValue) => {
          const validated = this.validateUsingKnownGoodVersion(knownGoodValue, newValue);
          if (Object.is(knownGoodValue, validated)) {
            return knownGoodValue;
          }
          return otherValidationFn(validated);
        }
      );
    }
    check(nameOrCheckFn, checkFn) {
      if (typeof nameOrCheckFn === "string") {
        return this.refine((value) => {
          prefixError(`(check ${nameOrCheckFn})`, () => checkFn(value));
          return value;
        });
      } else {
        return this.refine((value) => {
          nameOrCheckFn(value);
          return value;
        });
      }
    }
  };
  var ArrayOfValidator = class extends Validator {
    constructor(itemValidator) {
      super(
        (value) => {
          const arr = array.validate(value);
          for (let i = 0; i < arr.length; i++) {
            prefixError(i, () => itemValidator.validate(arr[i]));
          }
          return arr;
        },
        (knownGoodValue, newValue) => {
          if (!itemValidator.validateUsingKnownGoodVersion) return this.validate(newValue);
          const arr = array.validate(newValue);
          let isDifferent = knownGoodValue.length !== arr.length;
          for (let i = 0; i < arr.length; i++) {
            const item = arr[i];
            if (i >= knownGoodValue.length) {
              isDifferent = true;
              prefixError(i, () => itemValidator.validate(item));
              continue;
            }
            if (Object.is(knownGoodValue[i], item)) {
              continue;
            }
            const checkedItem = prefixError(
              i,
              () => itemValidator.validateUsingKnownGoodVersion(knownGoodValue[i], item)
            );
            if (!Object.is(checkedItem, knownGoodValue[i])) {
              isDifferent = true;
            }
          }
          return isDifferent ? newValue : knownGoodValue;
        }
      );
      this.itemValidator = itemValidator;
    }
    nonEmpty() {
      return this.check((value) => {
        if (value.length === 0) {
          throw new ValidationError("Expected a non-empty array");
        }
      });
    }
    lengthGreaterThan1() {
      return this.check((value) => {
        if (value.length <= 1) {
          throw new ValidationError("Expected an array with length greater than 1");
        }
      });
    }
  };
  var ObjectValidator = class _ObjectValidator extends Validator {
    constructor(config, shouldAllowUnknownProperties = false) {
      super(
        (object2) => {
          if (typeof object2 !== "object" || object2 === null) {
            throw new ValidationError(`Expected object, got ${typeToString(object2)}`);
          }
          for (const [key, validator] of Object.entries(config)) {
            prefixError(key, () => {
              ;
              validator.validate(getOwnProperty(object2, key));
            });
          }
          if (!shouldAllowUnknownProperties) {
            for (const key of Object.keys(object2)) {
              if (!hasOwnProperty(config, key)) {
                throw new ValidationError(`Unexpected property`, [key]);
              }
            }
          }
          return object2;
        },
        (knownGoodValue, newValue) => {
          if (typeof newValue !== "object" || newValue === null) {
            throw new ValidationError(`Expected object, got ${typeToString(newValue)}`);
          }
          let isDifferent = false;
          for (const [key, validator] of Object.entries(config)) {
            const prev = getOwnProperty(knownGoodValue, key);
            const next = getOwnProperty(newValue, key);
            if (Object.is(prev, next)) {
              continue;
            }
            const checked = prefixError(key, () => {
              const validatable = validator;
              if (validatable.validateUsingKnownGoodVersion) {
                return validatable.validateUsingKnownGoodVersion(prev, next);
              } else {
                return validatable.validate(next);
              }
            });
            if (!Object.is(checked, prev)) {
              isDifferent = true;
            }
          }
          if (!shouldAllowUnknownProperties) {
            for (const key of Object.keys(newValue)) {
              if (!hasOwnProperty(config, key)) {
                throw new ValidationError(`Unexpected property`, [key]);
              }
            }
          }
          for (const key of Object.keys(knownGoodValue)) {
            if (!hasOwnProperty(newValue, key)) {
              isDifferent = true;
              break;
            }
          }
          return isDifferent ? newValue : knownGoodValue;
        }
      );
      this.config = config;
      this.shouldAllowUnknownProperties = shouldAllowUnknownProperties;
    }
    allowUnknownProperties() {
      return new _ObjectValidator(this.config, true);
    }
    /**
     * Extend an object validator by adding additional properties.
     *
     * @example
     *
     * ```ts
     * const animalValidator = T.object({
     * 	name: T.string,
     * })
     * const catValidator = animalValidator.extend({
     * 	meowVolume: T.number,
     * })
     * ```
     */
    extend(extension) {
      return new _ObjectValidator({ ...this.config, ...extension });
    }
  };
  var UnionValidator = class _UnionValidator extends Validator {
    constructor(key, config, unknownValueValidation, useNumberKeys) {
      super(
        (input) => {
          this.expectObject(input);
          const { matchingSchema, variant } = this.getMatchingSchemaAndVariant(input);
          if (matchingSchema === void 0) {
            return this.unknownValueValidation(input, variant);
          }
          return prefixError(`(${key} = ${variant})`, () => matchingSchema.validate(input));
        },
        (prevValue, newValue) => {
          this.expectObject(newValue);
          this.expectObject(prevValue);
          const { matchingSchema, variant } = this.getMatchingSchemaAndVariant(newValue);
          if (matchingSchema === void 0) {
            return this.unknownValueValidation(newValue, variant);
          }
          if (getOwnProperty(prevValue, key) !== getOwnProperty(newValue, key)) {
            return prefixError(`(${key} = ${variant})`, () => matchingSchema.validate(newValue));
          }
          return prefixError(`(${key} = ${variant})`, () => {
            if (matchingSchema.validateUsingKnownGoodVersion) {
              return matchingSchema.validateUsingKnownGoodVersion(prevValue, newValue);
            } else {
              return matchingSchema.validate(newValue);
            }
          });
        }
      );
      this.key = key;
      this.config = config;
      this.unknownValueValidation = unknownValueValidation;
      this.useNumberKeys = useNumberKeys;
    }
    expectObject(value) {
      if (typeof value !== "object" || value === null) {
        throw new ValidationError(`Expected an object, got ${typeToString(value)}`, []);
      }
    }
    getMatchingSchemaAndVariant(object2) {
      const variant = getOwnProperty(object2, this.key);
      if (!this.useNumberKeys && typeof variant !== "string") {
        throw new ValidationError(
          `Expected a string for key "${this.key}", got ${typeToString(variant)}`
        );
      } else if (this.useNumberKeys && !Number.isFinite(Number(variant))) {
        throw new ValidationError(`Expected a number for key "${this.key}", got "${variant}"`);
      }
      const matchingSchema = hasOwnProperty(this.config, variant) ? this.config[variant] : void 0;
      return { matchingSchema, variant };
    }
    validateUnknownVariants(unknownValueValidation) {
      return new _UnionValidator(this.key, this.config, unknownValueValidation, this.useNumberKeys);
    }
  };
  var DictValidator = class extends Validator {
    constructor(keyValidator, valueValidator) {
      super(
        (object2) => {
          if (typeof object2 !== "object" || object2 === null) {
            throw new ValidationError(`Expected object, got ${typeToString(object2)}`);
          }
          for (const [key, value] of Object.entries(object2)) {
            prefixError(key, () => {
              keyValidator.validate(key);
              valueValidator.validate(value);
            });
          }
          return object2;
        },
        (knownGoodValue, newValue) => {
          if (typeof newValue !== "object" || newValue === null) {
            throw new ValidationError(`Expected object, got ${typeToString(newValue)}`);
          }
          let isDifferent = false;
          for (const [key, value] of Object.entries(newValue)) {
            if (!hasOwnProperty(knownGoodValue, key)) {
              isDifferent = true;
              prefixError(key, () => {
                keyValidator.validate(key);
                valueValidator.validate(value);
              });
              continue;
            }
            const prev = getOwnProperty(knownGoodValue, key);
            const next = value;
            if (Object.is(prev, next)) {
              continue;
            }
            const checked = prefixError(key, () => {
              if (valueValidator.validateUsingKnownGoodVersion) {
                return valueValidator.validateUsingKnownGoodVersion(prev, next);
              } else {
                return valueValidator.validate(next);
              }
            });
            if (!Object.is(checked, prev)) {
              isDifferent = true;
            }
          }
          for (const key of Object.keys(knownGoodValue)) {
            if (!hasOwnProperty(newValue, key)) {
              isDifferent = true;
              break;
            }
          }
          return isDifferent ? newValue : knownGoodValue;
        }
      );
      this.keyValidator = keyValidator;
      this.valueValidator = valueValidator;
    }
  };
  function typeofValidator(type) {
    return new Validator((value) => {
      if (typeof value !== type) {
        throw new ValidationError(`Expected ${type}, got ${typeToString(value)}`);
      }
      return value;
    });
  }
  var unknown = new Validator((value) => value);
  var any = new Validator((value) => value);
  var string = typeofValidator("string");
  var number = typeofValidator("number").check((number2) => {
    if (Number.isNaN(number2)) {
      throw new ValidationError("Expected a number, got NaN");
    }
    if (!Number.isFinite(number2)) {
      throw new ValidationError(`Expected a finite number, got ${number2}`);
    }
  });
  var positiveNumber = number.check((value) => {
    if (value < 0) throw new ValidationError(`Expected a positive number, got ${value}`);
  });
  var nonZeroNumber = number.check((value) => {
    if (value <= 0) throw new ValidationError(`Expected a non-zero positive number, got ${value}`);
  });
  var integer = number.check((value) => {
    if (!Number.isInteger(value)) throw new ValidationError(`Expected an integer, got ${value}`);
  });
  var positiveInteger = integer.check((value) => {
    if (value < 0) throw new ValidationError(`Expected a positive integer, got ${value}`);
  });
  var nonZeroInteger = integer.check((value) => {
    if (value <= 0) throw new ValidationError(`Expected a non-zero positive integer, got ${value}`);
  });
  var boolean = typeofValidator("boolean");
  var bigint = typeofValidator("bigint");
  function literal(expectedValue) {
    return new Validator((actualValue) => {
      if (actualValue !== expectedValue) {
        throw new ValidationError(`Expected ${expectedValue}, got ${JSON.stringify(actualValue)}`);
      }
      return expectedValue;
    });
  }
  var array = new Validator((value) => {
    if (!Array.isArray(value)) {
      throw new ValidationError(`Expected an array, got ${typeToString(value)}`);
    }
    return value;
  });
  function arrayOf(itemValidator) {
    return new ArrayOfValidator(itemValidator);
  }
  var unknownObject = new Validator((value) => {
    if (typeof value !== "object" || value === null) {
      throw new ValidationError(`Expected object, got ${typeToString(value)}`);
    }
    return value;
  });
  function object(config) {
    return new ObjectValidator(config);
  }
  function isPlainObject(value) {
    return typeof value === "object" && value !== null && (Object.getPrototypeOf(value) === Object.prototype || Object.getPrototypeOf(value) === null || Object.getPrototypeOf(value) === STRUCTURED_CLONE_OBJECT_PROTOTYPE);
  }
  function isValidJson(value) {
    if (value === null || typeof value === "number" || typeof value === "string" || typeof value === "boolean") {
      return true;
    }
    if (Array.isArray(value)) {
      return value.every(isValidJson);
    }
    if (isPlainObject(value)) {
      return Object.values(value).every(isValidJson);
    }
    return false;
  }
  var jsonValue = new Validator(
    (value) => {
      if (isValidJson(value)) {
        return value;
      }
      throw new ValidationError(`Expected json serializable value, got ${typeof value}`);
    },
    (knownGoodValue, newValue) => {
      if (Array.isArray(knownGoodValue) && Array.isArray(newValue)) {
        let isDifferent = knownGoodValue.length !== newValue.length;
        for (let i = 0; i < newValue.length; i++) {
          if (i >= knownGoodValue.length) {
            isDifferent = true;
            jsonValue.validate(newValue[i]);
            continue;
          }
          const prev = knownGoodValue[i];
          const next = newValue[i];
          if (Object.is(prev, next)) {
            continue;
          }
          const checked = jsonValue.validateUsingKnownGoodVersion(prev, next);
          if (!Object.is(checked, prev)) {
            isDifferent = true;
          }
        }
        return isDifferent ? newValue : knownGoodValue;
      } else if (isPlainObject(knownGoodValue) && isPlainObject(newValue)) {
        let isDifferent = false;
        for (const key of Object.keys(newValue)) {
          if (!hasOwnProperty(knownGoodValue, key)) {
            isDifferent = true;
            jsonValue.validate(newValue[key]);
            continue;
          }
          const prev = knownGoodValue[key];
          const next = newValue[key];
          if (Object.is(prev, next)) {
            continue;
          }
          const checked = jsonValue.validateUsingKnownGoodVersion(prev, next);
          if (!Object.is(checked, prev)) {
            isDifferent = true;
          }
        }
        for (const key of Object.keys(knownGoodValue)) {
          if (!hasOwnProperty(newValue, key)) {
            isDifferent = true;
            break;
          }
        }
        return isDifferent ? newValue : knownGoodValue;
      } else {
        return jsonValue.validate(newValue);
      }
    }
  );
  function jsonDict() {
    return dict(string, jsonValue);
  }
  function dict(keyValidator, valueValidator) {
    return new DictValidator(keyValidator, valueValidator);
  }
  function union(key, config) {
    return new UnionValidator(
      key,
      config,
      (_unknownValue, unknownVariant) => {
        throw new ValidationError(
          `Expected one of ${Object.keys(config).map((key2) => JSON.stringify(key2)).join(" or ")}, got ${JSON.stringify(unknownVariant)}`,
          [key]
        );
      },
      false
    );
  }
  function numberUnion(key, config) {
    return new UnionValidator(
      key,
      config,
      (unknownValue, unknownVariant) => {
        throw new ValidationError(
          `Expected one of ${Object.keys(config).map((key2) => JSON.stringify(key2)).join(" or ")}, got ${JSON.stringify(unknownVariant)}`,
          [key]
        );
      },
      true
    );
  }
  function model(name, validator) {
    return new Validator(
      (value) => {
        return prefixError(name, () => validator.validate(value));
      },
      (prevValue, newValue) => {
        return prefixError(name, () => {
          if (validator.validateUsingKnownGoodVersion) {
            return validator.validateUsingKnownGoodVersion(prevValue, newValue);
          } else {
            return validator.validate(newValue);
          }
        });
      }
    );
  }
  function setEnum(values) {
    return new Validator((value) => {
      if (!values.has(value)) {
        const valuesString = Array.from(values, (value2) => JSON.stringify(value2)).join(" or ");
        throw new ValidationError(`Expected ${valuesString}, got ${value}`);
      }
      return value;
    });
  }
  function optional(validator) {
    return new Validator(
      (value) => {
        if (value === void 0) return void 0;
        return validator.validate(value);
      },
      (knownGoodValue, newValue) => {
        if (knownGoodValue === void 0 && newValue === void 0) return void 0;
        if (newValue === void 0) return void 0;
        if (validator.validateUsingKnownGoodVersion && knownGoodValue !== void 0) {
          return validator.validateUsingKnownGoodVersion(knownGoodValue, newValue);
        }
        return validator.validate(newValue);
      }
    );
  }
  function nullable(validator) {
    return new Validator(
      (value) => {
        if (value === null) return null;
        return validator.validate(value);
      },
      (knownGoodValue, newValue) => {
        if (newValue === null) return null;
        if (validator.validateUsingKnownGoodVersion && knownGoodValue !== null) {
          return validator.validateUsingKnownGoodVersion(knownGoodValue, newValue);
        }
        return validator.validate(newValue);
      }
    );
  }
  function literalEnum(...values) {
    return setEnum(new Set(values));
  }
  function parseUrl(str) {
    try {
      return new URL(str);
    } catch {
      if (str.startsWith("/") || str.startsWith("./")) {
        try {
          return new URL(str, "http://example.com");
        } catch {
          throw new ValidationError(`Expected a valid url, got ${JSON.stringify(str)}`);
        }
      }
      throw new ValidationError(`Expected a valid url, got ${JSON.stringify(str)}`);
    }
  }
  var validLinkProtocols = /* @__PURE__ */ new Set(["http:", "https:", "mailto:"]);
  var linkUrl = string.check((value) => {
    if (value === "") return;
    const url = parseUrl(value);
    if (!validLinkProtocols.has(url.protocol.toLowerCase())) {
      throw new ValidationError(
        `Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
      );
    }
  });
  var validSrcProtocols = /* @__PURE__ */ new Set(["http:", "https:", "data:", "asset:"]);
  var srcUrl = string.check((value) => {
    if (value === "") return;
    const url = parseUrl(value);
    if (!validSrcProtocols.has(url.protocol.toLowerCase())) {
      throw new ValidationError(
        `Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
      );
    }
  });
  var httpUrl = string.check((value) => {
    if (value === "") return;
    const url = parseUrl(value);
    if (!url.protocol.toLowerCase().match(/^https?:$/)) {
      throw new ValidationError(
        `Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
      );
    }
  });
  var indexKey = string.refine((key) => {
    try {
      validateIndexKey(key);
      return key;
    } catch {
      throw new ValidationError(`Expected an index key, got ${JSON.stringify(key)}`);
    }
  });
  function or(v1, v2) {
    return new Validator((value) => {
      try {
        return v1.validate(value);
      } catch {
        return v2.validate(value);
      }
    });
  }

  // node_modules/@tldraw/validate/dist-esm/index.mjs
  registerTldrawLibraryVersion(
    "@tldraw/validate",
    "3.7.2",
    "esm"
  );

  // node_modules/@tldraw/tlschema/dist-esm/misc/id-validator.mjs
  function idValidator(prefix) {
    return validation_exports.string.refine((id) => {
      if (!id.startsWith(`${prefix}:`)) {
        throw new Error(`${prefix} ID must start with "${prefix}:"`);
      }
      return id;
    });
  }

  // node_modules/@tldraw/tlschema/dist-esm/assets/TLBaseAsset.mjs
  var assetIdValidator = idValidator("asset");
  function createAssetValidator(type, props) {
    return validation_exports.object({
      id: assetIdValidator,
      typeName: validation_exports.literal("asset"),
      type: validation_exports.literal(type),
      props,
      meta: validation_exports.jsonValue
    });
  }

  // node_modules/@tldraw/tlschema/dist-esm/misc/geometry-types.mjs
  var vecModelValidator = validation_exports.object({
    x: validation_exports.number,
    y: validation_exports.number,
    z: validation_exports.number.optional()
  });
  var boxModelValidator = validation_exports.object({
    x: validation_exports.number,
    y: validation_exports.number,
    w: validation_exports.number,
    h: validation_exports.number
  });

  // node_modules/@tldraw/tlschema/dist-esm/misc/TLOpacity.mjs
  var opacityValidator = validation_exports.number.check((n) => {
    if (n < 0 || n > 1) {
      throw new validation_exports.ValidationError("Opacity must be between 0 and 1");
    }
  });

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLBaseShape.mjs
  var parentIdValidator = validation_exports.string.refine((id) => {
    if (!id.startsWith("page:") && !id.startsWith("shape:")) {
      throw new Error('Parent ID must start with "page:" or "shape:"');
    }
    return id;
  });
  var shapeIdValidator = idValidator("shape");
  function createShapeValidator(type, props, meta) {
    return validation_exports.object({
      id: shapeIdValidator,
      typeName: validation_exports.literal("shape"),
      x: validation_exports.number,
      y: validation_exports.number,
      rotation: validation_exports.number,
      index: validation_exports.indexKey,
      parentId: parentIdValidator,
      type: validation_exports.literal(type),
      isLocked: validation_exports.boolean,
      opacity: opacityValidator,
      props: props ? validation_exports.object(props) : validation_exports.jsonValue,
      meta: meta ? validation_exports.object(meta) : validation_exports.jsonValue
    });
  }

  // node_modules/@tldraw/tlschema/dist-esm/bindings/TLBaseBinding.mjs
  var bindingIdValidator = idValidator("binding");
  function createBindingValidator(type, props, meta) {
    return validation_exports.object({
      id: bindingIdValidator,
      typeName: validation_exports.literal("binding"),
      type: validation_exports.literal(type),
      fromId: shapeIdValidator,
      toId: shapeIdValidator,
      props: props ? validation_exports.object(props) : validation_exports.jsonValue,
      meta: meta ? validation_exports.object(meta) : validation_exports.jsonValue
    });
  }

  // node_modules/@tldraw/tlschema/dist-esm/records/TLBinding.mjs
  var rootBindingVersions = createMigrationIds("com.tldraw.binding", {});
  var rootBindingMigrations = createRecordMigrationSequence({
    sequenceId: "com.tldraw.binding",
    recordType: "binding",
    sequence: []
  });
  function createBindingId(id) {
    return `binding:${id ?? uniqueId()}`;
  }
  function createBindingPropsMigrationSequence(migrations) {
    return migrations;
  }
  function createBindingRecordType(bindings) {
    return createRecordType("binding", {
      scope: "document",
      validator: validation_exports.model(
        "binding",
        validation_exports.union(
          "type",
          mapObjectMapValues(
            bindings,
            (type, { props, meta }) => createBindingValidator(type, props, meta)
          )
        )
      )
    }).withDefaultProperties(() => ({
      meta: {}
    }));
  }

  // node_modules/@tldraw/tlschema/dist-esm/styles/StyleProp.mjs
  var StyleProp = class _StyleProp {
    /** @internal */
    constructor(id, defaultValue, type) {
      this.id = id;
      this.defaultValue = defaultValue;
      this.type = type;
    }
    /**
     * Define a new {@link StyleProp}.
     *
     * @param uniqueId - Each StyleProp must have a unique ID. We recommend you prefix this with
     * your app/library name.
     * @param options -
     * - `defaultValue`: The default value for this style prop.
     *
     * - `type`: Optionally, describe what type of data you expect for this style prop.
     *
     * @example
     * ```ts
     * import {T} from '@tldraw/validate'
     * import {StyleProp} from '@tldraw/tlschema'
     *
     * const MyLineWidthProp = StyleProp.define('myApp:lineWidth', {
     *   defaultValue: 1,
     *   type: T.number,
     * })
     * ```
     * @public
     */
    static define(uniqueId2, options) {
      const { defaultValue, type = validation_exports.any } = options;
      return new _StyleProp(uniqueId2, defaultValue, type);
    }
    /**
     * Define a new {@link StyleProp} as a list of possible values.
     *
     * @param uniqueId - Each StyleProp must have a unique ID. We recommend you prefix this with
     * your app/library name.
     * @param options -
     * - `defaultValue`: The default value for this style prop.
     *
     * - `values`: An array of possible values of this style prop.
     *
     * @example
     * ```ts
     * import {StyleProp} from '@tldraw/tlschema'
     *
     * const MySizeProp = StyleProp.defineEnum('myApp:size', {
     *   defaultValue: 'medium',
     *   values: ['small', 'medium', 'large'],
     * })
     * ```
     */
    static defineEnum(uniqueId2, options) {
      const { defaultValue, values } = options;
      return new EnumStyleProp(uniqueId2, defaultValue, values);
    }
    setDefaultValue(value) {
      this.defaultValue = value;
    }
    validate(value) {
      return this.type.validate(value);
    }
    validateUsingKnownGoodVersion(prevValue, newValue) {
      if (this.type.validateUsingKnownGoodVersion) {
        return this.type.validateUsingKnownGoodVersion(prevValue, newValue);
      } else {
        return this.validate(newValue);
      }
    }
  };
  var EnumStyleProp = class extends StyleProp {
    /** @internal */
    constructor(id, defaultValue, values) {
      super(id, defaultValue, validation_exports.literalEnum(...values));
      this.values = values;
    }
  };

  // node_modules/@tldraw/tlschema/dist-esm/records/TLShape.mjs
  var rootShapeVersions = createMigrationIds("com.tldraw.shape", {
    AddIsLocked: 1,
    HoistOpacity: 2,
    AddMeta: 3,
    AddWhite: 4
  });
  var rootShapeMigrations = createRecordMigrationSequence({
    sequenceId: "com.tldraw.shape",
    recordType: "shape",
    sequence: [
      {
        id: rootShapeVersions.AddIsLocked,
        up: (record) => {
          record.isLocked = false;
        },
        down: (record) => {
          delete record.isLocked;
        }
      },
      {
        id: rootShapeVersions.HoistOpacity,
        up: (record) => {
          record.opacity = Number(record.props.opacity ?? "1");
          delete record.props.opacity;
        },
        down: (record) => {
          const opacity = record.opacity;
          delete record.opacity;
          record.props.opacity = opacity < 0.175 ? "0.1" : opacity < 0.375 ? "0.25" : opacity < 0.625 ? "0.5" : opacity < 0.875 ? "0.75" : "1";
        }
      },
      {
        id: rootShapeVersions.AddMeta,
        up: (record) => {
          record.meta = {};
        }
      },
      {
        id: rootShapeVersions.AddWhite,
        up: (_record) => {
        },
        down: (record) => {
          if (record.props.color === "white") {
            record.props.color = "black";
          }
        }
      }
    ]
  });
  function isShape(record) {
    if (!record) return false;
    return record.typeName === "shape";
  }
  function isShapeId(id) {
    if (!id) return false;
    return id.startsWith("shape:");
  }
  function createShapeId(id) {
    return `shape:${id ?? uniqueId()}`;
  }
  function getShapePropKeysByStyle(props) {
    const propKeysByStyle = /* @__PURE__ */ new Map();
    for (const [key, prop] of Object.entries(props)) {
      if (prop instanceof StyleProp) {
        if (propKeysByStyle.has(prop)) {
          throw new Error(
            `Duplicate style prop ${prop.id}. Each style prop can only be used once within a shape.`
          );
        }
        propKeysByStyle.set(prop, key);
      }
    }
    return propKeysByStyle;
  }
  function createShapePropsMigrationSequence(migrations) {
    return migrations;
  }
  function createShapePropsMigrationIds(shapeType, ids) {
    return mapObjectMapValues(ids, (_k, v) => `com.tldraw.shape.${shapeType}/${v}`);
  }
  function createShapeRecordType(shapes) {
    return createRecordType("shape", {
      scope: "document",
      validator: validation_exports.model(
        "shape",
        validation_exports.union(
          "type",
          mapObjectMapValues(
            shapes,
            (type, { props, meta }) => createShapeValidator(type, props, meta)
          )
        )
      )
    }).withDefaultProperties(() => ({
      x: 0,
      y: 0,
      rotation: 0,
      isLocked: false,
      opacity: 1,
      meta: {}
    }));
  }

  // node_modules/@tldraw/tlschema/dist-esm/recordsWithProps.mjs
  function processPropsMigrations(typeName, records) {
    const result = [];
    for (const [subType, { migrations }] of Object.entries(records)) {
      const sequenceId = `com.tldraw.${typeName}.${subType}`;
      if (!migrations) {
        result.push(
          createMigrationSequence({
            sequenceId,
            retroactive: false,
            sequence: []
          })
        );
      } else if ("sequenceId" in migrations) {
        assert(
          sequenceId === migrations.sequenceId,
          `sequenceId mismatch for ${subType} ${RecordType} migrations. Expected '${sequenceId}', got '${migrations.sequenceId}'`
        );
        result.push(migrations);
      } else if ("sequence" in migrations) {
        result.push(
          createMigrationSequence({
            sequenceId,
            retroactive: false,
            sequence: migrations.sequence.map(
              (m) => "id" in m ? createPropsMigration(typeName, subType, m) : m
            )
          })
        );
      } else {
        result.push(
          createMigrationSequence({
            sequenceId,
            retroactive: false,
            sequence: Object.keys(migrations.migrators).map((k) => Number(k)).sort((a, b) => a - b).map(
              (version2) => ({
                id: `${sequenceId}/${version2}`,
                scope: "record",
                filter: (r) => r.typeName === typeName && r.type === subType,
                up: (record) => {
                  const result2 = migrations.migrators[version2].up(record);
                  if (result2) {
                    return result2;
                  }
                },
                down: (record) => {
                  const result2 = migrations.migrators[version2].down(record);
                  if (result2) {
                    return result2;
                  }
                }
              })
            )
          })
        );
      }
    }
    return result;
  }
  function createPropsMigration(typeName, subType, m) {
    return {
      id: m.id,
      dependsOn: m.dependsOn,
      scope: "record",
      filter: (r) => r.typeName === typeName && r.type === subType,
      up: (record) => {
        const result = m.up(record.props);
        if (result) {
          record.props = result;
        }
      },
      down: typeof m.down === "function" ? (record) => {
        const result = m.down(record.props);
        if (result) {
          record.props = result;
        }
      } : void 0
    };
  }

  // node_modules/@tldraw/tlschema/dist-esm/styles/TLColorStyle.mjs
  var defaultColorNames = [
    "black",
    "grey",
    "light-violet",
    "violet",
    "blue",
    "light-blue",
    "yellow",
    "orange",
    "green",
    "light-green",
    "light-red",
    "red",
    "white"
  ];
  var DefaultColorThemePalette = {
    lightMode: {
      id: "light",
      text: "#000000",
      background: "rgb(249, 250, 251)",
      solid: "#fcfffe",
      black: {
        solid: "#1d1d1d",
        fill: "#1d1d1d",
        note: {
          fill: "#FCE19C",
          text: "#000000"
        },
        semi: "#e8e8e8",
        pattern: "#494949",
        highlight: {
          srgb: "#fddd00",
          p3: "color(display-p3 0.972 0.8705 0.05)"
        }
      },
      blue: {
        solid: "#4465e9",
        fill: "#4465e9",
        note: {
          fill: "#8AA3FF",
          text: "#000000"
        },
        semi: "#dce1f8",
        pattern: "#6681ee",
        highlight: {
          srgb: "#10acff",
          p3: "color(display-p3 0.308 0.6632 0.9996)"
        }
      },
      green: {
        solid: "#099268",
        fill: "#099268",
        note: {
          fill: "#6FC896",
          text: "#000000"
        },
        semi: "#d3e9e3",
        pattern: "#39a785",
        highlight: {
          srgb: "#00ffc8",
          p3: "color(display-p3 0.2536 0.984 0.7981)"
        }
      },
      grey: {
        solid: "#9fa8b2",
        fill: "#9fa8b2",
        note: {
          fill: "#C0CAD3",
          text: "#000000"
        },
        semi: "#eceef0",
        pattern: "#bcc3c9",
        highlight: {
          srgb: "#cbe7f1",
          p3: "color(display-p3 0.8163 0.9023 0.9416)"
        }
      },
      "light-blue": {
        solid: "#4ba1f1",
        fill: "#4ba1f1",
        note: {
          fill: "#9BC4FD",
          text: "#000000"
        },
        semi: "#ddedfa",
        pattern: "#6fbbf8",
        highlight: {
          srgb: "#00f4ff",
          p3: "color(display-p3 0.1512 0.9414 0.9996)"
        }
      },
      "light-green": {
        solid: "#4cb05e",
        fill: "#4cb05e",
        note: {
          fill: "#98D08A",
          text: "#000000"
        },
        semi: "#dbf0e0",
        pattern: "#65cb78",
        highlight: {
          srgb: "#65f641",
          p3: "color(display-p3 0.563 0.9495 0.3857)"
        }
      },
      "light-red": {
        solid: "#f87777",
        fill: "#f87777",
        note: {
          fill: "#F7A5A1",
          text: "#000000"
        },
        semi: "#f4dadb",
        pattern: "#fe9e9e",
        highlight: {
          srgb: "#ff7fa3",
          p3: "color(display-p3 0.9988 0.5301 0.6397)"
        }
      },
      "light-violet": {
        solid: "#e085f4",
        fill: "#e085f4",
        note: {
          fill: "#DFB0F9",
          text: "#000000"
        },
        semi: "#f5eafa",
        pattern: "#e9acf8",
        highlight: {
          srgb: "#ff88ff",
          p3: "color(display-p3 0.9676 0.5652 0.9999)"
        }
      },
      orange: {
        solid: "#e16919",
        fill: "#e16919",
        note: {
          fill: "#FAA475",
          text: "#000000"
        },
        semi: "#f8e2d4",
        pattern: "#f78438",
        highlight: {
          srgb: "#ffa500",
          p3: "color(display-p3 0.9988 0.6905 0.266)"
        }
      },
      red: {
        solid: "#e03131",
        fill: "#e03131",
        note: {
          fill: "#FC8282",
          text: "#000000"
        },
        semi: "#f4dadb",
        pattern: "#e55959",
        highlight: {
          srgb: "#ff636e",
          p3: "color(display-p3 0.9992 0.4376 0.45)"
        }
      },
      violet: {
        solid: "#ae3ec9",
        fill: "#ae3ec9",
        note: {
          fill: "#DB91FD",
          text: "#000000"
        },
        semi: "#ecdcf2",
        pattern: "#bd63d3",
        highlight: {
          srgb: "#c77cff",
          p3: "color(display-p3 0.7469 0.5089 0.9995)"
        }
      },
      yellow: {
        solid: "#f1ac4b",
        fill: "#f1ac4b",
        note: {
          fill: "#FED49A",
          text: "#000000"
        },
        semi: "#f9f0e6",
        pattern: "#fecb92",
        highlight: {
          srgb: "#fddd00",
          p3: "color(display-p3 0.972 0.8705 0.05)"
        }
      },
      white: {
        solid: "#FFFFFF",
        fill: "#FFFFFF",
        semi: "#f5f5f5",
        pattern: "#f9f9f9",
        note: {
          fill: "#FFFFFF",
          text: "#000000"
        },
        highlight: {
          srgb: "#ffffff",
          p3: "color(display-p3 1 1 1)"
        }
      }
    },
    darkMode: {
      id: "dark",
      text: "hsl(210, 17%, 98%)",
      background: "hsl(240, 5%, 6.5%)",
      solid: "#010403",
      black: {
        solid: "#f2f2f2",
        fill: "#f2f2f2",
        note: {
          fill: "#2c2c2c",
          text: "#f2f2f2"
        },
        semi: "#2c3036",
        pattern: "#989898",
        highlight: {
          srgb: "#d2b700",
          p3: "color(display-p3 0.8078 0.7225 0.0312)"
        }
      },
      blue: {
        solid: "#4f72fc",
        // 3c60f0
        fill: "#4f72fc",
        note: {
          fill: "#2A3F98",
          text: "#f2f2f2"
        },
        semi: "#262d40",
        pattern: "#3a4b9e",
        highlight: {
          srgb: "#0079d2",
          p3: "color(display-p3 0.0032 0.4655 0.7991)"
        }
      },
      green: {
        solid: "#099268",
        fill: "#099268",
        note: {
          fill: "#014429",
          text: "#f2f2f2"
        },
        semi: "#253231",
        pattern: "#366a53",
        highlight: {
          srgb: "#009774",
          p3: "color(display-p3 0.0085 0.582 0.4604)"
        }
      },
      grey: {
        solid: "#9398b0",
        fill: "#9398b0",
        note: {
          fill: "#56595F",
          text: "#f2f2f2"
        },
        semi: "#33373c",
        pattern: "#7c8187",
        highlight: {
          srgb: "#9cb4cb",
          p3: "color(display-p3 0.6299 0.7012 0.7856)"
        }
      },
      "light-blue": {
        solid: "#4dabf7",
        fill: "#4dabf7",
        note: {
          fill: "#1F5495",
          text: "#f2f2f2"
        },
        semi: "#2a3642",
        pattern: "#4d7aa9",
        highlight: {
          srgb: "#00bdc8",
          p3: "color(display-p3 0.0023 0.7259 0.7735)"
        }
      },
      "light-green": {
        solid: "#40c057",
        fill: "#40c057",
        note: {
          fill: "#21581D",
          text: "#f2f2f2"
        },
        semi: "#2a3830",
        pattern: "#4e874e",
        highlight: {
          srgb: "#00a000",
          p3: "color(display-p3 0.2711 0.6172 0.0195)"
        }
      },
      "light-red": {
        solid: "#ff8787",
        fill: "#ff8787",
        note: {
          fill: "#923632",
          text: "#f2f2f2"
        },
        semi: "#3b3235",
        pattern: "#a56767",
        highlight: {
          srgb: "#db005b",
          p3: "color(display-p3 0.7849 0.0585 0.3589)"
        }
      },
      "light-violet": {
        solid: "#e599f7",
        fill: "#e599f7",
        note: {
          fill: "#762F8E",
          text: "#f2f2f2"
        },
        semi: "#383442",
        pattern: "#9770a9",
        highlight: {
          srgb: "#c400c7",
          p3: "color(display-p3 0.7024 0.0403 0.753)"
        }
      },
      orange: {
        solid: "#f76707",
        fill: "#f76707",
        note: {
          fill: "#843906",
          text: "#f2f2f2"
        },
        semi: "#3a2e2a",
        pattern: "#9f552d",
        highlight: {
          srgb: "#d07a00",
          p3: "color(display-p3 0.7699 0.4937 0.0085)"
        }
      },
      red: {
        solid: "#e03131",
        fill: "#e03131",
        note: {
          fill: "#89231A",
          text: "#f2f2f2"
        },
        semi: "#36292b",
        pattern: "#8f3734",
        highlight: {
          srgb: "#de002c",
          p3: "color(display-p3 0.7978 0.0509 0.2035)"
        }
      },
      violet: {
        solid: "#ae3ec9",
        fill: "#ae3ec9",
        note: {
          fill: "#681683",
          text: "#f2f2f2"
        },
        semi: "#31293c",
        pattern: "#763a8b",
        highlight: {
          srgb: "#9e00ee",
          p3: "color(display-p3 0.5651 0.0079 0.8986)"
        }
      },
      yellow: {
        solid: "#ffc034",
        fill: "#ffc034",
        note: {
          fill: "#98571B",
          text: "#f2f2f2"
        },
        semi: "#3c3934",
        pattern: "#fecb92",
        highlight: {
          srgb: "#d2b700",
          p3: "color(display-p3 0.8078 0.7225 0.0312)"
        }
      },
      white: {
        solid: "#f3f3f3",
        fill: "#f3f3f3",
        semi: "#f5f5f5",
        pattern: "#f9f9f9",
        note: {
          fill: "#eaeaea",
          text: "#1d1d1d"
        },
        highlight: {
          srgb: "#ffffff",
          p3: "color(display-p3 1 1 1)"
        }
      }
    }
  };
  function getDefaultColorTheme(opts) {
    return opts.isDarkMode ? DefaultColorThemePalette.darkMode : DefaultColorThemePalette.lightMode;
  }
  var DefaultColorStyle = StyleProp.defineEnum("tldraw:color", {
    defaultValue: "black",
    values: defaultColorNames
  });
  var DefaultLabelColorStyle = StyleProp.defineEnum("tldraw:labelColor", {
    defaultValue: "black",
    values: defaultColorNames
  });

  // node_modules/@tldraw/tlschema/dist-esm/styles/TLDashStyle.mjs
  var DefaultDashStyle = StyleProp.defineEnum("tldraw:dash", {
    defaultValue: "draw",
    values: ["draw", "solid", "dashed", "dotted"]
  });

  // node_modules/@tldraw/tlschema/dist-esm/styles/TLFillStyle.mjs
  var DefaultFillStyle = StyleProp.defineEnum("tldraw:fill", {
    defaultValue: "none",
    values: ["none", "semi", "solid", "pattern", "fill"]
  });

  // node_modules/@tldraw/tlschema/dist-esm/styles/TLFontStyle.mjs
  var DefaultFontStyle = StyleProp.defineEnum("tldraw:font", {
    defaultValue: "draw",
    values: ["draw", "sans", "serif", "mono"]
  });
  var DefaultFontFamilies = {
    draw: "'tldraw_draw', sans-serif",
    sans: "'tldraw_sans', sans-serif",
    serif: "'tldraw_serif', serif",
    mono: "'tldraw_mono', monospace"
  };

  // node_modules/@tldraw/tlschema/dist-esm/styles/TLSizeStyle.mjs
  var DefaultSizeStyle = StyleProp.defineEnum("tldraw:size", {
    defaultValue: "m",
    values: ["s", "m", "l", "xl"]
  });

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLArrowShape.mjs
  var arrowheadTypes = [
    "arrow",
    "triangle",
    "square",
    "dot",
    "pipe",
    "diamond",
    "inverted",
    "bar",
    "none"
  ];
  var ArrowShapeArrowheadStartStyle = StyleProp.defineEnum("tldraw:arrowheadStart", {
    defaultValue: "none",
    values: arrowheadTypes
  });
  var ArrowShapeArrowheadEndStyle = StyleProp.defineEnum("tldraw:arrowheadEnd", {
    defaultValue: "arrow",
    values: arrowheadTypes
  });
  var arrowShapeProps = {
    labelColor: DefaultLabelColorStyle,
    color: DefaultColorStyle,
    fill: DefaultFillStyle,
    dash: DefaultDashStyle,
    size: DefaultSizeStyle,
    arrowheadStart: ArrowShapeArrowheadStartStyle,
    arrowheadEnd: ArrowShapeArrowheadEndStyle,
    font: DefaultFontStyle,
    start: vecModelValidator,
    end: vecModelValidator,
    bend: validation_exports.number,
    text: validation_exports.string,
    labelPosition: validation_exports.number,
    scale: validation_exports.nonZeroNumber
  };
  var arrowShapeVersions = createShapePropsMigrationIds("arrow", {
    AddLabelColor: 1,
    AddIsPrecise: 2,
    AddLabelPosition: 3,
    ExtractBindings: 4,
    AddScale: 5
  });
  function propsMigration(migration) {
    return createPropsMigration("shape", "arrow", migration);
  }
  var arrowShapeMigrations = createMigrationSequence({
    sequenceId: "com.tldraw.shape.arrow",
    retroactive: false,
    sequence: [
      propsMigration({
        id: arrowShapeVersions.AddLabelColor,
        up: (props) => {
          props.labelColor = "black";
        },
        down: "retired"
      }),
      propsMigration({
        id: arrowShapeVersions.AddIsPrecise,
        up: ({ start, end }) => {
          if (start.type === "binding") {
            start.isPrecise = !(start.normalizedAnchor.x === 0.5 && start.normalizedAnchor.y === 0.5);
          }
          if (end.type === "binding") {
            end.isPrecise = !(end.normalizedAnchor.x === 0.5 && end.normalizedAnchor.y === 0.5);
          }
        },
        down: ({ start, end }) => {
          if (start.type === "binding") {
            if (!start.isPrecise) {
              start.normalizedAnchor = { x: 0.5, y: 0.5 };
            }
            delete start.isPrecise;
          }
          if (end.type === "binding") {
            if (!end.isPrecise) {
              end.normalizedAnchor = { x: 0.5, y: 0.5 };
            }
            delete end.isPrecise;
          }
        }
      }),
      propsMigration({
        id: arrowShapeVersions.AddLabelPosition,
        up: (props) => {
          props.labelPosition = 0.5;
        },
        down: (props) => {
          delete props.labelPosition;
        }
      }),
      {
        id: arrowShapeVersions.ExtractBindings,
        scope: "store",
        up: (oldStore) => {
          const arrows = Object.values(oldStore).filter(
            (r) => r.typeName === "shape" && r.type === "arrow"
          );
          for (const arrow4 of arrows) {
            const { start, end } = arrow4.props;
            if (start.type === "binding") {
              const id = createBindingId();
              const binding = {
                typeName: "binding",
                id,
                type: "arrow",
                fromId: arrow4.id,
                toId: start.boundShapeId,
                meta: {},
                props: {
                  terminal: "start",
                  normalizedAnchor: start.normalizedAnchor,
                  isExact: start.isExact,
                  isPrecise: start.isPrecise
                }
              };
              oldStore[id] = binding;
              arrow4.props.start = { x: 0, y: 0 };
            } else {
              delete arrow4.props.start.type;
            }
            if (end.type === "binding") {
              const id = createBindingId();
              const binding = {
                typeName: "binding",
                id,
                type: "arrow",
                fromId: arrow4.id,
                toId: end.boundShapeId,
                meta: {},
                props: {
                  terminal: "end",
                  normalizedAnchor: end.normalizedAnchor,
                  isExact: end.isExact,
                  isPrecise: end.isPrecise
                }
              };
              oldStore[id] = binding;
              arrow4.props.end = { x: 0, y: 0 };
            } else {
              delete arrow4.props.end.type;
            }
          }
        }
      },
      propsMigration({
        id: arrowShapeVersions.AddScale,
        up: (props) => {
          props.scale = 1;
        },
        down: (props) => {
          delete props.scale;
        }
      })
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/bindings/TLArrowBinding.mjs
  var arrowBindingProps = {
    terminal: validation_exports.literalEnum("start", "end"),
    normalizedAnchor: vecModelValidator,
    isExact: validation_exports.boolean,
    isPrecise: validation_exports.boolean
  };
  var arrowBindingMigrations = createBindingPropsMigrationSequence({
    sequence: [{ dependsOn: [arrowShapeVersions.ExtractBindings] }]
  });

  // node_modules/@tldraw/tlschema/dist-esm/records/TLCamera.mjs
  var cameraValidator = validation_exports.model(
    "camera",
    validation_exports.object({
      typeName: validation_exports.literal("camera"),
      id: idValidator("camera"),
      x: validation_exports.number,
      y: validation_exports.number,
      z: validation_exports.number,
      meta: validation_exports.jsonValue
    })
  );
  var cameraVersions = createMigrationIds("com.tldraw.camera", {
    AddMeta: 1
  });
  var cameraMigrations = createRecordMigrationSequence({
    sequenceId: "com.tldraw.camera",
    recordType: "camera",
    sequence: [
      {
        id: cameraVersions.AddMeta,
        up: (record) => {
          ;
          record.meta = {};
        }
      }
    ]
  });
  var CameraRecordType = createRecordType("camera", {
    validator: cameraValidator,
    scope: "session"
  }).withDefaultProperties(
    () => ({
      x: 0,
      y: 0,
      z: 1,
      meta: {}
    })
  );

  // node_modules/@tldraw/tlschema/dist-esm/misc/TLCursor.mjs
  var TL_CURSOR_TYPES = /* @__PURE__ */ new Set([
    "none",
    "default",
    "pointer",
    "cross",
    "grab",
    "rotate",
    "grabbing",
    "resize-edge",
    "resize-corner",
    "text",
    "move",
    "ew-resize",
    "ns-resize",
    "nesw-resize",
    "nwse-resize",
    "nesw-rotate",
    "nwse-rotate",
    "swne-rotate",
    "senw-rotate",
    "zoom-in",
    "zoom-out"
  ]);
  var cursorTypeValidator = validation_exports.setEnum(TL_CURSOR_TYPES);
  var cursorValidator = validation_exports.object({
    type: cursorTypeValidator,
    rotation: validation_exports.number
  });

  // node_modules/@tldraw/tlschema/dist-esm/misc/TLColor.mjs
  var TL_CANVAS_UI_COLOR_TYPES = /* @__PURE__ */ new Set([
    "accent",
    "white",
    "black",
    "selection-stroke",
    "selection-fill",
    "laser",
    "muted-1"
  ]);
  var canvasUiColorTypeValidator = validation_exports.setEnum(TL_CANVAS_UI_COLOR_TYPES);

  // node_modules/@tldraw/tlschema/dist-esm/misc/TLScribble.mjs
  var TL_SCRIBBLE_STATES = /* @__PURE__ */ new Set(["starting", "paused", "active", "stopping"]);
  var scribbleValidator = validation_exports.object({
    id: validation_exports.string,
    points: validation_exports.arrayOf(vecModelValidator),
    size: validation_exports.positiveNumber,
    color: canvasUiColorTypeValidator,
    opacity: validation_exports.number,
    state: validation_exports.setEnum(TL_SCRIBBLE_STATES),
    delay: validation_exports.number,
    shrink: validation_exports.number,
    taper: validation_exports.boolean
  });

  // node_modules/@tldraw/tlschema/dist-esm/records/TLPage.mjs
  var pageIdValidator = idValidator("page");
  var pageValidator = validation_exports.model(
    "page",
    validation_exports.object({
      typeName: validation_exports.literal("page"),
      id: pageIdValidator,
      name: validation_exports.string,
      index: validation_exports.indexKey,
      meta: validation_exports.jsonValue
    })
  );
  var pageVersions = createMigrationIds("com.tldraw.page", {
    AddMeta: 1
  });
  var pageMigrations = createRecordMigrationSequence({
    sequenceId: "com.tldraw.page",
    recordType: "page",
    sequence: [
      {
        id: pageVersions.AddMeta,
        up: (record) => {
          record.meta = {};
        }
      }
    ]
  });
  var PageRecordType = createRecordType("page", {
    validator: pageValidator,
    scope: "document"
  }).withDefaultProperties(() => ({
    meta: {}
  }));
  function isPageId(id) {
    return PageRecordType.isId(id);
  }

  // node_modules/@tldraw/tlschema/dist-esm/records/TLInstance.mjs
  var shouldKeyBePreservedBetweenSessions = {
    // This object defines keys that should be preserved across calls to loadSnapshot()
    id: false,
    // meta
    typeName: false,
    // meta
    currentPageId: false,
    // does not preserve because who knows if the page still exists
    opacityForNextShape: false,
    // does not preserve because it's a temporary state
    stylesForNextShape: false,
    // does not preserve because it's a temporary state
    followingUserId: false,
    // does not preserve because it's a temporary state
    highlightedUserIds: false,
    // does not preserve because it's a temporary state
    brush: false,
    // does not preserve because it's a temporary state
    cursor: false,
    // does not preserve because it's a temporary state
    scribbles: false,
    // does not preserve because it's a temporary state
    isFocusMode: true,
    // preserves because it's a user preference
    isDebugMode: true,
    // preserves because it's a user preference
    isToolLocked: true,
    // preserves because it's a user preference
    exportBackground: true,
    // preserves because it's a user preference
    screenBounds: true,
    // preserves because it's capturing the user's screen state
    insets: true,
    // preserves because it's capturing the user's screen state
    zoomBrush: false,
    // does not preserve because it's a temporary state
    chatMessage: false,
    // does not preserve because it's a temporary state
    isChatting: false,
    // does not preserve because it's a temporary state
    isPenMode: false,
    // does not preserve because it's a temporary state
    isGridMode: true,
    // preserves because it's a user preference
    isFocused: true,
    // preserves because obviously
    devicePixelRatio: true,
    // preserves because it captures the user's screen state
    isCoarsePointer: true,
    // preserves because it captures the user's screen state
    isHoveringCanvas: false,
    // does not preserve because it's a temporary state
    openMenus: false,
    // does not preserve because it's a temporary state
    isChangingStyle: false,
    // does not preserve because it's a temporary state
    isReadonly: true,
    // preserves because it's a config option
    meta: false,
    // does not preserve because who knows what's in there, leave it up to sdk users to save and reinstate
    duplicateProps: false
    //
  };
  function pluckPreservingValues(val) {
    return val ? filterEntries(val, (key) => {
      return shouldKeyBePreservedBetweenSessions[key];
    }) : null;
  }
  var instanceIdValidator = idValidator("instance");
  function createInstanceRecordType(stylesById) {
    const stylesForNextShapeValidators = {};
    for (const [id, style] of stylesById) {
      stylesForNextShapeValidators[id] = validation_exports.optional(style);
    }
    const instanceTypeValidator = validation_exports.model(
      "instance",
      validation_exports.object({
        typeName: validation_exports.literal("instance"),
        id: idValidator("instance"),
        currentPageId: pageIdValidator,
        followingUserId: validation_exports.string.nullable(),
        brush: boxModelValidator.nullable(),
        opacityForNextShape: opacityValidator,
        stylesForNextShape: validation_exports.object(stylesForNextShapeValidators),
        cursor: cursorValidator,
        scribbles: validation_exports.arrayOf(scribbleValidator),
        isFocusMode: validation_exports.boolean,
        isDebugMode: validation_exports.boolean,
        isToolLocked: validation_exports.boolean,
        exportBackground: validation_exports.boolean,
        screenBounds: boxModelValidator,
        insets: validation_exports.arrayOf(validation_exports.boolean),
        zoomBrush: boxModelValidator.nullable(),
        isPenMode: validation_exports.boolean,
        isGridMode: validation_exports.boolean,
        chatMessage: validation_exports.string,
        isChatting: validation_exports.boolean,
        highlightedUserIds: validation_exports.arrayOf(validation_exports.string),
        isFocused: validation_exports.boolean,
        devicePixelRatio: validation_exports.number,
        isCoarsePointer: validation_exports.boolean,
        isHoveringCanvas: validation_exports.boolean.nullable(),
        openMenus: validation_exports.arrayOf(validation_exports.string),
        isChangingStyle: validation_exports.boolean,
        isReadonly: validation_exports.boolean,
        meta: validation_exports.jsonValue,
        duplicateProps: validation_exports.object({
          shapeIds: validation_exports.arrayOf(idValidator("shape")),
          offset: validation_exports.object({
            x: validation_exports.number,
            y: validation_exports.number
          })
        }).nullable()
      })
    );
    return createRecordType("instance", {
      validator: instanceTypeValidator,
      scope: "session",
      ephemeralKeys: {
        currentPageId: false,
        meta: false,
        followingUserId: true,
        opacityForNextShape: true,
        stylesForNextShape: true,
        brush: true,
        cursor: true,
        scribbles: true,
        isFocusMode: true,
        isDebugMode: true,
        isToolLocked: true,
        exportBackground: true,
        screenBounds: true,
        insets: true,
        zoomBrush: true,
        isPenMode: true,
        isGridMode: true,
        chatMessage: true,
        isChatting: true,
        highlightedUserIds: true,
        isFocused: true,
        devicePixelRatio: true,
        isCoarsePointer: true,
        isHoveringCanvas: true,
        openMenus: true,
        isChangingStyle: true,
        isReadonly: true,
        duplicateProps: true
      }
    }).withDefaultProperties(
      () => ({
        followingUserId: null,
        opacityForNextShape: 1,
        stylesForNextShape: {},
        brush: null,
        scribbles: [],
        cursor: {
          type: "default",
          rotation: 0
        },
        isFocusMode: false,
        exportBackground: false,
        isDebugMode: false,
        isToolLocked: false,
        screenBounds: { x: 0, y: 0, w: 1080, h: 720 },
        insets: [false, false, false, false],
        zoomBrush: null,
        isGridMode: false,
        isPenMode: false,
        chatMessage: "",
        isChatting: false,
        highlightedUserIds: [],
        isFocused: false,
        devicePixelRatio: typeof window === "undefined" ? 1 : window.devicePixelRatio,
        isCoarsePointer: false,
        isHoveringCanvas: null,
        openMenus: [],
        isChangingStyle: false,
        isReadonly: false,
        meta: {},
        duplicateProps: null
      })
    );
  }
  var instanceVersions = createMigrationIds("com.tldraw.instance", {
    AddTransparentExportBgs: 1,
    RemoveDialog: 2,
    AddToolLockMode: 3,
    RemoveExtraPropsForNextShape: 4,
    AddLabelColor: 5,
    AddFollowingUserId: 6,
    RemoveAlignJustify: 7,
    AddZoom: 8,
    AddVerticalAlign: 9,
    AddScribbleDelay: 10,
    RemoveUserId: 11,
    AddIsPenModeAndIsGridMode: 12,
    HoistOpacity: 13,
    AddChat: 14,
    AddHighlightedUserIds: 15,
    ReplacePropsForNextShapeWithStylesForNextShape: 16,
    AddMeta: 17,
    RemoveCursorColor: 18,
    AddLonelyProperties: 19,
    ReadOnlyReadonly: 20,
    AddHoveringCanvas: 21,
    AddScribbles: 22,
    AddInset: 23,
    AddDuplicateProps: 24,
    RemoveCanMoveCamera: 25
  });
  var instanceMigrations = createRecordMigrationSequence({
    sequenceId: "com.tldraw.instance",
    recordType: "instance",
    sequence: [
      {
        id: instanceVersions.AddTransparentExportBgs,
        up: (instance) => {
          return { ...instance, exportBackground: true };
        }
      },
      {
        id: instanceVersions.RemoveDialog,
        up: ({ dialog: _, ...instance }) => {
          return instance;
        }
      },
      {
        id: instanceVersions.AddToolLockMode,
        up: (instance) => {
          return { ...instance, isToolLocked: false };
        }
      },
      {
        id: instanceVersions.RemoveExtraPropsForNextShape,
        up: ({ propsForNextShape, ...instance }) => {
          return {
            ...instance,
            propsForNextShape: Object.fromEntries(
              Object.entries(propsForNextShape).filter(
                ([key]) => [
                  "color",
                  "labelColor",
                  "dash",
                  "fill",
                  "size",
                  "font",
                  "align",
                  "verticalAlign",
                  "icon",
                  "geo",
                  "arrowheadStart",
                  "arrowheadEnd",
                  "spline"
                ].includes(key)
              )
            )
          };
        }
      },
      {
        id: instanceVersions.AddLabelColor,
        up: ({ propsForNextShape, ...instance }) => {
          return {
            ...instance,
            propsForNextShape: {
              ...propsForNextShape,
              labelColor: "black"
            }
          };
        }
      },
      {
        id: instanceVersions.AddFollowingUserId,
        up: (instance) => {
          return { ...instance, followingUserId: null };
        }
      },
      {
        id: instanceVersions.RemoveAlignJustify,
        up: (instance) => {
          let newAlign = instance.propsForNextShape.align;
          if (newAlign === "justify") {
            newAlign = "start";
          }
          return {
            ...instance,
            propsForNextShape: {
              ...instance.propsForNextShape,
              align: newAlign
            }
          };
        }
      },
      {
        id: instanceVersions.AddZoom,
        up: (instance) => {
          return { ...instance, zoomBrush: null };
        }
      },
      {
        id: instanceVersions.AddVerticalAlign,
        up: (instance) => {
          return {
            ...instance,
            propsForNextShape: {
              ...instance.propsForNextShape,
              verticalAlign: "middle"
            }
          };
        }
      },
      {
        id: instanceVersions.AddScribbleDelay,
        up: (instance) => {
          if (instance.scribble !== null) {
            return { ...instance, scribble: { ...instance.scribble, delay: 0 } };
          }
          return { ...instance };
        }
      },
      {
        id: instanceVersions.RemoveUserId,
        up: ({ userId: _, ...instance }) => {
          return instance;
        }
      },
      {
        id: instanceVersions.AddIsPenModeAndIsGridMode,
        up: (instance) => {
          return { ...instance, isPenMode: false, isGridMode: false };
        }
      },
      {
        id: instanceVersions.HoistOpacity,
        up: ({ propsForNextShape: { opacity, ...propsForNextShape }, ...instance }) => {
          return { ...instance, opacityForNextShape: Number(opacity ?? "1"), propsForNextShape };
        }
      },
      {
        id: instanceVersions.AddChat,
        up: (instance) => {
          return { ...instance, chatMessage: "", isChatting: false };
        }
      },
      {
        id: instanceVersions.AddHighlightedUserIds,
        up: (instance) => {
          return { ...instance, highlightedUserIds: [] };
        }
      },
      {
        id: instanceVersions.ReplacePropsForNextShapeWithStylesForNextShape,
        up: ({ propsForNextShape: _, ...instance }) => {
          return { ...instance, stylesForNextShape: {} };
        }
      },
      {
        id: instanceVersions.AddMeta,
        up: (record) => {
          return {
            ...record,
            meta: {}
          };
        }
      },
      {
        id: instanceVersions.RemoveCursorColor,
        up: (record) => {
          const { color: _, ...cursor } = record.cursor;
          return {
            ...record,
            cursor
          };
        }
      },
      {
        id: instanceVersions.AddLonelyProperties,
        up: (record) => {
          return {
            ...record,
            canMoveCamera: true,
            isFocused: false,
            devicePixelRatio: 1,
            isCoarsePointer: false,
            openMenus: [],
            isChangingStyle: false,
            isReadOnly: false
          };
        }
      },
      {
        id: instanceVersions.ReadOnlyReadonly,
        up: ({ isReadOnly: _isReadOnly, ...record }) => {
          return {
            ...record,
            isReadonly: _isReadOnly
          };
        }
      },
      {
        id: instanceVersions.AddHoveringCanvas,
        up: (record) => {
          return {
            ...record,
            isHoveringCanvas: null
          };
        }
      },
      {
        id: instanceVersions.AddScribbles,
        up: ({ scribble: _, ...record }) => {
          return {
            ...record,
            scribbles: []
          };
        }
      },
      {
        id: instanceVersions.AddInset,
        up: (record) => {
          return {
            ...record,
            insets: [false, false, false, false]
          };
        },
        down: ({ insets: _, ...record }) => {
          return {
            ...record
          };
        }
      },
      {
        id: instanceVersions.AddDuplicateProps,
        up: (record) => {
          return {
            ...record,
            duplicateProps: null
          };
        },
        down: ({ duplicateProps: _, ...record }) => {
          return {
            ...record
          };
        }
      },
      {
        id: instanceVersions.RemoveCanMoveCamera,
        up: ({ canMoveCamera: _, ...record }) => {
          return {
            ...record
          };
        },
        down: (instance) => {
          return { ...instance, canMoveCamera: true };
        }
      }
    ]
  });
  var TLINSTANCE_ID = "instance:instance";

  // node_modules/@tldraw/tlschema/dist-esm/records/TLPageState.mjs
  var instancePageStateValidator = validation_exports.model(
    "instance_page_state",
    validation_exports.object({
      typeName: validation_exports.literal("instance_page_state"),
      id: idValidator("instance_page_state"),
      pageId: pageIdValidator,
      selectedShapeIds: validation_exports.arrayOf(shapeIdValidator),
      hintingShapeIds: validation_exports.arrayOf(shapeIdValidator),
      erasingShapeIds: validation_exports.arrayOf(shapeIdValidator),
      hoveredShapeId: shapeIdValidator.nullable(),
      editingShapeId: shapeIdValidator.nullable(),
      croppingShapeId: shapeIdValidator.nullable(),
      focusedGroupId: shapeIdValidator.nullable(),
      meta: validation_exports.jsonValue
    })
  );
  var instancePageStateVersions = createMigrationIds("com.tldraw.instance_page_state", {
    AddCroppingId: 1,
    RemoveInstanceIdAndCameraId: 2,
    AddMeta: 3,
    RenameProperties: 4,
    RenamePropertiesAgain: 5
  });
  var instancePageStateMigrations = createRecordMigrationSequence({
    sequenceId: "com.tldraw.instance_page_state",
    recordType: "instance_page_state",
    sequence: [
      {
        id: instancePageStateVersions.AddCroppingId,
        up(instance) {
          instance.croppingShapeId = null;
        }
      },
      {
        id: instancePageStateVersions.RemoveInstanceIdAndCameraId,
        up(instance) {
          delete instance.instanceId;
          delete instance.cameraId;
        }
      },
      {
        id: instancePageStateVersions.AddMeta,
        up: (record) => {
          record.meta = {};
        }
      },
      {
        id: instancePageStateVersions.RenameProperties,
        // this migration is cursed: it was written wrong and doesn't do anything.
        // rather than replace it, I've added another migration below that fixes it.
        up: (_record) => {
        },
        down: (_record) => {
        }
      },
      {
        id: instancePageStateVersions.RenamePropertiesAgain,
        up: (record) => {
          record.selectedShapeIds = record.selectedIds;
          delete record.selectedIds;
          record.hintingShapeIds = record.hintingIds;
          delete record.hintingIds;
          record.erasingShapeIds = record.erasingIds;
          delete record.erasingIds;
          record.hoveredShapeId = record.hoveredId;
          delete record.hoveredId;
          record.editingShapeId = record.editingId;
          delete record.editingId;
          record.croppingShapeId = record.croppingShapeId ?? record.croppingId ?? null;
          delete record.croppingId;
          record.focusedGroupId = record.focusLayerId;
          delete record.focusLayerId;
        },
        down: (record) => {
          record.selectedIds = record.selectedShapeIds;
          delete record.selectedShapeIds;
          record.hintingIds = record.hintingShapeIds;
          delete record.hintingShapeIds;
          record.erasingIds = record.erasingShapeIds;
          delete record.erasingShapeIds;
          record.hoveredId = record.hoveredShapeId;
          delete record.hoveredShapeId;
          record.editingId = record.editingShapeId;
          delete record.editingShapeId;
          record.croppingId = record.croppingShapeId;
          delete record.croppingShapeId;
          record.focusLayerId = record.focusedGroupId;
          delete record.focusedGroupId;
        }
      }
    ]
  });
  var InstancePageStateRecordType = createRecordType(
    "instance_page_state",
    {
      validator: instancePageStateValidator,
      scope: "session",
      ephemeralKeys: {
        pageId: false,
        selectedShapeIds: false,
        editingShapeId: false,
        croppingShapeId: false,
        meta: false,
        hintingShapeIds: true,
        erasingShapeIds: true,
        hoveredShapeId: true,
        focusedGroupId: true
      }
    }
  ).withDefaultProperties(
    () => ({
      editingShapeId: null,
      croppingShapeId: null,
      selectedShapeIds: [],
      hoveredShapeId: null,
      erasingShapeIds: [],
      hintingShapeIds: [],
      focusedGroupId: null,
      meta: {}
    })
  );

  // node_modules/@tldraw/tlschema/dist-esm/records/TLPointer.mjs
  var pointerValidator = validation_exports.model(
    "pointer",
    validation_exports.object({
      typeName: validation_exports.literal("pointer"),
      id: idValidator("pointer"),
      x: validation_exports.number,
      y: validation_exports.number,
      lastActivityTimestamp: validation_exports.number,
      meta: validation_exports.jsonValue
    })
  );
  var pointerVersions = createMigrationIds("com.tldraw.pointer", {
    AddMeta: 1
  });
  var pointerMigrations = createRecordMigrationSequence({
    sequenceId: "com.tldraw.pointer",
    recordType: "pointer",
    sequence: [
      {
        id: pointerVersions.AddMeta,
        up: (record) => {
          record.meta = {};
        }
      }
    ]
  });
  var PointerRecordType = createRecordType("pointer", {
    validator: pointerValidator,
    scope: "session"
  }).withDefaultProperties(
    () => ({
      x: 0,
      y: 0,
      lastActivityTimestamp: 0,
      meta: {}
    })
  );
  var TLPOINTER_ID = PointerRecordType.createId("pointer");

  // node_modules/@tldraw/tlschema/dist-esm/records/TLPresence.mjs
  var instancePresenceValidator = validation_exports.model(
    "instance_presence",
    validation_exports.object({
      typeName: validation_exports.literal("instance_presence"),
      id: idValidator("instance_presence"),
      userId: validation_exports.string,
      userName: validation_exports.string,
      lastActivityTimestamp: validation_exports.number.nullable(),
      followingUserId: validation_exports.string.nullable(),
      cursor: validation_exports.object({
        x: validation_exports.number,
        y: validation_exports.number,
        type: cursorTypeValidator,
        rotation: validation_exports.number
      }).nullable(),
      color: validation_exports.string,
      camera: validation_exports.object({
        x: validation_exports.number,
        y: validation_exports.number,
        z: validation_exports.number
      }).nullable(),
      screenBounds: boxModelValidator.nullable(),
      selectedShapeIds: validation_exports.arrayOf(idValidator("shape")),
      currentPageId: idValidator("page"),
      brush: boxModelValidator.nullable(),
      scribbles: validation_exports.arrayOf(scribbleValidator),
      chatMessage: validation_exports.string,
      meta: validation_exports.jsonValue
    })
  );
  var instancePresenceVersions = createMigrationIds("com.tldraw.instance_presence", {
    AddScribbleDelay: 1,
    RemoveInstanceId: 2,
    AddChatMessage: 3,
    AddMeta: 4,
    RenameSelectedShapeIds: 5,
    NullableCameraCursor: 6
  });
  var instancePresenceMigrations = createRecordMigrationSequence({
    sequenceId: "com.tldraw.instance_presence",
    recordType: "instance_presence",
    sequence: [
      {
        id: instancePresenceVersions.AddScribbleDelay,
        up: (instance) => {
          if (instance.scribble !== null) {
            instance.scribble.delay = 0;
          }
        }
      },
      {
        id: instancePresenceVersions.RemoveInstanceId,
        up: (instance) => {
          delete instance.instanceId;
        }
      },
      {
        id: instancePresenceVersions.AddChatMessage,
        up: (instance) => {
          instance.chatMessage = "";
        }
      },
      {
        id: instancePresenceVersions.AddMeta,
        up: (record) => {
          record.meta = {};
        }
      },
      {
        id: instancePresenceVersions.RenameSelectedShapeIds,
        up: (_record) => {
        }
      },
      {
        id: instancePresenceVersions.NullableCameraCursor,
        up: (_record) => {
        },
        down: (record) => {
          if (record.camera === null) {
            record.camera = { x: 0, y: 0, z: 1 };
          }
          if (record.lastActivityTimestamp === null) {
            record.lastActivityTimestamp = 0;
          }
          if (record.cursor === null) {
            record.cursor = { type: "default", x: 0, y: 0, rotation: 0 };
          }
          if (record.screenBounds === null) {
            record.screenBounds = { x: 0, y: 0, w: 1, h: 1 };
          }
        }
      }
    ]
  });
  var InstancePresenceRecordType = createRecordType(
    "instance_presence",
    {
      validator: instancePresenceValidator,
      scope: "presence"
    }
  ).withDefaultProperties(() => ({
    lastActivityTimestamp: null,
    followingUserId: null,
    color: "#FF0000",
    camera: null,
    cursor: null,
    screenBounds: null,
    selectedShapeIds: [],
    brush: null,
    scribbles: [],
    chatMessage: "",
    meta: {}
  }));

  // node_modules/@tldraw/tlschema/dist-esm/records/TLDocument.mjs
  var documentValidator = validation_exports.model(
    "document",
    validation_exports.object({
      typeName: validation_exports.literal("document"),
      id: validation_exports.literal("document:document"),
      gridSize: validation_exports.number,
      name: validation_exports.string,
      meta: validation_exports.jsonValue
    })
  );
  var documentVersions = createMigrationIds("com.tldraw.document", {
    AddName: 1,
    AddMeta: 2
  });
  var documentMigrations = createRecordMigrationSequence({
    sequenceId: "com.tldraw.document",
    recordType: "document",
    sequence: [
      {
        id: documentVersions.AddName,
        up: (document2) => {
          ;
          document2.name = "";
        },
        down: (document2) => {
          delete document2.name;
        }
      },
      {
        id: documentVersions.AddMeta,
        up: (record) => {
          ;
          record.meta = {};
        }
      }
    ]
  });
  var DocumentRecordType = createRecordType("document", {
    validator: documentValidator,
    scope: "document"
  }).withDefaultProperties(
    () => ({
      gridSize: 10,
      name: "",
      meta: {}
    })
  );
  var TLDOCUMENT_ID = DocumentRecordType.createId("document");

  // node_modules/@tldraw/tlschema/dist-esm/TLStore.mjs
  function sortByIndex2(a, b) {
    if (a.index < b.index) {
      return -1;
    } else if (a.index > b.index) {
      return 1;
    }
    return 0;
  }
  function redactRecordForErrorReporting(record) {
    if (record.typeName === "asset") {
      if ("src" in record) {
        record.src = "<redacted>";
      }
      if ("src" in record.props) {
        record.props.src = "<redacted>";
      }
    }
  }
  function onValidationFailure({
    error,
    phase,
    record,
    recordBefore
  }) {
    const isExistingValidationIssue = (
      // if we're initializing the store for the first time, we should
      // allow invalid records so people can load old buggy data:
      phase === "initialize"
    );
    annotateError(error, {
      tags: {
        origin: "store.validateRecord",
        storePhase: phase,
        isExistingValidationIssue
      },
      extras: {
        recordBefore: recordBefore ? redactRecordForErrorReporting(structuredClone(recordBefore)) : void 0,
        recordAfter: redactRecordForErrorReporting(structuredClone(record))
      }
    });
    throw error;
  }
  function getDefaultPages() {
    return [
      PageRecordType.create({
        id: "page:page",
        name: "Page 1",
        index: "a1",
        meta: {}
      })
    ];
  }
  function createIntegrityChecker(store) {
    const $pageIds = store.query.ids("page");
    const $pageStates = store.query.records("instance_page_state");
    const ensureStoreIsUsable = () => {
      if (!store.has(TLDOCUMENT_ID)) {
        store.put([DocumentRecordType.create({ id: TLDOCUMENT_ID, name: store.props.defaultName })]);
        return ensureStoreIsUsable();
      }
      if (!store.has(TLPOINTER_ID)) {
        store.put([PointerRecordType.create({ id: TLPOINTER_ID })]);
        return ensureStoreIsUsable();
      }
      const pageIds = $pageIds.get();
      if (pageIds.size === 0) {
        store.put(getDefaultPages());
        return ensureStoreIsUsable();
      }
      const getFirstPageId = () => [...pageIds].map((id) => store.get(id)).sort(sortByIndex2)[0].id;
      const instanceState = store.get(TLINSTANCE_ID);
      if (!instanceState) {
        store.put([
          store.schema.types.instance.create({
            id: TLINSTANCE_ID,
            currentPageId: getFirstPageId(),
            exportBackground: true
          })
        ]);
        return ensureStoreIsUsable();
      } else if (!pageIds.has(instanceState.currentPageId)) {
        store.put([{ ...instanceState, currentPageId: getFirstPageId() }]);
        return ensureStoreIsUsable();
      }
      const missingPageStateIds = /* @__PURE__ */ new Set();
      const missingCameraIds = /* @__PURE__ */ new Set();
      for (const id of pageIds) {
        const pageStateId = InstancePageStateRecordType.createId(id);
        const pageState = store.get(pageStateId);
        if (!pageState) {
          missingPageStateIds.add(pageStateId);
        }
        const cameraId = CameraRecordType.createId(id);
        if (!store.has(cameraId)) {
          missingCameraIds.add(cameraId);
        }
      }
      if (missingPageStateIds.size > 0) {
        store.put(
          [...missingPageStateIds].map(
            (id) => InstancePageStateRecordType.create({
              id,
              pageId: InstancePageStateRecordType.parseId(id)
            })
          )
        );
      }
      if (missingCameraIds.size > 0) {
        store.put([...missingCameraIds].map((id) => CameraRecordType.create({ id })));
      }
      const pageStates = $pageStates.get();
      for (const pageState of pageStates) {
        if (!pageIds.has(pageState.pageId)) {
          store.remove([pageState.id]);
          continue;
        }
        if (pageState.croppingShapeId && !store.has(pageState.croppingShapeId)) {
          store.put([{ ...pageState, croppingShapeId: null }]);
          return ensureStoreIsUsable();
        }
        if (pageState.focusedGroupId && !store.has(pageState.focusedGroupId)) {
          store.put([{ ...pageState, focusedGroupId: null }]);
          return ensureStoreIsUsable();
        }
        if (pageState.hoveredShapeId && !store.has(pageState.hoveredShapeId)) {
          store.put([{ ...pageState, hoveredShapeId: null }]);
          return ensureStoreIsUsable();
        }
        const filteredSelectedIds = pageState.selectedShapeIds.filter((id) => store.has(id));
        if (filteredSelectedIds.length !== pageState.selectedShapeIds.length) {
          store.put([{ ...pageState, selectedShapeIds: filteredSelectedIds }]);
          return ensureStoreIsUsable();
        }
        const filteredHintingIds = pageState.hintingShapeIds.filter((id) => store.has(id));
        if (filteredHintingIds.length !== pageState.hintingShapeIds.length) {
          store.put([{ ...pageState, hintingShapeIds: filteredHintingIds }]);
          return ensureStoreIsUsable();
        }
        const filteredErasingIds = pageState.erasingShapeIds.filter((id) => store.has(id));
        if (filteredErasingIds.length !== pageState.erasingShapeIds.length) {
          store.put([{ ...pageState, erasingShapeIds: filteredErasingIds }]);
          return ensureStoreIsUsable();
        }
      }
    };
    return ensureStoreIsUsable;
  }

  // node_modules/@tldraw/tlschema/dist-esm/assets/TLBookmarkAsset.mjs
  var bookmarkAssetValidator = createAssetValidator(
    "bookmark",
    validation_exports.object({
      title: validation_exports.string,
      description: validation_exports.string,
      image: validation_exports.string,
      favicon: validation_exports.string,
      src: validation_exports.srcUrl.nullable()
    })
  );
  var Versions = createMigrationIds("com.tldraw.asset.bookmark", {
    MakeUrlsValid: 1,
    AddFavicon: 2
  });
  var bookmarkAssetMigrations = createRecordMigrationSequence({
    sequenceId: "com.tldraw.asset.bookmark",
    recordType: "asset",
    filter: (asset) => asset.type === "bookmark",
    sequence: [
      {
        id: Versions.MakeUrlsValid,
        up: (asset) => {
          if (!validation_exports.srcUrl.isValid(asset.props.src)) {
            asset.props.src = "";
          }
        },
        down: (_asset) => {
        }
      },
      {
        id: Versions.AddFavicon,
        up: (asset) => {
          if (!validation_exports.srcUrl.isValid(asset.props.favicon)) {
            asset.props.favicon = "";
          }
        },
        down: (asset) => {
          delete asset.props.favicon;
        }
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/assets/TLImageAsset.mjs
  var imageAssetValidator = createAssetValidator(
    "image",
    validation_exports.object({
      w: validation_exports.number,
      h: validation_exports.number,
      name: validation_exports.string,
      isAnimated: validation_exports.boolean,
      mimeType: validation_exports.string.nullable(),
      src: validation_exports.srcUrl.nullable(),
      fileSize: validation_exports.nonZeroNumber.optional()
    })
  );
  var Versions2 = createMigrationIds("com.tldraw.asset.image", {
    AddIsAnimated: 1,
    RenameWidthHeight: 2,
    MakeUrlsValid: 3,
    AddFileSize: 4,
    MakeFileSizeOptional: 5
  });
  var imageAssetMigrations = createRecordMigrationSequence({
    sequenceId: "com.tldraw.asset.image",
    recordType: "asset",
    filter: (asset) => asset.type === "image",
    sequence: [
      {
        id: Versions2.AddIsAnimated,
        up: (asset) => {
          asset.props.isAnimated = false;
        },
        down: (asset) => {
          delete asset.props.isAnimated;
        }
      },
      {
        id: Versions2.RenameWidthHeight,
        up: (asset) => {
          asset.props.w = asset.props.width;
          asset.props.h = asset.props.height;
          delete asset.props.width;
          delete asset.props.height;
        },
        down: (asset) => {
          asset.props.width = asset.props.w;
          asset.props.height = asset.props.h;
          delete asset.props.w;
          delete asset.props.h;
        }
      },
      {
        id: Versions2.MakeUrlsValid,
        up: (asset) => {
          if (!validation_exports.srcUrl.isValid(asset.props.src)) {
            asset.props.src = "";
          }
        },
        down: (_asset) => {
        }
      },
      {
        id: Versions2.AddFileSize,
        up: (asset) => {
          asset.props.fileSize = -1;
        },
        down: (asset) => {
          delete asset.props.fileSize;
        }
      },
      {
        id: Versions2.MakeFileSizeOptional,
        up: (asset) => {
          if (asset.props.fileSize === -1) {
            asset.props.fileSize = void 0;
          }
        },
        down: (asset) => {
          if (asset.props.fileSize === void 0) {
            asset.props.fileSize = -1;
          }
        }
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/assets/TLVideoAsset.mjs
  var videoAssetValidator = createAssetValidator(
    "video",
    validation_exports.object({
      w: validation_exports.number,
      h: validation_exports.number,
      name: validation_exports.string,
      isAnimated: validation_exports.boolean,
      mimeType: validation_exports.string.nullable(),
      src: validation_exports.srcUrl.nullable(),
      fileSize: validation_exports.number.optional()
    })
  );
  var Versions3 = createMigrationIds("com.tldraw.asset.video", {
    AddIsAnimated: 1,
    RenameWidthHeight: 2,
    MakeUrlsValid: 3,
    AddFileSize: 4,
    MakeFileSizeOptional: 5
  });
  var videoAssetMigrations = createRecordMigrationSequence({
    sequenceId: "com.tldraw.asset.video",
    recordType: "asset",
    filter: (asset) => asset.type === "video",
    sequence: [
      {
        id: Versions3.AddIsAnimated,
        up: (asset) => {
          asset.props.isAnimated = false;
        },
        down: (asset) => {
          delete asset.props.isAnimated;
        }
      },
      {
        id: Versions3.RenameWidthHeight,
        up: (asset) => {
          asset.props.w = asset.props.width;
          asset.props.h = asset.props.height;
          delete asset.props.width;
          delete asset.props.height;
        },
        down: (asset) => {
          asset.props.width = asset.props.w;
          asset.props.height = asset.props.h;
          delete asset.props.w;
          delete asset.props.h;
        }
      },
      {
        id: Versions3.MakeUrlsValid,
        up: (asset) => {
          if (!validation_exports.srcUrl.isValid(asset.props.src)) {
            asset.props.src = "";
          }
        },
        down: (_asset) => {
        }
      },
      {
        id: Versions3.AddFileSize,
        up: (asset) => {
          asset.props.fileSize = -1;
        },
        down: (asset) => {
          delete asset.props.fileSize;
        }
      },
      {
        id: Versions3.MakeFileSizeOptional,
        up: (asset) => {
          if (asset.props.fileSize === -1) {
            asset.props.fileSize = void 0;
          }
        },
        down: (asset) => {
          if (asset.props.fileSize === void 0) {
            asset.props.fileSize = -1;
          }
        }
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/records/TLAsset.mjs
  var assetValidator = validation_exports.model(
    "asset",
    validation_exports.union("type", {
      image: imageAssetValidator,
      video: videoAssetValidator,
      bookmark: bookmarkAssetValidator
    })
  );
  var assetVersions = createMigrationIds("com.tldraw.asset", {
    AddMeta: 1
  });
  var assetMigrations = createRecordMigrationSequence({
    sequenceId: "com.tldraw.asset",
    recordType: "asset",
    sequence: [
      {
        id: assetVersions.AddMeta,
        up: (record) => {
          ;
          record.meta = {};
        }
      }
    ]
  });
  var AssetRecordType = createRecordType("asset", {
    validator: assetValidator,
    scope: "document"
  }).withDefaultProperties(() => ({
    meta: {}
  }));

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLBookmarkShape.mjs
  var bookmarkShapeProps = {
    w: validation_exports.nonZeroNumber,
    h: validation_exports.nonZeroNumber,
    assetId: assetIdValidator.nullable(),
    url: validation_exports.linkUrl
  };
  var Versions4 = createShapePropsMigrationIds("bookmark", {
    NullAssetId: 1,
    MakeUrlsValid: 2
  });
  var bookmarkShapeMigrations = createShapePropsMigrationSequence({
    sequence: [
      {
        id: Versions4.NullAssetId,
        up: (props) => {
          if (props.assetId === void 0) {
            props.assetId = null;
          }
        },
        down: "retired"
      },
      {
        id: Versions4.MakeUrlsValid,
        up: (props) => {
          if (!validation_exports.linkUrl.isValid(props.url)) {
            props.url = "";
          }
        },
        down: (_props) => {
        }
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLDrawShape.mjs
  var DrawShapeSegment = validation_exports.object({
    type: validation_exports.literalEnum("free", "straight"),
    points: validation_exports.arrayOf(vecModelValidator)
  });
  var drawShapeProps = {
    color: DefaultColorStyle,
    fill: DefaultFillStyle,
    dash: DefaultDashStyle,
    size: DefaultSizeStyle,
    segments: validation_exports.arrayOf(DrawShapeSegment),
    isComplete: validation_exports.boolean,
    isClosed: validation_exports.boolean,
    isPen: validation_exports.boolean,
    scale: validation_exports.nonZeroNumber
  };
  var Versions5 = createShapePropsMigrationIds("draw", {
    AddInPen: 1,
    AddScale: 2
  });
  var drawShapeMigrations = createShapePropsMigrationSequence({
    sequence: [
      {
        id: Versions5.AddInPen,
        up: (props) => {
          const { points } = props.segments[0];
          if (points.length === 0) {
            props.isPen = false;
            return;
          }
          let isPen = !(points[0].z === 0 || points[0].z === 0.5);
          if (points[1]) {
            isPen = isPen && !(points[1].z === 0 || points[1].z === 0.5);
          }
          props.isPen = isPen;
        },
        down: "retired"
      },
      {
        id: Versions5.AddScale,
        up: (props) => {
          props.scale = 1;
        },
        down: (props) => {
          delete props.scale;
        }
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLEmbedShape.mjs
  var TLDRAW_APP_RE = /(^\/r\/[^/]+\/?$)/;
  var EMBED_DEFINITIONS = [
    {
      hostnames: ["beta.tldraw.com", "tldraw.com", "localhost:3000"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(TLDRAW_APP_RE)) {
          return url;
        }
        return;
      }
    },
    {
      hostnames: ["figma.com"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/embed\/?$/)) {
          const outUrl = urlObj.searchParams.get("url");
          if (outUrl) {
            return outUrl;
          }
        }
        return;
      }
    },
    {
      hostnames: ["google.*"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (!urlObj) return;
        const matches = urlObj.pathname.match(/^\/maps\/embed\/v1\/view\/?$/);
        if (matches && urlObj.searchParams.has("center") && urlObj.searchParams.get("zoom")) {
          const zoom = urlObj.searchParams.get("zoom");
          const [lat, lon] = urlObj.searchParams.get("center").split(",");
          return `https://www.google.com/maps/@${lat},${lon},${zoom}z`;
        }
        return;
      }
    },
    {
      hostnames: ["val.town"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        const matches = urlObj && urlObj.pathname.match(/\/embed\/(.+)\/?/);
        if (matches) {
          return `https://www.val.town/v/${matches[1]}`;
        }
        return;
      }
    },
    {
      hostnames: ["codesandbox.io"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        const matches = urlObj && urlObj.pathname.match(/\/embed\/([^/]+)\/?/);
        if (matches) {
          return `https://codesandbox.io/s/${matches[1]}`;
        }
        return;
      }
    },
    {
      hostnames: ["codepen.io"],
      fromEmbedUrl: (url) => {
        const CODEPEN_EMBED_REGEXP = /https:\/\/codepen.io\/([^/]+)\/embed\/([^/]+)/;
        const matches = url.match(CODEPEN_EMBED_REGEXP);
        if (matches) {
          const [_, user, id] = matches;
          return `https://codepen.io/${user}/pen/${id}`;
        }
        return;
      }
    },
    {
      hostnames: ["scratch.mit.edu"],
      fromEmbedUrl: (url) => {
        const SCRATCH_EMBED_REGEXP = /https:\/\/scratch.mit.edu\/projects\/embed\/([^/]+)/;
        const matches = url.match(SCRATCH_EMBED_REGEXP);
        if (matches) {
          const [_, id] = matches;
          return `https://scratch.mit.edu/projects/${id}`;
        }
        return;
      }
    },
    {
      hostnames: ["*.youtube.com", "youtube.com", "youtu.be"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (!urlObj) return;
        const hostname = urlObj.hostname.replace(/^www./, "");
        if (hostname === "youtube.com") {
          const matches = urlObj.pathname.match(/^\/embed\/([^/]+)\/?/);
          if (matches) {
            return `https://www.youtube.com/watch?v=${matches[1]}`;
          }
        }
        return;
      }
    },
    {
      hostnames: ["calendar.google.*"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        const srcQs = urlObj?.searchParams.get("src");
        if (urlObj?.pathname.match(/\/calendar\/embed/) && srcQs) {
          urlObj.pathname = "/calendar/u/0";
          const keys = Array.from(urlObj.searchParams.keys());
          for (const key of keys) {
            urlObj.searchParams.delete(key);
          }
          urlObj.searchParams.set("cid", srcQs);
          return urlObj.href;
        }
        return;
      }
    },
    {
      hostnames: ["docs.google.*"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj?.pathname.match(/^\/presentation/) && urlObj?.pathname.match(/\/embed\/?$/)) {
          urlObj.pathname = urlObj.pathname.replace(/\/embed$/, "/pub");
          const keys = Array.from(urlObj.searchParams.keys());
          for (const key of keys) {
            urlObj.searchParams.delete(key);
          }
          return urlObj.href;
        }
        return;
      }
    },
    {
      hostnames: ["gist.github.com"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/\/([^/]+)\/([^/]+)/)) {
          if (!url.split("/").pop()) return;
          return url;
        }
        return;
      }
    },
    {
      hostnames: ["replit.com"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/\/@([^/]+)\/([^/]+)/) && urlObj.searchParams.has("embed")) {
          urlObj.searchParams.delete("embed");
          return urlObj.href;
        }
        return;
      }
    },
    {
      hostnames: ["felt.com"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/embed\/map\//)) {
          urlObj.pathname = urlObj.pathname.replace(/^\/embed/, "");
          return urlObj.href;
        }
        return;
      }
    },
    {
      hostnames: ["open.spotify.com"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/embed\/(artist|album)\//)) {
          return urlObj.origin + urlObj.pathname.replace(/^\/embed/, "");
        }
        return;
      }
    },
    {
      hostnames: ["vimeo.com", "player.vimeo.com"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.hostname === "player.vimeo.com") {
          const matches = urlObj.pathname.match(/^\/video\/([^/]+)\/?$/);
          if (matches) {
            return "https://vimeo.com/" + matches[1];
          }
        }
        return;
      }
    },
    {
      hostnames: ["excalidraw.com"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.hash.match(/#room=/)) {
          return url;
        }
        return;
      }
    },
    {
      hostnames: ["observablehq.com"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/embed\/@([^/]+)\/([^/]+)\/?$/)) {
          return `${urlObj.origin}${urlObj.pathname.replace("/embed", "")}#cell-*`;
        }
        if (urlObj && urlObj.pathname.match(/^\/embed\/([^/]+)\/?$/)) {
          return `${urlObj.origin}${urlObj.pathname.replace("/embed", "/d")}#cell-*`;
        }
        return;
      }
    },
    {
      hostnames: ["desmos.com"],
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.hostname === "www.desmos.com" && urlObj.pathname.match(/^\/calculator\/([^/]+)\/?$/) && urlObj.search === "?embed" && urlObj.hash === "") {
          return url.replace("?embed", "");
        }
        return;
      }
    }
  ];
  var embedShapeProps = {
    w: validation_exports.nonZeroNumber,
    h: validation_exports.nonZeroNumber,
    url: validation_exports.string
  };
  var Versions6 = createShapePropsMigrationIds("embed", {
    GenOriginalUrlInEmbed: 1,
    RemoveDoesResize: 2,
    RemoveTmpOldUrl: 3,
    RemovePermissionOverrides: 4
  });
  var embedShapeMigrations = createShapePropsMigrationSequence({
    sequence: [
      {
        id: Versions6.GenOriginalUrlInEmbed,
        // add tmpOldUrl property
        up: (props) => {
          try {
            const url = props.url;
            const host = new URL(url).host.replace("www.", "");
            let originalUrl;
            for (const localEmbedDef of EMBED_DEFINITIONS) {
              if (localEmbedDef.hostnames.includes(host)) {
                try {
                  originalUrl = localEmbedDef.fromEmbedUrl(url);
                } catch (err) {
                  console.warn(err);
                }
              }
            }
            props.tmpOldUrl = props.url;
            props.url = originalUrl ?? "";
          } catch {
            props.url = "";
            props.tmpOldUrl = props.url;
          }
        },
        down: "retired"
      },
      {
        id: Versions6.RemoveDoesResize,
        up: (props) => {
          delete props.doesResize;
        },
        down: "retired"
      },
      {
        id: Versions6.RemoveTmpOldUrl,
        up: (props) => {
          delete props.tmpOldUrl;
        },
        down: "retired"
      },
      {
        id: Versions6.RemovePermissionOverrides,
        up: (props) => {
          delete props.overridePermissions;
        },
        down: "retired"
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLFrameShape.mjs
  var frameShapeProps = {
    w: validation_exports.nonZeroNumber,
    h: validation_exports.nonZeroNumber,
    name: validation_exports.string
  };
  var frameShapeMigrations = createShapePropsMigrationSequence({
    sequence: []
  });

  // node_modules/@tldraw/tlschema/dist-esm/styles/TLHorizontalAlignStyle.mjs
  var DefaultHorizontalAlignStyle = StyleProp.defineEnum("tldraw:horizontalAlign", {
    defaultValue: "middle",
    values: ["start", "middle", "end", "start-legacy", "end-legacy", "middle-legacy"]
  });

  // node_modules/@tldraw/tlschema/dist-esm/styles/TLVerticalAlignStyle.mjs
  var DefaultVerticalAlignStyle = StyleProp.defineEnum("tldraw:verticalAlign", {
    defaultValue: "middle",
    values: ["start", "middle", "end"]
  });

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLGeoShape.mjs
  var GeoShapeGeoStyle = StyleProp.defineEnum("tldraw:geo", {
    defaultValue: "rectangle",
    values: [
      "cloud",
      "rectangle",
      "ellipse",
      "triangle",
      "diamond",
      "pentagon",
      "hexagon",
      "octagon",
      "star",
      "rhombus",
      "rhombus-2",
      "oval",
      "trapezoid",
      "arrow-right",
      "arrow-left",
      "arrow-up",
      "arrow-down",
      "x-box",
      "check-box",
      "heart"
    ]
  });
  var geoShapeProps = {
    geo: GeoShapeGeoStyle,
    labelColor: DefaultLabelColorStyle,
    color: DefaultColorStyle,
    fill: DefaultFillStyle,
    dash: DefaultDashStyle,
    size: DefaultSizeStyle,
    font: DefaultFontStyle,
    align: DefaultHorizontalAlignStyle,
    verticalAlign: DefaultVerticalAlignStyle,
    url: validation_exports.linkUrl,
    w: validation_exports.nonZeroNumber,
    h: validation_exports.nonZeroNumber,
    growY: validation_exports.positiveNumber,
    text: validation_exports.string,
    scale: validation_exports.nonZeroNumber
  };
  var geoShapeVersions = createShapePropsMigrationIds("geo", {
    AddUrlProp: 1,
    AddLabelColor: 2,
    RemoveJustify: 3,
    AddCheckBox: 4,
    AddVerticalAlign: 5,
    MigrateLegacyAlign: 6,
    AddCloud: 7,
    MakeUrlsValid: 8,
    AddScale: 9
  });
  var geoShapeMigrations = createShapePropsMigrationSequence({
    sequence: [
      {
        id: geoShapeVersions.AddUrlProp,
        up: (props) => {
          props.url = "";
        },
        down: "retired"
      },
      {
        id: geoShapeVersions.AddLabelColor,
        up: (props) => {
          props.labelColor = "black";
        },
        down: "retired"
      },
      {
        id: geoShapeVersions.RemoveJustify,
        up: (props) => {
          if (props.align === "justify") {
            props.align = "start";
          }
        },
        down: "retired"
      },
      {
        id: geoShapeVersions.AddCheckBox,
        up: (_props) => {
        },
        down: "retired"
      },
      {
        id: geoShapeVersions.AddVerticalAlign,
        up: (props) => {
          props.verticalAlign = "middle";
        },
        down: "retired"
      },
      {
        id: geoShapeVersions.MigrateLegacyAlign,
        up: (props) => {
          let newAlign;
          switch (props.align) {
            case "start":
              newAlign = "start-legacy";
              break;
            case "end":
              newAlign = "end-legacy";
              break;
            default:
              newAlign = "middle-legacy";
              break;
          }
          props.align = newAlign;
        },
        down: "retired"
      },
      {
        id: geoShapeVersions.AddCloud,
        up: (_props) => {
        },
        down: "retired"
      },
      {
        id: geoShapeVersions.MakeUrlsValid,
        up: (props) => {
          if (!validation_exports.linkUrl.isValid(props.url)) {
            props.url = "";
          }
        },
        down: (_props) => {
        }
      },
      {
        id: geoShapeVersions.AddScale,
        up: (props) => {
          props.scale = 1;
        },
        down: (props) => {
          delete props.scale;
        }
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLGroupShape.mjs
  var groupShapeProps = {};
  var groupShapeMigrations = createShapePropsMigrationSequence({ sequence: [] });

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLHighlightShape.mjs
  var highlightShapeProps = {
    color: DefaultColorStyle,
    size: DefaultSizeStyle,
    segments: validation_exports.arrayOf(DrawShapeSegment),
    isComplete: validation_exports.boolean,
    isPen: validation_exports.boolean,
    scale: validation_exports.nonZeroNumber
  };
  var Versions7 = createShapePropsMigrationIds("highlight", {
    AddScale: 1
  });
  var highlightShapeMigrations = createShapePropsMigrationSequence({
    sequence: [
      {
        id: Versions7.AddScale,
        up: (props) => {
          props.scale = 1;
        },
        down: (props) => {
          delete props.scale;
        }
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLImageShape.mjs
  var ImageShapeCrop = validation_exports.object({
    topLeft: vecModelValidator,
    bottomRight: vecModelValidator
  });
  var imageShapeProps = {
    w: validation_exports.nonZeroNumber,
    h: validation_exports.nonZeroNumber,
    playing: validation_exports.boolean,
    url: validation_exports.linkUrl,
    assetId: assetIdValidator.nullable(),
    crop: ImageShapeCrop.nullable(),
    flipX: validation_exports.boolean,
    flipY: validation_exports.boolean
  };
  var Versions8 = createShapePropsMigrationIds("image", {
    AddUrlProp: 1,
    AddCropProp: 2,
    MakeUrlsValid: 3,
    AddFlipProps: 4
  });
  var imageShapeMigrations = createShapePropsMigrationSequence({
    sequence: [
      {
        id: Versions8.AddUrlProp,
        up: (props) => {
          props.url = "";
        },
        down: "retired"
      },
      {
        id: Versions8.AddCropProp,
        up: (props) => {
          props.crop = null;
        },
        down: (props) => {
          delete props.crop;
        }
      },
      {
        id: Versions8.MakeUrlsValid,
        up: (props) => {
          if (!validation_exports.linkUrl.isValid(props.url)) {
            props.url = "";
          }
        },
        down: (_props) => {
        }
      },
      {
        id: Versions8.AddFlipProps,
        up: (props) => {
          props.flipX = false;
          props.flipY = false;
        },
        down: (props) => {
          delete props.flipX;
          delete props.flipY;
        }
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLLineShape.mjs
  var LineShapeSplineStyle = StyleProp.defineEnum("tldraw:spline", {
    defaultValue: "line",
    values: ["cubic", "line"]
  });
  var lineShapePointValidator = validation_exports.object({
    id: validation_exports.string,
    index: validation_exports.indexKey,
    x: validation_exports.number,
    y: validation_exports.number
  });
  var lineShapeProps = {
    color: DefaultColorStyle,
    dash: DefaultDashStyle,
    size: DefaultSizeStyle,
    spline: LineShapeSplineStyle,
    points: validation_exports.dict(validation_exports.string, lineShapePointValidator),
    scale: validation_exports.nonZeroNumber
  };
  var lineShapeVersions = createShapePropsMigrationIds("line", {
    AddSnapHandles: 1,
    RemoveExtraHandleProps: 2,
    HandlesToPoints: 3,
    PointIndexIds: 4,
    AddScale: 5
  });
  var lineShapeMigrations = createShapePropsMigrationSequence({
    sequence: [
      {
        id: lineShapeVersions.AddSnapHandles,
        up: (props) => {
          for (const handle of Object.values(props.handles)) {
            ;
            handle.canSnap = true;
          }
        },
        down: "retired"
      },
      {
        id: lineShapeVersions.RemoveExtraHandleProps,
        up: (props) => {
          props.handles = objectMapFromEntries(
            Object.values(props.handles).map((handle) => [
              handle.index,
              {
                x: handle.x,
                y: handle.y
              }
            ])
          );
        },
        down: (props) => {
          const handles = Object.entries(props.handles).map(([index2, handle]) => ({ index: index2, ...handle })).sort(sortByIndex);
          props.handles = Object.fromEntries(
            handles.map((handle, i) => {
              const id = i === 0 ? "start" : i === handles.length - 1 ? "end" : `handle:${handle.index}`;
              return [
                id,
                {
                  id,
                  type: "vertex",
                  canBind: false,
                  canSnap: true,
                  index: handle.index,
                  x: handle.x,
                  y: handle.y
                }
              ];
            })
          );
        }
      },
      {
        id: lineShapeVersions.HandlesToPoints,
        up: (props) => {
          const sortedHandles = Object.entries(props.handles).map(([index2, { x, y }]) => ({ x, y, index: index2 })).sort(sortByIndex);
          props.points = sortedHandles.map(({ x, y }) => ({ x, y }));
          delete props.handles;
        },
        down: (props) => {
          const indices = getIndices(props.points.length);
          props.handles = Object.fromEntries(
            props.points.map((handle, i) => {
              const index2 = indices[i];
              return [
                index2,
                {
                  x: handle.x,
                  y: handle.y
                }
              ];
            })
          );
          delete props.points;
        }
      },
      {
        id: lineShapeVersions.PointIndexIds,
        up: (props) => {
          const indices = getIndices(props.points.length);
          props.points = Object.fromEntries(
            props.points.map((point, i) => {
              const id = indices[i];
              return [
                id,
                {
                  id,
                  index: id,
                  x: point.x,
                  y: point.y
                }
              ];
            })
          );
        },
        down: (props) => {
          const sortedHandles = Object.values(props.points).sort(sortByIndex);
          props.points = sortedHandles.map(({ x, y }) => ({ x, y }));
        }
      },
      {
        id: lineShapeVersions.AddScale,
        up: (props) => {
          props.scale = 1;
        },
        down: (props) => {
          delete props.scale;
        }
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLNoteShape.mjs
  var noteShapeProps = {
    color: DefaultColorStyle,
    labelColor: DefaultLabelColorStyle,
    size: DefaultSizeStyle,
    font: DefaultFontStyle,
    fontSizeAdjustment: validation_exports.positiveNumber,
    align: DefaultHorizontalAlignStyle,
    verticalAlign: DefaultVerticalAlignStyle,
    growY: validation_exports.positiveNumber,
    url: validation_exports.linkUrl,
    text: validation_exports.string,
    scale: validation_exports.nonZeroNumber
  };
  var Versions9 = createShapePropsMigrationIds("note", {
    AddUrlProp: 1,
    RemoveJustify: 2,
    MigrateLegacyAlign: 3,
    AddVerticalAlign: 4,
    MakeUrlsValid: 5,
    AddFontSizeAdjustment: 6,
    AddScale: 7,
    AddLabelColor: 8
  });
  var noteShapeMigrations = createShapePropsMigrationSequence({
    sequence: [
      {
        id: Versions9.AddUrlProp,
        up: (props) => {
          props.url = "";
        },
        down: "retired"
      },
      {
        id: Versions9.RemoveJustify,
        up: (props) => {
          if (props.align === "justify") {
            props.align = "start";
          }
        },
        down: "retired"
      },
      {
        id: Versions9.MigrateLegacyAlign,
        up: (props) => {
          switch (props.align) {
            case "start":
              props.align = "start-legacy";
              return;
            case "end":
              props.align = "end-legacy";
              return;
            default:
              props.align = "middle-legacy";
              return;
          }
        },
        down: "retired"
      },
      {
        id: Versions9.AddVerticalAlign,
        up: (props) => {
          props.verticalAlign = "middle";
        },
        down: "retired"
      },
      {
        id: Versions9.MakeUrlsValid,
        up: (props) => {
          if (!validation_exports.linkUrl.isValid(props.url)) {
            props.url = "";
          }
        },
        down: (_props) => {
        }
      },
      {
        id: Versions9.AddFontSizeAdjustment,
        up: (props) => {
          props.fontSizeAdjustment = 0;
        },
        down: (props) => {
          delete props.fontSizeAdjustment;
        }
      },
      {
        id: Versions9.AddScale,
        up: (props) => {
          props.scale = 1;
        },
        down: (props) => {
          delete props.scale;
        }
      },
      {
        id: Versions9.AddLabelColor,
        up: (props) => {
          props.labelColor = "black";
        },
        down: (props) => {
          delete props.labelColor;
        }
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/styles/TLTextAlignStyle.mjs
  var DefaultTextAlignStyle = StyleProp.defineEnum("tldraw:textAlign", {
    defaultValue: "start",
    values: ["start", "middle", "end"]
  });

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLTextShape.mjs
  var textShapeProps = {
    color: DefaultColorStyle,
    size: DefaultSizeStyle,
    font: DefaultFontStyle,
    textAlign: DefaultTextAlignStyle,
    w: validation_exports.nonZeroNumber,
    text: validation_exports.string,
    scale: validation_exports.nonZeroNumber,
    autoSize: validation_exports.boolean
  };
  var Versions10 = createShapePropsMigrationIds("text", {
    RemoveJustify: 1,
    AddTextAlign: 2
  });
  var textShapeMigrations = createShapePropsMigrationSequence({
    sequence: [
      {
        id: Versions10.RemoveJustify,
        up: (props) => {
          if (props.align === "justify") {
            props.align = "start";
          }
        },
        down: "retired"
      },
      {
        id: Versions10.AddTextAlign,
        up: (props) => {
          props.textAlign = props.align;
          delete props.align;
        },
        down: (props) => {
          props.align = props.textAlign;
          delete props.textAlign;
        }
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/shapes/TLVideoShape.mjs
  var videoShapeProps = {
    w: validation_exports.nonZeroNumber,
    h: validation_exports.nonZeroNumber,
    time: validation_exports.number,
    playing: validation_exports.boolean,
    url: validation_exports.linkUrl,
    assetId: assetIdValidator.nullable()
  };
  var Versions11 = createShapePropsMigrationIds("video", {
    AddUrlProp: 1,
    MakeUrlsValid: 2
  });
  var videoShapeMigrations = createShapePropsMigrationSequence({
    sequence: [
      {
        id: Versions11.AddUrlProp,
        up: (props) => {
          props.url = "";
        },
        down: "retired"
      },
      {
        id: Versions11.MakeUrlsValid,
        up: (props) => {
          if (!validation_exports.linkUrl.isValid(props.url)) {
            props.url = "";
          }
        },
        down: (_props) => {
        }
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/store-migrations.mjs
  var Versions12 = createMigrationIds("com.tldraw.store", {
    RemoveCodeAndIconShapeTypes: 1,
    AddInstancePresenceType: 2,
    RemoveTLUserAndPresenceAndAddPointer: 3,
    RemoveUserDocument: 4
  });
  var storeMigrations = createMigrationSequence({
    sequenceId: "com.tldraw.store",
    retroactive: false,
    sequence: [
      {
        id: Versions12.RemoveCodeAndIconShapeTypes,
        scope: "store",
        up: (store) => {
          for (const [id, record] of objectMapEntries(store)) {
            if (record.typeName === "shape" && (record.type === "icon" || record.type === "code")) {
              delete store[id];
            }
          }
        }
      },
      {
        id: Versions12.AddInstancePresenceType,
        scope: "store",
        up(_store) {
        }
      },
      {
        // remove user and presence records and add pointer records
        id: Versions12.RemoveTLUserAndPresenceAndAddPointer,
        scope: "store",
        up: (store) => {
          for (const [id, record] of objectMapEntries(store)) {
            if (record.typeName.match(/^(user|user_presence)$/)) {
              delete store[id];
            }
          }
        }
      },
      {
        // remove user document records
        id: Versions12.RemoveUserDocument,
        scope: "store",
        up: (store) => {
          for (const [id, record] of objectMapEntries(store)) {
            if (record.typeName.match("user_document")) {
              delete store[id];
            }
          }
        }
      }
    ]
  });

  // node_modules/@tldraw/tlschema/dist-esm/createTLSchema.mjs
  var defaultShapeSchemas = {
    arrow: { migrations: arrowShapeMigrations, props: arrowShapeProps },
    bookmark: { migrations: bookmarkShapeMigrations, props: bookmarkShapeProps },
    draw: { migrations: drawShapeMigrations, props: drawShapeProps },
    embed: { migrations: embedShapeMigrations, props: embedShapeProps },
    frame: { migrations: frameShapeMigrations, props: frameShapeProps },
    geo: { migrations: geoShapeMigrations, props: geoShapeProps },
    group: { migrations: groupShapeMigrations, props: groupShapeProps },
    highlight: { migrations: highlightShapeMigrations, props: highlightShapeProps },
    image: { migrations: imageShapeMigrations, props: imageShapeProps },
    line: { migrations: lineShapeMigrations, props: lineShapeProps },
    note: { migrations: noteShapeMigrations, props: noteShapeProps },
    text: { migrations: textShapeMigrations, props: textShapeProps },
    video: { migrations: videoShapeMigrations, props: videoShapeProps }
  };
  var defaultBindingSchemas = {
    arrow: { migrations: arrowBindingMigrations, props: arrowBindingProps }
  };
  function createTLSchema({
    shapes = defaultShapeSchemas,
    bindings = defaultBindingSchemas,
    migrations
  } = {}) {
    const stylesById = /* @__PURE__ */ new Map();
    for (const shape of objectMapValues(shapes)) {
      for (const style of getShapePropKeysByStyle(shape.props ?? {}).keys()) {
        if (stylesById.has(style.id) && stylesById.get(style.id) !== style) {
          throw new Error(`Multiple StyleProp instances with the same id: ${style.id}`);
        }
        stylesById.set(style.id, style);
      }
    }
    const ShapeRecordType = createShapeRecordType(shapes);
    const BindingRecordType = createBindingRecordType(bindings);
    const InstanceRecordType = createInstanceRecordType(stylesById);
    return StoreSchema.create(
      {
        asset: AssetRecordType,
        binding: BindingRecordType,
        camera: CameraRecordType,
        document: DocumentRecordType,
        instance: InstanceRecordType,
        instance_page_state: InstancePageStateRecordType,
        page: PageRecordType,
        instance_presence: InstancePresenceRecordType,
        pointer: PointerRecordType,
        shape: ShapeRecordType
      },
      {
        migrations: [
          storeMigrations,
          assetMigrations,
          cameraMigrations,
          documentMigrations,
          instanceMigrations,
          instancePageStateMigrations,
          pageMigrations,
          instancePresenceMigrations,
          pointerMigrations,
          rootShapeMigrations,
          bookmarkAssetMigrations,
          imageAssetMigrations,
          videoAssetMigrations,
          ...processPropsMigrations("shape", shapes),
          ...processPropsMigrations("binding", bindings),
          ...migrations ?? []
        ],
        onValidationFailure,
        createIntegrityChecker
      }
    );
  }

  // node_modules/@tldraw/tlschema/dist-esm/translations/languages.mjs
  var LANGUAGES = [
    { locale: "id", label: "Bahasa Indonesia" },
    { locale: "ca", label: "Catal\xE0" },
    { locale: "cs", label: "\u010Ce\u0161tina" },
    { locale: "da", label: "Danish" },
    { locale: "de", label: "Deutsch" },
    { locale: "en", label: "English" },
    { locale: "es", label: "Espa\xF1ol" },
    { locale: "fr", label: "Fran\xE7ais" },
    { locale: "gl", label: "Galego" },
    { locale: "hr", label: "Hrvatski" },
    { locale: "it", label: "Italiano" },
    { locale: "hu", label: "Magyar" },
    { locale: "no", label: "Norwegian" },
    { locale: "pl", label: "Polski" },
    { locale: "pt-br", label: "Portugu\xEAs - Brasil" },
    { locale: "pt-pt", label: "Portugu\xEAs - Europeu" },
    { locale: "ro", label: "Rom\xE2n\u0103" },
    { locale: "ru", label: "Russian" },
    { locale: "sl", label: "Sloven\u0161\u010Dina" },
    { locale: "so", label: "Somali" },
    { locale: "fi", label: "Suomi" },
    { locale: "sv", label: "Svenska" },
    { locale: "vi", label: "Ti\u1EBFng Vi\u1EC7t" },
    { locale: "tr", label: "T\xFCrk\xE7e" },
    { locale: "uk", label: "Ukrainian" },
    { locale: "he", label: "\u05E2\u05D1\u05E8\u05D9\u05EA" },
    { locale: "ar", label: "\u0639\u0631\u0628\u064A" },
    { locale: "fa", label: "\u0641\u0627\u0631\u0633\u06CC" },
    { locale: "ku", label: "\u06A9\u0648\u0631\u062F\u06CC" },
    { locale: "ne", label: "\u0928\u0947\u092A\u093E\u0932\u0940" },
    { locale: "hi-in", label: "\u0939\u093F\u0928\u094D\u0926\u0940" },
    { locale: "te", label: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41" },
    { locale: "th", label: "\u0E20\u0E32\u0E29\u0E32\u0E44\u0E17\u0E22" },
    { locale: "my", label: "\u1019\u103C\u1014\u103A\u1019\u102C\u1005\u102C" },
    { locale: "ko-kr", label: "\uD55C\uAD6D\uC5B4" },
    { locale: "ja", label: "\u65E5\u672C\u8A9E" },
    { locale: "zh-cn", label: "\u7B80\u4F53\u4E2D\u6587" },
    { locale: "zh-tw", label: "\u7E41\u9AD4\u4E2D\u6587 (\u53F0\u7063)" }
  ];

  // node_modules/@tldraw/tlschema/dist-esm/translations/translations.mjs
  function getDefaultTranslationLocale() {
    const locales = typeof window !== "undefined" ? window.navigator.languages ?? ["en"] : ["en"];
    return _getDefaultTranslationLocale(locales);
  }
  function _getDefaultTranslationLocale(locales) {
    for (const locale of locales) {
      const supportedLocale = getSupportedLocale(locale);
      if (supportedLocale) {
        return supportedLocale;
      }
    }
    return "en";
  }
  var DEFAULT_LOCALE_REGIONS = {
    zh: "zh-cn",
    pt: "pt-br",
    ko: "ko-kr",
    hi: "hi-in"
  };
  function getSupportedLocale(locale) {
    const exactMatch = LANGUAGES.find((t2) => t2.locale === locale.toLowerCase());
    if (exactMatch) {
      return exactMatch.locale;
    }
    const [language, region] = locale.split(/[-_]/).map((s) => s.toLowerCase());
    if (region) {
      const languageMatch = LANGUAGES.find((t2) => t2.locale === language);
      if (languageMatch) {
        return languageMatch.locale;
      }
    }
    if (language in DEFAULT_LOCALE_REGIONS) {
      return DEFAULT_LOCALE_REGIONS[language];
    }
    return null;
  }

  // node_modules/@tldraw/tlschema/dist-esm/index.mjs
  registerTldrawLibraryVersion(
    "@tldraw/tlschema",
    "3.7.2",
    "esm"
  );

  // node_modules/@tldraw/editor/dist-esm/lib/TldrawEditor.mjs
  var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
  var import_react45 = __toESM(require_react(), 1);
  var import_classnames11 = __toESM(require_classnames(), 1);

  // node_modules/@tldraw/editor/dist-esm/version.mjs
  var version = "3.7.2";
  var publishDates = {
    major: "2024-09-13T14:36:29.063Z",
    minor: "2025-01-07T15:59:09.453Z",
    patch: "2025-01-16T12:44:39.524Z"
  };

  // node_modules/@tldraw/editor/dist-esm/lib/components/ErrorBoundary.mjs
  var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
  var React2 = __toESM(require_react(), 1);
  var initialState = { error: null };
  var ErrorBoundary = class extends React2.Component {
    static getDerivedStateFromError(error) {
      return { error };
    }
    state = initialState;
    componentDidCatch(error) {
      this.props.onError?.(error);
    }
    render() {
      const { error } = this.state;
      if (error !== null) {
        const { fallback: Fallback } = this.props;
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Fallback, { error });
      }
      return this.props.children;
    }
  };
  function OptionalErrorBoundary({
    children,
    fallback,
    ...props
  }) {
    if (fallback === null) {
      return children;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ErrorBoundary, { fallback, ...props, children });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultErrorFallback.mjs
  var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
  var import_classnames9 = __toESM(require_classnames(), 1);
  var import_react32 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useEditor.mjs
  var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
  var import_react9 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useSafeId.mjs
  var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
  var import_react8 = __toESM(require_react(), 1);
  function suffixSafeId(id, suffix) {
    return sanitizeId(`${id}_${suffix}`);
  }
  function useUniqueSafeId(suffix) {
    return sanitizeId(`${(0, import_react8.useId)()}${suffix ?? ""}`);
  }
  function useSharedSafeId(id) {
    const idScope = assertExists((0, import_react8.useContext)(IdContext));
    return sanitizeId(`${idScope}_${id}`);
  }
  function sanitizeId(id) {
    return id.replace(/:/g, "_");
  }
  var IdContext = (0, import_react8.createContext)(null);
  function IdProvider({ children }) {
    const id = useUniqueSafeId();
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(IdContext.Provider, { value: id, children });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useEditor.mjs
  var EditorContext = (0, import_react9.createContext)(null);
  function useEditor() {
    const editor = import_react9.default.useContext(EditorContext);
    if (!editor) {
      throw new Error(
        "useEditor must be used inside of the <Tldraw /> or <TldrawEditor /> components"
      );
    }
    return editor;
  }
  function useMaybeEditor() {
    return import_react9.default.useContext(EditorContext);
  }
  function EditorProvider({
    editor,
    children
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(EditorContext.Provider, { value: editor, children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(IdProvider, { children }) });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useEditorComponents.mjs
  var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
  var import_react31 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultBackground.mjs
  var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
  function DefaultBackground() {
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "tl-background" });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultBrush.mjs
  var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
  var import_react11 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useTransform.mjs
  var import_react10 = __toESM(require_react(), 1);
  function useTransform(ref, x, y, scale, rotate, additionalOffset) {
    (0, import_react10.useLayoutEffect)(() => {
      const elm = ref.current;
      if (!elm) return;
      if (x === void 0) return;
      let trans = `translate(${x}px, ${y}px)`;
      if (scale !== void 0) {
        trans += ` scale(${scale})`;
      }
      if (rotate !== void 0) {
        trans += ` rotate(${rotate}rad)`;
      }
      if (additionalOffset) {
        trans += ` translate(${additionalOffset.x}px, ${additionalOffset.y}px)`;
      }
      elm.style.transform = trans;
    });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/easings.mjs
  var EASINGS = {
    linear: (t2) => t2,
    easeInQuad: (t2) => t2 * t2,
    easeOutQuad: (t2) => t2 * (2 - t2),
    easeInOutQuad: (t2) => t2 < 0.5 ? 2 * t2 * t2 : -1 + (4 - 2 * t2) * t2,
    easeInCubic: (t2) => t2 * t2 * t2,
    easeOutCubic: (t2) => --t2 * t2 * t2 + 1,
    easeInOutCubic: (t2) => t2 < 0.5 ? 4 * t2 * t2 * t2 : (t2 - 1) * (2 * t2 - 2) * (2 * t2 - 2) + 1,
    easeInQuart: (t2) => t2 * t2 * t2 * t2,
    easeOutQuart: (t2) => 1 - --t2 * t2 * t2 * t2,
    easeInOutQuart: (t2) => t2 < 0.5 ? 8 * t2 * t2 * t2 * t2 : 1 - 8 * --t2 * t2 * t2 * t2,
    easeInQuint: (t2) => t2 * t2 * t2 * t2 * t2,
    easeOutQuint: (t2) => 1 + --t2 * t2 * t2 * t2 * t2,
    easeInOutQuint: (t2) => t2 < 0.5 ? 16 * t2 * t2 * t2 * t2 * t2 : 1 + 16 * --t2 * t2 * t2 * t2 * t2,
    easeInSine: (t2) => 1 - Math.cos(t2 * Math.PI / 2),
    easeOutSine: (t2) => Math.sin(t2 * Math.PI / 2),
    easeInOutSine: (t2) => -(Math.cos(Math.PI * t2) - 1) / 2,
    easeInExpo: (t2) => t2 <= 0 ? 0 : Math.pow(2, 10 * t2 - 10),
    easeOutExpo: (t2) => t2 >= 1 ? 1 : 1 - Math.pow(2, -10 * t2),
    easeInOutExpo: (t2) => t2 <= 0 ? 0 : t2 >= 1 ? 1 : t2 < 0.5 ? Math.pow(2, 20 * t2 - 10) / 2 : (2 - Math.pow(2, -20 * t2 + 10)) / 2
  };

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/Vec.mjs
  var Vec = class _Vec {
    constructor(x = 0, y = 0, z = 1) {
      this.x = x;
      this.y = y;
      this.z = z;
    }
    // eslint-disable-next-line no-restricted-syntax
    get pressure() {
      return this.z;
    }
    set(x = this.x, y = this.y, z = this.z) {
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    }
    setTo({ x = 0, y = 0, z = 1 }) {
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    }
    rot(r) {
      if (r === 0) return this;
      const { x, y } = this;
      const s = Math.sin(r);
      const c = Math.cos(r);
      this.x = x * c - y * s;
      this.y = x * s + y * c;
      return this;
    }
    rotWith(C, r) {
      if (r === 0) return this;
      const x = this.x - C.x;
      const y = this.y - C.y;
      const s = Math.sin(r);
      const c = Math.cos(r);
      this.x = C.x + (x * c - y * s);
      this.y = C.y + (x * s + y * c);
      return this;
    }
    clone() {
      const { x, y, z } = this;
      return new _Vec(x, y, z);
    }
    sub(V2) {
      this.x -= V2.x;
      this.y -= V2.y;
      return this;
    }
    subXY(x, y) {
      this.x -= x;
      this.y -= y;
      return this;
    }
    subScalar(n) {
      this.x -= n;
      this.y -= n;
      return this;
    }
    add(V2) {
      this.x += V2.x;
      this.y += V2.y;
      return this;
    }
    addXY(x, y) {
      this.x += x;
      this.y += y;
      return this;
    }
    addScalar(n) {
      this.x += n;
      this.y += n;
      return this;
    }
    clamp(min3, max2) {
      this.x = Math.max(this.x, min3);
      this.y = Math.max(this.y, min3);
      if (max2 !== void 0) {
        this.x = Math.min(this.x, max2);
        this.y = Math.min(this.y, max2);
      }
      return this;
    }
    div(t2) {
      this.x /= t2;
      this.y /= t2;
      return this;
    }
    divV(V2) {
      this.x /= V2.x;
      this.y /= V2.y;
      return this;
    }
    mul(t2) {
      this.x *= t2;
      this.y *= t2;
      return this;
    }
    mulV(V2) {
      this.x *= V2.x;
      this.y *= V2.y;
      return this;
    }
    abs() {
      this.x = Math.abs(this.x);
      this.y = Math.abs(this.y);
      return this;
    }
    nudge(B, distance) {
      const tan = _Vec.Tan(B, this);
      return this.add(tan.mul(distance));
    }
    neg() {
      this.x *= -1;
      this.y *= -1;
      return this;
    }
    cross(V2) {
      this.x = this.y * V2.z - this.z * V2.y;
      this.y = this.z * V2.x - this.x * V2.z;
      return this;
    }
    dpr(V2) {
      return _Vec.Dpr(this, V2);
    }
    cpr(V2) {
      return _Vec.Cpr(this, V2);
    }
    len2() {
      return _Vec.Len2(this);
    }
    len() {
      return _Vec.Len(this);
    }
    pry(V2) {
      return _Vec.Pry(this, V2);
    }
    per() {
      const { x, y } = this;
      this.x = y;
      this.y = -x;
      return this;
    }
    uni() {
      return _Vec.Uni(this);
    }
    tan(V2) {
      return _Vec.Tan(this, V2);
    }
    dist(V2) {
      return _Vec.Dist(this, V2);
    }
    distanceToLineSegment(A, B) {
      return _Vec.DistanceToLineSegment(A, B, this);
    }
    slope(B) {
      return _Vec.Slope(this, B);
    }
    snapToGrid(gridSize) {
      this.x = Math.round(this.x / gridSize) * gridSize;
      this.y = Math.round(this.y / gridSize) * gridSize;
      return this;
    }
    angle(B) {
      return _Vec.Angle(this, B);
    }
    toAngle() {
      return _Vec.ToAngle(this);
    }
    lrp(B, t2) {
      this.x = this.x + (B.x - this.x) * t2;
      this.y = this.y + (B.y - this.y) * t2;
      return this;
    }
    equals(B) {
      return _Vec.Equals(this, B);
    }
    equalsXY(x, y) {
      return _Vec.EqualsXY(this, x, y);
    }
    norm() {
      const l = this.len();
      this.x = l === 0 ? 0 : this.x / l;
      this.y = l === 0 ? 0 : this.y / l;
      return this;
    }
    toFixed() {
      return _Vec.ToFixed(this);
    }
    toString() {
      return _Vec.ToString(_Vec.ToFixed(this));
    }
    toJson() {
      return _Vec.ToJson(this);
    }
    toArray() {
      return _Vec.ToArray(this);
    }
    static Add(A, B) {
      return new _Vec(A.x + B.x, A.y + B.y);
    }
    static AddXY(A, x, y) {
      return new _Vec(A.x + x, A.y + y);
    }
    static Sub(A, B) {
      return new _Vec(A.x - B.x, A.y - B.y);
    }
    static SubXY(A, x, y) {
      return new _Vec(A.x - x, A.y - y);
    }
    static AddScalar(A, n) {
      return new _Vec(A.x + n, A.y + n);
    }
    static SubScalar(A, n) {
      return new _Vec(A.x - n, A.y - n);
    }
    static Div(A, t2) {
      return new _Vec(A.x / t2, A.y / t2);
    }
    static Mul(A, t2) {
      return new _Vec(A.x * t2, A.y * t2);
    }
    static DivV(A, B) {
      return new _Vec(A.x / B.x, A.y / B.y);
    }
    static MulV(A, B) {
      return new _Vec(A.x * B.x, A.y * B.y);
    }
    static Neg(A) {
      return new _Vec(-A.x, -A.y);
    }
    /**
     * Get the perpendicular vector to A.
     */
    static Per(A) {
      return new _Vec(A.y, -A.x);
    }
    static Abs(A) {
      return new _Vec(Math.abs(A.x), Math.abs(A.y));
    }
    // Get the distance between two points.
    static Dist(A, B) {
      return ((A.y - B.y) ** 2 + (A.x - B.x) ** 2) ** 0.5;
    }
    // Get whether a distance between two points is less than a number. This is faster to calulate than using `Vec.Dist(a, b) < n`.
    static DistMin(A, B, n) {
      return (A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y) < n ** 2;
    }
    // Get the squared distance between two points. This is faster to calculate (no square root) so useful for "minimum distance" checks where the actual measurement does not matter.
    static Dist2(A, B) {
      return (A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y);
    }
    /**
     * Dot product of two vectors which is used to calculate the angle between them.
     */
    static Dpr(A, B) {
      return A.x * B.x + A.y * B.y;
    }
    static Cross(A, V2) {
      return new _Vec(
        A.y * V2.z - A.z * V2.y,
        A.z * V2.x - A.x * V2.z
        // A.z = A.x * V.y - A.y * V.x
      );
    }
    /**
     * Cross product of two vectors which is used to calculate the area of a parallelogram.
     */
    static Cpr(A, B) {
      return A.x * B.y - B.x * A.y;
    }
    static Len2(A) {
      return A.x * A.x + A.y * A.y;
    }
    static Len(A) {
      return (A.x * A.x + A.y * A.y) ** 0.5;
    }
    /**
     * Get the projection of A onto B.
     */
    static Pry(A, B) {
      return _Vec.Dpr(A, B) / _Vec.Len(B);
    }
    /**
     * Get the unit vector of A.
     */
    static Uni(A) {
      return _Vec.Div(A, _Vec.Len(A));
    }
    static Tan(A, B) {
      return _Vec.Uni(_Vec.Sub(A, B));
    }
    static Min(A, B) {
      return new _Vec(Math.min(A.x, B.x), Math.min(A.y, B.y));
    }
    static Max(A, B) {
      return new _Vec(Math.max(A.x, B.x), Math.max(A.y, B.y));
    }
    static From({ x, y, z = 1 }) {
      return new _Vec(x, y, z);
    }
    static FromArray(v) {
      return new _Vec(v[0], v[1]);
    }
    static Rot(A, r = 0) {
      const s = Math.sin(r);
      const c = Math.cos(r);
      return new _Vec(A.x * c - A.y * s, A.x * s + A.y * c);
    }
    static RotWith(A, C, r) {
      const x = A.x - C.x;
      const y = A.y - C.y;
      const s = Math.sin(r);
      const c = Math.cos(r);
      return new _Vec(C.x + (x * c - y * s), C.y + (x * s + y * c));
    }
    /**
     * Get the nearest point on a line with a known unit vector that passes through point A
     *
     * ```ts
     * Vec.nearestPointOnLineThroughPoint(A, u, Point)
     * ```
     *
     * @param A - Any point on the line
     * @param u - The unit vector for the line.
     * @param P - A point not on the line to test.
     */
    static NearestPointOnLineThroughPoint(A, u, P) {
      return _Vec.Mul(u, _Vec.Sub(P, A).pry(u)).add(A);
    }
    static NearestPointOnLineSegment(A, B, P, clamp5 = true) {
      if (_Vec.Equals(A, P)) return _Vec.From(P);
      if (_Vec.Equals(B, P)) return _Vec.From(P);
      const u = _Vec.Tan(B, A);
      const C = _Vec.Add(A, _Vec.Mul(u, _Vec.Sub(P, A).pry(u)));
      if (clamp5) {
        if (C.x < Math.min(A.x, B.x)) return _Vec.Cast(A.x < B.x ? A : B);
        if (C.x > Math.max(A.x, B.x)) return _Vec.Cast(A.x > B.x ? A : B);
        if (C.y < Math.min(A.y, B.y)) return _Vec.Cast(A.y < B.y ? A : B);
        if (C.y > Math.max(A.y, B.y)) return _Vec.Cast(A.y > B.y ? A : B);
      }
      return C;
    }
    static DistanceToLineThroughPoint(A, u, P) {
      return _Vec.Dist(P, _Vec.NearestPointOnLineThroughPoint(A, u, P));
    }
    static DistanceToLineSegment(A, B, P, clamp5 = true) {
      return _Vec.Dist(P, _Vec.NearestPointOnLineSegment(A, B, P, clamp5));
    }
    static Snap(A, step = 1) {
      return new _Vec(Math.round(A.x / step) * step, Math.round(A.y / step) * step);
    }
    static Cast(A) {
      if (A instanceof _Vec) return A;
      return _Vec.From(A);
    }
    static Slope(A, B) {
      if (A.x === B.y) return NaN;
      return (A.y - B.y) / (A.x - B.x);
    }
    static IsNaN(A) {
      return isNaN(A.x) || isNaN(A.y);
    }
    static Angle(A, B) {
      return Math.atan2(B.y - A.y, B.x - A.x);
    }
    /**
     * Linearly interpolate between two points.
     * @param A - The first point.
     * @param B - The second point.
     * @param t - The interpolation value between 0 and 1.
     * @returns The interpolated point.
     */
    static Lrp(A, B, t2) {
      return _Vec.Sub(B, A).mul(t2).add(A);
    }
    static Med(A, B) {
      return new _Vec((A.x + B.x) / 2, (A.y + B.y) / 2);
    }
    static Equals(A, B) {
      return Math.abs(A.x - B.x) < 1e-4 && Math.abs(A.y - B.y) < 1e-4;
    }
    static EqualsXY(A, x, y) {
      return A.x === x && A.y === y;
    }
    static Clockwise(A, B, C) {
      return (C.x - A.x) * (B.y - A.y) - (B.x - A.x) * (C.y - A.y) < 0;
    }
    static Rescale(A, n) {
      const l = _Vec.Len(A);
      return new _Vec(n * A.x / l, n * A.y / l);
    }
    static ScaleWithOrigin(A, scale, origin) {
      return _Vec.Sub(A, origin).mul(scale).add(origin);
    }
    static ToFixed(A) {
      return new _Vec(toFixed(A.x), toFixed(A.y));
    }
    static ToInt(A) {
      return new _Vec(
        parseInt(A.x.toFixed(0)),
        parseInt(A.y.toFixed(0)),
        parseInt((A.z ?? 0).toFixed(0))
      );
    }
    static ToCss(A) {
      return `${A.x},${A.y}`;
    }
    static Nudge(A, B, distance) {
      return _Vec.Add(A, _Vec.Tan(B, A).mul(distance));
    }
    static ToString(A) {
      return `${A.x}, ${A.y}`;
    }
    static ToAngle(A) {
      let r = Math.atan2(A.y, A.x);
      if (r < 0) r += Math.PI * 2;
      return r;
    }
    static FromAngle(r, length = 1) {
      return new _Vec(Math.cos(r) * length, Math.sin(r) * length);
    }
    static ToArray(A) {
      return [A.x, A.y, A.z];
    }
    static ToJson(A) {
      const { x, y, z } = A;
      return { x, y, z };
    }
    static Average(arr) {
      const len = arr.length;
      const avg = new _Vec(0, 0);
      if (len === 0) {
        return avg;
      }
      for (let i = 0; i < len; i++) {
        avg.add(arr[i]);
      }
      return avg.div(len);
    }
    static Clamp(A, min3, max2) {
      if (max2 === void 0) {
        return new _Vec(Math.min(Math.max(A.x, min3)), Math.min(Math.max(A.y, min3)));
      }
      return new _Vec(Math.min(Math.max(A.x, min3), max2), Math.min(Math.max(A.y, min3), max2));
    }
    /**
     * Get an array of points (with simulated pressure) between two points.
     *
     * @param A - The first point.
     * @param B - The second point.
     * @param steps - The number of points to return.
     */
    static PointsBetween(A, B, steps = 6) {
      const results = [];
      for (let i = 0; i < steps; i++) {
        const t2 = EASINGS.easeInQuad(i / (steps - 1));
        const point = _Vec.Lrp(A, B, t2);
        point.z = Math.min(1, 0.5 + Math.abs(0.5 - ease(t2)) * 0.65);
        results.push(point);
      }
      return results;
    }
    static SnapToGrid(A, gridSize = 8) {
      return new _Vec(Math.round(A.x / gridSize) * gridSize, Math.round(A.y / gridSize) * gridSize);
    }
  };
  var ease = (t2) => t2 < 0.5 ? 2 * t2 * t2 : -1 + (4 - 2 * t2) * t2;

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/utils.mjs
  function precise(A) {
    return `${toDomPrecision(A.x)},${toDomPrecision(A.y)} `;
  }
  function average(A, B) {
    return `${toDomPrecision((A.x + B.x) / 2)},${toDomPrecision((A.y + B.y) / 2)} `;
  }
  var PI = Math.PI;
  var HALF_PI = PI / 2;
  var PI2 = PI * 2;
  var SIN = Math.sin;
  function clamp(n, min3, max2) {
    return Math.max(min3, typeof max2 !== "undefined" ? Math.min(n, max2) : n);
  }
  function toPrecision(n, precision = 1e10) {
    if (!n) return 0;
    return Math.round(n * precision) / precision;
  }
  function approximately(a, b, precision = 1e-6) {
    return Math.abs(a - b) <= precision;
  }
  function perimeterOfEllipse(rx, ry) {
    const h = Math.pow(rx - ry, 2) / Math.pow(rx + ry, 2);
    return PI * (rx + ry) * (1 + 3 * h / (10 + Math.sqrt(4 - 3 * h)));
  }
  function canonicalizeRotation(a) {
    a = a % PI2;
    if (a < 0) {
      a = a + PI2;
    } else if (a === 0) {
      a = 0;
    }
    return a;
  }
  function clockwiseAngleDist(a0, a1) {
    a0 = canonicalizeRotation(a0);
    a1 = canonicalizeRotation(a1);
    if (a0 > a1) {
      a1 += PI2;
    }
    return a1 - a0;
  }
  function counterClockwiseAngleDist(a0, a1) {
    return PI2 - clockwiseAngleDist(a0, a1);
  }
  function shortAngleDist(a0, a1) {
    const da = (a1 - a0) % PI2;
    return 2 * da % PI2 - da;
  }
  function clampRadians(r) {
    return (PI2 + r) % PI2;
  }
  function snapAngle(r, segments) {
    const seg = PI2 / segments;
    let ang = Math.floor((clampRadians(r) + seg / 2) / seg) * seg % PI2;
    if (ang < PI) ang += PI2;
    if (ang > PI) ang -= PI2;
    return ang;
  }
  function areAnglesCompatible(a, b) {
    return a === b || approximately(a % (Math.PI / 2) - b % (Math.PI / 2), 0);
  }
  function degreesToRadians(d) {
    return d * PI / 180;
  }
  function radiansToDegrees(r) {
    return r * 180 / PI;
  }
  function getPointOnCircle(center, r, a) {
    return new Vec(center.x, center.y).add(Vec.FromAngle(a, r));
  }
  function getPolygonVertices(width, height, sides2) {
    const cx = width / 2;
    const cy = height / 2;
    const pointsOnPerimeter = [];
    let minX = Infinity;
    let maxX = -Infinity;
    let minY = Infinity;
    let maxY = -Infinity;
    for (let i = 0; i < sides2; i++) {
      const step = PI2 / sides2;
      const t2 = -HALF_PI + i * step;
      const x = cx + cx * Math.cos(t2);
      const y = cy + cy * Math.sin(t2);
      if (x < minX) minX = x;
      if (y < minY) minY = y;
      if (x > maxX) maxX = x;
      if (y > maxY) maxY = y;
      pointsOnPerimeter.push(new Vec(x, y));
    }
    const w = maxX - minX;
    const h = maxY - minY;
    const dx = width - w;
    const dy = height - h;
    if (dx !== 0 || dy !== 0) {
      for (let i = 0; i < pointsOnPerimeter.length; i++) {
        const pt = pointsOnPerimeter[i];
        pt.x = (pt.x - minX) / w * width;
        pt.y = (pt.y - minY) / h * height;
      }
    }
    return pointsOnPerimeter;
  }
  function rangesOverlap(a0, a1, b0, b1) {
    return a0 < b1 && b0 < a1;
  }
  function rangeIntersection(a0, a1, b0, b1) {
    const min3 = Math.max(a0, b0);
    const max2 = Math.min(a1, b1);
    if (min3 <= max2) {
      return [min3, max2];
    }
    return null;
  }
  function cross(x, y, z) {
    return (y.x - x.x) * (z.y - x.y) - (z.x - x.x) * (y.y - x.y);
  }
  function pointInPolygon(A, points) {
    let windingNumber = 0;
    let a;
    let b;
    for (let i = 0; i < points.length; i++) {
      a = points[i];
      if (a.x === A.x && a.y === A.y) return true;
      b = points[(i + 1) % points.length];
      if (Vec.Dist(A, a) + Vec.Dist(A, b) === Vec.Dist(a, b)) return true;
      if (a.y <= A.y) {
        if (b.y > A.y && cross(a, b, A) > 0) {
          windingNumber += 1;
        }
      } else if (b.y <= A.y && cross(a, b, A) < 0) {
        windingNumber -= 1;
      }
    }
    return windingNumber !== 0;
  }
  function toDomPrecision(v) {
    return Math.round(v * 1e4) / 1e4;
  }
  function toFixed(v) {
    return Math.round(v * 100) / 100;
  }
  var isSafeFloat = (n) => {
    return Math.abs(n) < Number.MAX_SAFE_INTEGER;
  };
  function angleDistance(fromAngle, toAngle, direction) {
    const dist = direction < 0 ? clockwiseAngleDist(fromAngle, toAngle) : counterClockwiseAngleDist(fromAngle, toAngle);
    return dist;
  }
  function getPointInArcT(mAB, A, B, P) {
    let mAP;
    if (Math.abs(mAB) > PI) {
      mAP = shortAngleDist(A, P);
      const mPB = shortAngleDist(P, B);
      if (Math.abs(mAP) < Math.abs(mPB)) {
        return mAP / mAB;
      } else {
        return (mAB - mPB) / mAB;
      }
    } else {
      mAP = shortAngleDist(A, P);
      const t2 = mAP / mAB;
      if (Math.sign(mAP) !== Math.sign(mAB)) {
        return Math.abs(t2) > 0.5 ? 1 : 0;
      }
      return t2;
    }
  }
  function getArcMeasure(A, B, sweepFlag, largeArcFlag) {
    const m = 2 * ((B - A) % PI2) % PI2 - (B - A) % PI2;
    if (!largeArcFlag) return m;
    return (PI2 - Math.abs(m)) * (sweepFlag ? 1 : -1);
  }
  function centerOfCircleFromThreePoints(a, b, c) {
    const u = -2 * (a.x * (b.y - c.y) - a.y * (b.x - c.x) + b.x * c.y - c.x * b.y);
    const x = ((a.x * a.x + a.y * a.y) * (c.y - b.y) + (b.x * b.x + b.y * b.y) * (a.y - c.y) + (c.x * c.x + c.y * c.y) * (b.y - a.y)) / u;
    const y = ((a.x * a.x + a.y * a.y) * (b.x - c.x) + (b.x * b.x + b.y * b.y) * (c.x - a.x) + (c.x * c.x + c.y * c.y) * (a.x - b.x)) / u;
    if (!Number.isFinite(x) || !Number.isFinite(y)) {
      return null;
    }
    return new Vec(x, y);
  }
  function getPointsOnArc(startPoint, endPoint, center, radius, numPoints) {
    if (center === null) {
      return [Vec.From(startPoint), Vec.From(endPoint)];
    }
    const results = [];
    const startAngle = Vec.Angle(center, startPoint);
    const endAngle = Vec.Angle(center, endPoint);
    const l = clockwiseAngleDist(startAngle, endAngle);
    for (let i = 0; i < numPoints; i++) {
      const t2 = i / (numPoints - 1);
      const angle = startAngle + l * t2;
      const point = getPointOnCircle(center, radius, angle);
      results.push(point);
    }
    return results;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultBrush.mjs
  var DefaultBrush = ({ brush, color, opacity, className }) => {
    const rSvg = (0, import_react11.useRef)(null);
    useTransform(rSvg, brush.x, brush.y);
    const w = toDomPrecision(Math.max(1, brush.w));
    const h = toDomPrecision(Math.max(1, brush.h));
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("svg", { className: "tl-overlays__item", ref: rSvg, children: color ? /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("g", { className: "tl-brush", opacity, children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("rect", { width: w, height: h, fill: color, opacity: 0.75 }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("rect", { width: w, height: h, fill: "none", stroke: color, opacity: 0.1 })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("rect", { className: `tl-brush tl-brush__default ${className}`, width: w, height: h }) });
  };

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultCanvas.mjs
  var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
  var import_classnames = __toESM(require_classnames(), 1);
  var import_react24 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/globals/environment.mjs
  var tlenv = {
    isSafari: false,
    isIos: false,
    isChromeForIos: false,
    isFirefox: false,
    isAndroid: false,
    isWebview: false,
    isDarwin: false
  };
  if (typeof window !== "undefined" && "navigator" in window) {
    tlenv.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    tlenv.isIos = !!navigator.userAgent.match(/iPad/i) || !!navigator.userAgent.match(/iPhone/i);
    tlenv.isChromeForIos = /crios.*safari/i.test(navigator.userAgent);
    tlenv.isFirefox = /firefox/i.test(navigator.userAgent);
    tlenv.isAndroid = /android/i.test(navigator.userAgent);
    tlenv.isDarwin = window.navigator.userAgent.toLowerCase().indexOf("mac") > -1;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useCanvasEvents.mjs
  var import_react12 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/constants.mjs
  var DEFAULT_CAMERA_OPTIONS = {
    isLocked: false,
    wheelBehavior: "pan",
    panSpeed: 1,
    zoomSpeed: 1,
    zoomSteps: [0.1, 0.25, 0.5, 1, 2, 4, 8]
  };
  var DEFAULT_ANIMATION_OPTIONS = {
    duration: 0,
    easing: EASINGS.easeInOutCubic
  };
  var INTERNAL_POINTER_IDS = {
    CAMERA_MOVE: -10
  };
  var SIDES = ["top", "right", "bottom", "left"];
  var LEFT_MOUSE_BUTTON = 0;
  var RIGHT_MOUSE_BUTTON = 2;
  var MIDDLE_MOUSE_BUTTON = 1;
  var STYLUS_ERASER_BUTTON = 5;
  var ZOOM_TO_FIT_PADDING = 128;

  // node_modules/@tldraw/editor/dist-esm/lib/utils/debug-flags.mjs
  var featureFlags = {};
  var pointerCaptureTrackingObject = createDebugValue(
    "pointerCaptureTrackingObject",
    // ideally we wouldn't store this mutable value in an atom but it's not
    // a big deal for debug values
    {
      defaults: { all: /* @__PURE__ */ new Map() },
      shouldStoreForSession: false
    }
  );
  var debugFlags = {
    // --- DEBUG VALUES ---
    logPreventDefaults: createDebugValue("logPreventDefaults", {
      defaults: { all: false }
    }),
    logPointerCaptures: createDebugValue("logPointerCaptures", {
      defaults: { all: false }
    }),
    logElementRemoves: createDebugValue("logElementRemoves", {
      defaults: { all: false }
    }),
    debugSvg: createDebugValue("debugSvg", {
      defaults: { all: false }
    }),
    showFps: createDebugValue("showFps", {
      defaults: { all: false }
    }),
    measurePerformance: createDebugValue("measurePerformance", { defaults: { all: false } }),
    throwToBlob: createDebugValue("throwToBlob", {
      defaults: { all: false }
    }),
    reconnectOnPing: createDebugValue("reconnectOnPing", {
      defaults: { all: false }
    }),
    debugCursors: createDebugValue("debugCursors", {
      defaults: { all: false }
    }),
    forceSrgb: createDebugValue("forceSrgbColors", { defaults: { all: false } }),
    debugGeometry: createDebugValue("debugGeometry", { defaults: { all: false } }),
    hideShapes: createDebugValue("hideShapes", { defaults: { all: false } }),
    editOnType: createDebugValue("editOnType", { defaults: { all: false } })
  };
  if (typeof Element !== "undefined") {
    const nativeElementRemoveChild = Element.prototype.removeChild;
    react("element removal logging", () => {
      if (debugFlags.logElementRemoves.get()) {
        Element.prototype.removeChild = function(child) {
          console.warn("[tldraw] removing child:", child);
          return nativeElementRemoveChild.call(this, child);
        };
      } else {
        Element.prototype.removeChild = nativeElementRemoveChild;
      }
    });
  }
  function createDebugValue(name, {
    defaults: defaults2,
    shouldStoreForSession = true
  }) {
    return createDebugValueBase({
      name,
      defaults: defaults2,
      shouldStoreForSession
    });
  }
  function createDebugValueBase(def) {
    const defaultValue = getDefaultValue(def);
    const storedValue = def.shouldStoreForSession ? getStoredInitialValue(def.name) : null;
    const valueAtom = atom(`debug:${def.name}`, storedValue ?? defaultValue);
    if (typeof window !== "undefined") {
      if (def.shouldStoreForSession) {
        react(`debug:${def.name}`, () => {
          const currentValue = valueAtom.get();
          if (currentValue === defaultValue) {
            deleteFromSessionStorage(`tldraw_debug:${def.name}`);
          } else {
            setInSessionStorage(`tldraw_debug:${def.name}`, JSON.stringify(currentValue));
          }
        });
      }
      Object.defineProperty(window, `tldraw${def.name.replace(/^[a-z]/, (l) => l.toUpperCase())}`, {
        get() {
          return valueAtom.get();
        },
        set(newValue) {
          valueAtom.set(newValue);
        },
        configurable: true
      });
    }
    return Object.assign(valueAtom, def);
  }
  function getStoredInitialValue(name) {
    try {
      return JSON.parse(getFromSessionStorage(`tldraw_debug:${name}`) ?? "null");
    } catch {
      return null;
    }
  }
  function readEnv(fn) {
    try {
      return fn();
    } catch {
      return null;
    }
  }
  function getDefaultValue(def) {
    const env = readEnv(() => process.env.TLDRAW_ENV) ?? readEnv(() => process.env.VERCEL_PUBLIC_TLDRAW_ENV) ?? readEnv(() => process.env.NEXT_PUBLIC_TLDRAW_ENV) ?? // default to production because if we don't have one of these, this is probably a library use
    "production";
    switch (env) {
      case "production":
        return def.defaults.production ?? def.defaults.all;
      case "preview":
      case "staging":
        return def.defaults.staging ?? def.defaults.all;
      default:
        return def.defaults.development ?? def.defaults.all;
    }
  }

  // node_modules/@tldraw/editor/dist-esm/lib/utils/dom.mjs
  function loopToHtmlElement(elm) {
    if (elm instanceof HTMLElement) return elm;
    if (elm.parentElement) return loopToHtmlElement(elm.parentElement);
    else throw Error("Could not find a parent element of an HTML type!");
  }
  function preventDefault(event) {
    event.preventDefault();
    if (debugFlags.logPreventDefaults.get()) {
      console.warn("preventDefault called on event:", event);
    }
  }
  function setPointerCapture(element, event) {
    element.setPointerCapture(event.pointerId);
    if (debugFlags.logPointerCaptures.get()) {
      const trackingObj = pointerCaptureTrackingObject.get();
      trackingObj.set(element, (trackingObj.get(element) ?? 0) + 1);
      console.warn("setPointerCapture called on element:", element, event);
    }
  }
  function releasePointerCapture(element, event) {
    if (!element.hasPointerCapture(event.pointerId)) {
      return;
    }
    element.releasePointerCapture(event.pointerId);
    if (debugFlags.logPointerCaptures.get()) {
      const trackingObj = pointerCaptureTrackingObject.get();
      if (trackingObj.get(element) === 1) {
        trackingObj.delete(element);
      } else if (trackingObj.has(element)) {
        trackingObj.set(element, trackingObj.get(element) - 1);
      } else {
        console.warn("Release without capture");
      }
      console.warn("releasePointerCapture called on element:", element, event);
    }
  }
  var stopEventPropagation = (e) => e.stopPropagation();
  var setStyleProperty = (elm, property, value) => {
    if (!elm) return;
    elm.style.setProperty(property, value);
  };

  // node_modules/@tldraw/editor/dist-esm/lib/utils/keyboard.mjs
  var isAccelKey = (e) => {
    return tlenv.isDarwin ? e.metaKey : e.ctrlKey || e.metaKey;
  };

  // node_modules/@tldraw/editor/dist-esm/lib/utils/getPointerInfo.mjs
  function getPointerInfo(e) {
    ;
    e.isKilled = true;
    return {
      point: {
        x: e.clientX,
        y: e.clientY,
        z: e.pressure
      },
      shiftKey: e.shiftKey,
      altKey: e.altKey,
      ctrlKey: e.metaKey || e.ctrlKey,
      metaKey: e.metaKey,
      accelKey: isAccelKey(e),
      pointerId: e.pointerId,
      button: e.button,
      isPen: e.pointerType === "pen"
    };
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useCanvasEvents.mjs
  function useCanvasEvents() {
    const editor = useEditor();
    const events = (0, import_react12.useMemo)(
      function canvasEvents() {
        let lastX, lastY;
        function onPointerDown(e) {
          if (e.isKilled) return;
          if (e.button === RIGHT_MOUSE_BUTTON) {
            editor.dispatch({
              type: "pointer",
              target: "canvas",
              name: "right_click",
              ...getPointerInfo(e)
            });
            return;
          }
          if (e.button !== 0 && e.button !== 1 && e.button !== 5) return;
          setPointerCapture(e.currentTarget, e);
          editor.dispatch({
            type: "pointer",
            target: "canvas",
            name: "pointer_down",
            ...getPointerInfo(e)
          });
        }
        function onPointerMove(e) {
          if (e.isKilled) return;
          if (e.clientX === lastX && e.clientY === lastY) return;
          lastX = e.clientX;
          lastY = e.clientY;
          editor.dispatch({
            type: "pointer",
            target: "canvas",
            name: "pointer_move",
            ...getPointerInfo(e)
          });
        }
        function onPointerUp(e) {
          if (e.isKilled) return;
          if (e.button !== 0 && e.button !== 1 && e.button !== 2 && e.button !== 5) return;
          lastX = e.clientX;
          lastY = e.clientY;
          releasePointerCapture(e.currentTarget, e);
          editor.dispatch({
            type: "pointer",
            target: "canvas",
            name: "pointer_up",
            ...getPointerInfo(e)
          });
        }
        function onPointerEnter(e) {
          if (e.isKilled) return;
          if (editor.getInstanceState().isPenMode && e.pointerType !== "pen") return;
          const canHover = e.pointerType === "mouse" || e.pointerType === "pen";
          editor.updateInstanceState({ isHoveringCanvas: canHover ? true : null });
        }
        function onPointerLeave(e) {
          if (e.isKilled) return;
          if (editor.getInstanceState().isPenMode && e.pointerType !== "pen") return;
          const canHover = e.pointerType === "mouse" || e.pointerType === "pen";
          editor.updateInstanceState({ isHoveringCanvas: canHover ? false : null });
        }
        function onTouchStart(e) {
          ;
          e.isKilled = true;
          preventDefault(e);
        }
        function onTouchEnd(e) {
          ;
          e.isKilled = true;
          if (!(e.target instanceof HTMLElement)) return;
          if (e.target.tagName !== "A" && e.target.tagName !== "TEXTAREA" && // When in EditingShape state, we are actually clicking on a 'DIV'
          // not A/TEXTAREA element yet. So, to preserve cursor position
          // for edit mode on mobile we need to not preventDefault.
          // TODO: Find out if we still need this preventDefault in general though.
          !(editor.getEditingShape() && e.target.className.includes("tl-text-content"))) {
            preventDefault(e);
          }
        }
        function onDragOver(e) {
          preventDefault(e);
        }
        async function onDrop(e) {
          preventDefault(e);
          stopEventPropagation(e);
          if (!e.dataTransfer?.files?.length) return;
          const files = Array.from(e.dataTransfer.files);
          await editor.putExternalContent({
            type: "files",
            files,
            point: editor.screenToPage({ x: e.clientX, y: e.clientY }),
            ignoreParent: false
          });
        }
        function onClick(e) {
          stopEventPropagation(e);
        }
        return {
          onPointerDown,
          onPointerMove,
          onPointerUp,
          onPointerEnter,
          onPointerLeave,
          onDragOver,
          onDrop,
          onTouchStart,
          onTouchEnd,
          onClick
        };
      },
      [editor]
    );
    return events;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useCoarsePointer.mjs
  var import_react13 = __toESM(require_react(), 1);
  function useCoarsePointer() {
    const editor = useEditor();
    (0, import_react13.useEffect)(() => {
      let isCoarse = editor.getInstanceState().isCoarsePointer;
      const handlePointerDown = (e) => {
        const isCoarseEvent = e.pointerType !== "mouse";
        if (isCoarse === isCoarseEvent) return;
        isCoarse = isCoarseEvent;
        editor.updateInstanceState({ isCoarsePointer: isCoarseEvent });
      };
      window.addEventListener("pointerdown", handlePointerDown, { capture: true });
      const mql = window.matchMedia && window.matchMedia("(any-pointer: coarse)");
      const isForcedFinePointer = tlenv.isFirefox && !tlenv.isAndroid && !tlenv.isIos;
      const handleMediaQueryChange = () => {
        const next = isForcedFinePointer ? false : mql.matches;
        if (isCoarse !== next) return;
        isCoarse = next;
        editor.updateInstanceState({ isCoarsePointer: next });
      };
      if (mql) {
        mql.addEventListener("change", handleMediaQueryChange);
        handleMediaQueryChange();
      }
      return () => {
        window.removeEventListener("pointerdown", handlePointerDown, { capture: true });
        if (mql) {
          mql.removeEventListener("change", handleMediaQueryChange);
        }
      };
    }, [editor]);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useContainer.mjs
  var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
  var import_react14 = __toESM(require_react(), 1);
  var ContainerContext = (0, import_react14.createContext)(null);
  function ContainerProvider({ container, children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(ContainerContext.Provider, { value: container, children });
  }
  function useContainer() {
    return assertExists((0, import_react14.useContext)(ContainerContext), "useContainer used outside of <Tldraw />");
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useDocumentEvents.mjs
  var import_react15 = __toESM(require_react(), 1);
  function useDocumentEvents() {
    const editor = useEditor();
    const container = useContainer();
    const isAppFocused = useValue("isFocused", () => editor.getIsFocused(), [editor]);
    (0, import_react15.useEffect)(() => {
      if (!container) return;
      function onDrop(e) {
        if (e.isSpecialRedispatchedEvent) return;
        preventDefault(e);
        stopEventPropagation(e);
        const cvs = container.querySelector(".tl-canvas");
        if (!cvs) return;
        const newEvent = new DragEvent(e.type, e);
        newEvent.isSpecialRedispatchedEvent = true;
        cvs.dispatchEvent(newEvent);
      }
      container.addEventListener("dragover", onDrop);
      container.addEventListener("drop", onDrop);
      return () => {
        container.removeEventListener("dragover", onDrop);
        container.removeEventListener("drop", onDrop);
      };
    }, [container]);
    (0, import_react15.useEffect)(() => {
      if (typeof window === "undefined" || !("matchMedia" in window)) return;
      let remove2 = null;
      const updatePixelRatio = () => {
        if (remove2 != null) {
          remove2();
        }
        const mqString = `(resolution: ${window.devicePixelRatio}dppx)`;
        const media = matchMedia(mqString);
        const safariCb = (ev) => {
          if (ev.type === "change") {
            updatePixelRatio();
          }
        };
        if (media.addEventListener) {
          media.addEventListener("change", updatePixelRatio);
        } else if (media.addListener) {
          media.addListener(safariCb);
        }
        remove2 = () => {
          if (media.removeEventListener) {
            media.removeEventListener("change", updatePixelRatio);
          } else if (media.removeListener) {
            media.removeListener(safariCb);
          }
        };
        editor.updateInstanceState({ devicePixelRatio: window.devicePixelRatio });
      };
      updatePixelRatio();
      return () => {
        remove2?.();
      };
    }, [editor]);
    (0, import_react15.useEffect)(() => {
      if (!isAppFocused) return;
      const handleKeyDown = (e) => {
        if (e.altKey && // todo: When should we allow the alt key to be used? Perhaps states should declare which keys matter to them?
        (editor.isIn("zoom") || !editor.getPath().endsWith(".idle")) && !areShortcutsDisabled(editor)) {
          preventDefault(e);
        }
        if (e.isKilled) return;
        e.isKilled = true;
        switch (e.key) {
          case "=":
          case "-":
          case "0": {
            if (e.metaKey || e.ctrlKey) {
              preventDefault(e);
              return;
            }
            break;
          }
          case "Tab": {
            if (areShortcutsDisabled(editor)) {
              return;
            }
            break;
          }
          case ",": {
            return;
          }
          case "Escape": {
            if (editor.getEditingShape() || editor.getSelectedShapeIds().length > 0) {
              preventDefault(e);
            }
            if (editor.menus.getOpenMenus().length > 0) return;
            if (editor.inputs.keys.has("Escape")) {
            } else {
              editor.inputs.keys.add("Escape");
              editor.cancel();
              container.focus();
            }
            return;
          }
          default: {
            if (areShortcutsDisabled(editor)) {
              return;
            }
          }
        }
        const info = {
          type: "keyboard",
          name: e.repeat ? "key_repeat" : "key_down",
          key: e.key,
          code: e.code,
          shiftKey: e.shiftKey,
          altKey: e.altKey,
          ctrlKey: e.metaKey || e.ctrlKey,
          metaKey: e.metaKey,
          accelKey: isAccelKey(e)
        };
        editor.dispatch(info);
      };
      const handleKeyUp = (e) => {
        if (e.isKilled) return;
        e.isKilled = true;
        if (areShortcutsDisabled(editor)) {
          return;
        }
        if (e.key === ",") {
          return;
        }
        const info = {
          type: "keyboard",
          name: "key_up",
          key: e.key,
          code: e.code,
          shiftKey: e.shiftKey,
          altKey: e.altKey,
          ctrlKey: e.metaKey || e.ctrlKey,
          metaKey: e.metaKey,
          accelKey: isAccelKey(e)
        };
        editor.dispatch(info);
      };
      function handleTouchStart(e) {
        if (container.contains(e.target)) {
          const touchXPosition = e.touches[0].pageX;
          const touchXRadius = e.touches[0].radiusX || 0;
          if (touchXPosition - touchXRadius < 10 || touchXPosition + touchXRadius > editor.getViewportScreenBounds().width - 10) {
            if (e.target?.tagName === "BUTTON") {
              ;
              e.target?.click();
            }
            preventDefault(e);
          }
        }
      }
      const handleWheel = (e) => {
        if (container.contains(e.target) && (e.ctrlKey || e.metaKey)) {
          preventDefault(e);
        }
      };
      container.addEventListener("touchstart", handleTouchStart, { passive: false });
      container.addEventListener("wheel", handleWheel, { passive: false });
      document.addEventListener("gesturestart", preventDefault);
      document.addEventListener("gesturechange", preventDefault);
      document.addEventListener("gestureend", preventDefault);
      container.addEventListener("keydown", handleKeyDown);
      container.addEventListener("keyup", handleKeyUp);
      return () => {
        container.removeEventListener("touchstart", handleTouchStart);
        container.removeEventListener("wheel", handleWheel);
        document.removeEventListener("gesturestart", preventDefault);
        document.removeEventListener("gesturechange", preventDefault);
        document.removeEventListener("gestureend", preventDefault);
        container.removeEventListener("keydown", handleKeyDown);
        container.removeEventListener("keyup", handleKeyUp);
      };
    }, [editor, container, isAppFocused]);
  }
  var INPUTS = ["input", "select", "button", "textarea"];
  function areShortcutsDisabled(editor) {
    const { activeElement } = document;
    return editor.menus.hasOpenMenus() || activeElement && (activeElement.getAttribute("contenteditable") || INPUTS.indexOf(activeElement.tagName.toLowerCase()) > -1);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useFixSafariDoubleTapZoomPencilEvents.mjs
  var import_react16 = __toESM(require_react(), 1);
  var IGNORED_TAGS = ["textarea", "input"];
  function useFixSafariDoubleTapZoomPencilEvents(ref) {
    const editor = useEditor();
    (0, import_react16.useEffect)(() => {
      const elm = ref.current;
      if (!elm) return;
      const handleEvent = (e) => {
        if (e instanceof PointerEvent && e.pointerType === "pen") {
          ;
          e.isKilled = true;
          const { target } = e;
          if (IGNORED_TAGS.includes(target.tagName?.toLocaleLowerCase()) || editor.isIn("select.editing_shape")) {
            return;
          }
          preventDefault(e);
        }
      };
      elm.addEventListener("touchstart", handleEvent);
      elm.addEventListener("touchend", handleEvent);
      return () => {
        elm.removeEventListener("touchstart", handleEvent);
        elm.removeEventListener("touchend", handleEvent);
      };
    }, [editor, ref]);
  }

  // node_modules/@use-gesture/core/dist/maths-0ab39ae9.esm.js
  function clamp2(v, min3, max2) {
    return Math.max(min3, Math.min(v, max2));
  }
  var V = {
    toVector(v, fallback) {
      if (v === void 0) v = fallback;
      return Array.isArray(v) ? v : [v, v];
    },
    add(v1, v2) {
      return [v1[0] + v2[0], v1[1] + v2[1]];
    },
    sub(v1, v2) {
      return [v1[0] - v2[0], v1[1] - v2[1]];
    },
    addTo(v1, v2) {
      v1[0] += v2[0];
      v1[1] += v2[1];
    },
    subTo(v1, v2) {
      v1[0] -= v2[0];
      v1[1] -= v2[1];
    }
  };
  function rubberband(distance, dimension, constant) {
    if (dimension === 0 || Math.abs(dimension) === Infinity) return Math.pow(distance, constant * 5);
    return distance * dimension * constant / (dimension + constant * distance);
  }
  function rubberbandIfOutOfBounds(position, min3, max2, constant = 0.15) {
    if (constant === 0) return clamp2(position, min3, max2);
    if (position < min3) return -rubberband(min3 - position, max2 - min3, constant) + min3;
    if (position > max2) return +rubberband(position - max2, max2 - min3, constant) + max2;
    return position;
  }
  function computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {
    const [[X0, X1], [Y0, Y1]] = bounds;
    return [rubberbandIfOutOfBounds(Vx, X0, X1, Rx), rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)];
  }

  // node_modules/@use-gesture/core/dist/actions-fe213e88.esm.js
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function ownKeys(e, r) {
    var t2 = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e, r2).enumerable;
      })), t2.push.apply(t2, o);
    }
    return t2;
  }
  function _objectSpread2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t2 = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t2), true).forEach(function(r2) {
        _defineProperty(e, r2, t2[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r2) {
        Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t2, r2));
      });
    }
    return e;
  }
  var EVENT_TYPE_MAP = {
    pointer: {
      start: "down",
      change: "move",
      end: "up"
    },
    mouse: {
      start: "down",
      change: "move",
      end: "up"
    },
    touch: {
      start: "start",
      change: "move",
      end: "end"
    },
    gesture: {
      start: "start",
      change: "change",
      end: "end"
    }
  };
  function capitalize(string2) {
    if (!string2) return "";
    return string2[0].toUpperCase() + string2.slice(1);
  }
  var actionsWithoutCaptureSupported = ["enter", "leave"];
  function hasCapture(capture = false, actionKey) {
    return capture && !actionsWithoutCaptureSupported.includes(actionKey);
  }
  function toHandlerProp(device, action = "", capture = false) {
    const deviceProps = EVENT_TYPE_MAP[device];
    const actionKey = deviceProps ? deviceProps[action] || action : action;
    return "on" + capitalize(device) + capitalize(actionKey) + (hasCapture(capture, actionKey) ? "Capture" : "");
  }
  var pointerCaptureEvents = ["gotpointercapture", "lostpointercapture"];
  function parseProp(prop) {
    let eventKey = prop.substring(2).toLowerCase();
    const passive = !!~eventKey.indexOf("passive");
    if (passive) eventKey = eventKey.replace("passive", "");
    const captureKey = pointerCaptureEvents.includes(eventKey) ? "capturecapture" : "capture";
    const capture = !!~eventKey.indexOf(captureKey);
    if (capture) eventKey = eventKey.replace("capture", "");
    return {
      device: eventKey,
      capture,
      passive
    };
  }
  function toDomEventType(device, action = "") {
    const deviceProps = EVENT_TYPE_MAP[device];
    const actionKey = deviceProps ? deviceProps[action] || action : action;
    return device + actionKey;
  }
  function isTouch(event) {
    return "touches" in event;
  }
  function getPointerType(event) {
    if (isTouch(event)) return "touch";
    if ("pointerType" in event) return event.pointerType;
    return "mouse";
  }
  function getCurrentTargetTouchList(event) {
    return Array.from(event.touches).filter((e) => {
      var _event$currentTarget, _event$currentTarget$;
      return e.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 || (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e.target));
    });
  }
  function distanceAngle(P1, P2) {
    try {
      const dx = P2.clientX - P1.clientX;
      const dy = P2.clientY - P1.clientY;
      const cx = (P2.clientX + P1.clientX) / 2;
      const cy = (P2.clientY + P1.clientY) / 2;
      const distance = Math.hypot(dx, dy);
      const angle = -(Math.atan2(dx, dy) * 180) / Math.PI;
      const origin = [cx, cy];
      return {
        angle,
        distance,
        origin
      };
    } catch (_unused) {
    }
    return null;
  }
  function touchIds(event) {
    return getCurrentTargetTouchList(event).map((touch) => touch.identifier);
  }
  function touchDistanceAngle(event, ids) {
    const [P1, P2] = Array.from(event.touches).filter((touch) => ids.includes(touch.identifier));
    return distanceAngle(P1, P2);
  }
  var LINE_HEIGHT = 40;
  var PAGE_HEIGHT = 800;
  function wheelValues(event) {
    let {
      deltaX,
      deltaY,
      deltaMode
    } = event;
    if (deltaMode === 1) {
      deltaX *= LINE_HEIGHT;
      deltaY *= LINE_HEIGHT;
    } else if (deltaMode === 2) {
      deltaX *= PAGE_HEIGHT;
      deltaY *= PAGE_HEIGHT;
    }
    return [deltaX, deltaY];
  }
  function getEventDetails(event) {
    const payload = {};
    if ("buttons" in event) payload.buttons = event.buttons;
    if ("shiftKey" in event) {
      const {
        shiftKey,
        altKey: altKey2,
        metaKey,
        ctrlKey
      } = event;
      Object.assign(payload, {
        shiftKey,
        altKey: altKey2,
        metaKey,
        ctrlKey
      });
    }
    return payload;
  }
  function call(v, ...args) {
    if (typeof v === "function") {
      return v(...args);
    } else {
      return v;
    }
  }
  function noop2() {
  }
  function chain(...fns) {
    if (fns.length === 0) return noop2;
    if (fns.length === 1) return fns[0];
    return function() {
      let result;
      for (const fn of fns) {
        result = fn.apply(this, arguments) || result;
      }
      return result;
    };
  }
  function assignDefault(value, fallback) {
    return Object.assign({}, fallback, value || {});
  }
  var BEFORE_LAST_KINEMATICS_DELAY = 32;
  var Engine = class {
    constructor(ctrl, args, key) {
      this.ctrl = ctrl;
      this.args = args;
      this.key = key;
      if (!this.state) {
        this.state = {};
        this.computeValues([0, 0]);
        this.computeInitial();
        if (this.init) this.init();
        this.reset();
      }
    }
    get state() {
      return this.ctrl.state[this.key];
    }
    set state(state) {
      this.ctrl.state[this.key] = state;
    }
    get shared() {
      return this.ctrl.state.shared;
    }
    get eventStore() {
      return this.ctrl.gestureEventStores[this.key];
    }
    get timeoutStore() {
      return this.ctrl.gestureTimeoutStores[this.key];
    }
    get config() {
      return this.ctrl.config[this.key];
    }
    get sharedConfig() {
      return this.ctrl.config.shared;
    }
    get handler() {
      return this.ctrl.handlers[this.key];
    }
    reset() {
      const {
        state,
        shared,
        ingKey,
        args
      } = this;
      shared[ingKey] = state._active = state.active = state._blocked = state._force = false;
      state._step = [false, false];
      state.intentional = false;
      state._movement = [0, 0];
      state._distance = [0, 0];
      state._direction = [0, 0];
      state._delta = [0, 0];
      state._bounds = [[-Infinity, Infinity], [-Infinity, Infinity]];
      state.args = args;
      state.axis = void 0;
      state.memo = void 0;
      state.elapsedTime = state.timeDelta = 0;
      state.direction = [0, 0];
      state.distance = [0, 0];
      state.overflow = [0, 0];
      state._movementBound = [false, false];
      state.velocity = [0, 0];
      state.movement = [0, 0];
      state.delta = [0, 0];
      state.timeStamp = 0;
    }
    start(event) {
      const state = this.state;
      const config = this.config;
      if (!state._active) {
        this.reset();
        this.computeInitial();
        state._active = true;
        state.target = event.target;
        state.currentTarget = event.currentTarget;
        state.lastOffset = config.from ? call(config.from, state) : state.offset;
        state.offset = state.lastOffset;
        state.startTime = state.timeStamp = event.timeStamp;
      }
    }
    computeValues(values) {
      const state = this.state;
      state._values = values;
      state.values = this.config.transform(values);
    }
    computeInitial() {
      const state = this.state;
      state._initial = state._values;
      state.initial = state.values;
    }
    compute(event) {
      const {
        state,
        config,
        shared
      } = this;
      state.args = this.args;
      let dt = 0;
      if (event) {
        state.event = event;
        if (config.preventDefault && event.cancelable) state.event.preventDefault();
        state.type = event.type;
        shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;
        shared.locked = !!document.pointerLockElement;
        Object.assign(shared, getEventDetails(event));
        shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;
        dt = event.timeStamp - state.timeStamp;
        state.timeStamp = event.timeStamp;
        state.elapsedTime = state.timeStamp - state.startTime;
      }
      if (state._active) {
        const _absoluteDelta = state._delta.map(Math.abs);
        V.addTo(state._distance, _absoluteDelta);
      }
      if (this.axisIntent) this.axisIntent(event);
      const [_m0, _m1] = state._movement;
      const [t0, t1] = config.threshold;
      const {
        _step,
        values
      } = state;
      if (config.hasCustomTransform) {
        if (_step[0] === false) _step[0] = Math.abs(_m0) >= t0 && values[0];
        if (_step[1] === false) _step[1] = Math.abs(_m1) >= t1 && values[1];
      } else {
        if (_step[0] === false) _step[0] = Math.abs(_m0) >= t0 && Math.sign(_m0) * t0;
        if (_step[1] === false) _step[1] = Math.abs(_m1) >= t1 && Math.sign(_m1) * t1;
      }
      state.intentional = _step[0] !== false || _step[1] !== false;
      if (!state.intentional) return;
      const movement = [0, 0];
      if (config.hasCustomTransform) {
        const [v0, v1] = values;
        movement[0] = _step[0] !== false ? v0 - _step[0] : 0;
        movement[1] = _step[1] !== false ? v1 - _step[1] : 0;
      } else {
        movement[0] = _step[0] !== false ? _m0 - _step[0] : 0;
        movement[1] = _step[1] !== false ? _m1 - _step[1] : 0;
      }
      if (this.restrictToAxis && !state._blocked) this.restrictToAxis(movement);
      const previousOffset = state.offset;
      const gestureIsActive = state._active && !state._blocked || state.active;
      if (gestureIsActive) {
        state.first = state._active && !state.active;
        state.last = !state._active && state.active;
        state.active = shared[this.ingKey] = state._active;
        if (event) {
          if (state.first) {
            if ("bounds" in config) state._bounds = call(config.bounds, state);
            if (this.setup) this.setup();
          }
          state.movement = movement;
          this.computeOffset();
        }
      }
      const [ox, oy] = state.offset;
      const [[x0, x1], [y0, y1]] = state._bounds;
      state.overflow = [ox < x0 ? -1 : ox > x1 ? 1 : 0, oy < y0 ? -1 : oy > y1 ? 1 : 0];
      state._movementBound[0] = state.overflow[0] ? state._movementBound[0] === false ? state._movement[0] : state._movementBound[0] : false;
      state._movementBound[1] = state.overflow[1] ? state._movementBound[1] === false ? state._movement[1] : state._movementBound[1] : false;
      const rubberband2 = state._active ? config.rubberband || [0, 0] : [0, 0];
      state.offset = computeRubberband(state._bounds, state.offset, rubberband2);
      state.delta = V.sub(state.offset, previousOffset);
      this.computeMovement();
      if (gestureIsActive && (!state.last || dt > BEFORE_LAST_KINEMATICS_DELAY)) {
        state.delta = V.sub(state.offset, previousOffset);
        const absoluteDelta = state.delta.map(Math.abs);
        V.addTo(state.distance, absoluteDelta);
        state.direction = state.delta.map(Math.sign);
        state._direction = state._delta.map(Math.sign);
        if (!state.first && dt > 0) {
          state.velocity = [absoluteDelta[0] / dt, absoluteDelta[1] / dt];
          state.timeDelta = dt;
        }
      }
    }
    emit() {
      const state = this.state;
      const shared = this.shared;
      const config = this.config;
      if (!state._active) this.clean();
      if ((state._blocked || !state.intentional) && !state._force && !config.triggerAllEvents) return;
      const memo32 = this.handler(_objectSpread2(_objectSpread2(_objectSpread2({}, shared), state), {}, {
        [this.aliasKey]: state.values
      }));
      if (memo32 !== void 0) state.memo = memo32;
    }
    clean() {
      this.eventStore.clean();
      this.timeoutStore.clean();
    }
  };
  function selectAxis([dx, dy], threshold) {
    const absDx = Math.abs(dx);
    const absDy = Math.abs(dy);
    if (absDx > absDy && absDx > threshold) {
      return "x";
    }
    if (absDy > absDx && absDy > threshold) {
      return "y";
    }
    return void 0;
  }
  var CoordinatesEngine = class extends Engine {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "aliasKey", "xy");
    }
    reset() {
      super.reset();
      this.state.axis = void 0;
    }
    init() {
      this.state.offset = [0, 0];
      this.state.lastOffset = [0, 0];
    }
    computeOffset() {
      this.state.offset = V.add(this.state.lastOffset, this.state.movement);
    }
    computeMovement() {
      this.state.movement = V.sub(this.state.offset, this.state.lastOffset);
    }
    axisIntent(event) {
      const state = this.state;
      const config = this.config;
      if (!state.axis && event) {
        const threshold = typeof config.axisThreshold === "object" ? config.axisThreshold[getPointerType(event)] : config.axisThreshold;
        state.axis = selectAxis(state._movement, threshold);
      }
      state._blocked = (config.lockDirection || !!config.axis) && !state.axis || !!config.axis && config.axis !== state.axis;
    }
    restrictToAxis(v) {
      if (this.config.axis || this.config.lockDirection) {
        switch (this.state.axis) {
          case "x":
            v[1] = 0;
            break;
          case "y":
            v[0] = 0;
            break;
        }
      }
    }
  };
  var identity = (v) => v;
  var DEFAULT_RUBBERBAND = 0.15;
  var commonConfigResolver = {
    enabled(value = true) {
      return value;
    },
    eventOptions(value, _k, config) {
      return _objectSpread2(_objectSpread2({}, config.shared.eventOptions), value);
    },
    preventDefault(value = false) {
      return value;
    },
    triggerAllEvents(value = false) {
      return value;
    },
    rubberband(value = 0) {
      switch (value) {
        case true:
          return [DEFAULT_RUBBERBAND, DEFAULT_RUBBERBAND];
        case false:
          return [0, 0];
        default:
          return V.toVector(value);
      }
    },
    from(value) {
      if (typeof value === "function") return value;
      if (value != null) return V.toVector(value);
    },
    transform(value, _k, config) {
      const transform = value || config.shared.transform;
      this.hasCustomTransform = !!transform;
      if (true) {
        const originalTransform = transform || identity;
        return (v) => {
          const r = originalTransform(v);
          if (!isFinite(r[0]) || !isFinite(r[1])) {
            console.warn(`[@use-gesture]: config.transform() must produce a valid result, but it was: [${r[0]},${[1]}]`);
          }
          return r;
        };
      }
      return transform || identity;
    },
    threshold(value) {
      return V.toVector(value, 0);
    }
  };
  if (true) {
    Object.assign(commonConfigResolver, {
      domTarget(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
        }
        return NaN;
      },
      lockDirection(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`lockDirection\` option has been merged with \`axis\`. Use it as in \`{ axis: 'lock' }\``);
        }
        return NaN;
      },
      initial(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`initial\` option has been renamed to \`from\`.`);
        }
        return NaN;
      }
    });
  }
  var DEFAULT_AXIS_THRESHOLD = 0;
  var coordinatesConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
    axis(_v, _k, {
      axis
    }) {
      this.lockDirection = axis === "lock";
      if (!this.lockDirection) return axis;
    },
    axisThreshold(value = DEFAULT_AXIS_THRESHOLD) {
      return value;
    },
    bounds(value = {}) {
      if (typeof value === "function") {
        return (state) => coordinatesConfigResolver.bounds(value(state));
      }
      if ("current" in value) {
        return () => value.current;
      }
      if (typeof HTMLElement === "function" && value instanceof HTMLElement) {
        return value;
      }
      const {
        left = -Infinity,
        right = Infinity,
        top = -Infinity,
        bottom = Infinity
      } = value;
      return [[left, right], [top, bottom]];
    }
  });
  var isBrowser = typeof window !== "undefined" && window.document && window.document.createElement;
  function supportsTouchEvents() {
    return isBrowser && "ontouchstart" in window;
  }
  function isTouchScreen() {
    return supportsTouchEvents() || isBrowser && window.navigator.maxTouchPoints > 1;
  }
  function supportsPointerEvents() {
    return isBrowser && "onpointerdown" in window;
  }
  function supportsPointerLock() {
    return isBrowser && "exitPointerLock" in window.document;
  }
  function supportsGestureEvents() {
    try {
      return "constructor" in GestureEvent;
    } catch (e) {
      return false;
    }
  }
  var SUPPORT = {
    isBrowser,
    gesture: supportsGestureEvents(),
    touch: supportsTouchEvents(),
    touchscreen: isTouchScreen(),
    pointer: supportsPointerEvents(),
    pointerLock: supportsPointerLock()
  };
  var DEFAULT_PREVENT_SCROLL_DELAY = 250;
  var DEFAULT_DRAG_DELAY = 180;
  var DEFAULT_SWIPE_VELOCITY = 0.5;
  var DEFAULT_SWIPE_DISTANCE = 50;
  var DEFAULT_SWIPE_DURATION = 250;
  var DEFAULT_KEYBOARD_DISPLACEMENT = 10;
  var DEFAULT_DRAG_AXIS_THRESHOLD = {
    mouse: 0,
    touch: 0,
    pen: 8
  };
  var dragConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
    device(_v, _k, {
      pointer: {
        touch = false,
        lock = false,
        mouse = false
      } = {}
    }) {
      this.pointerLock = lock && SUPPORT.pointerLock;
      if (SUPPORT.touch && touch) return "touch";
      if (this.pointerLock) return "mouse";
      if (SUPPORT.pointer && !mouse) return "pointer";
      if (SUPPORT.touch) return "touch";
      return "mouse";
    },
    preventScrollAxis(value, _k, {
      preventScroll
    }) {
      this.preventScrollDelay = typeof preventScroll === "number" ? preventScroll : preventScroll || preventScroll === void 0 && value ? DEFAULT_PREVENT_SCROLL_DELAY : void 0;
      if (!SUPPORT.touchscreen || preventScroll === false) return void 0;
      return value ? value : preventScroll !== void 0 ? "y" : void 0;
    },
    pointerCapture(_v, _k, {
      pointer: {
        capture = true,
        buttons = 1,
        keys = true
      } = {}
    }) {
      this.pointerButtons = buttons;
      this.keys = keys;
      return !this.pointerLock && this.device === "pointer" && capture;
    },
    threshold(value, _k, {
      filterTaps = false,
      tapsThreshold = 3,
      axis = void 0
    }) {
      const threshold = V.toVector(value, filterTaps ? tapsThreshold : axis ? 1 : 0);
      this.filterTaps = filterTaps;
      this.tapsThreshold = tapsThreshold;
      return threshold;
    },
    swipe({
      velocity = DEFAULT_SWIPE_VELOCITY,
      distance = DEFAULT_SWIPE_DISTANCE,
      duration = DEFAULT_SWIPE_DURATION
    } = {}) {
      return {
        velocity: this.transform(V.toVector(velocity)),
        distance: this.transform(V.toVector(distance)),
        duration
      };
    },
    delay(value = 0) {
      switch (value) {
        case true:
          return DEFAULT_DRAG_DELAY;
        case false:
          return 0;
        default:
          return value;
      }
    },
    axisThreshold(value) {
      if (!value) return DEFAULT_DRAG_AXIS_THRESHOLD;
      return _objectSpread2(_objectSpread2({}, DEFAULT_DRAG_AXIS_THRESHOLD), value);
    },
    keyboardDisplacement(value = DEFAULT_KEYBOARD_DISPLACEMENT) {
      return value;
    }
  });
  if (true) {
    Object.assign(dragConfigResolver, {
      useTouch(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`useTouch\` option has been renamed to \`pointer.touch\`. Use it as in \`{ pointer: { touch: true } }\`.`);
        }
        return NaN;
      },
      experimental_preventWindowScrollY(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`experimental_preventWindowScrollY\` option has been renamed to \`preventScroll\`.`);
        }
        return NaN;
      },
      swipeVelocity(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`swipeVelocity\` option has been renamed to \`swipe.velocity\`. Use it as in \`{ swipe: { velocity: 0.5 } }\`.`);
        }
        return NaN;
      },
      swipeDistance(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`swipeDistance\` option has been renamed to \`swipe.distance\`. Use it as in \`{ swipe: { distance: 50 } }\`.`);
        }
        return NaN;
      },
      swipeDuration(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`swipeDuration\` option has been renamed to \`swipe.duration\`. Use it as in \`{ swipe: { duration: 250 } }\`.`);
        }
        return NaN;
      }
    });
  }
  function clampStateInternalMovementToBounds(state) {
    const [ox, oy] = state.overflow;
    const [dx, dy] = state._delta;
    const [dirx, diry] = state._direction;
    if (ox < 0 && dx > 0 && dirx < 0 || ox > 0 && dx < 0 && dirx > 0) {
      state._movement[0] = state._movementBound[0];
    }
    if (oy < 0 && dy > 0 && diry < 0 || oy > 0 && dy < 0 && diry > 0) {
      state._movement[1] = state._movementBound[1];
    }
  }
  var SCALE_ANGLE_RATIO_INTENT_DEG = 30;
  var PINCH_WHEEL_RATIO = 100;
  var PinchEngine = class extends Engine {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "ingKey", "pinching");
      _defineProperty(this, "aliasKey", "da");
    }
    init() {
      this.state.offset = [1, 0];
      this.state.lastOffset = [1, 0];
      this.state._pointerEvents = /* @__PURE__ */ new Map();
    }
    reset() {
      super.reset();
      const state = this.state;
      state._touchIds = [];
      state.canceled = false;
      state.cancel = this.cancel.bind(this);
      state.turns = 0;
    }
    computeOffset() {
      const {
        type,
        movement,
        lastOffset
      } = this.state;
      if (type === "wheel") {
        this.state.offset = V.add(movement, lastOffset);
      } else {
        this.state.offset = [(1 + movement[0]) * lastOffset[0], movement[1] + lastOffset[1]];
      }
    }
    computeMovement() {
      const {
        offset: offset4,
        lastOffset
      } = this.state;
      this.state.movement = [offset4[0] / lastOffset[0], offset4[1] - lastOffset[1]];
    }
    axisIntent() {
      const state = this.state;
      const [_m0, _m1] = state._movement;
      if (!state.axis) {
        const axisMovementDifference = Math.abs(_m0) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(_m1);
        if (axisMovementDifference < 0) state.axis = "angle";
        else if (axisMovementDifference > 0) state.axis = "scale";
      }
    }
    restrictToAxis(v) {
      if (this.config.lockDirection) {
        if (this.state.axis === "scale") v[1] = 0;
        else if (this.state.axis === "angle") v[0] = 0;
      }
    }
    cancel() {
      const state = this.state;
      if (state.canceled) return;
      setTimeout(() => {
        state.canceled = true;
        state._active = false;
        this.compute();
        this.emit();
      }, 0);
    }
    touchStart(event) {
      this.ctrl.setEventIds(event);
      const state = this.state;
      const ctrlTouchIds = this.ctrl.touchIds;
      if (state._active) {
        if (state._touchIds.every((id) => ctrlTouchIds.has(id))) return;
      }
      if (ctrlTouchIds.size < 2) return;
      this.start(event);
      state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);
      const payload = touchDistanceAngle(event, state._touchIds);
      if (!payload) return;
      this.pinchStart(event, payload);
    }
    pointerStart(event) {
      if (event.buttons != null && event.buttons % 2 !== 1) return;
      this.ctrl.setEventIds(event);
      event.target.setPointerCapture(event.pointerId);
      const state = this.state;
      const _pointerEvents = state._pointerEvents;
      const ctrlPointerIds = this.ctrl.pointerIds;
      if (state._active) {
        if (Array.from(_pointerEvents.keys()).every((id) => ctrlPointerIds.has(id))) return;
      }
      if (_pointerEvents.size < 2) {
        _pointerEvents.set(event.pointerId, event);
      }
      if (state._pointerEvents.size < 2) return;
      this.start(event);
      const payload = distanceAngle(...Array.from(_pointerEvents.values()));
      if (!payload) return;
      this.pinchStart(event, payload);
    }
    pinchStart(event, payload) {
      const state = this.state;
      state.origin = payload.origin;
      this.computeValues([payload.distance, payload.angle]);
      this.computeInitial();
      this.compute(event);
      this.emit();
    }
    touchMove(event) {
      if (!this.state._active) return;
      const payload = touchDistanceAngle(event, this.state._touchIds);
      if (!payload) return;
      this.pinchMove(event, payload);
    }
    pointerMove(event) {
      const _pointerEvents = this.state._pointerEvents;
      if (_pointerEvents.has(event.pointerId)) {
        _pointerEvents.set(event.pointerId, event);
      }
      if (!this.state._active) return;
      const payload = distanceAngle(...Array.from(_pointerEvents.values()));
      if (!payload) return;
      this.pinchMove(event, payload);
    }
    pinchMove(event, payload) {
      const state = this.state;
      const prev_a = state._values[1];
      const delta_a = payload.angle - prev_a;
      let delta_turns = 0;
      if (Math.abs(delta_a) > 270) delta_turns += Math.sign(delta_a);
      this.computeValues([payload.distance, payload.angle - 360 * delta_turns]);
      state.origin = payload.origin;
      state.turns = delta_turns;
      state._movement = [state._values[0] / state._initial[0] - 1, state._values[1] - state._initial[1]];
      this.compute(event);
      this.emit();
    }
    touchEnd(event) {
      this.ctrl.setEventIds(event);
      if (!this.state._active) return;
      if (this.state._touchIds.some((id) => !this.ctrl.touchIds.has(id))) {
        this.state._active = false;
        this.compute(event);
        this.emit();
      }
    }
    pointerEnd(event) {
      const state = this.state;
      this.ctrl.setEventIds(event);
      try {
        event.target.releasePointerCapture(event.pointerId);
      } catch (_unused) {
      }
      if (state._pointerEvents.has(event.pointerId)) {
        state._pointerEvents.delete(event.pointerId);
      }
      if (!state._active) return;
      if (state._pointerEvents.size < 2) {
        state._active = false;
        this.compute(event);
        this.emit();
      }
    }
    gestureStart(event) {
      if (event.cancelable) event.preventDefault();
      const state = this.state;
      if (state._active) return;
      this.start(event);
      this.computeValues([event.scale, event.rotation]);
      state.origin = [event.clientX, event.clientY];
      this.compute(event);
      this.emit();
    }
    gestureMove(event) {
      if (event.cancelable) event.preventDefault();
      if (!this.state._active) return;
      const state = this.state;
      this.computeValues([event.scale, event.rotation]);
      state.origin = [event.clientX, event.clientY];
      const _previousMovement = state._movement;
      state._movement = [event.scale - 1, event.rotation];
      state._delta = V.sub(state._movement, _previousMovement);
      this.compute(event);
      this.emit();
    }
    gestureEnd(event) {
      if (!this.state._active) return;
      this.state._active = false;
      this.compute(event);
      this.emit();
    }
    wheel(event) {
      const modifierKey = this.config.modifierKey;
      if (modifierKey && (Array.isArray(modifierKey) ? !modifierKey.find((k) => event[k]) : !event[modifierKey])) return;
      if (!this.state._active) this.wheelStart(event);
      else this.wheelChange(event);
      this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
    }
    wheelStart(event) {
      this.start(event);
      this.wheelChange(event);
    }
    wheelChange(event) {
      const isR3f = "uv" in event;
      if (!isR3f) {
        if (event.cancelable) {
          event.preventDefault();
        }
        if (!event.defaultPrevented) {
          console.warn(`[@use-gesture]: To properly support zoom on trackpads, try using the \`target\` option.

This message will only appear in development mode.`);
        }
      }
      const state = this.state;
      state._delta = [-wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0], 0];
      V.addTo(state._movement, state._delta);
      clampStateInternalMovementToBounds(state);
      this.state.origin = [event.clientX, event.clientY];
      this.compute(event);
      this.emit();
    }
    wheelEnd() {
      if (!this.state._active) return;
      this.state._active = false;
      this.compute();
      this.emit();
    }
    bind(bindFunction) {
      const device = this.config.device;
      if (!!device) {
        bindFunction(device, "start", this[device + "Start"].bind(this));
        bindFunction(device, "change", this[device + "Move"].bind(this));
        bindFunction(device, "end", this[device + "End"].bind(this));
        bindFunction(device, "cancel", this[device + "End"].bind(this));
        bindFunction("lostPointerCapture", "", this[device + "End"].bind(this));
      }
      if (this.config.pinchOnWheel) {
        bindFunction("wheel", "", this.wheel.bind(this), {
          passive: false
        });
      }
    }
  };
  var pinchConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
    device(_v, _k, {
      shared,
      pointer: {
        touch = false
      } = {}
    }) {
      const sharedConfig = shared;
      if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture) return "gesture";
      if (SUPPORT.touch && touch) return "touch";
      if (SUPPORT.touchscreen) {
        if (SUPPORT.pointer) return "pointer";
        if (SUPPORT.touch) return "touch";
      }
    },
    bounds(_v, _k, {
      scaleBounds = {},
      angleBounds = {}
    }) {
      const _scaleBounds = (state) => {
        const D = assignDefault(call(scaleBounds, state), {
          min: -Infinity,
          max: Infinity
        });
        return [D.min, D.max];
      };
      const _angleBounds = (state) => {
        const A = assignDefault(call(angleBounds, state), {
          min: -Infinity,
          max: Infinity
        });
        return [A.min, A.max];
      };
      if (typeof scaleBounds !== "function" && typeof angleBounds !== "function") return [_scaleBounds(), _angleBounds()];
      return (state) => [_scaleBounds(state), _angleBounds(state)];
    },
    threshold(value, _k, config) {
      this.lockDirection = config.axis === "lock";
      const threshold = V.toVector(value, this.lockDirection ? [0.1, 3] : 0);
      return threshold;
    },
    modifierKey(value) {
      if (value === void 0) return "ctrlKey";
      return value;
    },
    pinchOnWheel(value = true) {
      return value;
    }
  });
  var moveConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
    mouseOnly: (value = true) => value
  });
  var WheelEngine = class extends CoordinatesEngine {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "ingKey", "wheeling");
    }
    wheel(event) {
      if (!this.state._active) this.start(event);
      this.wheelChange(event);
      this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
    }
    wheelChange(event) {
      const state = this.state;
      state._delta = wheelValues(event);
      V.addTo(state._movement, state._delta);
      clampStateInternalMovementToBounds(state);
      this.compute(event);
      this.emit();
    }
    wheelEnd() {
      if (!this.state._active) return;
      this.state._active = false;
      this.compute();
      this.emit();
    }
    bind(bindFunction) {
      bindFunction("wheel", "", this.wheel.bind(this));
    }
  };
  var wheelConfigResolver = coordinatesConfigResolver;
  var hoverConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
    mouseOnly: (value = true) => value
  });
  var EngineMap = /* @__PURE__ */ new Map();
  var ConfigResolverMap = /* @__PURE__ */ new Map();
  function registerAction(action) {
    EngineMap.set(action.key, action.engine);
    ConfigResolverMap.set(action.key, action.resolver);
  }
  var pinchAction = {
    key: "pinch",
    engine: PinchEngine,
    resolver: pinchConfigResolver
  };
  var wheelAction = {
    key: "wheel",
    engine: WheelEngine,
    resolver: wheelConfigResolver
  };

  // node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
  var import_react17 = __toESM(require_react());

  // node_modules/@use-gesture/core/dist/use-gesture-core.esm.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var sharedConfigResolver = {
    target(value) {
      if (value) {
        return () => "current" in value ? value.current : value;
      }
      return void 0;
    },
    enabled(value = true) {
      return value;
    },
    window(value = SUPPORT.isBrowser ? window : void 0) {
      return value;
    },
    eventOptions({
      passive = true,
      capture = false
    } = {}) {
      return {
        passive,
        capture
      };
    },
    transform(value) {
      return value;
    }
  };
  var _excluded = ["target", "eventOptions", "window", "enabled", "transform"];
  function resolveWith(config = {}, resolvers) {
    const result = {};
    for (const [key, resolver] of Object.entries(resolvers)) {
      switch (typeof resolver) {
        case "function":
          if (true) {
            const r = resolver.call(result, config[key], key, config);
            if (!Number.isNaN(r)) result[key] = r;
          } else {
            result[key] = resolver.call(result, config[key], key, config);
          }
          break;
        case "object":
          result[key] = resolveWith(config[key], resolver);
          break;
        case "boolean":
          if (resolver) result[key] = config[key];
          break;
      }
    }
    return result;
  }
  function parse(newConfig, gestureKey, _config = {}) {
    const _ref = newConfig, {
      target,
      eventOptions,
      window: window3,
      enabled,
      transform
    } = _ref, rest = _objectWithoutProperties(_ref, _excluded);
    _config.shared = resolveWith({
      target,
      eventOptions,
      window: window3,
      enabled,
      transform
    }, sharedConfigResolver);
    if (gestureKey) {
      const resolver = ConfigResolverMap.get(gestureKey);
      _config[gestureKey] = resolveWith(_objectSpread2({
        shared: _config.shared
      }, rest), resolver);
    } else {
      for (const key in rest) {
        const resolver = ConfigResolverMap.get(key);
        if (resolver) {
          _config[key] = resolveWith(_objectSpread2({
            shared: _config.shared
          }, rest[key]), resolver);
        } else if (true) {
          if (!["drag", "pinch", "scroll", "wheel", "move", "hover"].includes(key)) {
            if (key === "domTarget") {
              throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
            }
            console.warn(`[@use-gesture]: Unknown config key \`${key}\` was used. Please read the documentation for further information.`);
          }
        }
      }
    }
    return _config;
  }
  var EventStore = class {
    constructor(ctrl, gestureKey) {
      _defineProperty(this, "_listeners", /* @__PURE__ */ new Set());
      this._ctrl = ctrl;
      this._gestureKey = gestureKey;
    }
    add(element, device, action, handler, options) {
      const listeners = this._listeners;
      const type = toDomEventType(device, action);
      const _options = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {};
      const eventOptions = _objectSpread2(_objectSpread2({}, _options), options);
      element.addEventListener(type, handler, eventOptions);
      const remove2 = () => {
        element.removeEventListener(type, handler, eventOptions);
        listeners.delete(remove2);
      };
      listeners.add(remove2);
      return remove2;
    }
    clean() {
      this._listeners.forEach((remove2) => remove2());
      this._listeners.clear();
    }
  };
  var TimeoutStore = class {
    constructor() {
      _defineProperty(this, "_timeouts", /* @__PURE__ */ new Map());
    }
    add(key, callback, ms = 140, ...args) {
      this.remove(key);
      this._timeouts.set(key, window.setTimeout(callback, ms, ...args));
    }
    remove(key) {
      const timeout = this._timeouts.get(key);
      if (timeout) window.clearTimeout(timeout);
    }
    clean() {
      this._timeouts.forEach((timeout) => void window.clearTimeout(timeout));
      this._timeouts.clear();
    }
  };
  var Controller = class {
    constructor(handlers) {
      _defineProperty(this, "gestures", /* @__PURE__ */ new Set());
      _defineProperty(this, "_targetEventStore", new EventStore(this));
      _defineProperty(this, "gestureEventStores", {});
      _defineProperty(this, "gestureTimeoutStores", {});
      _defineProperty(this, "handlers", {});
      _defineProperty(this, "config", {});
      _defineProperty(this, "pointerIds", /* @__PURE__ */ new Set());
      _defineProperty(this, "touchIds", /* @__PURE__ */ new Set());
      _defineProperty(this, "state", {
        shared: {
          shiftKey: false,
          metaKey: false,
          ctrlKey: false,
          altKey: false
        }
      });
      resolveGestures(this, handlers);
    }
    setEventIds(event) {
      if (isTouch(event)) {
        this.touchIds = new Set(touchIds(event));
        return this.touchIds;
      } else if ("pointerId" in event) {
        if (event.type === "pointerup" || event.type === "pointercancel") this.pointerIds.delete(event.pointerId);
        else if (event.type === "pointerdown") this.pointerIds.add(event.pointerId);
        return this.pointerIds;
      }
    }
    applyHandlers(handlers, nativeHandlers) {
      this.handlers = handlers;
      this.nativeHandlers = nativeHandlers;
    }
    applyConfig(config, gestureKey) {
      this.config = parse(config, gestureKey, this.config);
    }
    clean() {
      this._targetEventStore.clean();
      for (const key of this.gestures) {
        this.gestureEventStores[key].clean();
        this.gestureTimeoutStores[key].clean();
      }
    }
    effect() {
      if (this.config.shared.target) this.bind();
      return () => this._targetEventStore.clean();
    }
    bind(...args) {
      const sharedConfig = this.config.shared;
      const props = {};
      let target;
      if (sharedConfig.target) {
        target = sharedConfig.target();
        if (!target) return;
      }
      if (sharedConfig.enabled) {
        for (const gestureKey of this.gestures) {
          const gestureConfig = this.config[gestureKey];
          const bindFunction = bindToProps(props, gestureConfig.eventOptions, !!target);
          if (gestureConfig.enabled) {
            const Engine2 = EngineMap.get(gestureKey);
            new Engine2(this, args, gestureKey).bind(bindFunction);
          }
        }
        const nativeBindFunction = bindToProps(props, sharedConfig.eventOptions, !!target);
        for (const eventKey in this.nativeHandlers) {
          nativeBindFunction(eventKey, "", (event) => this.nativeHandlers[eventKey](_objectSpread2(_objectSpread2({}, this.state.shared), {}, {
            event,
            args
          })), void 0, true);
        }
      }
      for (const handlerProp in props) {
        props[handlerProp] = chain(...props[handlerProp]);
      }
      if (!target) return props;
      for (const handlerProp in props) {
        const {
          device,
          capture,
          passive
        } = parseProp(handlerProp);
        this._targetEventStore.add(target, device, "", props[handlerProp], {
          capture,
          passive
        });
      }
    }
  };
  function setupGesture(ctrl, gestureKey) {
    ctrl.gestures.add(gestureKey);
    ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl, gestureKey);
    ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();
  }
  function resolveGestures(ctrl, internalHandlers) {
    if (internalHandlers.drag) setupGesture(ctrl, "drag");
    if (internalHandlers.wheel) setupGesture(ctrl, "wheel");
    if (internalHandlers.scroll) setupGesture(ctrl, "scroll");
    if (internalHandlers.move) setupGesture(ctrl, "move");
    if (internalHandlers.pinch) setupGesture(ctrl, "pinch");
    if (internalHandlers.hover) setupGesture(ctrl, "hover");
  }
  var bindToProps = (props, eventOptions, withPassiveOption) => (device, action, handler, options = {}, isNative = false) => {
    var _options$capture, _options$passive;
    const capture = (_options$capture = options.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;
    const passive = (_options$passive = options.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;
    let handlerProp = isNative ? device : toHandlerProp(device, action, capture);
    if (withPassiveOption && passive) handlerProp += "Passive";
    props[handlerProp] = props[handlerProp] || [];
    props[handlerProp].push(handler);
  };
  var RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
  function sortHandlers(_handlers2) {
    const native = {};
    const handlers = {};
    const actions = /* @__PURE__ */ new Set();
    for (let key in _handlers2) {
      if (RE_NOT_NATIVE.test(key)) {
        actions.add(RegExp.lastMatch);
        handlers[key] = _handlers2[key];
      } else {
        native[key] = _handlers2[key];
      }
    }
    return [handlers, native, actions];
  }
  function registerGesture(actions, handlers, handlerKey, key, internalHandlers, config) {
    if (!actions.has(handlerKey)) return;
    if (!EngineMap.has(key)) {
      if (true) {
        console.warn(`[@use-gesture]: You've created a custom handler that that uses the \`${key}\` gesture but isn't properly configured.

Please add \`${key}Action\` when creating your handler.`);
      }
      return;
    }
    const startKey2 = handlerKey + "Start";
    const endKey = handlerKey + "End";
    const fn = (state) => {
      let memo32 = void 0;
      if (state.first && startKey2 in handlers) handlers[startKey2](state);
      if (handlerKey in handlers) memo32 = handlers[handlerKey](state);
      if (state.last && endKey in handlers) handlers[endKey](state);
      return memo32;
    };
    internalHandlers[key] = fn;
    config[key] = config[key] || {};
  }
  function parseMergedHandlers(mergedHandlers, mergedConfig) {
    const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);
    const internalHandlers = {};
    registerGesture(actions, handlers, "onDrag", "drag", internalHandlers, mergedConfig);
    registerGesture(actions, handlers, "onWheel", "wheel", internalHandlers, mergedConfig);
    registerGesture(actions, handlers, "onScroll", "scroll", internalHandlers, mergedConfig);
    registerGesture(actions, handlers, "onPinch", "pinch", internalHandlers, mergedConfig);
    registerGesture(actions, handlers, "onMove", "move", internalHandlers, mergedConfig);
    registerGesture(actions, handlers, "onHover", "hover", internalHandlers, mergedConfig);
    return {
      handlers: internalHandlers,
      config: mergedConfig,
      nativeHandlers
    };
  }

  // node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
  function useRecognizers(handlers, config = {}, gestureKey, nativeHandlers) {
    const ctrl = import_react17.default.useMemo(() => new Controller(handlers), []);
    ctrl.applyHandlers(handlers, nativeHandlers);
    ctrl.applyConfig(config, gestureKey);
    import_react17.default.useEffect(ctrl.effect.bind(ctrl));
    import_react17.default.useEffect(() => {
      return ctrl.clean.bind(ctrl);
    }, []);
    if (config.target === void 0) {
      return ctrl.bind.bind(ctrl);
    }
    return void 0;
  }
  function createUseGesture(actions) {
    actions.forEach(registerAction);
    return function useGesture2(_handlers2, _config) {
      const {
        handlers,
        nativeHandlers,
        config
      } = parseMergedHandlers(_handlers2, _config || {});
      return useRecognizers(handlers, config, void 0, nativeHandlers);
    };
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useGestureEvents.mjs
  var React5 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/utils/normalizeWheel.mjs
  var MAX_ZOOM_STEP = 10;
  var IS_DARWIN = /Mac|iPod|iPhone|iPad/.test(
    // eslint-disable-next-line @typescript-eslint/no-deprecated
    typeof window === "undefined" ? "node" : window.navigator.platform
  );
  function normalizeWheel(event) {
    let { deltaY, deltaX } = event;
    let deltaZ = 0;
    if (event.ctrlKey || event.altKey || event.metaKey) {
      deltaZ = (Math.abs(deltaY) > MAX_ZOOM_STEP ? MAX_ZOOM_STEP * Math.sign(deltaY) : deltaY) / 100;
    } else {
      if (event.shiftKey && !IS_DARWIN) {
        deltaX = deltaY;
        deltaY = 0;
      }
    }
    return { x: -deltaX, y: -deltaY, z: -deltaZ };
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useGestureEvents.mjs
  var useGesture = createUseGesture([wheelAction, pinchAction]);
  var lastWheelTime = void 0;
  var isWheelEndEvent = (time2) => {
    if (lastWheelTime === void 0) {
      lastWheelTime = time2;
      return false;
    }
    if (time2 - lastWheelTime > 120 && time2 - lastWheelTime < 160) {
      lastWheelTime = time2;
      return true;
    }
    lastWheelTime = time2;
    return false;
  };
  function useGestureEvents(ref) {
    const editor = useEditor();
    const events = React5.useMemo(() => {
      let pinchState = "not sure";
      const onWheel = ({ event }) => {
        if (!editor.getInstanceState().isFocused) {
          return;
        }
        pinchState = "not sure";
        if (isWheelEndEvent(Date.now())) {
          return;
        }
        const editingShapeId = editor.getEditingShapeId();
        if (editingShapeId) {
          const shape = editor.getShape(editingShapeId);
          if (shape) {
            const util = editor.getShapeUtil(shape);
            if (util.canScroll(shape)) {
              const bounds = editor.getShapePageBounds(editingShapeId);
              if (bounds?.containsPoint(editor.inputs.currentPagePoint)) {
                return;
              }
            }
          }
        }
        preventDefault(event);
        stopEventPropagation(event);
        const delta = normalizeWheel(event);
        if (delta.x === 0 && delta.y === 0) return;
        const info = {
          type: "wheel",
          name: "wheel",
          delta,
          point: new Vec(event.clientX, event.clientY),
          shiftKey: event.shiftKey,
          altKey: event.altKey,
          ctrlKey: event.metaKey || event.ctrlKey,
          metaKey: event.metaKey,
          accelKey: isAccelKey(event)
        };
        editor.dispatch(info);
      };
      let initDistanceBetweenFingers = 1;
      let initZoom = 1;
      let currZoom = 1;
      let currDistanceBetweenFingers = 0;
      const initPointBetweenFingers = new Vec();
      const prevPointBetweenFingers = new Vec();
      const onPinchStart = (gesture) => {
        const elm = ref.current;
        pinchState = "not sure";
        const { event, origin, da } = gesture;
        if (event instanceof WheelEvent) return;
        if (!(event.target === elm || elm?.contains(event.target))) return;
        prevPointBetweenFingers.x = origin[0];
        prevPointBetweenFingers.y = origin[1];
        initPointBetweenFingers.x = origin[0];
        initPointBetweenFingers.y = origin[1];
        initDistanceBetweenFingers = da[0];
        initZoom = editor.getZoomLevel();
        editor.dispatch({
          type: "pinch",
          name: "pinch_start",
          point: { x: origin[0], y: origin[1], z: editor.getZoomLevel() },
          delta: { x: 0, y: 0 },
          shiftKey: event.shiftKey,
          altKey: event.altKey,
          ctrlKey: event.metaKey || event.ctrlKey,
          metaKey: event.metaKey,
          accelKey: isAccelKey(event)
        });
      };
      const updatePinchState = (isSafariTrackpadPinch) => {
        if (isSafariTrackpadPinch) {
          pinchState = "zooming";
        }
        if (pinchState === "zooming") {
          return;
        }
        const touchDistance = Math.abs(currDistanceBetweenFingers - initDistanceBetweenFingers);
        const originDistance = Vec.Dist(initPointBetweenFingers, prevPointBetweenFingers);
        switch (pinchState) {
          case "not sure": {
            if (touchDistance > 24) {
              pinchState = "zooming";
            } else if (originDistance > 16) {
              pinchState = "panning";
            }
            break;
          }
          case "panning": {
            if (touchDistance > 64) {
              pinchState = "zooming";
            }
            break;
          }
        }
      };
      const onPinch = (gesture) => {
        const elm = ref.current;
        const { event, origin, offset: offset4, da } = gesture;
        if (event instanceof WheelEvent) return;
        if (!(event.target === elm || elm?.contains(event.target))) return;
        const isSafariTrackpadPinch = gesture.type === "gesturechange" || gesture.type === "gestureend";
        currDistanceBetweenFingers = da[0];
        const dx = origin[0] - prevPointBetweenFingers.x;
        const dy = origin[1] - prevPointBetweenFingers.y;
        prevPointBetweenFingers.x = origin[0];
        prevPointBetweenFingers.y = origin[1];
        updatePinchState(isSafariTrackpadPinch);
        switch (pinchState) {
          case "zooming": {
            currZoom = offset4[0];
            editor.dispatch({
              type: "pinch",
              name: "pinch",
              point: { x: origin[0], y: origin[1], z: currZoom },
              delta: { x: dx, y: dy },
              shiftKey: event.shiftKey,
              altKey: event.altKey,
              ctrlKey: event.metaKey || event.ctrlKey,
              metaKey: event.metaKey,
              accelKey: isAccelKey(event)
            });
            break;
          }
          case "panning": {
            editor.dispatch({
              type: "pinch",
              name: "pinch",
              point: { x: origin[0], y: origin[1], z: initZoom },
              delta: { x: dx, y: dy },
              shiftKey: event.shiftKey,
              altKey: event.altKey,
              ctrlKey: event.metaKey || event.ctrlKey,
              metaKey: event.metaKey,
              accelKey: isAccelKey(event)
            });
            break;
          }
        }
      };
      const onPinchEnd = (gesture) => {
        const elm = ref.current;
        const { event, origin, offset: offset4 } = gesture;
        if (event instanceof WheelEvent) return;
        if (!(event.target === elm || elm?.contains(event.target))) return;
        const scale = offset4[0];
        pinchState = "not sure";
        editor.timers.requestAnimationFrame(() => {
          editor.dispatch({
            type: "pinch",
            name: "pinch_end",
            point: { x: origin[0], y: origin[1], z: scale },
            delta: { x: origin[0], y: origin[1] },
            shiftKey: event.shiftKey,
            altKey: event.altKey,
            ctrlKey: event.metaKey || event.ctrlKey,
            metaKey: event.metaKey,
            accelKey: isAccelKey(event)
          });
        });
      };
      return {
        onWheel,
        onPinchStart,
        onPinchEnd,
        onPinch
      };
    }, [editor, ref]);
    useGesture(events, {
      target: ref,
      eventOptions: { passive: false },
      pinch: {
        from: () => [editor.getZoomLevel(), 0],
        // Return the camera z to use when pinch starts
        scaleBounds: () => {
          const baseZoom = editor.getBaseZoom();
          const zoomSteps = editor.getCameraOptions().zoomSteps;
          const zoomMin = zoomSteps[0] * baseZoom;
          const zoomMax = zoomSteps[zoomSteps.length - 1] * baseZoom;
          return { from: editor.getZoomLevel(), max: zoomMax, min: zoomMin };
        }
      }
    });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useHandleEvents.mjs
  var React6 = __toESM(require_react(), 1);
  function getHandle(editor, id, handleId) {
    const shape = editor.getShape(id);
    const handles = editor.getShapeHandles(shape);
    return { shape, handle: handles.find((h) => h.id === handleId) };
  }
  function useHandleEvents(id, handleId) {
    const editor = useEditor();
    return React6.useMemo(() => {
      const onPointerDown = (e) => {
        if (e.isKilled) return;
        const target = loopToHtmlElement(e.currentTarget);
        setPointerCapture(target, e);
        const { shape, handle } = getHandle(editor, id, handleId);
        if (!handle) return;
        editor.dispatch({
          type: "pointer",
          target: "handle",
          handle,
          shape,
          name: "pointer_down",
          ...getPointerInfo(e)
        });
      };
      let lastX, lastY;
      const onPointerMove = (e) => {
        if (e.isKilled) return;
        if (e.clientX === lastX && e.clientY === lastY) return;
        lastX = e.clientX;
        lastY = e.clientY;
        const { shape, handle } = getHandle(editor, id, handleId);
        if (!handle) return;
        editor.dispatch({
          type: "pointer",
          target: "handle",
          handle,
          shape,
          name: "pointer_move",
          ...getPointerInfo(e)
        });
      };
      const onPointerUp = (e) => {
        if (e.isKilled) return;
        const target = loopToHtmlElement(e.currentTarget);
        releasePointerCapture(target, e);
        const { shape, handle } = getHandle(editor, id, handleId);
        if (!handle) return;
        editor.dispatch({
          type: "pointer",
          target: "handle",
          handle,
          shape,
          name: "pointer_up",
          ...getPointerInfo(e)
        });
      };
      return {
        onPointerDown,
        onPointerMove,
        onPointerUp
      };
    }, [editor, id, handleId]);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useScreenBounds.mjs
  var import_react19 = __toESM(require_react(), 1);
  function useScreenBounds(ref) {
    const editor = useEditor();
    (0, import_react19.useLayoutEffect)(() => {
      const updateBounds = (0, import_lodash.default)(
        () => {
          if (!ref.current) return;
          editor.updateViewportScreenBounds(ref.current);
        },
        200,
        {
          trailing: true
        }
      );
      const interval = editor.timers.setInterval(updateBounds, 1e3);
      window.addEventListener("resize", updateBounds);
      const resizeObserver = new ResizeObserver((entries) => {
        if (!entries[0].contentRect) return;
        updateBounds();
      });
      const container = ref.current;
      let scrollingParent = null;
      if (container) {
        resizeObserver.observe(container);
        scrollingParent = getNearestScrollableContainer(container);
        scrollingParent.addEventListener("scroll", updateBounds);
      }
      return () => {
        clearInterval(interval);
        window.removeEventListener("resize", updateBounds);
        resizeObserver.disconnect();
        scrollingParent?.removeEventListener("scroll", updateBounds);
        updateBounds.cancel();
      };
    }, [editor, ref]);
  }
  var getNearestScrollableContainer = (element) => {
    let parent = element.parentElement;
    while (parent) {
      if (parent === document.body) {
        return document;
      }
      const { overflowY } = window.getComputedStyle(parent);
      const hasScrollableContent = parent.scrollHeight > parent.clientHeight;
      if (hasScrollableContent && (overflowY === "auto" || overflowY === "scroll" || overflowY === "overlay")) {
        return parent;
      }
      parent = parent.parentElement;
    }
    return document;
  };

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/Box.mjs
  var Box = class _Box {
    constructor(x = 0, y = 0, w = 0, h = 0) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
    }
    x = 0;
    y = 0;
    w = 0;
    h = 0;
    // eslint-disable-next-line no-restricted-syntax
    get point() {
      return new Vec(this.x, this.y);
    }
    // eslint-disable-next-line no-restricted-syntax
    set point(val) {
      this.x = val.x;
      this.y = val.y;
    }
    // eslint-disable-next-line no-restricted-syntax
    get minX() {
      return this.x;
    }
    // eslint-disable-next-line no-restricted-syntax
    set minX(n) {
      this.x = n;
    }
    // eslint-disable-next-line no-restricted-syntax
    get midX() {
      return this.x + this.w / 2;
    }
    // eslint-disable-next-line no-restricted-syntax
    get maxX() {
      return this.x + this.w;
    }
    // eslint-disable-next-line no-restricted-syntax
    get minY() {
      return this.y;
    }
    // eslint-disable-next-line no-restricted-syntax
    set minY(n) {
      this.y = n;
    }
    // eslint-disable-next-line no-restricted-syntax
    get midY() {
      return this.y + this.h / 2;
    }
    // eslint-disable-next-line no-restricted-syntax
    get maxY() {
      return this.y + this.h;
    }
    // eslint-disable-next-line no-restricted-syntax
    get width() {
      return this.w;
    }
    // eslint-disable-next-line no-restricted-syntax
    set width(n) {
      this.w = n;
    }
    // eslint-disable-next-line no-restricted-syntax
    get height() {
      return this.h;
    }
    // eslint-disable-next-line no-restricted-syntax
    set height(n) {
      this.h = n;
    }
    // eslint-disable-next-line no-restricted-syntax
    get aspectRatio() {
      return this.width / this.height;
    }
    // eslint-disable-next-line no-restricted-syntax
    get center() {
      return new Vec(this.midX, this.midY);
    }
    // eslint-disable-next-line no-restricted-syntax
    set center(v) {
      this.minX = v.x - this.width / 2;
      this.minY = v.y - this.height / 2;
    }
    // eslint-disable-next-line no-restricted-syntax
    get corners() {
      return [
        new Vec(this.minX, this.minY),
        new Vec(this.maxX, this.minY),
        new Vec(this.maxX, this.maxY),
        new Vec(this.minX, this.maxY)
      ];
    }
    // eslint-disable-next-line no-restricted-syntax
    get cornersAndCenter() {
      return [
        new Vec(this.minX, this.minY),
        new Vec(this.maxX, this.minY),
        new Vec(this.maxX, this.maxY),
        new Vec(this.minX, this.maxY),
        this.center
      ];
    }
    // eslint-disable-next-line no-restricted-syntax
    get sides() {
      const { corners } = this;
      return [
        [corners[0], corners[1]],
        [corners[1], corners[2]],
        [corners[2], corners[3]],
        [corners[3], corners[0]]
      ];
    }
    // eslint-disable-next-line no-restricted-syntax
    get size() {
      return new Vec(this.w, this.h);
    }
    toFixed() {
      this.x = toPrecision(this.x);
      this.y = toPrecision(this.y);
      this.w = toPrecision(this.w);
      this.h = toPrecision(this.h);
      return this;
    }
    setTo(B) {
      this.x = B.x;
      this.y = B.y;
      this.w = B.w;
      this.h = B.h;
      return this;
    }
    set(x = 0, y = 0, w = 0, h = 0) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
      return this;
    }
    expand(A) {
      const minX = Math.min(this.minX, A.minX);
      const minY = Math.min(this.minY, A.minY);
      const maxX = Math.max(this.maxX, A.maxX);
      const maxY = Math.max(this.maxY, A.maxY);
      this.x = minX;
      this.y = minY;
      this.w = maxX - minX;
      this.h = maxY - minY;
      return this;
    }
    expandBy(n) {
      this.x -= n;
      this.y -= n;
      this.w += n * 2;
      this.h += n * 2;
      return this;
    }
    scale(n) {
      this.x /= n;
      this.y /= n;
      this.w /= n;
      this.h /= n;
      return this;
    }
    clone() {
      const { x, y, w, h } = this;
      return new _Box(x, y, w, h);
    }
    translate(delta) {
      this.x += delta.x;
      this.y += delta.y;
      return this;
    }
    snapToGrid(size4) {
      const minX = Math.round(this.minX / size4) * size4;
      const minY = Math.round(this.minY / size4) * size4;
      const maxX = Math.round(this.maxX / size4) * size4;
      const maxY = Math.round(this.maxY / size4) * size4;
      this.minX = minX;
      this.minY = minY;
      this.width = Math.max(1, maxX - minX);
      this.height = Math.max(1, maxY - minY);
    }
    collides(B) {
      return _Box.Collides(this, B);
    }
    contains(B) {
      return _Box.Contains(this, B);
    }
    includes(B) {
      return _Box.Includes(this, B);
    }
    containsPoint(V2, margin = 0) {
      return _Box.ContainsPoint(this, V2, margin);
    }
    getHandlePoint(handle) {
      switch (handle) {
        case "top_left":
          return new Vec(this.minX, this.minY);
        case "top_right":
          return new Vec(this.maxX, this.minY);
        case "bottom_left":
          return new Vec(this.minX, this.maxY);
        case "bottom_right":
          return new Vec(this.maxX, this.maxY);
        case "top":
          return new Vec(this.midX, this.minY);
        case "right":
          return new Vec(this.maxX, this.midY);
        case "bottom":
          return new Vec(this.midX, this.maxY);
        case "left":
          return new Vec(this.minX, this.midY);
      }
    }
    toJson() {
      return { x: this.minX, y: this.minY, w: this.w, h: this.h };
    }
    resize(handle, dx, dy) {
      const { minX: a0x, minY: a0y, maxX: a1x, maxY: a1y } = this;
      let { minX: b0x, minY: b0y, maxX: b1x, maxY: b1y } = this;
      switch (handle) {
        case "left":
        case "top_left":
        case "bottom_left": {
          b0x += dx;
          break;
        }
        case "right":
        case "top_right":
        case "bottom_right": {
          b1x += dx;
          break;
        }
      }
      switch (handle) {
        case "top":
        case "top_left":
        case "top_right": {
          b0y += dy;
          break;
        }
        case "bottom":
        case "bottom_left":
        case "bottom_right": {
          b1y += dy;
          break;
        }
      }
      const scaleX = (b1x - b0x) / (a1x - a0x);
      const scaleY = (b1y - b0y) / (a1y - a0y);
      const flipX = scaleX < 0;
      const flipY = scaleY < 0;
      if (flipX) {
        const t2 = b1x;
        b1x = b0x;
        b0x = t2;
      }
      if (flipY) {
        const t2 = b1y;
        b1y = b0y;
        b0y = t2;
      }
      this.minX = b0x;
      this.minY = b0y;
      this.width = Math.abs(b1x - b0x);
      this.height = Math.abs(b1y - b0y);
    }
    union(box) {
      const minX = Math.min(this.minX, box.x);
      const minY = Math.min(this.minY, box.y);
      const maxX = Math.max(this.maxX, box.w + box.x);
      const maxY = Math.max(this.maxY, box.h + box.y);
      this.x = minX;
      this.y = minY;
      this.width = maxX - minX;
      this.height = maxY - minY;
      return this;
    }
    static From(box) {
      return new _Box(box.x, box.y, box.w, box.h);
    }
    static FromCenter(center, size4) {
      return new _Box(center.x - size4.x / 2, center.y - size4.y / 2, size4.x, size4.y);
    }
    static FromPoints(points) {
      if (points.length === 0) return new _Box();
      let minX = Infinity;
      let minY = Infinity;
      let maxX = -Infinity;
      let maxY = -Infinity;
      let point;
      for (let i = 0, n = points.length; i < n; i++) {
        point = points[i];
        minX = Math.min(point.x, minX);
        minY = Math.min(point.y, minY);
        maxX = Math.max(point.x, maxX);
        maxY = Math.max(point.y, maxY);
      }
      return new _Box(minX, minY, maxX - minX, maxY - minY);
    }
    static Expand(A, B) {
      const minX = Math.min(B.minX, A.minX);
      const minY = Math.min(B.minY, A.minY);
      const maxX = Math.max(B.maxX, A.maxX);
      const maxY = Math.max(B.maxY, A.maxY);
      return new _Box(minX, minY, maxX - minX, maxY - minY);
    }
    static ExpandBy(A, n) {
      return new _Box(A.minX - n, A.minY - n, A.width + n * 2, A.height + n * 2);
    }
    static Collides(A, B) {
      return !(A.maxX < B.minX || A.minX > B.maxX || A.maxY < B.minY || A.minY > B.maxY);
    }
    static Contains(A, B) {
      return A.minX < B.minX && A.minY < B.minY && A.maxY > B.maxY && A.maxX > B.maxX;
    }
    static Includes(A, B) {
      return _Box.Collides(A, B) || _Box.Contains(A, B);
    }
    static ContainsPoint(A, B, margin = 0) {
      return !(B.x < A.minX - margin || B.y < A.minY - margin || B.x > A.maxX + margin || B.y > A.maxY + margin);
    }
    static Common(boxes) {
      let minX = Infinity;
      let minY = Infinity;
      let maxX = -Infinity;
      let maxY = -Infinity;
      for (let i = 0; i < boxes.length; i++) {
        const B = boxes[i];
        minX = Math.min(minX, B.minX);
        minY = Math.min(minY, B.minY);
        maxX = Math.max(maxX, B.maxX);
        maxY = Math.max(maxY, B.maxY);
      }
      return new _Box(minX, minY, maxX - minX, maxY - minY);
    }
    static Sides(A, inset = 0) {
      const { corners } = A;
      if (inset) {
      }
      return [
        [corners[0], corners[1]],
        [corners[1], corners[2]],
        [corners[2], corners[3]],
        [corners[3], corners[0]]
      ];
    }
    static Resize(box, handle, dx, dy, isAspectRatioLocked = false) {
      const { minX: a0x, minY: a0y, maxX: a1x, maxY: a1y } = box;
      let { minX: b0x, minY: b0y, maxX: b1x, maxY: b1y } = box;
      switch (handle) {
        case "left":
        case "top_left":
        case "bottom_left": {
          b0x += dx;
          break;
        }
        case "right":
        case "top_right":
        case "bottom_right": {
          b1x += dx;
          break;
        }
      }
      switch (handle) {
        case "top":
        case "top_left":
        case "top_right": {
          b0y += dy;
          break;
        }
        case "bottom":
        case "bottom_left":
        case "bottom_right": {
          b1y += dy;
          break;
        }
      }
      const scaleX = (b1x - b0x) / (a1x - a0x);
      const scaleY = (b1y - b0y) / (a1y - a0y);
      const flipX = scaleX < 0;
      const flipY = scaleY < 0;
      if (isAspectRatioLocked) {
        const aspectRatio = (a1x - a0x) / (a1y - a0y);
        const bw = Math.abs(b1x - b0x);
        const bh = Math.abs(b1y - b0y);
        const tw = bw * (scaleY < 0 ? 1 : -1) * (1 / aspectRatio);
        const th = bh * (scaleX < 0 ? 1 : -1) * aspectRatio;
        const isTall = aspectRatio < bw / bh;
        switch (handle) {
          case "top_left": {
            if (isTall) b0y = b1y + tw;
            else b0x = b1x + th;
            break;
          }
          case "top_right": {
            if (isTall) b0y = b1y + tw;
            else b1x = b0x - th;
            break;
          }
          case "bottom_right": {
            if (isTall) b1y = b0y - tw;
            else b1x = b0x - th;
            break;
          }
          case "bottom_left": {
            if (isTall) b1y = b0y - tw;
            else b0x = b1x + th;
            break;
          }
          case "bottom":
          case "top": {
            const m = (b0x + b1x) / 2;
            const w = bh * aspectRatio;
            b0x = m - w / 2;
            b1x = m + w / 2;
            break;
          }
          case "left":
          case "right": {
            const m = (b0y + b1y) / 2;
            const h = bw / aspectRatio;
            b0y = m - h / 2;
            b1y = m + h / 2;
            break;
          }
        }
      }
      if (flipX) {
        const t2 = b1x;
        b1x = b0x;
        b0x = t2;
      }
      if (flipY) {
        const t2 = b1y;
        b1y = b0y;
        b0y = t2;
      }
      const final = new _Box(b0x, b0y, Math.abs(b1x - b0x), Math.abs(b1y - b0y));
      return {
        box: final,
        scaleX: +(final.width / box.width * (scaleX > 0 ? 1 : -1)).toFixed(5),
        scaleY: +(final.height / box.height * (scaleY > 0 ? 1 : -1)).toFixed(5)
      };
    }
    equals(other) {
      return _Box.Equals(this, other);
    }
    static Equals(a, b) {
      return b.x === a.x && b.y === a.y && b.w === a.w && b.h === a.h;
    }
    zeroFix() {
      this.w = Math.max(1, this.w);
      this.h = Math.max(1, this.h);
      return this;
    }
    static ZeroFix(other) {
      return new _Box(other.x, other.y, Math.max(1, other.w), Math.max(1, other.h));
    }
  };
  function flipSelectionHandleY(handle) {
    switch (handle) {
      case "top":
        return "bottom";
      case "bottom":
        return "top";
      case "top_left":
        return "bottom_left";
      case "top_right":
        return "bottom_right";
      case "bottom_left":
        return "top_left";
      case "bottom_right":
        return "top_right";
      default:
        return handle;
    }
  }
  function flipSelectionHandleX(handle) {
    switch (handle) {
      case "left":
        return "right";
      case "right":
        return "left";
      case "top_left":
        return "top_right";
      case "top_right":
        return "top_left";
      case "bottom_left":
        return "bottom_right";
      case "bottom_right":
        return "bottom_left";
      default:
        return handle;
    }
  }
  function isSelectionCorner(selection) {
    return selection === "top_left" || selection === "top_right" || selection === "bottom_right" || selection === "bottom_left";
  }

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/Mat.mjs
  var Mat = class _Mat {
    constructor(a, b, c, d, e, f) {
      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
      this.e = e;
      this.f = f;
    }
    a = 1;
    b = 0;
    c = 0;
    d = 1;
    e = 0;
    f = 0;
    equals(m) {
      return this === m || this.a === m.a && this.b === m.b && this.c === m.c && this.d === m.d && this.e === m.e && this.f === m.f;
    }
    identity() {
      this.a = 1;
      this.b = 0;
      this.c = 0;
      this.d = 1;
      this.e = 0;
      this.f = 0;
      return this;
    }
    multiply(m) {
      const m2 = m;
      const { a, b, c, d, e, f } = this;
      this.a = a * m2.a + c * m2.b;
      this.c = a * m2.c + c * m2.d;
      this.e = a * m2.e + c * m2.f + e;
      this.b = b * m2.a + d * m2.b;
      this.d = b * m2.c + d * m2.d;
      this.f = b * m2.e + d * m2.f + f;
      return this;
    }
    rotate(r, cx, cy) {
      if (r === 0) return this;
      if (cx === void 0) return this.multiply(_Mat.Rotate(r));
      return this.translate(cx, cy).multiply(_Mat.Rotate(r)).translate(-cx, -cy);
    }
    translate(x, y) {
      return this.multiply(_Mat.Translate(x, y));
    }
    scale(x, y) {
      return this.multiply(_Mat.Scale(x, y));
    }
    invert() {
      const { a, b, c, d, e, f } = this;
      const denom = a * d - b * c;
      this.a = d / denom;
      this.b = b / -denom;
      this.c = c / -denom;
      this.d = a / denom;
      this.e = (d * e - c * f) / -denom;
      this.f = (b * e - a * f) / denom;
      return this;
    }
    applyToPoint(point) {
      return _Mat.applyToPoint(this, point);
    }
    applyToPoints(points) {
      return _Mat.applyToPoints(this, points);
    }
    rotation() {
      return _Mat.Rotation(this);
    }
    point() {
      return _Mat.Point(this);
    }
    decomposed() {
      return _Mat.Decompose(this);
    }
    toCssString() {
      return _Mat.toCssString(this);
    }
    setTo(model2) {
      Object.assign(this, model2);
      return this;
    }
    decompose() {
      return _Mat.Decompose(this);
    }
    clone() {
      return new _Mat(this.a, this.b, this.c, this.d, this.e, this.f);
    }
    /* --------------------- Static --------------------- */
    static Identity() {
      return new _Mat(1, 0, 0, 1, 0, 0);
    }
    static Translate(x, y) {
      return new _Mat(1, 0, 0, 1, x, y);
    }
    static Rotate(r, cx, cy) {
      if (r === 0) return _Mat.Identity();
      const cosAngle = Math.cos(r);
      const sinAngle = Math.sin(r);
      const rotationMatrix = new _Mat(cosAngle, sinAngle, -sinAngle, cosAngle, 0, 0);
      if (cx === void 0) return rotationMatrix;
      return _Mat.Compose(_Mat.Translate(cx, cy), rotationMatrix, _Mat.Translate(-cx, -cy));
    }
    static Scale(x, y, cx, cy) {
      const scaleMatrix = new _Mat(x, 0, 0, y, 0, 0);
      if (cx === void 0) return scaleMatrix;
      return _Mat.Compose(_Mat.Translate(cx, cy), scaleMatrix, _Mat.Translate(-cx, -cy));
    }
    static Multiply(m1, m2) {
      return {
        a: m1.a * m2.a + m1.c * m2.b,
        c: m1.a * m2.c + m1.c * m2.d,
        e: m1.a * m2.e + m1.c * m2.f + m1.e,
        b: m1.b * m2.a + m1.d * m2.b,
        d: m1.b * m2.c + m1.d * m2.d,
        f: m1.b * m2.e + m1.d * m2.f + m1.f
      };
    }
    static Inverse(m) {
      const denom = m.a * m.d - m.b * m.c;
      return {
        a: m.d / denom,
        b: m.b / -denom,
        c: m.c / -denom,
        d: m.a / denom,
        e: (m.d * m.e - m.c * m.f) / -denom,
        f: (m.b * m.e - m.a * m.f) / denom
      };
    }
    static Absolute(m) {
      const denom = m.a * m.d - m.b * m.c;
      return {
        a: m.d / denom,
        b: m.b / -denom,
        c: m.c / -denom,
        d: m.a / denom,
        e: (m.d * m.e - m.c * m.f) / denom,
        f: (m.b * m.e - m.a * m.f) / -denom
      };
    }
    static Compose(...matrices) {
      const matrix = _Mat.Identity();
      for (let i = 0, n = matrices.length; i < n; i++) {
        matrix.multiply(matrices[i]);
      }
      return matrix;
    }
    static Point(m) {
      return new Vec(m.e, m.f);
    }
    static Rotation(m) {
      let rotation;
      if (m.a !== 0 || m.c !== 0) {
        const hypotAc = (m.a * m.a + m.c * m.c) ** 0.5;
        rotation = Math.acos(m.a / hypotAc) * (m.c > 0 ? -1 : 1);
      } else if (m.b !== 0 || m.d !== 0) {
        const hypotBd = (m.b * m.b + m.d * m.d) ** 0.5;
        rotation = HALF_PI + Math.acos(m.b / hypotBd) * (m.d > 0 ? -1 : 1);
      } else {
        rotation = 0;
      }
      return clampRadians(rotation);
    }
    static Decompose(m) {
      let scaleX, scaleY, rotation;
      if (m.a !== 0 || m.c !== 0) {
        const hypotAc = (m.a * m.a + m.c * m.c) ** 0.5;
        scaleX = hypotAc;
        scaleY = (m.a * m.d - m.b * m.c) / hypotAc;
        rotation = Math.acos(m.a / hypotAc) * (m.c > 0 ? -1 : 1);
      } else if (m.b !== 0 || m.d !== 0) {
        const hypotBd = (m.b * m.b + m.d * m.d) ** 0.5;
        scaleX = (m.a * m.d - m.b * m.c) / hypotBd;
        scaleY = hypotBd;
        rotation = HALF_PI + Math.acos(m.b / hypotBd) * (m.d > 0 ? -1 : 1);
      } else {
        scaleX = 0;
        scaleY = 0;
        rotation = 0;
      }
      return {
        x: m.e,
        y: m.f,
        scaleX,
        scaleY,
        rotation: clampRadians(rotation)
      };
    }
    static Smooth(m, precision = 1e10) {
      m.a = Math.round(m.a * precision) / precision;
      m.b = Math.round(m.b * precision) / precision;
      m.c = Math.round(m.c * precision) / precision;
      m.d = Math.round(m.d * precision) / precision;
      m.e = Math.round(m.e * precision) / precision;
      m.f = Math.round(m.f * precision) / precision;
      return m;
    }
    static toCssString(m) {
      return `matrix(${toDomPrecision(m.a)}, ${toDomPrecision(m.b)}, ${toDomPrecision(
        m.c
      )}, ${toDomPrecision(m.d)}, ${toDomPrecision(m.e)}, ${toDomPrecision(m.f)})`;
    }
    static applyToPoint(m, point) {
      return new Vec(
        m.a * point.x + m.c * point.y + m.e,
        m.b * point.x + m.d * point.y + m.f,
        point.z
      );
    }
    static applyToXY(m, x, y) {
      return [m.a * x + m.c * y + m.e, m.b * x + m.d * y + m.f];
    }
    static applyToPoints(m, points) {
      return points.map(
        (point) => new Vec(m.a * point.x + m.c * point.y + m.e, m.b * point.x + m.d * point.y + m.f, point.z)
      );
    }
    static applyToBounds(m, box) {
      return new Box(m.e + box.minX, m.f + box.minY, box.width, box.height);
    }
    static From(m) {
      return new _Mat(m.a, m.b, m.c, m.d, m.e, m.f);
    }
    static Cast(m) {
      return m instanceof _Mat ? m : _Mat.From(m);
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/components/GeometryDebuggingView.mjs
  var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
  var import_react20 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Geometry2d.mjs
  var Geometry2d = class {
    isFilled = false;
    isClosed = true;
    isLabel = false;
    debugColor;
    ignore;
    constructor(opts) {
      this.isFilled = opts.isFilled;
      this.isClosed = opts.isClosed;
      this.isLabel = opts.isLabel ?? false;
      this.debugColor = opts.debugColor;
      this.ignore = opts.ignore;
    }
    // hitTestPoint(point: Vec, margin = 0, hitInside = false) {
    // 	// We've removed the broad phase here; that should be done outside of the call
    // 	return this.distanceToPoint(point, hitInside) <= margin
    // }
    hitTestPoint(point, margin = 0, hitInside = false) {
      if (this.isClosed && (this.isFilled || hitInside) && pointInPolygon(point, this.vertices)) {
        return true;
      }
      return Vec.Dist2(point, this.nearestPoint(point)) <= margin * margin;
    }
    distanceToPoint(point, hitInside = false) {
      return point.dist(this.nearestPoint(point)) * (this.isClosed && (this.isFilled || hitInside) && pointInPolygon(point, this.vertices) ? -1 : 1);
    }
    distanceToLineSegment(A, B) {
      if (A.equals(B)) return this.distanceToPoint(A);
      const { vertices } = this;
      let nearest;
      let dist = Infinity;
      let d, p, q;
      for (let i = 0; i < vertices.length; i++) {
        p = vertices[i];
        q = Vec.NearestPointOnLineSegment(A, B, p, true);
        d = Vec.Dist2(p, q);
        if (d < dist) {
          dist = d;
          nearest = q;
        }
      }
      if (!nearest) throw Error("nearest point not found");
      return this.isClosed && this.isFilled && pointInPolygon(nearest, this.vertices) ? -dist : dist;
    }
    hitTestLineSegment(A, B, distance = 0) {
      return this.distanceToLineSegment(A, B) <= distance;
    }
    nearestPointOnLineSegment(A, B) {
      const { vertices } = this;
      let nearest;
      let dist = Infinity;
      let d, p, q;
      for (let i = 0; i < vertices.length; i++) {
        p = vertices[i];
        q = Vec.NearestPointOnLineSegment(A, B, p, true);
        d = Vec.Dist2(p, q);
        if (d < dist) {
          dist = d;
          nearest = q;
        }
      }
      if (!nearest) throw Error("nearest point not found");
      return nearest;
    }
    isPointInBounds(point, margin = 0) {
      const { bounds } = this;
      return !(point.x < bounds.minX - margin || point.y < bounds.minY - margin || point.x > bounds.maxX + margin || point.y > bounds.maxY + margin);
    }
    _vertices;
    // eslint-disable-next-line no-restricted-syntax
    get vertices() {
      if (!this._vertices) {
        this._vertices = this.getVertices();
      }
      return this._vertices;
    }
    getBounds() {
      return Box.FromPoints(this.vertices);
    }
    _bounds;
    // eslint-disable-next-line no-restricted-syntax
    get bounds() {
      if (!this._bounds) {
        this._bounds = this.getBounds();
      }
      return this._bounds;
    }
    // eslint-disable-next-line no-restricted-syntax
    get center() {
      return this.bounds.center;
    }
    _area;
    // eslint-disable-next-line no-restricted-syntax
    get area() {
      if (!this._area) {
        this._area = this.getArea();
      }
      return this._area;
    }
    getArea() {
      if (!this.isClosed) {
        return 0;
      }
      const { vertices } = this;
      let area = 0;
      for (let i = 0, n = vertices.length; i < n; i++) {
        const curr = vertices[i];
        const next = vertices[(i + 1) % n];
        area += curr.x * next.y - next.x * curr.y;
      }
      return area / 2;
    }
    toSimpleSvgPath() {
      let path = "";
      const { vertices } = this;
      const n = vertices.length;
      if (n === 0) return path;
      path += `M${vertices[0].x},${vertices[0].y}`;
      for (let i = 1; i < n; i++) {
        path += `L${vertices[i].x},${vertices[i].y}`;
      }
      if (this.isClosed) {
        path += "Z";
      }
      return path;
    }
    _length;
    // eslint-disable-next-line no-restricted-syntax
    get length() {
      if (this._length) return this._length;
      this._length = this.getLength();
      return this._length;
    }
    getLength() {
      const { vertices } = this;
      let n1, p1 = vertices[0], length = 0;
      for (let i = 1; i < vertices.length; i++) {
        n1 = vertices[i];
        length += Vec.Dist2(p1, n1);
        p1 = n1;
      }
      return Math.sqrt(length);
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Group2d.mjs
  var Group2d = class extends Geometry2d {
    children = [];
    ignoredChildren = [];
    constructor(config) {
      super({ ...config, isClosed: true, isFilled: false });
      for (const child of config.children) {
        if (child.ignore) {
          this.ignoredChildren.push(child);
        } else {
          this.children.push(child);
        }
      }
      if (this.children.length === 0) throw Error("Group2d must have at least one child");
    }
    getVertices() {
      return this.children.filter((c) => !c.isLabel).flatMap((c) => c.vertices);
    }
    nearestPoint(point) {
      let dist = Infinity;
      let nearest;
      const { children } = this;
      if (children.length === 0) {
        throw Error("no children");
      }
      let p;
      let d;
      for (const child of children) {
        p = child.nearestPoint(point);
        d = Vec.Dist2(p, point);
        if (d < dist) {
          dist = d;
          nearest = p;
        }
      }
      if (!nearest) throw Error("nearest point not found");
      return nearest;
    }
    distanceToPoint(point, hitInside = false) {
      return Math.min(...this.children.map((c, i) => c.distanceToPoint(point, hitInside || i > 0)));
    }
    hitTestPoint(point, margin, hitInside) {
      return !!this.children.filter((c) => !c.isLabel).find((c) => c.hitTestPoint(point, margin, hitInside));
    }
    hitTestLineSegment(A, B, zoom) {
      return !!this.children.filter((c) => !c.isLabel).find((c) => c.hitTestLineSegment(A, B, zoom));
    }
    getArea() {
      return this.children[0].area;
    }
    toSimpleSvgPath() {
      let path = "";
      for (const child of this.children) {
        path += child.toSimpleSvgPath();
      }
      const corners = Box.FromPoints(this.vertices).corners;
      for (let i = 0, n = corners.length; i < n; i++) {
        const corner = corners[i];
        const prevCorner = corners[(i - 1 + n) % n];
        const prevDist = corner.dist(prevCorner);
        const nextCorner = corners[(i + 1) % n];
        const nextDist = corner.dist(nextCorner);
        const A = corner.clone().lrp(prevCorner, 4 / prevDist);
        const B = corner;
        const C = corner.clone().lrp(nextCorner, 4 / nextDist);
        path += `M${A.x},${A.y} L${B.x},${B.y} L${C.x},${C.y} `;
      }
      return path;
    }
    getLength() {
      return this.children.reduce((a, c) => c.isLabel ? a : a + c.length, 0);
    }
    getSvgPathData() {
      return this.children.map((c, i) => c.isLabel ? "" : c.getSvgPathData(i === 0)).join(" ");
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/components/GeometryDebuggingView.mjs
  function useTick(isEnabled = true) {
    const [_, setTick] = (0, import_react20.useState)(0);
    const editor = useEditor();
    (0, import_react20.useEffect)(() => {
      if (!isEnabled) return;
      const update = () => setTick((tick2) => tick2 + 1);
      editor.on("tick", update);
      return () => {
        editor.off("tick", update);
      };
    }, [editor, isEnabled]);
  }
  var GeometryDebuggingView = track(function GeometryDebuggingView2({
    showStroke = true,
    showVertices = true,
    showClosestPointOnOutline = true
  }) {
    const editor = useEditor();
    useTick(showClosestPointOnOutline);
    const zoomLevel = editor.getZoomLevel();
    const renderingShapes = editor.getRenderingShapes();
    const {
      inputs: { currentPagePoint }
    } = editor;
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
      "svg",
      {
        style: {
          position: "absolute",
          pointerEvents: "none",
          zIndex: 999999999,
          top: 0,
          left: 0,
          overflow: "visible"
        },
        children: renderingShapes.map((result) => {
          const shape = editor.getShape(result.id);
          if (shape.type === "group") return null;
          const geometry = editor.getShapeGeometry(shape);
          const pageTransform = editor.getShapePageTransform(shape);
          const pointInShapeSpace = editor.getPointInShapeSpace(shape, currentPagePoint);
          const nearestPointOnShape = geometry.nearestPoint(pointInShapeSpace);
          const distanceToPoint = geometry.distanceToPoint(pointInShapeSpace, true);
          const dist = Math.abs(distanceToPoint) * zoomLevel;
          const hitInside = distanceToPoint < 0;
          const { vertices } = geometry;
          return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
            "g",
            {
              transform: pageTransform.toCssString(),
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                showStroke && /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
                  "g",
                  {
                    stroke: geometry.debugColor ?? "red",
                    opacity: "1",
                    strokeWidth: 2 / zoomLevel,
                    fill: "none",
                    children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(GeometryStroke, { geometry })
                  }
                ),
                showVertices && vertices.map((v, i) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
                  "circle",
                  {
                    cx: v.x,
                    cy: v.y,
                    r: 2 / zoomLevel,
                    fill: `hsl(${modulate(i, [0, vertices.length - 1], [120, 200])}, 100%, 50%)`,
                    stroke: "black",
                    strokeWidth: 1 / zoomLevel
                  },
                  `v${i}`
                )),
                showClosestPointOnOutline && dist < 150 && /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
                  "line",
                  {
                    x1: nearestPointOnShape.x,
                    y1: nearestPointOnShape.y,
                    x2: pointInShapeSpace.x,
                    y2: pointInShapeSpace.y,
                    opacity: 1 - dist / 150,
                    stroke: hitInside ? "goldenrod" : "dodgerblue",
                    strokeWidth: 2 / zoomLevel
                  }
                )
              ]
            },
            result.id + "_outline"
          );
        })
      }
    );
  });
  function GeometryStroke({ geometry }) {
    if (geometry instanceof Group2d) {
      return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_jsx_runtime7.Fragment, { children: [...geometry.children, ...geometry.ignoredChildren].map((child, i) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(GeometryStroke, { geometry: child }, i)) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("path", { d: geometry.toSimpleSvgPath() });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/LiveCollaborators.mjs
  var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
  var import_react21 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/utils/uniq.mjs
  function uniq(array2) {
    return (0, import_lodash2.default)(array2);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/usePeerIds.mjs
  function usePeerIds() {
    const editor = useEditor();
    const $userIds = useComputed(
      "userIds",
      () => uniq(editor.getCollaborators().map((p) => p.userId)).sort(),
      { isEqual: (a, b) => a.join(",") === b.join?.(",") },
      [editor]
    );
    return useValue($userIds);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/usePresence.mjs
  function usePresence(userId) {
    const editor = useEditor();
    const latestPresence = useValue(
      `latestPresence:${userId}`,
      () => {
        return editor.getCollaborators().find((c) => c.userId === userId);
      },
      [editor, userId]
    );
    return latestPresence ?? null;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/LiveCollaborators.mjs
  var LiveCollaborators = track(function Collaborators() {
    const peerIds = usePeerIds();
    return peerIds.map((id) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(CollaboratorGuard, { collaboratorId: id }, id));
  });
  var CollaboratorGuard = track(function CollaboratorGuard2({
    collaboratorId
  }) {
    const editor = useEditor();
    const presence = usePresence(collaboratorId);
    const collaboratorState = useCollaboratorState(editor, presence);
    if (!(presence && presence.currentPageId === editor.getCurrentPageId())) {
      return null;
    }
    switch (collaboratorState) {
      case "inactive": {
        const { followingUserId, highlightedUserIds } = editor.getInstanceState();
        if (!(followingUserId === presence.userId || highlightedUserIds.includes(presence.userId))) {
          return null;
        }
        break;
      }
      case "idle": {
        const { highlightedUserIds } = editor.getInstanceState();
        if (presence.followingUserId === editor.user.getId() && !(presence.chatMessage || highlightedUserIds.includes(presence.userId))) {
          return null;
        }
        break;
      }
      case "active": {
        break;
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Collaborator, { latestPresence: presence });
  });
  var Collaborator = track(function Collaborator2({
    latestPresence
  }) {
    const editor = useEditor();
    const {
      CollaboratorBrush,
      CollaboratorScribble,
      CollaboratorCursor,
      CollaboratorHint,
      CollaboratorShapeIndicator
    } = useEditorComponents();
    const zoomLevel = editor.getZoomLevel();
    const viewportPageBounds = editor.getViewportPageBounds();
    const { userId, chatMessage, brush, scribbles, selectedShapeIds, userName, cursor, color } = latestPresence;
    if (!cursor) return null;
    const isCursorInViewport = !(cursor.x < viewportPageBounds.minX - 12 / zoomLevel || cursor.y < viewportPageBounds.minY - 16 / zoomLevel || cursor.x > viewportPageBounds.maxX - 12 / zoomLevel || cursor.y > viewportPageBounds.maxY - 16 / zoomLevel);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(import_jsx_runtime8.Fragment, { children: [
      brush && CollaboratorBrush ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
        CollaboratorBrush,
        {
          className: "tl-collaborator__brush",
          brush,
          color,
          opacity: 0.1
        },
        userId + "_brush"
      ) : null,
      isCursorInViewport && CollaboratorCursor ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
        CollaboratorCursor,
        {
          className: "tl-collaborator__cursor",
          point: cursor,
          color,
          zoom: zoomLevel,
          name: userName !== "New User" ? userName : null,
          chatMessage: chatMessage ?? ""
        },
        userId + "_cursor"
      ) : CollaboratorHint ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
        CollaboratorHint,
        {
          className: "tl-collaborator__cursor-hint",
          point: cursor,
          color,
          zoom: zoomLevel,
          viewport: viewportPageBounds
        },
        userId + "_cursor_hint"
      ) : null,
      CollaboratorScribble && scribbles.length ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_jsx_runtime8.Fragment, { children: scribbles.map((scribble) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
        CollaboratorScribble,
        {
          className: "tl-collaborator__scribble",
          scribble,
          color,
          zoom: zoomLevel,
          opacity: scribble.color === "laser" ? 0.5 : 0.1
        },
        userId + "_scribble_" + scribble.id
      )) }) : null,
      CollaboratorShapeIndicator && selectedShapeIds.filter((id) => !editor.isShapeHidden(id)).map((shapeId) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
        CollaboratorShapeIndicator,
        {
          className: "tl-collaborator__shape-indicator",
          shapeId,
          color,
          opacity: 0.5
        },
        userId + "_" + shapeId
      ))
    ] });
  });
  function getStateFromElapsedTime(editor, elapsed) {
    return elapsed > editor.options.collaboratorInactiveTimeoutMs ? "inactive" : elapsed > editor.options.collaboratorIdleTimeoutMs ? "idle" : "active";
  }
  function useCollaboratorState(editor, latestPresence) {
    const rLastActivityTimestamp = (0, import_react21.useRef)(latestPresence?.lastActivityTimestamp ?? -1);
    const [state, setState] = (0, import_react21.useState)(
      () => getStateFromElapsedTime(editor, Date.now() - rLastActivityTimestamp.current)
    );
    (0, import_react21.useEffect)(() => {
      const interval = editor.timers.setInterval(() => {
        setState(getStateFromElapsedTime(editor, Date.now() - rLastActivityTimestamp.current));
      }, editor.options.collaboratorCheckIntervalMs);
      return () => clearInterval(interval);
    }, [editor]);
    if (latestPresence) {
      rLastActivityTimestamp.current = latestPresence.lastActivityTimestamp ?? Infinity;
    }
    return state;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/MenuClickCapture.mjs
  var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
  var import_react22 = __toESM(require_react(), 1);
  function MenuClickCapture() {
    const editor = useEditor();
    const isMenuOpen = useValue("is menu open", () => editor.menus.hasAnyOpenMenus(), [editor]);
    const [isPointing, setIsPointing] = (0, import_react22.useState)(false);
    const showElement = isMenuOpen || isPointing;
    const canvasEvents = useCanvasEvents();
    const rPointerState = (0, import_react22.useRef)({
      isDown: false,
      isDragging: false,
      start: new Vec()
    });
    const handlePointerDown = (0, import_react22.useCallback)(
      (e) => {
        if (e.button === 0) {
          setIsPointing(true);
          rPointerState.current = {
            isDown: true,
            isDragging: false,
            start: new Vec(e.clientX, e.clientY)
          };
        }
        editor.menus.clearOpenMenus();
      },
      [editor]
    );
    const handlePointerMove = (0, import_react22.useCallback)(
      (e) => {
        if (!rPointerState.current.isDown) return;
        if (rPointerState.current.isDragging) {
          canvasEvents.onPointerMove?.(e);
          return;
        }
        if (
          // We're pointing, but are we dragging?
          Vec.Dist2(rPointerState.current.start, new Vec(e.clientX, e.clientY)) > editor.options.dragDistanceSquared
        ) {
          rPointerState.current = {
            ...rPointerState.current,
            isDown: true,
            isDragging: true
          };
          const { x, y } = rPointerState.current.start;
          canvasEvents.onPointerDown?.({
            ...e,
            clientX: x,
            clientY: y,
            button: 0
          });
          canvasEvents.onPointerMove?.(e);
        }
      },
      [canvasEvents, editor]
    );
    const handlePointerUp = (0, import_react22.useCallback)(
      (e) => {
        canvasEvents.onPointerUp?.(e);
        setIsPointing(false);
        rPointerState.current = {
          isDown: false,
          isDragging: false,
          start: new Vec(e.clientX, e.clientY)
        };
      },
      [canvasEvents]
    );
    return showElement && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
      "div",
      {
        className: "tlui-menu-click-capture",
        "data-testid": "menu-click-capture.content",
        ...canvasEvents,
        onPointerDown: handlePointerDown,
        onPointerMove: handlePointerMove,
        onPointerUp: handlePointerUp
      }
    );
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/Shape.mjs
  var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
  var import_react23 = __toESM(require_react(), 1);
  var Shape = (0, import_react23.memo)(function Shape2({
    id,
    shape,
    util,
    index: index2,
    backgroundIndex,
    opacity
  }) {
    const editor = useEditor();
    const { ShapeErrorFallback } = useEditorComponents();
    const containerRef = (0, import_react23.useRef)(null);
    const bgContainerRef = (0, import_react23.useRef)(null);
    const memoizedStuffRef = (0, import_react23.useRef)({
      transform: "",
      clipPath: "none",
      width: 0,
      height: 0,
      x: 0,
      y: 0,
      isCulled: false
    });
    useQuickReactor(
      "set shape stuff",
      () => {
        const shape2 = editor.getShape(id);
        if (!shape2) return;
        const prev = memoizedStuffRef.current;
        const clipPath = editor.getShapeClipPath(id) ?? "none";
        if (clipPath !== prev.clipPath) {
          setStyleProperty(containerRef.current, "clip-path", clipPath);
          setStyleProperty(bgContainerRef.current, "clip-path", clipPath);
          prev.clipPath = clipPath;
        }
        const pageTransform = editor.getShapePageTransform(id);
        const transform = Mat.toCssString(pageTransform);
        const bounds = editor.getShapeGeometry(shape2).bounds;
        if (transform !== prev.transform) {
          setStyleProperty(containerRef.current, "transform", transform);
          setStyleProperty(bgContainerRef.current, "transform", transform);
          prev.transform = transform;
        }
        const width = Math.max(bounds.width, 1);
        const height = Math.max(bounds.height, 1);
        if (width !== prev.width || height !== prev.height) {
          setStyleProperty(containerRef.current, "width", width + "px");
          setStyleProperty(containerRef.current, "height", height + "px");
          setStyleProperty(bgContainerRef.current, "width", width + "px");
          setStyleProperty(bgContainerRef.current, "height", height + "px");
          prev.width = width;
          prev.height = height;
        }
      },
      [editor]
    );
    useQuickReactor(
      "set opacity and z-index",
      () => {
        const container = containerRef.current;
        const bgContainer = bgContainerRef.current;
        setStyleProperty(container, "opacity", opacity);
        setStyleProperty(bgContainer, "opacity", opacity);
        setStyleProperty(container, "z-index", index2);
        setStyleProperty(bgContainer, "z-index", backgroundIndex);
      },
      [opacity, index2, backgroundIndex]
    );
    useQuickReactor(
      "set display",
      () => {
        const shape2 = editor.getShape(id);
        if (!shape2) return;
        const culledShapes = editor.getCulledShapes();
        const isCulled = culledShapes.has(id);
        if (isCulled !== memoizedStuffRef.current.isCulled) {
          setStyleProperty(containerRef.current, "display", isCulled ? "none" : "block");
          setStyleProperty(bgContainerRef.current, "display", isCulled ? "none" : "block");
          memoizedStuffRef.current.isCulled = isCulled;
        }
      },
      [editor]
    );
    const annotateError2 = (0, import_react23.useCallback)(
      (error) => editor.annotateError(error, { origin: "shape", willCrashApp: false }),
      [editor]
    );
    if (!shape) return null;
    const isFilledShape = "fill" in shape.props && shape.props.fill !== "none";
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(import_jsx_runtime10.Fragment, { children: [
      util.backgroundComponent && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        "div",
        {
          ref: bgContainerRef,
          className: "tl-shape tl-shape-background",
          "data-shape-type": shape.type,
          "data-shape-id": shape.id,
          draggable: false,
          children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(OptionalErrorBoundary, { fallback: ShapeErrorFallback, onError: annotateError2, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(InnerShapeBackground, { shape, util }) })
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        "div",
        {
          ref: containerRef,
          className: "tl-shape",
          "data-shape-type": shape.type,
          "data-shape-is-filled": isFilledShape,
          "data-shape-id": shape.id,
          draggable: false,
          children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(OptionalErrorBoundary, { fallback: ShapeErrorFallback, onError: annotateError2, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(InnerShape, { shape, util }) })
        }
      )
    ] });
  });
  var InnerShape = (0, import_react23.memo)(
    function InnerShape2({ shape, util }) {
      return useStateTracking(
        "InnerShape:" + shape.type,
        () => (
          // always fetch the latest shape from the store even if the props/meta have not changed, to avoid
          // calling the render method with stale data.
          util.component(util.editor.store.unsafeGetWithoutCapture(shape.id))
        ),
        [util, shape.id]
      );
    },
    (prev, next) => prev.shape.props === next.shape.props && prev.shape.meta === next.shape.meta && prev.util === next.util
  );
  var InnerShapeBackground = (0, import_react23.memo)(
    function InnerShapeBackground2({
      shape,
      util
    }) {
      return useStateTracking(
        "InnerShape:" + shape.type,
        () => (
          // always fetch the latest shape from the store even if the props/meta have not changed, to avoid
          // calling the render method with stale data.
          util.backgroundComponent?.(util.editor.store.unsafeGetWithoutCapture(shape.id))
        ),
        [util, shape.id]
      );
    },
    (prev, next) => prev.shape.props === next.shape.props && prev.shape.meta === next.shape.meta && prev.util === next.util
  );

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultCanvas.mjs
  function DefaultCanvas({ className }) {
    const editor = useEditor();
    const { Background, SvgDefs, ShapeIndicators } = useEditorComponents();
    const rCanvas = (0, import_react24.useRef)(null);
    const rHtmlLayer = (0, import_react24.useRef)(null);
    const rHtmlLayer2 = (0, import_react24.useRef)(null);
    const container = useContainer();
    useScreenBounds(rCanvas);
    useDocumentEvents();
    useCoarsePointer();
    useGestureEvents(rCanvas);
    useFixSafariDoubleTapZoomPencilEvents(rCanvas);
    const rMemoizedStuff = (0, import_react24.useRef)({ lodDisableTextOutline: false, allowTextOutline: true });
    useQuickReactor(
      "position layers",
      function positionLayersWhenCameraMoves() {
        const { x, y, z } = editor.getCamera();
        if (rMemoizedStuff.current.allowTextOutline && tlenv.isSafari) {
          container.style.setProperty("--tl-text-outline", "none");
          rMemoizedStuff.current.allowTextOutline = false;
        }
        if (rMemoizedStuff.current.allowTextOutline && z < editor.options.textShadowLod !== rMemoizedStuff.current.lodDisableTextOutline) {
          const lodDisableTextOutline = z < editor.options.textShadowLod;
          container.style.setProperty(
            "--tl-text-outline",
            lodDisableTextOutline ? "none" : `var(--tl-text-outline-reference)`
          );
          rMemoizedStuff.current.lodDisableTextOutline = lodDisableTextOutline;
        }
        const offset4 = z >= 1 ? modulate(z, [1, 8], [0.125, 0.5], true) : modulate(z, [0.1, 1], [-2, 0.125], true);
        const transform = `scale(${toDomPrecision(z)}) translate(${toDomPrecision(
          x + offset4
        )}px,${toDomPrecision(y + offset4)}px)`;
        setStyleProperty(rHtmlLayer.current, "transform", transform);
        setStyleProperty(rHtmlLayer2.current, "transform", transform);
      },
      [editor, container]
    );
    const events = useCanvasEvents();
    const shapeSvgDefs = useValue(
      "shapeSvgDefs",
      () => {
        const shapeSvgDefsByKey = /* @__PURE__ */ new Map();
        for (const util of objectMapValues(editor.shapeUtils)) {
          if (!util) return;
          const defs = util.getCanvasSvgDefs();
          for (const { key, component: Component2 } of defs) {
            if (shapeSvgDefsByKey.has(key)) continue;
            shapeSvgDefsByKey.set(key, /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Component2, {}, key));
          }
        }
        return [...shapeSvgDefsByKey.values()];
      },
      [editor]
    );
    const hideShapes = useValue("debug_shapes", () => debugFlags.hideShapes.get(), [debugFlags]);
    const debugSvg = useValue("debug_svg", () => debugFlags.debugSvg.get(), [debugFlags]);
    const debugGeometry = useValue("debug_geometry", () => debugFlags.debugGeometry.get(), [
      debugFlags
    ]);
    const isEditingAnything = useValue(
      "isEditingAnything",
      () => editor.getEditingShapeId() !== null,
      [editor]
    );
    const isSelectingAnything = useValue(
      "isSelectingAnything",
      () => !!editor.getSelectedShapeIds().length,
      [editor]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(import_jsx_runtime11.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
        "div",
        {
          ref: rCanvas,
          draggable: false,
          "data-iseditinganything": isEditingAnything,
          "data-isselectinganything": isSelectingAnything,
          className: (0, import_classnames.default)("tl-canvas", className),
          "data-testid": "canvas",
          ...events,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("svg", { className: "tl-svg-context", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("defs", { children: [
              shapeSvgDefs,
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(CursorDef, {}),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(CollaboratorHintDef, {}),
              SvgDefs && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(SvgDefs, {})
            ] }) }),
            Background && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "tl-background__wrapper", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Background, {}) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(GridWrapper, {}),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { ref: rHtmlLayer, className: "tl-html-layer tl-shapes", draggable: false, children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(OnTheCanvasWrapper, {}),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(SelectionBackgroundWrapper, {}),
              hideShapes ? null : debugSvg ? /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(ShapesWithSVGs, {}) : /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(ShapesToDisplay, {})
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "tl-overlays", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { ref: rHtmlLayer2, className: "tl-html-layer", children: [
              debugGeometry ? /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(GeometryDebuggingView, {}) : null,
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(HandlesWrapper, {}),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(BrushWrapper, {}),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(ScribbleWrapper, {}),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(ZoomBrushWrapper, {}),
              ShapeIndicators && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(ShapeIndicators, {}),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(HintedShapeIndicator, {}),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(SnapIndicatorWrapper, {}),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(SelectionForegroundWrapper, {}),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(LiveCollaborators, {})
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(MovingCameraHitTestBlocker, {})
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(MenuClickCapture, {}),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(InFrontOfTheCanvasWrapper, {})
    ] });
  }
  function InFrontOfTheCanvasWrapper() {
    const { InFrontOfTheCanvas } = useEditorComponents();
    if (!InFrontOfTheCanvas) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(InFrontOfTheCanvas, {});
  }
  function GridWrapper() {
    const editor = useEditor();
    const gridSize = useValue("gridSize", () => editor.getDocumentSettings().gridSize, [editor]);
    const { x, y, z } = useValue("camera", () => editor.getCamera(), [editor]);
    const isGridMode = useValue("isGridMode", () => editor.getInstanceState().isGridMode, [editor]);
    const { Grid } = useEditorComponents();
    if (!(Grid && isGridMode)) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Grid, { x, y, z, size: gridSize });
  }
  function ScribbleWrapper() {
    const editor = useEditor();
    const scribbles = useValue("scribbles", () => editor.getInstanceState().scribbles, [editor]);
    const zoomLevel = useValue("zoomLevel", () => editor.getZoomLevel(), [editor]);
    const { Scribble } = useEditorComponents();
    if (!(Scribble && scribbles.length)) return null;
    return scribbles.map((scribble) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Scribble, { className: "tl-user-scribble", scribble, zoom: zoomLevel }, scribble.id));
  }
  function BrushWrapper() {
    const editor = useEditor();
    const brush = useValue("brush", () => editor.getInstanceState().brush, [editor]);
    const { Brush } = useEditorComponents();
    if (!(Brush && brush)) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Brush, { className: "tl-user-brush", brush });
  }
  function ZoomBrushWrapper() {
    const editor = useEditor();
    const zoomBrush = useValue("zoomBrush", () => editor.getInstanceState().zoomBrush, [editor]);
    const { ZoomBrush } = useEditorComponents();
    if (!(ZoomBrush && zoomBrush)) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(ZoomBrush, { className: "tl-user-brush tl-zoom-brush", brush: zoomBrush });
  }
  function SnapIndicatorWrapper() {
    const editor = useEditor();
    const lines = useValue("snapLines", () => editor.snaps.getIndicators(), [editor]);
    const zoomLevel = useValue("zoomLevel", () => editor.getZoomLevel(), [editor]);
    const { SnapIndicator } = useEditorComponents();
    if (!(SnapIndicator && lines.length > 0)) return null;
    return lines.map((line) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(SnapIndicator, { className: "tl-user-snapline", line, zoom: zoomLevel }, line.id));
  }
  function HandlesWrapper() {
    const editor = useEditor();
    const shapeIdWithHandles = useValue(
      "handles shapeIdWithHandles",
      () => {
        const { isReadonly, isChangingStyle } = editor.getInstanceState();
        if (isReadonly || isChangingStyle) return false;
        const onlySelectedShape = editor.getOnlySelectedShape();
        if (!onlySelectedShape) return false;
        const handles = editor.getShapeHandles(onlySelectedShape);
        if (!handles) return false;
        return onlySelectedShape.id;
      },
      [editor]
    );
    if (!shapeIdWithHandles) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(HandlesWrapperInner, { shapeId: shapeIdWithHandles });
  }
  function HandlesWrapperInner({ shapeId }) {
    const editor = useEditor();
    const { Handles } = useEditorComponents();
    const zoomLevel = useValue("zoomLevel", () => editor.getZoomLevel(), [editor]);
    const isCoarse = useValue("coarse pointer", () => editor.getInstanceState().isCoarsePointer, [
      editor
    ]);
    const transform = useValue("handles transform", () => editor.getShapePageTransform(shapeId), [
      editor,
      shapeId
    ]);
    const handles = useValue(
      "handles",
      () => {
        const handles2 = editor.getShapeHandles(shapeId);
        if (!handles2) return null;
        const minDistBetweenVirtualHandlesAndRegularHandles = (isCoarse ? editor.options.coarseHandleRadius : editor.options.handleRadius) / zoomLevel * 2;
        return handles2.filter(
          (handle) => (
            // if the handle isn't a virtual handle, we'll display it
            // but for virtual handles, we'll only display them if they're far enough away from vertex handles
            handle.type !== "virtual" || !handles2.some(
              (h) => (
                // skip the handle we're checking against
                // and check that their distance isn't below the minimum distance
                h !== handle && // only check against vertex handles
                h.type === "vertex" && Vec.Dist(handle, h) < minDistBetweenVirtualHandlesAndRegularHandles
              )
            )
          )
        ).sort((a) => a.type === "vertex" ? 1 : -1);
      },
      [editor, zoomLevel, isCoarse, shapeId]
    );
    const isHidden2 = useValue("isHidden", () => editor.isShapeHidden(shapeId), [editor, shapeId]);
    if (!Handles || !handles || !transform || isHidden2) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Handles, { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("g", { transform: Mat.toCssString(transform), children: handles.map((handle) => {
      return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
        HandleWrapper,
        {
          shapeId,
          handle,
          zoom: zoomLevel,
          isCoarse
        },
        handle.id
      );
    }) }) });
  }
  function HandleWrapper({
    shapeId,
    handle,
    zoom,
    isCoarse
  }) {
    const events = useHandleEvents(shapeId, handle.id);
    const { Handle } = useEditorComponents();
    if (!Handle) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("g", { "aria-label": "handle", transform: `translate(${handle.x}, ${handle.y})`, ...events, children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Handle, { shapeId, handle, zoom, isCoarse }) });
  }
  function ShapesWithSVGs() {
    const editor = useEditor();
    const renderingShapes = useValue("rendering shapes", () => editor.getRenderingShapes(), [editor]);
    return renderingShapes.map((result) => /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(import_react24.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Shape, { ...result }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(DebugSvgCopy, { id: result.id, mode: "iframe" })
    ] }, result.id + "_fragment"));
  }
  function ReflowIfNeeded() {
    const editor = useEditor();
    const culledShapesRef = (0, import_react24.useRef)(/* @__PURE__ */ new Set());
    useQuickReactor(
      "reflow for culled shapes",
      () => {
        const culledShapes = editor.getCulledShapes();
        if (culledShapesRef.current.size === culledShapes.size && [...culledShapes].every((id) => culledShapesRef.current.has(id)))
          return;
        culledShapesRef.current = culledShapes;
        const canvas = document.getElementsByClassName("tl-canvas");
        if (canvas.length === 0) return;
        const _height = canvas[0].offsetHeight;
      },
      [editor]
    );
    return null;
  }
  function ShapesToDisplay() {
    const editor = useEditor();
    const renderingShapes = useValue("rendering shapes", () => editor.getRenderingShapes(), [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(import_jsx_runtime11.Fragment, { children: [
      renderingShapes.map((result) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Shape, { ...result }, result.id + "_shape")),
      tlenv.isSafari && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(ReflowIfNeeded, {})
    ] });
  }
  function HintedShapeIndicator() {
    const editor = useEditor();
    const { ShapeIndicator } = useEditorComponents();
    const ids = useValue("hinting shape ids", () => dedupe(editor.getHintingShapeIds()), [editor]);
    if (!ids.length) return null;
    if (!ShapeIndicator) return null;
    return ids.map((id) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(ShapeIndicator, { className: "tl-user-indicator__hint", shapeId: id }, id + "_hinting"));
  }
  function CursorDef() {
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("g", { id: useSharedSafeId("cursor"), children: [
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("g", { fill: "rgba(0,0,0,.2)", transform: "translate(-11,-11)", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("g", { fill: "white", transform: "translate(-12,-12)", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("g", { fill: "currentColor", transform: "translate(-12,-12)", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("path", { d: "m19.751 24.4155-1.844.774-3.1-7.374 1.841-.775z" }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("path", { d: "m13 10.814v11.188l2.969-2.866.428-.139h4.768z" })
      ] })
    ] });
  }
  function CollaboratorHintDef() {
    const cursorHintId = useSharedSafeId("cursor_hint");
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("path", { id: cursorHintId, fill: "currentColor", d: "M -2,-5 2,0 -2,5 Z" });
  }
  function DebugSvgCopy({ id, mode }) {
    const editor = useEditor();
    const [image, setImage] = (0, import_react24.useState)(null);
    const isInRoot = useValue(
      "is in root",
      () => {
        const shape = editor.getShape(id);
        return shape?.parentId === editor.getCurrentPageId();
      },
      [editor, id]
    );
    (0, import_react24.useEffect)(() => {
      if (!isInRoot) return;
      let latest = null;
      const unsubscribe = react("shape to svg", async () => {
        const renderId = Math.random();
        latest = renderId;
        const isSingleFrame = editor.isShapeOfType(id, "frame");
        const padding = isSingleFrame ? 0 : 10;
        let bounds = editor.getShapePageBounds(id);
        if (!bounds) return;
        bounds = bounds.clone().expandBy(padding);
        const result = await editor.getSvgString([id], {
          padding,
          background: editor.getInstanceState().exportBackground
        });
        if (latest !== renderId || !result) return;
        const svgDataUrl = `data:image/svg+xml;utf8,${encodeURIComponent(result.svg)}`;
        setImage({ src: svgDataUrl, bounds });
      });
      return () => {
        latest = null;
        unsubscribe();
      };
    }, [editor, id, isInRoot]);
    if (!isInRoot || !image) return null;
    if (mode === "iframe") {
      return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
        "iframe",
        {
          src: image.src,
          width: image.bounds.width,
          height: image.bounds.height,
          referrerPolicy: "no-referrer",
          style: {
            position: "absolute",
            top: 0,
            left: 0,
            border: "none",
            transform: `translate(${image.bounds.x}px, ${image.bounds.maxY + 12}px)`,
            outline: "1px solid black",
            maxWidth: "none"
          }
        }
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      "img",
      {
        src: image.src,
        width: image.bounds.width,
        height: image.bounds.height,
        referrerPolicy: "no-referrer",
        style: {
          position: "absolute",
          top: 0,
          left: 0,
          transform: `translate(${image.bounds.x}px, ${image.bounds.maxY + 12}px)`,
          outline: "1px solid black",
          maxWidth: "none"
        }
      }
    );
  }
  function SelectionForegroundWrapper() {
    const editor = useEditor();
    const selectionRotation = useValue("selection rotation", () => editor.getSelectionRotation(), [
      editor
    ]);
    const selectionBounds = useValue(
      "selection bounds",
      () => editor.getSelectionRotatedPageBounds(),
      [editor]
    );
    const { SelectionForeground } = useEditorComponents();
    if (!selectionBounds || !SelectionForeground) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(SelectionForeground, { bounds: selectionBounds, rotation: selectionRotation });
  }
  function SelectionBackgroundWrapper() {
    const editor = useEditor();
    const selectionRotation = useValue("selection rotation", () => editor.getSelectionRotation(), [
      editor
    ]);
    const selectionBounds = useValue(
      "selection bounds",
      () => editor.getSelectionRotatedPageBounds(),
      [editor]
    );
    const { SelectionBackground } = useEditorComponents();
    if (!selectionBounds || !SelectionBackground) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(SelectionBackground, { bounds: selectionBounds, rotation: selectionRotation });
  }
  function OnTheCanvasWrapper() {
    const { OnTheCanvas } = useEditorComponents();
    if (!OnTheCanvas) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(OnTheCanvas, {});
  }
  function MovingCameraHitTestBlocker() {
    const editor = useEditor();
    const cameraState = useValue("camera state", () => editor.getCameraState(), [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      "div",
      {
        className: (0, import_classnames.default)("tl-hit-test-blocker", {
          "tl-hit-test-blocker__hidden": cameraState === "idle"
        })
      }
    );
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultCollaboratorHint.mjs
  var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
  var import_classnames2 = __toESM(require_classnames(), 1);
  var import_react25 = __toESM(require_react(), 1);
  function DefaultCollaboratorHint({
    className,
    zoom,
    point,
    color,
    viewport,
    opacity = 1
  }) {
    const rSvg = (0, import_react25.useRef)(null);
    useTransform(
      rSvg,
      clamp(point.x, viewport.minX + 5 / zoom, viewport.maxX - 5 / zoom),
      clamp(point.y, viewport.minY + 5 / zoom, viewport.maxY - 5 / zoom),
      1 / zoom,
      Vec.Angle(viewport.center, point)
    );
    const cursorHintId = useSharedSafeId("cursor_hint");
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("svg", { ref: rSvg, className: (0, import_classnames2.default)("tl-overlays__item", className), children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "use",
        {
          href: `#${cursorHintId}`,
          color,
          strokeWidth: 3,
          stroke: "var(--color-background)"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("use", { href: `#${cursorHintId}`, color, opacity })
    ] });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultCursor.mjs
  var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
  var import_classnames3 = __toESM(require_classnames(), 1);
  var import_react26 = __toESM(require_react(), 1);
  var DefaultCursor = (0, import_react26.memo)(function DefaultCursor2({
    className,
    zoom,
    point,
    color,
    name,
    chatMessage
  }) {
    const rCursor = (0, import_react26.useRef)(null);
    useTransform(rCursor, point?.x, point?.y, 1 / zoom);
    const cursorId = useSharedSafeId("cursor");
    if (!point) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { ref: rCursor, className: (0, import_classnames3.default)("tl-overlays__item", className), children: [
      /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("svg", { className: "tl-cursor", children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("use", { href: `#${cursorId}`, color }) }),
      chatMessage ? /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(import_jsx_runtime13.Fragment, { children: [
        name && /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "tl-nametag-title", style: { color }, children: name }),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "tl-nametag-chat", style: { backgroundColor: color }, children: chatMessage })
      ] }) : name && /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "tl-nametag", style: { backgroundColor: color }, children: name })
    ] });
  });

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultGrid.mjs
  var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
  function DefaultGrid({ x, y, z, size: size4 }) {
    const id = useUniqueSafeId("grid");
    const editor = useEditor();
    const { gridSteps } = editor.options;
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("svg", { className: "tl-grid", version: "1.1", xmlns: "http://www.w3.org/2000/svg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("defs", { children: gridSteps.map(({ min: min3, mid, step }, i) => {
        const s = step * size4 * z;
        const xo = 0.5 + x * z;
        const yo = 0.5 + y * z;
        const gxo = xo > 0 ? xo % s : s + xo % s;
        const gyo = yo > 0 ? yo % s : s + yo % s;
        const opacity = z < mid ? modulate(z, [min3, mid], [0, 1]) : 1;
        return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
          "pattern",
          {
            id: suffixSafeId(id, `${step}`),
            width: s,
            height: s,
            patternUnits: "userSpaceOnUse",
            children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("circle", { className: "tl-grid-dot", cx: gxo, cy: gyo, r: 1, opacity })
          },
          i
        );
      }) }),
      gridSteps.map(({ step }, i) => /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("rect", { width: "100%", height: "100%", fill: `url(#${id}_${step})` }, i))
    ] });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultHandle.mjs
  var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
  var import_classnames4 = __toESM(require_classnames(), 1);
  function DefaultHandle({ handle, isCoarse, className, zoom }) {
    const editor = useEditor();
    const br = (isCoarse ? editor.options.coarseHandleRadius : editor.options.handleRadius) / zoom;
    if (handle.type === "clone") {
      const fr2 = 3 / zoom;
      const path = `M0,${-fr2} A${fr2},${fr2} 0 0,1 0,${fr2}`;
      const index2 = SIDES.indexOf(handle.id);
      return /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("g", { className: (0, import_classnames4.default)(`tl-handle tl-handle__${handle.type}`, className), children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("circle", { className: "tl-handle__bg", r: br }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { className: "tl-handle__fg", d: path, transform: `rotate(${-90 + 90 * index2})` })
      ] });
    }
    const fr = (handle.type === "create" && isCoarse ? 3 : 4) / Math.max(zoom, 0.25);
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("g", { className: (0, import_classnames4.default)(`tl-handle tl-handle__${handle.type}`, className), children: [
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("circle", { className: "tl-handle__bg", r: br }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("circle", { className: "tl-handle__fg", r: fr })
    ] });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultHandles.mjs
  var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
  var DefaultHandles = ({ children }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("svg", { className: "tl-user-handles tl-overlays__item", children });
  };

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultLoadingScreen.mjs
  var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
  var DefaultLoadingScreen = () => {
    const { Spinner: Spinner2 } = useEditorComponents();
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(LoadingScreen, { children: Spinner2 ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Spinner2, {}) : null });
  };

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultScribble.mjs
  var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
  var import_classnames5 = __toESM(require_classnames(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/utils/getSvgPathFromPoints.mjs
  function getSvgPathFromPoints(points, closed = true) {
    const len = points.length;
    if (len < 2) {
      return "";
    }
    let a = points[0];
    let b = points[1];
    if (len === 2) {
      return `M${precise(a)}L${precise(b)}`;
    }
    let result = "";
    for (let i = 2, max2 = len - 1; i < max2; i++) {
      a = points[i];
      b = points[i + 1];
      result += average(a, b);
    }
    if (closed) {
      return `M${average(points[0], points[1])}Q${precise(points[1])}${average(
        points[1],
        points[2]
      )}T${result}${average(points[len - 1], points[0])}${average(points[0], points[1])}Z`;
    } else {
      return `M${precise(points[0])}Q${precise(points[1])}${average(points[1], points[2])}${points.length > 3 ? "T" : ""}${result}L${precise(points[len - 1])}`;
    }
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultScribble.mjs
  function DefaultScribble({ scribble, zoom, color, opacity, className }) {
    if (!scribble.points.length) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("svg", { className: className ? (0, import_classnames5.default)("tl-overlays__item", className) : className, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
      "path",
      {
        className: "tl-scribble",
        d: getSvgPathFromPoints(scribble.points, false),
        stroke: color ?? `var(--color-${scribble.color})`,
        fill: "none",
        strokeWidth: 8 / zoom,
        opacity: opacity ?? scribble.opacity
      }
    ) });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSelectionBackground.mjs
  var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
  var React7 = __toESM(require_react(), 1);
  function DefaultSelectionBackground({ bounds, rotation }) {
    const rDiv = React7.useRef(null);
    useTransform(rDiv, bounds.x, bounds.y, 1, rotation);
    React7.useLayoutEffect(() => {
      const div = rDiv.current;
      if (!div) return;
      div.style.width = toDomPrecision(Math.max(1, bounds.width)) + "px";
      div.style.height = toDomPrecision(Math.max(1, bounds.height)) + "px";
    }, [bounds.width, bounds.height]);
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { ref: rDiv, className: "tl-selection__bg", draggable: false });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSelectionForeground.mjs
  var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
  var import_classnames6 = __toESM(require_classnames(), 1);
  var import_react27 = __toESM(require_react(), 1);
  function DefaultSelectionForeground({ bounds, rotation }) {
    const editor = useEditor();
    const rSvg = (0, import_react27.useRef)(null);
    const onlyShape = useValue("only selected shape", () => editor.getOnlySelectedShape(), [editor]);
    const expandOutlineBy = onlyShape ? editor.getShapeUtil(onlyShape).expandSelectionOutlinePx(onlyShape) : 0;
    useTransform(rSvg, bounds?.x, bounds?.y, 1, rotation, {
      x: -expandOutlineBy,
      y: -expandOutlineBy
    });
    bounds = expandOutlineBy instanceof Box ? bounds.clone().expand(expandOutlineBy).zeroFix() : bounds.clone().expandBy(expandOutlineBy).zeroFix();
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
      "svg",
      {
        ref: rSvg,
        className: "tl-overlays__item tl-selection__fg",
        "data-testid": "selection-foreground",
        children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          "rect",
          {
            className: (0, import_classnames6.default)("tl-selection__fg__outline"),
            width: toDomPrecision(bounds.width),
            height: toDomPrecision(bounds.height)
          }
        )
      }
    );
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultShapeErrorFallback.mjs
  var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
  var DefaultShapeErrorFallback = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "tl-shape-error-boundary" });
  };

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultShapeIndicator.mjs
  var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
  var import_classnames7 = __toESM(require_classnames(), 1);
  var import_react28 = __toESM(require_react(), 1);
  var EvenInnererIndicator = ({ shape, util }) => {
    return useStateTracking(
      "Indicator: " + shape.type,
      () => (
        // always fetch the latest shape from the store even if the props/meta have not changed, to avoid
        // calling the render method with stale data.
        util.indicator(util.editor.store.unsafeGetWithoutCapture(shape.id))
      )
    );
  };
  var InnerIndicator = ({ editor, id }) => {
    const shape = useValue("shape for indicator", () => editor.store.get(id), [editor, id]);
    const { ShapeIndicatorErrorFallback } = useEditorComponents();
    if (!shape || shape.isLocked) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
      OptionalErrorBoundary,
      {
        fallback: ShapeIndicatorErrorFallback,
        onError: (error) => editor.annotateError(error, { origin: "react.shapeIndicator", willCrashApp: false }),
        children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(EvenInnererIndicator, { shape, util: editor.getShapeUtil(shape) }, shape.id)
      }
    );
  };
  var DefaultShapeIndicator = (0, import_react28.memo)(function DefaultShapeIndicator2({
    shapeId,
    className,
    color,
    hidden,
    opacity
  }) {
    const editor = useEditor();
    const rIndicator = (0, import_react28.useRef)(null);
    useQuickReactor(
      "indicator transform",
      () => {
        const elm = rIndicator.current;
        if (!elm) return;
        const pageTransform = editor.getShapePageTransform(shapeId);
        if (!pageTransform) return;
        elm.style.setProperty("transform", pageTransform.toCssString());
      },
      [editor, shapeId]
    );
    (0, import_react28.useLayoutEffect)(() => {
      const elm = rIndicator.current;
      if (!elm) return;
      elm.style.setProperty("display", hidden ? "none" : "block");
    }, [hidden]);
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("svg", { ref: rIndicator, className: (0, import_classnames7.default)("tl-overlays__item", className), children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("g", { className: "tl-shape-indicator", stroke: color ?? "var(--color-selected)", opacity, children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(InnerIndicator, { editor, id: shapeId }) }) });
  });

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultShapeIndicatorErrorFallback.mjs
  var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
  var DefaultShapeIndicatorErrorFallback = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("circle", { cx: 4, cy: 4, r: 8, strokeWidth: "1", stroke: "red" });
  };

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultShapeIndicators.mjs
  var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
  var import_react29 = __toESM(require_react(), 1);
  var DefaultShapeIndicators = (0, import_react29.memo)(function DefaultShapeIndicators2() {
    const editor = useEditor();
    const rPreviousSelectedShapeIds = (0, import_react29.useRef)(/* @__PURE__ */ new Set());
    const idsToDisplay = useValue(
      "should display selected ids",
      () => {
        const prev = rPreviousSelectedShapeIds.current;
        const next = /* @__PURE__ */ new Set();
        if (
          // We only show indicators when in the following states...
          editor.isInAny(
            "select.idle",
            "select.brushing",
            "select.scribble_brushing",
            "select.editing_shape",
            "select.pointing_shape",
            "select.pointing_selection",
            "select.pointing_handle"
          ) && // ...but we hide indicators when we've just changed a style (so that the user can see the change)
          !editor.getInstanceState().isChangingStyle
        ) {
          const selected = editor.getSelectedShapeIds();
          for (const id of selected) {
            next.add(id);
          }
          if (editor.isInAny("select.idle", "select.editing_shape")) {
            const instanceState = editor.getInstanceState();
            if (instanceState.isHoveringCanvas && !instanceState.isCoarsePointer) {
              const hovered = editor.getHoveredShapeId();
              if (hovered) next.add(hovered);
            }
          }
        }
        if (prev.size !== next.size) {
          rPreviousSelectedShapeIds.current = next;
          return next;
        }
        for (const id of next) {
          if (!prev.has(id)) {
            rPreviousSelectedShapeIds.current = next;
            return next;
          }
        }
        return prev;
      },
      [editor]
    );
    const renderingShapes = useValue("rendering shapes", () => editor.getRenderingShapes(), [editor]);
    const { ShapeIndicator } = useEditorComponents();
    if (!ShapeIndicator) return null;
    return renderingShapes.map(({ id }) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ShapeIndicator, { shapeId: id, hidden: !idsToDisplay.has(id) }, id + "_indicator"));
  });

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSnapIndictor.mjs
  var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
  var import_classnames8 = __toESM(require_classnames(), 1);
  var React8 = __toESM(require_react(), 1);
  function PointsSnapIndicator({ points, zoom }) {
    const l = 2.5 / zoom;
    const minX = points.reduce((acc, p) => Math.min(acc, p.x), Infinity);
    const maxX = points.reduce((acc, p) => Math.max(acc, p.x), -Infinity);
    const minY = points.reduce((acc, p) => Math.min(acc, p.y), Infinity);
    const maxY = points.reduce((acc, p) => Math.max(acc, p.y), -Infinity);
    const useNWtoSEdireciton = points.some((p) => p.x === minX && p.y === minY);
    let firstX, firstY, secondX, secondY;
    if (useNWtoSEdireciton) {
      firstX = minX;
      firstY = minY;
      secondX = maxX;
      secondY = maxY;
    } else {
      firstX = minX;
      firstY = maxY;
      secondX = maxX;
      secondY = minY;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("g", { className: "tl-snap-indicator", stroke: "lime", children: [
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("line", { x1: firstX, y1: firstY, x2: secondX, y2: secondY }),
      points.map((p, i) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("g", { transform: `translate(${p.x},${p.y})`, children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
        "path",
        {
          className: "tl-snap-point",
          d: `M ${-l},${-l} L ${l},${l} M ${-l},${l} L ${l},${-l}`
        }
      ) }, i))
    ] });
  }
  function GapsSnapIndicator({ gaps, direction, zoom }) {
    const l = 3.5 / zoom;
    let edgeIntersection = [-Infinity, Infinity];
    let nextEdgeIntersection = null;
    const horizontal = direction === "horizontal";
    for (const gap of gaps) {
      nextEdgeIntersection = rangeIntersection(
        edgeIntersection[0],
        edgeIntersection[1],
        horizontal ? gap.startEdge[0].y : gap.startEdge[0].x,
        horizontal ? gap.startEdge[1].y : gap.startEdge[1].x
      );
      if (nextEdgeIntersection) {
        edgeIntersection = nextEdgeIntersection;
      } else {
        continue;
      }
      nextEdgeIntersection = rangeIntersection(
        edgeIntersection[0],
        edgeIntersection[1],
        horizontal ? gap.endEdge[0].y : gap.endEdge[0].x,
        horizontal ? gap.endEdge[1].y : gap.endEdge[1].x
      );
      if (nextEdgeIntersection) {
        edgeIntersection = nextEdgeIntersection;
      } else {
        continue;
      }
    }
    if (edgeIntersection === null) {
      return null;
    }
    const midPoint2 = (edgeIntersection[0] + edgeIntersection[1]) / 2;
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("g", { className: "tl-snap-indicator", stroke: "cyan", children: gaps.map(({ startEdge, endEdge }, i) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(React8.Fragment, { children: horizontal ? (
      // horizontal gap
      /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(import_jsx_runtime25.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          "line",
          {
            x1: startEdge[0].x,
            y1: midPoint2 - 2 * l,
            x2: startEdge[1].x,
            y2: midPoint2 + 2 * l
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          "line",
          {
            x1: endEdge[0].x,
            y1: midPoint2 - 2 * l,
            x2: endEdge[1].x,
            y2: midPoint2 + 2 * l
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("line", { x1: startEdge[0].x, y1: midPoint2, x2: endEdge[0].x, y2: midPoint2 }),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          "line",
          {
            x1: (startEdge[0].x + endEdge[0].x) / 2,
            y1: midPoint2 - l,
            x2: (startEdge[0].x + endEdge[0].x) / 2,
            y2: midPoint2 + l
          }
        )
      ] })
    ) : (
      // vertical gap
      /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(import_jsx_runtime25.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          "line",
          {
            x1: midPoint2 - 2 * l,
            y1: startEdge[0].y,
            x2: midPoint2 + 2 * l,
            y2: startEdge[1].y
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          "line",
          {
            x1: midPoint2 - 2 * l,
            y1: endEdge[0].y,
            x2: midPoint2 + 2 * l,
            y2: endEdge[1].y
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("line", { x1: midPoint2, y1: startEdge[0].y, x2: midPoint2, y2: endEdge[0].y }),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          "line",
          {
            x1: midPoint2 - l,
            y1: (startEdge[0].y + endEdge[0].y) / 2,
            x2: midPoint2 + l,
            y2: (startEdge[0].y + endEdge[0].y) / 2
          }
        )
      ] })
    ) }, i)) });
  }
  function DefaultSnapIndicator({ className, line, zoom }) {
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("svg", { className: (0, import_classnames8.default)("tl-overlays__item", className), children: line.type === "points" ? /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(PointsSnapIndicator, { ...line, zoom }) : line.type === "gaps" ? /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(GapsSnapIndicator, { ...line, zoom }) : null });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSpinner.mjs
  var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
  function DefaultSpinner() {
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("svg", { width: 16, height: 16, viewBox: "0 0 16 16", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("g", { strokeWidth: 2, fill: "none", fillRule: "evenodd", children: [
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("circle", { strokeOpacity: 0.25, cx: 8, cy: 8, r: 7, stroke: "currentColor" }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("path", { strokeLinecap: "round", d: "M15 8c0-4.5-4.5-7-7-7", stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
        "animateTransform",
        {
          attributeName: "transform",
          type: "rotate",
          from: "0 8 8",
          to: "360 8 8",
          dur: "1s",
          repeatCount: "indefinite"
        }
      ) })
    ] }) });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSvgDefs.mjs
  var DefaultSvgDefs = () => {
    return null;
  };

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useIdentity.mjs
  var import_react30 = __toESM(require_react(), 1);
  function useIdentity(value, isEqual3) {
    const ref = (0, import_react30.useRef)(value);
    if (isEqual3(value, ref.current)) {
      return ref.current;
    }
    ref.current = value;
    return value;
  }
  var areNullableArraysShallowEqual = (a, b) => {
    a ??= null;
    b ??= null;
    if (a === b) {
      return true;
    }
    if (!a || !b) {
      return false;
    }
    return areArraysShallowEqual(a, b);
  };
  function useShallowArrayIdentity(arr) {
    return useIdentity(arr, areNullableArraysShallowEqual);
  }
  var areNullableObjectsShallowEqual = (a, b) => {
    a ??= null;
    b ??= null;
    if (a === b) {
      return true;
    }
    if (!a || !b) {
      return false;
    }
    return areObjectsShallowEqual(a, b);
  };
  function useShallowObjectIdentity(obj) {
    return useIdentity(obj, areNullableObjectsShallowEqual);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useEditorComponents.mjs
  var EditorComponentsContext = (0, import_react31.createContext)(null);
  function EditorComponentsProvider({
    overrides = {},
    children
  }) {
    const _overrides = useShallowObjectIdentity(overrides);
    const value = (0, import_react31.useMemo)(
      () => ({
        Background: DefaultBackground,
        SvgDefs: DefaultSvgDefs,
        Brush: DefaultBrush,
        ZoomBrush: DefaultBrush,
        CollaboratorBrush: DefaultBrush,
        Cursor: DefaultCursor,
        CollaboratorCursor: DefaultCursor,
        CollaboratorHint: DefaultCollaboratorHint,
        CollaboratorShapeIndicator: DefaultShapeIndicator,
        Grid: DefaultGrid,
        Scribble: DefaultScribble,
        SnapIndicator: DefaultSnapIndicator,
        Handles: DefaultHandles,
        Handle: DefaultHandle,
        CollaboratorScribble: DefaultScribble,
        ErrorFallback: DefaultErrorFallback,
        ShapeErrorFallback: DefaultShapeErrorFallback,
        ShapeIndicatorErrorFallback: DefaultShapeIndicatorErrorFallback,
        Spinner: DefaultSpinner,
        SelectionBackground: DefaultSelectionBackground,
        SelectionForeground: DefaultSelectionForeground,
        ShapeIndicators: DefaultShapeIndicators,
        ShapeIndicator: DefaultShapeIndicator,
        OnTheCanvas: null,
        InFrontOfTheCanvas: null,
        Canvas: DefaultCanvas,
        LoadingScreen: DefaultLoadingScreen,
        ..._overrides
      }),
      [_overrides]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(EditorComponentsContext.Provider, { value, children });
  }
  function useEditorComponents() {
    const components = (0, import_react31.useContext)(EditorComponentsContext);
    if (!components) {
      throw new Error("useEditorComponents must be used inside of <EditorComponentsProvider />");
    }
    return components;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/utils/runtime.mjs
  var runtime = {
    openWindow(url, target) {
      window.open(url, target, "noopener noreferrer");
    },
    refreshPage() {
      window.location.reload();
    },
    async hardReset() {
      return await window.__tldraw__hardReset?.();
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/utils/hardResetEditor.mjs
  function hardResetEditor() {
    runtime.hardReset();
  }

  // node_modules/@tldraw/editor/dist-esm/lib/utils/refreshPage.mjs
  function refreshPage() {
    runtime.refreshPage();
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultErrorFallback.mjs
  var BASE_ERROR_URL = "https://github.com/tldraw/tldraw/issues/new";
  var DefaultErrorFallback = ({ error, editor }) => {
    const containerRef = (0, import_react32.useRef)(null);
    const [shouldShowError, setShouldShowError] = (0, import_react32.useState)(true);
    const [didCopy, setDidCopy] = (0, import_react32.useState)(false);
    const [shouldShowResetConfirmation, setShouldShowResetConfirmation] = (0, import_react32.useState)(false);
    let Canvas = null;
    try {
      const components = useEditorComponents();
      Canvas = components.Canvas ?? null;
    } catch {
    }
    const errorMessage = error instanceof Error ? error.message : String(error);
    const errorStack = error instanceof Error ? error.stack : null;
    const isDarkModeFromApp = useValue(
      "isDarkMode",
      () => {
        try {
          if (editor) {
            return editor.user.getIsDarkMode();
          }
        } catch {
        }
        return null;
      },
      [editor]
    );
    const [isDarkMode, setIsDarkMode] = (0, import_react32.useState)(null);
    (0, import_react32.useLayoutEffect)(() => {
      if (isDarkModeFromApp !== null) {
        setIsDarkMode(isDarkModeFromApp);
      }
      let parent = containerRef.current?.parentElement;
      let foundParentThemeClass = false;
      while (parent) {
        if (parent.classList.contains("tl-theme__dark") || parent.classList.contains("tl-theme__light")) {
          foundParentThemeClass = true;
          break;
        }
        parent = parent.parentElement;
      }
      if (foundParentThemeClass) {
        setIsDarkMode(null);
        return;
      }
      if (typeof window !== "undefined" && "matchMedia" in window) {
        setIsDarkMode(window.matchMedia("(prefers-color-scheme: dark)").matches);
      }
    }, [isDarkModeFromApp]);
    (0, import_react32.useEffect)(() => {
      if (didCopy) {
        const timeout = editor?.timers.setTimeout(() => {
          setDidCopy(false);
        }, 2e3);
        return () => clearTimeout(timeout);
      }
    }, [didCopy, editor]);
    const copyError = () => {
      const textarea = document.createElement("textarea");
      textarea.value = errorStack ?? errorMessage;
      document.body.appendChild(textarea);
      textarea.select();
      document.execCommand("copy");
      textarea.remove();
      setDidCopy(true);
    };
    const refresh = () => {
      refreshPage();
    };
    const resetLocalState = async () => {
      hardResetEditor();
    };
    const url = new URL(BASE_ERROR_URL);
    url.searchParams.set("title", errorMessage);
    url.searchParams.set("labels", `bug`);
    url.searchParams.set(
      "body",
      `Hey, I ran into an error while using tldraw:

\`\`\`js
${errorStack ?? errorMessage}
\`\`\`

My browser: ${navigator.userAgent}`
    );
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(
      "div",
      {
        ref: containerRef,
        className: (0, import_classnames9.default)(
          "tl-container tl-error-boundary",
          // error-boundary is sometimes used outside of the theme
          // container, so we need to provide it with a theme for our
          // styles to work correctly
          isDarkMode === null ? "" : isDarkMode ? "tl-theme__dark" : "tl-theme__light"
        ),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "tl-error-boundary__overlay" }),
          editor && // opportunistically attempt to render the canvas to reassure
          // the user that their document is still there. there's a good
          // chance this won't work (ie the error that we're currently
          // notifying the user about originates in the canvas) so it's
          // not a big deal if it doesn't work - in that case we just have
          // a plain grey background.
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ErrorBoundary, { onError: noop, fallback: () => null, children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(EditorProvider, { editor, children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "tl-overlay tl-error-boundary__canvas", children: Canvas ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Canvas, {}) : null }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
            "div",
            {
              className: (0, import_classnames9.default)("tl-modal", "tl-error-boundary__content", {
                "tl-error-boundary__content__expanded": shouldShowError && !shouldShowResetConfirmation
              }),
              children: shouldShowResetConfirmation ? /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(import_jsx_runtime28.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("h2", { children: "Are you sure?" }),
                /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { children: "Resetting your data will delete your drawing and cannot be undone." }),
                /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "tl-error-boundary__content__actions", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { onClick: () => setShouldShowResetConfirmation(false), children: "Cancel" }),
                  /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { className: "tl-error-boundary__reset", onClick: resetLocalState, children: "Reset data" })
                ] })
              ] }) : /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(import_jsx_runtime28.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("h2", { children: "Something went wrong" }),
                /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { children: "Please refresh the page to continue." }),
                /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("p", { children: [
                  "If you keep seeing this screen, you can create a",
                  " ",
                  /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("a", { href: url.toString(), children: "GitHub issue" }),
                  " or ask for help on",
                  " ",
                  /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("a", { href: "https://discord.gg/Cq6cPsTfNy", children: "Discord" }),
                  ". If you are still stuck, you can reset the tldraw data on your machine. This may erase the project you were working on, so try to get help first."
                ] }),
                shouldShowError && /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(import_jsx_runtime28.Fragment, { children: [
                  "Message:",
                  /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("h4", { children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("code", { children: errorMessage }) }),
                  "Stack trace:",
                  /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "tl-error-boundary__content__error", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("pre", { children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("code", { children: errorStack ?? errorMessage }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { onClick: copyError, children: didCopy ? "Copied!" : "Copy" })
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "tl-error-boundary__content__actions", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { onClick: () => setShouldShowError(!shouldShowError), children: shouldShowError ? "Hide details" : "Show details" }),
                  /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "tl-error-boundary__content__actions__group", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
                      "button",
                      {
                        className: "tl-error-boundary__reset",
                        onClick: () => setShouldShowResetConfirmation(true),
                        children: "Reset data"
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("button", { className: "tl-error-boundary__refresh", onClick: refresh, children: "Refresh Page" })
                  ] })
                ] })
              ] })
            }
          )
        ]
      }
    );
  };

  // node_modules/@tldraw/editor/dist-esm/lib/config/createTLUser.mjs
  var import_react33 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/config/TLUserPreferences.mjs
  var USER_DATA_KEY = "TLDRAW_USER_DATA_v3";
  var userTypeValidator = validation_exports.object({
    id: validation_exports.string,
    name: validation_exports.string.nullable().optional(),
    color: validation_exports.string.nullable().optional(),
    // N.B. These are duplicated in TLdrawAppUser.
    locale: validation_exports.string.nullable().optional(),
    animationSpeed: validation_exports.number.nullable().optional(),
    edgeScrollSpeed: validation_exports.number.nullable().optional(),
    colorScheme: validation_exports.literalEnum("light", "dark", "system").optional(),
    isSnapMode: validation_exports.boolean.nullable().optional(),
    isWrapMode: validation_exports.boolean.nullable().optional(),
    isDynamicSizeMode: validation_exports.boolean.nullable().optional(),
    isPasteAtCursorMode: validation_exports.boolean.nullable().optional()
  });
  var Versions13 = {
    AddAnimationSpeed: 1,
    AddIsSnapMode: 2,
    MakeFieldsNullable: 3,
    AddEdgeScrollSpeed: 4,
    AddExcalidrawSelectMode: 5,
    AddDynamicSizeMode: 6,
    AllowSystemColorScheme: 7,
    AddPasteAtCursor: 8
  };
  var CURRENT_VERSION = Math.max(...Object.values(Versions13));
  function migrateSnapshot(data) {
    if (data.version < Versions13.AddAnimationSpeed) {
      data.user.animationSpeed = 1;
    }
    if (data.version < Versions13.AddIsSnapMode) {
      data.user.isSnapMode = false;
    }
    if (data.version < Versions13.MakeFieldsNullable) {
    }
    if (data.version < Versions13.AddEdgeScrollSpeed) {
      data.user.edgeScrollSpeed = 1;
    }
    if (data.version < Versions13.AddExcalidrawSelectMode) {
      data.user.isWrapMode = false;
    }
    if (data.version < Versions13.AllowSystemColorScheme) {
      if (data.user.isDarkMode === true) {
        data.user.colorScheme = "dark";
      } else if (data.user.isDarkMode === false) {
        data.user.colorScheme = "light";
      }
      delete data.user.isDarkMode;
    }
    if (data.version < Versions13.AddDynamicSizeMode) {
      data.user.isDynamicSizeMode = false;
    }
    if (data.version < Versions13.AddPasteAtCursor) {
      data.user.isPasteAtCursorMode = false;
    }
    data.version = CURRENT_VERSION;
  }
  var USER_COLORS = [
    "#FF802B",
    "#EC5E41",
    "#F2555A",
    "#F04F88",
    "#E34BA9",
    "#BD54C6",
    "#9D5BD2",
    "#7B66DC",
    "#02B1CC",
    "#11B3A3",
    "#39B178",
    "#55B467"
  ];
  function getRandomColor() {
    return USER_COLORS[Math.floor(Math.random() * USER_COLORS.length)];
  }
  function userPrefersReducedMotion() {
    if (typeof window !== "undefined" && "matchMedia" in window) {
      return window.matchMedia?.("(prefers-reduced-motion: reduce)")?.matches ?? false;
    }
    return false;
  }
  var defaultUserPreferences = Object.freeze({
    name: "New User",
    locale: getDefaultTranslationLocale(),
    color: getRandomColor(),
    // N.B. These are duplicated in TLdrawAppUser.
    edgeScrollSpeed: 1,
    animationSpeed: userPrefersReducedMotion() ? 0 : 1,
    isSnapMode: false,
    isWrapMode: false,
    isDynamicSizeMode: false,
    isPasteAtCursorMode: false,
    colorScheme: "light"
  });
  function getFreshUserPreferences() {
    return {
      id: uniqueId(),
      color: getRandomColor()
    };
  }
  function migrateUserPreferences(userData) {
    if (userData === null || typeof userData !== "object") {
      return getFreshUserPreferences();
    }
    if (!("version" in userData) || !("user" in userData) || typeof userData.version !== "number") {
      return getFreshUserPreferences();
    }
    const snapshot = structuredClone(userData);
    migrateSnapshot(snapshot);
    try {
      return userTypeValidator.validate(snapshot.user);
    } catch {
      return getFreshUserPreferences();
    }
  }
  function loadUserPreferences() {
    const userData = JSON.parse(getFromLocalStorage(USER_DATA_KEY) || "null") ?? null;
    return migrateUserPreferences(userData);
  }
  var globalUserPreferences = atom("globalUserData", null);
  function storeUserPreferences() {
    setInLocalStorage(
      USER_DATA_KEY,
      JSON.stringify({
        version: CURRENT_VERSION,
        user: globalUserPreferences.get()
      })
    );
  }
  function setUserPreferences(user) {
    userTypeValidator.validate(user);
    globalUserPreferences.set(user);
    storeUserPreferences();
    broadcastUserPreferencesChange();
  }
  var isTest2 = typeof process !== "undefined" && false;
  var channel = typeof BroadcastChannel !== "undefined" && !isTest2 ? new BroadcastChannel("tldraw-user-sync") : null;
  channel?.addEventListener("message", (e) => {
    const data = e.data;
    if (data?.type === broadcastEventKey && data?.origin !== getBroadcastOrigin()) {
      globalUserPreferences.set(migrateUserPreferences(data.data));
    }
  });
  var _broadcastOrigin = null;
  function getBroadcastOrigin() {
    if (_broadcastOrigin === null) {
      _broadcastOrigin = uniqueId();
    }
    return _broadcastOrigin;
  }
  var broadcastEventKey = "tldraw-user-preferences-change";
  function broadcastUserPreferencesChange() {
    channel?.postMessage({
      type: broadcastEventKey,
      origin: getBroadcastOrigin(),
      data: {
        user: getUserPreferences(),
        version: CURRENT_VERSION
      }
    });
  }
  function getUserPreferences() {
    let prefs = globalUserPreferences.get();
    if (!prefs) {
      prefs = loadUserPreferences();
      setUserPreferences(prefs);
    }
    return prefs;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/config/createTLUser.mjs
  var defaultLocalStorageUserPrefs = computed(
    "defaultLocalStorageUserPrefs",
    () => getUserPreferences()
  );
  function createTLUser(opts = {}) {
    return {
      userPreferences: opts.userPreferences ?? defaultLocalStorageUserPrefs,
      setUserPreferences: opts.setUserPreferences ?? setUserPreferences
    };
  }

  // node_modules/@tldraw/editor/dist-esm/lib/editor/Editor.mjs
  var import_eventemitter3 = __toESM(require_eventemitter3(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/config/TLSessionStateSnapshot.mjs
  var import_lodash4 = __toESM(require_lodash3(), 1);
  var tabIdKey = "TLDRAW_TAB_ID_v2";
  var window2 = globalThis.window;
  function iOS() {
    if (!window2) return false;
    return ["iPad Simulator", "iPhone Simulator", "iPod Simulator", "iPad", "iPhone", "iPod"].includes(
      // eslint-disable-next-line @typescript-eslint/no-deprecated
      window2.navigator.platform
    ) || // iPad on iOS 13 detection
    tlenv.isDarwin && "ontouchend" in document;
  }
  var TAB_ID = window2 ? window2[tabIdKey] ?? getFromSessionStorage(tabIdKey) ?? `TLDRAW_INSTANCE_STATE_V1_` + uniqueId() : "<error>";
  if (window2) {
    window2[tabIdKey] = TAB_ID;
    if (iOS()) {
      setInSessionStorage(tabIdKey, TAB_ID);
    } else {
      deleteFromSessionStorage(tabIdKey);
    }
  }
  window2?.addEventListener("beforeunload", () => {
    setInSessionStorage(tabIdKey, TAB_ID);
  });
  var Versions14 = {
    Initial: 0
  };
  var CURRENT_SESSION_STATE_SNAPSHOT_VERSION = Math.max(...Object.values(Versions14));
  function migrate(snapshot) {
    if (snapshot.version < Versions14.Initial) {
    }
    snapshot.version = CURRENT_SESSION_STATE_SNAPSHOT_VERSION;
  }
  var sessionStateSnapshotValidator = validation_exports.object({
    version: validation_exports.number,
    currentPageId: pageIdValidator.optional(),
    isFocusMode: validation_exports.boolean.optional(),
    exportBackground: validation_exports.boolean.optional(),
    isDebugMode: validation_exports.boolean.optional(),
    isToolLocked: validation_exports.boolean.optional(),
    isGridMode: validation_exports.boolean.optional(),
    pageStates: validation_exports.arrayOf(
      validation_exports.object({
        pageId: pageIdValidator,
        camera: validation_exports.object({
          x: validation_exports.number,
          y: validation_exports.number,
          z: validation_exports.number
        }).optional(),
        selectedShapeIds: validation_exports.arrayOf(shapeIdValidator).optional(),
        focusedGroupId: shapeIdValidator.nullable().optional()
      })
    ).optional()
  });
  function migrateAndValidateSessionStateSnapshot(state) {
    if (!state || typeof state !== "object") {
      console.warn("Invalid instance state");
      return null;
    }
    if (!("version" in state) || typeof state.version !== "number") {
      console.warn("No version in instance state");
      return null;
    }
    if (state.version !== CURRENT_SESSION_STATE_SNAPSHOT_VERSION) {
      state = structuredClone(state);
      migrate(state);
    }
    try {
      return sessionStateSnapshotValidator.validate(state);
    } catch (e) {
      console.warn(e);
      return null;
    }
  }
  function createSessionStateSnapshotSignal(store) {
    const $allPageIds = store.query.ids("page");
    return computed(
      "sessionStateSnapshot",
      () => {
        const instanceState = store.get(TLINSTANCE_ID);
        if (!instanceState) return null;
        const allPageIds = [...$allPageIds.get()];
        return {
          version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,
          currentPageId: instanceState.currentPageId,
          exportBackground: instanceState.exportBackground,
          isFocusMode: instanceState.isFocusMode,
          isDebugMode: instanceState.isDebugMode,
          isToolLocked: instanceState.isToolLocked,
          isGridMode: instanceState.isGridMode,
          pageStates: allPageIds.map((id) => {
            const ps = store.get(InstancePageStateRecordType.createId(id));
            const camera = store.get(CameraRecordType.createId(id));
            return {
              pageId: id,
              camera: {
                x: camera?.x ?? 0,
                y: camera?.y ?? 0,
                z: camera?.z ?? 1
              },
              selectedShapeIds: ps?.selectedShapeIds ?? [],
              focusedGroupId: ps?.focusedGroupId ?? null
            };
          })
        };
      },
      { isEqual: import_lodash4.default }
    );
  }
  function loadSessionStateSnapshotIntoStore(store, snapshot, opts) {
    const res = migrateAndValidateSessionStateSnapshot(snapshot);
    if (!res) return;
    const preserved = pluckPreservingValues(store.get(TLINSTANCE_ID));
    const primary = opts?.forceOverwrite ? res : preserved;
    const secondary = opts?.forceOverwrite ? preserved : res;
    const instanceState = store.schema.types.instance.create({
      id: TLINSTANCE_ID,
      ...preserved,
      // the integrity checker will ensure that the currentPageId is valid
      currentPageId: res.currentPageId,
      isDebugMode: primary?.isDebugMode ?? secondary?.isDebugMode,
      isFocusMode: primary?.isFocusMode ?? secondary?.isFocusMode,
      isToolLocked: primary?.isToolLocked ?? secondary?.isToolLocked,
      isGridMode: primary?.isGridMode ?? secondary?.isGridMode,
      exportBackground: primary?.exportBackground ?? secondary?.exportBackground
    });
    store.atomic(() => {
      for (const ps of res.pageStates ?? []) {
        if (!store.has(ps.pageId)) continue;
        const cameraId = CameraRecordType.createId(ps.pageId);
        const instancePageState = InstancePageStateRecordType.createId(ps.pageId);
        const previousCamera = store.get(cameraId);
        const previousInstanceState = store.get(instancePageState);
        store.put([
          CameraRecordType.create({
            id: cameraId,
            x: ps.camera?.x ?? previousCamera?.x,
            y: ps.camera?.y ?? previousCamera?.y,
            z: ps.camera?.z ?? previousCamera?.z
          }),
          InstancePageStateRecordType.create({
            id: instancePageState,
            pageId: ps.pageId,
            selectedShapeIds: ps.selectedShapeIds ?? previousInstanceState?.selectedShapeIds,
            focusedGroupId: ps.focusedGroupId ?? previousInstanceState?.focusedGroupId
          })
        ]);
      }
      store.put([instanceState]);
      store.ensureStoreIsUsable();
    });
  }
  function extractSessionStateFromLegacySnapshot(store) {
    const instanceRecords = [];
    for (const record of Object.values(store)) {
      if (record.typeName?.match(/^(instance.*|pointer|camera)$/)) {
        instanceRecords.push(record);
      }
    }
    const oldInstance = instanceRecords.filter(
      (r) => r.typeName === "instance" && r.id !== TLINSTANCE_ID
    )[0];
    if (!oldInstance) return null;
    const result = {
      version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,
      currentPageId: oldInstance.currentPageId,
      exportBackground: !!oldInstance.exportBackground,
      isFocusMode: !!oldInstance.isFocusMode,
      isDebugMode: !!oldInstance.isDebugMode,
      isToolLocked: !!oldInstance.isToolLocked,
      isGridMode: false,
      pageStates: instanceRecords.filter((r) => r.typeName === "instance_page_state" && r.instanceId === oldInstance.id).map((ps) => {
        const camera = store[ps.cameraId] ?? { x: 0, y: 0, z: 1 };
        return {
          pageId: ps.pageId,
          camera: {
            x: camera.x,
            y: camera.y,
            z: camera.z
          },
          selectedShapeIds: ps.selectedShapeIds,
          focusedGroupId: ps.focusedGroupId
        };
      })
    };
    try {
      sessionStateSnapshotValidator.validate(result);
      return result;
    } catch {
      return null;
    }
  }

  // node_modules/@tldraw/editor/dist-esm/lib/config/TLEditorSnapshot.mjs
  function loadSnapshot(store, _snapshot, opts) {
    let snapshot = {};
    if ("store" in _snapshot) {
      const migrationResult = store.schema.migrateStoreSnapshot(_snapshot);
      if (migrationResult.type !== "success") {
        throw new Error("Failed to migrate store snapshot: " + migrationResult.reason);
      }
      snapshot.document = {
        schema: store.schema.serialize(),
        store: filterEntries(
          migrationResult.value,
          (_, { typeName }) => store.scopedTypes.document.has(typeName)
        )
      };
    } else {
      snapshot = _snapshot;
    }
    const preservingInstanceState = pluckPreservingValues(store.get(TLINSTANCE_ID));
    const preservingSessionState = sessionStateCache.get(store, createSessionStateSnapshotSignal).get();
    store.atomic(() => {
      if (snapshot.document) {
        store.loadStoreSnapshot(snapshot.document);
      }
      if (preservingInstanceState) {
        store.update(TLINSTANCE_ID, (r) => ({ ...r, ...preservingInstanceState }));
      }
      if (preservingSessionState) {
        loadSessionStateSnapshotIntoStore(store, preservingSessionState);
      }
      if (snapshot.session) {
        loadSessionStateSnapshotIntoStore(store, snapshot.session, {
          forceOverwrite: opts?.forceOverwriteSessionState
        });
      }
    });
  }
  var sessionStateCache = new WeakCache();
  function getSnapshot(store) {
    const sessionState$ = sessionStateCache.get(store, createSessionStateSnapshotSignal);
    const session = sessionState$.get();
    if (!session) {
      throw new Error("Session state is not ready yet");
    }
    return {
      document: store.getStoreSnapshot(),
      session
    };
  }

  // node_modules/@tldraw/editor/dist-esm/lib/config/defaultBindings.mjs
  function checkBindings(customBindings) {
    const bindings = [];
    const addedCustomBindingTypes = /* @__PURE__ */ new Set();
    for (const customBinding of customBindings) {
      if (addedCustomBindingTypes.has(customBinding.type)) {
        throw new Error(`Binding type "${customBinding.type}" is defined more than once`);
      }
      bindings.push(customBinding);
      addedCustomBindingTypes.add(customBinding.type);
    }
    return bindings;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/group/GroupShapeUtil.mjs
  var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/components/SVGContainer.mjs
  var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
  var import_classnames10 = __toESM(require_classnames(), 1);
  function SVGContainer({ children, className = "", ...rest }) {
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("svg", { ...rest, className: (0, import_classnames10.default)("tl-svg-container", className), children });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/intersect.mjs
  function intersectLineSegmentLineSegment(a1, a2, b1, b2) {
    const ABx = a1.x - b1.x;
    const ABy = a1.y - b1.y;
    const BVx = b2.x - b1.x;
    const BVy = b2.y - b1.y;
    const AVx = a2.x - a1.x;
    const AVy = a2.y - a1.y;
    const ua_t = BVx * ABy - BVy * ABx;
    const ub_t = AVx * ABy - AVy * ABx;
    const u_b = BVy * AVx - BVx * AVy;
    if (ua_t === 0 || ub_t === 0) return null;
    if (u_b === 0) return null;
    if (u_b !== 0) {
      const ua = ua_t / u_b;
      const ub = ub_t / u_b;
      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
        return Vec.AddXY(a1, ua * AVx, ua * AVy);
      }
    }
    return null;
  }
  function intersectLineSegmentCircle(a1, a2, c, r) {
    const a = (a2.x - a1.x) * (a2.x - a1.x) + (a2.y - a1.y) * (a2.y - a1.y);
    const b = 2 * ((a2.x - a1.x) * (a1.x - c.x) + (a2.y - a1.y) * (a1.y - c.y));
    const cc = c.x * c.x + c.y * c.y + a1.x * a1.x + a1.y * a1.y - 2 * (c.x * a1.x + c.y * a1.y) - r * r;
    const deter = b * b - 4 * a * cc;
    if (deter < 0) return null;
    if (deter === 0) return null;
    const e = Math.sqrt(deter);
    const u1 = (-b + e) / (2 * a);
    const u2 = (-b - e) / (2 * a);
    if ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {
      return null;
    }
    const result = [];
    if (0 <= u1 && u1 <= 1) result.push(Vec.Lrp(a1, a2, u1));
    if (0 <= u2 && u2 <= 1) result.push(Vec.Lrp(a1, a2, u2));
    if (result.length === 0) return null;
    return result;
  }
  function intersectLineSegmentPolyline(a1, a2, points) {
    const result = [];
    let segmentIntersection;
    for (let i = 0, n = points.length - 1; i < n; i++) {
      segmentIntersection = intersectLineSegmentLineSegment(a1, a2, points[i], points[i + 1]);
      if (segmentIntersection) result.push(segmentIntersection);
    }
    if (result.length === 0) return null;
    return result;
  }
  function intersectLineSegmentPolygon(a1, a2, points) {
    const result = [];
    let segmentIntersection;
    for (let i = 1, n = points.length; i < n + 1; i++) {
      segmentIntersection = intersectLineSegmentLineSegment(
        a1,
        a2,
        points[i - 1],
        points[i % points.length]
      );
      if (segmentIntersection) result.push(segmentIntersection);
    }
    if (result.length === 0) return null;
    return result;
  }
  function intersectCircleCircle(c1, r1, c2, r2) {
    let dx = c2.x - c1.x;
    let dy = c2.y - c1.y;
    const d = Math.sqrt(dx * dx + dy * dy), x = (d * d - r2 * r2 + r1 * r1) / (2 * d), y = Math.sqrt(r1 * r1 - x * x);
    dx /= d;
    dy /= d;
    return [
      new Vec(c1.x + dx * x - dy * y, c1.y + dy * x + dx * y),
      new Vec(c1.x + dx * x + dy * y, c1.y + dy * x - dx * y)
    ];
  }
  function intersectCirclePolygon(c, r, points) {
    const result = [];
    let a, b, int;
    for (let i = 0, n = points.length; i < n; i++) {
      a = points[i];
      b = points[(i + 1) % points.length];
      int = intersectLineSegmentCircle(a, b, c, r);
      if (int) result.push(...int);
    }
    if (result.length === 0) return null;
    return result;
  }
  function intersectCirclePolyline(c, r, points) {
    const result = [];
    let a, b, int;
    for (let i = 1, n = points.length; i < n; i++) {
      a = points[i - 1];
      b = points[i];
      int = intersectLineSegmentCircle(a, b, c, r);
      if (int) result.push(...int);
    }
    if (result.length === 0) return null;
    return result;
  }
  function ccw(A, B, C) {
    return (C.y - A.y) * (B.x - A.x) > (B.y - A.y) * (C.x - A.x);
  }
  function linesIntersect(A, B, C, D) {
    return ccw(A, C, D) !== ccw(B, C, D) && ccw(A, B, C) !== ccw(A, B, D);
  }
  function intersectPolygonPolygon(polygonA, polygonB) {
    const result = /* @__PURE__ */ new Map();
    let a, b, c, d;
    for (let i = 0, n = polygonA.length; i < n; i++) {
      a = polygonA[i];
      if (pointInPolygon(a, polygonB)) {
        const id = getPointId(a);
        if (!result.has(id)) {
          result.set(id, a);
        }
      }
    }
    for (let i = 0, n = polygonB.length; i < n; i++) {
      a = polygonB[i];
      if (pointInPolygon(a, polygonA)) {
        const id = getPointId(a);
        if (!result.has(id)) {
          result.set(id, a);
        }
      }
    }
    for (let i = 0, n = polygonA.length; i < n; i++) {
      a = polygonA[i];
      b = polygonA[(i + 1) % polygonA.length];
      for (let j = 0, m = polygonB.length; j < m; j++) {
        c = polygonB[j];
        d = polygonB[(j + 1) % polygonB.length];
        const intersection = intersectLineSegmentLineSegment(a, b, c, d);
        if (intersection !== null) {
          const id = getPointId(intersection);
          if (!result.has(id)) {
            result.set(id, intersection);
          }
        }
      }
    }
    if (result.size === 0) return null;
    return orderClockwise([...result.values()]);
  }
  function getPointId(point) {
    return `${point.x},${point.y}`;
  }
  function orderClockwise(points) {
    const C = Vec.Average(points);
    return points.sort((A, B) => Vec.Angle(C, A) - Vec.Angle(C, B));
  }
  function polygonsIntersect(a, b) {
    let a0, a1, b0, b1;
    for (let i = 0, n = a.length; i < n; i++) {
      a0 = a[i];
      a1 = a[(i + 1) % n];
      for (let j = 0, m = b.length; j < m; j++) {
        b0 = b[j];
        b1 = b[(j + 1) % m];
        if (linesIntersect(a0, a1, b0, b1)) return true;
      }
    }
    return false;
  }
  function polygonIntersectsPolyline(polygon, polyline) {
    let a, b, c, d;
    for (let i = 0, n = polygon.length; i < n; i++) {
      a = polygon[i];
      b = polygon[(i + 1) % n];
      for (let j = 1, m = polyline.length; j < m; j++) {
        c = polyline[j - 1];
        d = polyline[j];
        if (linesIntersect(a, b, c, d)) return true;
      }
    }
    return false;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Edge2d.mjs
  var Edge2d = class extends Geometry2d {
    start;
    end;
    d;
    u;
    ul;
    constructor(config) {
      super({ ...config, isClosed: false, isFilled: false });
      const { start, end } = config;
      this.start = start;
      this.end = end;
      this.d = start.clone().sub(end);
      this.u = this.d.clone().uni();
      this.ul = this.u.len();
    }
    getLength() {
      return this.d.len();
    }
    midPoint() {
      return this.start.lrp(this.end, 0.5);
    }
    getVertices() {
      return [this.start, this.end];
    }
    nearestPoint(point) {
      const { start, end, d, u, ul: l } = this;
      if (d.len() === 0) return start;
      if (l === 0) return start;
      const k = Vec.Sub(point, start).dpr(u) / l;
      const cx = start.x + u.x * k;
      if (cx < Math.min(start.x, end.x)) return start.x < end.x ? start : end;
      if (cx > Math.max(start.x, end.x)) return start.x > end.x ? start : end;
      const cy = start.y + u.y * k;
      if (cy < Math.min(start.y, end.y)) return start.y < end.y ? start : end;
      if (cy > Math.max(start.y, end.y)) return start.y > end.y ? start : end;
      return new Vec(cx, cy);
    }
    hitTestLineSegment(A, B, distance = 0) {
      return linesIntersect(A, B, this.start, this.end) || this.distanceToLineSegment(A, B) <= distance;
    }
    getSvgPathData(first = true) {
      const { start, end } = this;
      return `${first ? `M${start.toFixed()}` : ``} L${end.toFixed()}`;
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Polyline2d.mjs
  var Polyline2d = class extends Geometry2d {
    points;
    constructor(config) {
      super({ isClosed: false, isFilled: false, ...config });
      const { points } = config;
      this.points = points;
    }
    _segments;
    // eslint-disable-next-line no-restricted-syntax
    get segments() {
      if (!this._segments) {
        this._segments = [];
        const { vertices } = this;
        for (let i = 0, n = vertices.length - 1; i < n; i++) {
          const start = vertices[i];
          const end = vertices[i + 1];
          this._segments.push(new Edge2d({ start, end }));
        }
        if (this.isClosed) {
          this._segments.push(new Edge2d({ start: vertices[vertices.length - 1], end: vertices[0] }));
        }
      }
      return this._segments;
    }
    getLength() {
      return this.segments.reduce((acc, segment) => acc + segment.length, 0);
    }
    getVertices() {
      return this.points;
    }
    nearestPoint(A) {
      const { segments } = this;
      let nearest = this.points[0];
      let dist = Infinity;
      let p;
      let d;
      for (let i = 0; i < segments.length; i++) {
        p = segments[i].nearestPoint(A);
        d = Vec.Dist2(p, A);
        if (d < dist) {
          nearest = p;
          dist = d;
        }
      }
      if (!nearest) throw Error("nearest point not found");
      return nearest;
    }
    hitTestLineSegment(A, B, distance = 0) {
      const { segments } = this;
      for (let i = 0, n = segments.length; i < n; i++) {
        if (segments[i].hitTestLineSegment(A, B, distance)) {
          return true;
        }
      }
      return false;
    }
    getSvgPathData() {
      const { vertices } = this;
      if (vertices.length < 2) return "";
      return vertices.reduce((acc, vertex, i) => {
        if (i === 0) return `M ${vertex.x} ${vertex.y}`;
        return `${acc} L ${vertex.x} ${vertex.y}`;
      }, "");
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Polygon2d.mjs
  var Polygon2d = class extends Polyline2d {
    constructor(config) {
      super({ ...config });
      this.isClosed = true;
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Rectangle2d.mjs
  var Rectangle2d = class extends Polygon2d {
    x;
    y;
    w;
    h;
    constructor(config) {
      const { x = 0, y = 0, width, height } = config;
      super({
        ...config,
        points: [
          new Vec(x, y),
          new Vec(x + width, y),
          new Vec(x + width, y + height),
          new Vec(x, y + height)
        ]
      });
      this.x = x;
      this.y = y;
      this.w = width;
      this.h = height;
    }
    getBounds() {
      return new Box(this.x, this.y, this.w, this.h);
    }
    getSvgPathData() {
      const { x, y, w, h } = this;
      return `M${x},${y} h${w} v${h} h-${w}z`;
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/ShapeUtil.mjs
  var ShapeUtil = class {
    constructor(editor) {
      this.editor = editor;
    }
    /**
     * Props allow you to define the shape's properties in a way that the editor can understand.
     * This has two main uses:
     *
     * 1. Validation. Shapes will be validated using these props to stop bad data from being saved.
     * 2. Styles. Each {@link @tldraw/tlschema#StyleProp} in the props can be set on many shapes at
     *    once, and will be remembered from one shape to the next.
     *
     * @example
     * ```tsx
     * import {T, TLBaseShape, TLDefaultColorStyle, DefaultColorStyle, ShapeUtil} from 'tldraw'
     *
     * type MyShape = TLBaseShape<'mine', {
     *      color: TLDefaultColorStyle,
     *      text: string,
     * }>
     *
     * class MyShapeUtil extends ShapeUtil<MyShape> {
     *     static props = {
     *         // we use tldraw's built-in color style:
     *         color: DefaultColorStyle,
     *         // validate that the text prop is a string:
     *         text: T.string,
     *     }
     * }
     * ```
     */
    static props;
    /**
     * Migrations allow you to make changes to a shape's props over time. Read the
     * {@link https://www.tldraw.dev/docs/persistence#Shape-props-migrations | shape prop migrations}
     * guide for more information.
     */
    static migrations;
    /**
     * The type of the shape util, which should match the shape's type.
     *
     * @public
     */
    static type;
    /**
     * Whether the shape can be snapped to by another shape.
     *
     * @public
     */
    canSnap(_shape) {
      return true;
    }
    /**
     * Whether the shape can be scrolled while editing.
     *
     * @public
     */
    canScroll(_shape) {
      return false;
    }
    /**
     * Whether the shape can be bound to. See {@link TLShapeUtilCanBindOpts} for details.
     *
     * @public
     */
    canBind(_opts) {
      return true;
    }
    /**
     * Whether the shape can be double clicked to edit.
     *
     * @public
     */
    canEdit(_shape) {
      return false;
    }
    /**
     * Whether the shape can be resized.
     *
     * @public
     */
    canResize(_shape) {
      return true;
    }
    /**
     * Whether the shape can be edited in read-only mode.
     *
     * @public
     */
    canEditInReadOnly(_shape) {
      return false;
    }
    /**
     * Whether the shape can be cropped.
     *
     * @public
     */
    canCrop(_shape) {
      return false;
    }
    /**
     * Whether the shape participates in stacking, aligning, and distributing.
     *
     * @public
     */
    canBeLaidOut(_shape) {
      return true;
    }
    /**
     * Does this shape provide a background for its children? If this is true,
     * then any children with a `renderBackground` method will have their
     * backgrounds rendered _above_ this shape. Otherwise, the children's
     * backgrounds will be rendered above either the next ancestor that provides
     * a background, or the canvas background.
     *
     * @internal
     */
    providesBackgroundForChildren(_shape) {
      return false;
    }
    /**
     * Whether the shape should hide its resize handles when selected.
     *
     * @public
     */
    hideResizeHandles(_shape) {
      return false;
    }
    /**
     * Whether the shape should hide its rotation handles when selected.
     *
     * @public
     */
    hideRotateHandle(_shape) {
      return false;
    }
    /**
     * Whether the shape should hide its selection bounds background when selected.
     *
     * @public
     */
    hideSelectionBoundsBg(_shape) {
      return false;
    }
    /**
     * Whether the shape should hide its selection bounds foreground when selected.
     *
     * @public
     */
    hideSelectionBoundsFg(_shape) {
      return false;
    }
    /**
     * Whether the shape's aspect ratio is locked.
     *
     * @public
     */
    isAspectRatioLocked(_shape) {
      return false;
    }
    /**
     * Get whether the shape can receive children of a given type.
     *
     * @param shape - The shape.
     * @param type - The shape type.
     * @public
     */
    canReceiveNewChildrenOfType(_shape, _type) {
      return false;
    }
    /**
     * Get whether the shape can receive children of a given type.
     *
     * @param shape - The shape type.
     * @param shapes - The shapes that are being dropped.
     * @public
     */
    canDropShapes(_shape, _shapes) {
      return false;
    }
    /** @internal */
    expandSelectionOutlinePx(shape) {
      return 0;
    }
    /**
     * Return elements to be added to the \<defs\> section of the canvases SVG context. This can be
     * used to define SVG content (e.g. patterns & masks) that can be referred to by ID from svg
     * elements returned by `component`.
     *
     * Each def should have a unique `key`. If multiple defs from different shapes all have the same
     * key, only one will be used.
     */
    getCanvasSvgDefs() {
      return [];
    }
    /**
     * Get the geometry to use when snapping to this this shape in translate/resize operations. See
     * {@link BoundsSnapGeometry} for details.
     */
    getBoundsSnapGeometry(_shape) {
      return {};
    }
    /**
     * Get the geometry to use when snapping handles to this shape. See {@link HandleSnapGeometry}
     * for details.
     */
    getHandleSnapGeometry(_shape) {
      return {};
    }
    getText(_shape) {
      return void 0;
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/group/DashedOutlineBox.mjs
  var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/shared/getPerfectDashProps.mjs
  function getPerfectDashProps(totalLength, strokeWidth, opts = {}) {
    const {
      closed = false,
      snap = 1,
      start = "outset",
      end = "outset",
      lengthRatio = 2,
      style = "dashed",
      forceSolid = false
    } = opts;
    let dashLength = 0;
    let dashCount = 0;
    let ratio = 1;
    let gapLength = 0;
    let strokeDashoffset = 0;
    if (forceSolid) {
      return {
        strokeDasharray: "none",
        strokeDashoffset: "none"
      };
    }
    switch (style) {
      case "dashed": {
        ratio = 1;
        dashLength = Math.min(strokeWidth * lengthRatio, totalLength / 4);
        break;
      }
      case "dotted": {
        ratio = 100;
        dashLength = strokeWidth / ratio;
        break;
      }
      default: {
        return {
          strokeDasharray: "none",
          strokeDashoffset: "none"
        };
      }
    }
    if (!closed) {
      if (start === "outset") {
        totalLength += dashLength / 2;
        strokeDashoffset += dashLength / 2;
      } else if (start === "skip") {
        totalLength -= dashLength;
        strokeDashoffset -= dashLength;
      }
      if (end === "outset") {
        totalLength += dashLength / 2;
      } else if (end === "skip") {
        totalLength -= dashLength;
      }
    }
    dashCount = Math.floor(totalLength / dashLength / (2 * ratio));
    dashCount -= dashCount % snap;
    if (dashCount < 3 && style === "dashed") {
      if (totalLength / strokeWidth < 4) {
        dashLength = totalLength;
        dashCount = 1;
        gapLength = 0;
      } else {
        dashLength = totalLength * (1 / 3);
        gapLength = totalLength * (1 / 3);
      }
    } else {
      dashLength = totalLength / dashCount / (2 * ratio);
      if (closed) {
        strokeDashoffset = dashLength / 2;
        gapLength = (totalLength - dashCount * dashLength) / dashCount;
      } else {
        gapLength = (totalLength - dashCount * dashLength) / Math.max(1, dashCount - 1);
      }
    }
    return {
      strokeDasharray: [dashLength, gapLength].join(" "),
      strokeDashoffset: strokeDashoffset.toString()
    };
  }

  // node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/group/DashedOutlineBox.mjs
  function DashedOutlineBox({ bounds, className }) {
    const editor = useEditor();
    const zoomLevel = useValue("zoom level", () => editor.getZoomLevel(), [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("g", { className, pointerEvents: "none", strokeLinecap: "round", strokeLinejoin: "round", children: bounds.sides.map((side, i) => {
      const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
        side[0].dist(side[1]),
        1 / zoomLevel,
        {
          style: "dashed",
          lengthRatio: 4
        }
      );
      return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
        "line",
        {
          x1: side[0].x,
          y1: side[0].y,
          x2: side[1].x,
          y2: side[1].y,
          strokeDasharray,
          strokeDashoffset
        },
        i
      );
    }) });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/group/GroupShapeUtil.mjs
  var GroupShapeUtil = class extends ShapeUtil {
    static type = "group";
    static props = groupShapeProps;
    static migrations = groupShapeMigrations;
    hideSelectionBoundsFg() {
      return true;
    }
    canBind() {
      return false;
    }
    getDefaultProps() {
      return {};
    }
    getGeometry(shape) {
      const children = this.editor.getSortedChildIdsForParent(shape.id);
      if (children.length === 0) {
        return new Rectangle2d({ width: 1, height: 1, isFilled: false });
      }
      return new Group2d({
        children: children.map((childId) => {
          const shape2 = this.editor.getShape(childId);
          const geometry = this.editor.getShapeGeometry(childId);
          const points = this.editor.getShapeLocalTransform(shape2).applyToPoints(geometry.vertices);
          if (geometry.isClosed) {
            return new Polygon2d({
              points,
              isFilled: true
            });
          }
          return new Polyline2d({
            points
          });
        })
      });
    }
    component(shape) {
      const isErasing = this.editor.getErasingShapeIds().includes(shape.id);
      const { hintingShapeIds } = this.editor.getCurrentPageState();
      const isHintingOtherGroup = hintingShapeIds.length > 0 && hintingShapeIds.some(
        (id) => id !== shape.id && this.editor.isShapeOfType(this.editor.getShape(id), "group")
      );
      const isFocused = this.editor.getCurrentPageState().focusedGroupId !== shape.id;
      if (!isErasing && // always show the outline while we're erasing the group
      // show the outline while the group is focused unless something outside of the group is being hinted
      // this happens dropping shapes from a group onto some outside group
      (isFocused || isHintingOtherGroup)) {
        return null;
      }
      const bounds = this.editor.getShapeGeometry(shape).bounds;
      return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(SVGContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(DashedOutlineBox, { className: "tl-group", bounds }) });
    }
    indicator(shape) {
      const bounds = this.editor.getShapeGeometry(shape).bounds;
      return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(DashedOutlineBox, { className: "", bounds });
    }
    onChildrenChange(group) {
      const children = this.editor.getSortedChildIdsForParent(group.id);
      if (children.length === 0) {
        if (this.editor.getCurrentPageState().focusedGroupId === group.id) {
          this.editor.popFocusedGroupId();
        }
        this.editor.deleteShapes([group.id]);
        return;
      } else if (children.length === 1) {
        if (this.editor.getCurrentPageState().focusedGroupId === group.id) {
          this.editor.popFocusedGroupId();
        }
        this.editor.reparentShapes(children, group.parentId);
        this.editor.deleteShapes([group.id]);
        return;
      }
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/config/defaultShapes.mjs
  var coreShapes = [
    // created by grouping interactions, probably the corest core shape that we have
    GroupShapeUtil
  ];
  var coreShapeTypes = new Set(coreShapes.map((s) => s.type));
  function checkShapesAndAddCore(customShapes) {
    const shapes = [...coreShapes];
    const addedCustomShapeTypes = /* @__PURE__ */ new Set();
    for (const customShape of customShapes) {
      if (coreShapeTypes.has(customShape.type)) {
        throw new Error(
          `Shape type "${customShape.type}" is a core shapes type and cannot be overridden`
        );
      }
      if (addedCustomShapeTypes.has(customShape.type)) {
        throw new Error(`Shape type "${customShape.type}" is defined more than once`);
      }
      shapes.push(customShape);
      addedCustomShapeTypes.add(customShape.type);
    }
    return shapes;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/exports/exportToSvg.mjs
  var import_react_dom2 = __toESM(require_react_dom(), 1);
  var import_client = __toESM(require_client(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/exports/fetchCache.mjs
  function fetchCache(cb, init) {
    const cache = /* @__PURE__ */ new Map();
    return async function fetchCached(url) {
      const existing = cache.get(url);
      if (existing) return existing;
      const promise = (async () => {
        try {
          const response = await fetch(url, init);
          assert(response.ok);
          return await cb(response);
        } catch (err) {
          console.error(err);
          return null;
        }
      })();
      cache.set(url, promise);
      return promise;
    };
  }
  var resourceToDataUrl = fetchCache(async (response) => {
    return await FileHelpers.blobToDataUrl(await response.blob());
  });

  // node_modules/@tldraw/editor/dist-esm/lib/exports/parseCss.mjs
  var importsRegex = /@import\s+(?:"([^"]+)"|'([^']+)'|url\s*\(\s*(?:"([^"]+)"|'([^']+)'|([^'")]+))\s*\))([^;]+);/gi;
  var fontFaceRegex = /@font-face\s*{([^}]+)}/gi;
  var urlsRegex = /url\s*\(\s*(?:"([^"]+)"|'([^']+)'|([^'")]+))\s*\)/gi;
  var fontFamilyRegex = /(?:^|;)\s*font-family\s*:\s*(?:([^'"][^;\n]+)|"([^"]+)"|'([^']+)')\s*(?:;|$)/gi;
  function parseCssImports(css) {
    return Array.from(css.matchAll(importsRegex), (m) => ({
      url: m[1] || m[2] || m[3] || m[4] || m[5],
      extras: m[6]
    }));
  }
  function parseCssFontFaces(css, baseUrl) {
    return Array.from(css.matchAll(fontFaceRegex), (m) => {
      const fontFace = m[1];
      const urls = Array.from(fontFace.matchAll(urlsRegex), (m2) => {
        const original = m2[1] || m2[2] || m2[3];
        return {
          original,
          resolved: safeParseUrl(original, baseUrl)?.href ?? null
        };
      });
      const fontFamilies = new Set(
        Array.from(fontFace.matchAll(fontFamilyRegex), (m2) => (m2[1] || m2[2] || m2[3]).toLowerCase())
      );
      return { fontFace, urls, fontFamilies };
    });
  }
  function parseCssFontFamilyValue(value) {
    const valueRegex = /\s*(?:([^'"][^;\n\s,]+)|"([^"]+)"|'([^']+)')\s*/gi;
    const separatorRegex = /\s*,\s*/gi;
    const fontFamilies = /* @__PURE__ */ new Set();
    while (true) {
      const valueMatch = valueRegex.exec(value);
      if (!valueMatch) {
        break;
      }
      const fontFamily = valueMatch[1] || valueMatch[2] || valueMatch[3];
      fontFamilies.add(fontFamily.toLowerCase());
      separatorRegex.lastIndex = valueRegex.lastIndex;
      const separatorMatch = separatorRegex.exec(value);
      if (!separatorMatch) {
        break;
      }
      valueRegex.lastIndex = separatorRegex.lastIndex;
    }
    return fontFamilies;
  }
  function shouldIncludeCssProperty(property) {
    if (property.startsWith("-")) return false;
    if (property.startsWith("animation")) return false;
    if (property.startsWith("transition")) return false;
    if (property === "cursor") return false;
    if (property === "pointer-events") return false;
    if (property === "user-select") return false;
    if (property === "touch-action") return false;
    return true;
  }
  function parseCss(css, baseUrl) {
    return {
      imports: parseCssImports(css),
      fontFaces: parseCssFontFaces(css, baseUrl)
    };
  }
  function parseCssValueUrls(value) {
    return Array.from(value.matchAll(urlsRegex), (m) => ({
      original: m[0],
      url: m[1] || m[2] || m[3]
    }));
  }
  var inheritedProperties = /* @__PURE__ */ new Set([
    "border-collapse",
    "border-spacing",
    "caption-side",
    "color",
    "cursor",
    "direction",
    "empty-cells",
    "font-family",
    "font-size",
    "font-style",
    "font-variant",
    "font-weight",
    "font-size-adjust",
    "font-stretch",
    "font",
    "letter-spacing",
    "line-height",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "list-style",
    "orphans",
    "quotes",
    "tab-size",
    "text-align",
    "text-align-last",
    "text-decoration-color",
    "text-indent",
    "text-justify",
    "text-shadow",
    "text-transform",
    "visibility",
    "white-space",
    "widows",
    "word-break",
    "word-spacing",
    "word-wrap"
  ]);
  function isPropertyInherited(property) {
    return inheritedProperties.has(property);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/exports/FontEmbedder.mjs
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError = (msg2) => {
    throw TypeError(msg2);
  };
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __decoratorStart = (base) => [, , , __create2(base?.[__knownSymbol("metadata")] ?? null)];
  var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
  var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
  var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
  var __decoratorMetadata = (array2, target) => __defNormalProp(target, __knownSymbol("metadata"), array2[3]);
  var __runInitializers = (array2, flags, self2, value) => {
    for (var i = 0, fns = array2[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self2) : value = fns[i].call(self2, value);
    return value;
  };
  var __decorateElement = (array2, flags, name, decorators, target, extra) => {
    var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
    var j = k > 3 ? array2.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
    var initializers = k > 3 && (array2[j - 1] = []), extraInitializers = array2[j] || (array2[j] = []);
    var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc2(k < 4 ? target : { get [name]() {
      return __privateGet(this, extra);
    }, set [name](x) {
      return __privateSet(this, extra, x);
    } }, name));
    k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
    for (var i = decorators.length - 1; i >= 0; i--) {
      ctx = __decoratorContext(k, name, done = {}, array2[3], extraInitializers);
      if (k) {
        ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
        if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
        if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
      }
      it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
      if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
      else if (typeof it !== "object" || it === null) __typeError("Object expected");
      else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
    }
    return k || __decoratorMetadata(array2, target), desc && __defProp2(target, name, desc), p ? k ^ 4 ? extra : desc : target;
  };
  var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck = (obj, member, msg2) => member.has(obj) || __typeError("Cannot " + msg2);
  var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
  var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
  var _onFontFamilyValue_dec;
  var _init;
  _onFontFamilyValue_dec = [bind];
  var FontEmbedder = class {
    constructor() {
      __runInitializers(_init, 5, this);
      __publicField(this, "fontFacesPromise", null);
      __publicField(this, "foundFontNames", /* @__PURE__ */ new Set());
      __publicField(this, "fontFacesToEmbed", /* @__PURE__ */ new Set());
      __publicField(this, "pendingPromises", []);
    }
    startFindingCurrentDocumentFontFaces() {
      assert(!this.fontFacesPromise, "FontEmbedder already started");
      this.fontFacesPromise = getCurrentDocumentFontFaces();
    }
    onFontFamilyValue(fontFamilyValue) {
      assert(this.fontFacesPromise, "FontEmbedder not started");
      const fonts = parseCssFontFamilyValue(fontFamilyValue);
      for (const font of fonts) {
        if (this.foundFontNames.has(font)) return;
        this.foundFontNames.add(font);
        this.pendingPromises.push(
          this.fontFacesPromise.then((fontFaces) => {
            const relevantFontFaces = fontFaces.filter((fontFace) => fontFace.fontFamilies.has(font));
            for (const fontFace of relevantFontFaces) {
              if (this.fontFacesToEmbed.has(fontFace)) continue;
              this.fontFacesToEmbed.add(fontFace);
              for (const url of fontFace.urls) {
                if (!url.resolved || url.embedded) continue;
                url.embedded = resourceToDataUrl(url.resolved);
              }
            }
          })
        );
      }
    }
    async createCss() {
      await Promise.all(this.pendingPromises);
      let css = "";
      for (const fontFace of this.fontFacesToEmbed) {
        let fontFaceString = `@font-face {${fontFace.fontFace}}`;
        for (const url of fontFace.urls) {
          if (!url.embedded) continue;
          const dataUrl = await url.embedded;
          if (!dataUrl) continue;
          fontFaceString = fontFaceString.replace(url.original, dataUrl);
        }
        css += fontFaceString;
      }
      return css;
    }
  };
  _init = __decoratorStart(null);
  __decorateElement(_init, 1, "onFontFamilyValue", _onFontFamilyValue_dec, FontEmbedder);
  __decoratorMetadata(_init, FontEmbedder);
  async function getCurrentDocumentFontFaces() {
    const fontFaces = [];
    for (const styleSheet of document.styleSheets) {
      let cssRules;
      try {
        cssRules = styleSheet.cssRules;
      } catch {
      }
      if (cssRules) {
        for (const rule of styleSheet.cssRules) {
          if (rule instanceof CSSFontFaceRule) {
            fontFaces.push(parseCssFontFaces(rule.cssText, styleSheet.href ?? document.baseURI));
          } else if (rule instanceof CSSImportRule) {
            const absoluteUrl = new URL(rule.href, rule.parentStyleSheet?.href ?? document.baseURI);
            fontFaces.push(fetchCssFontFaces(absoluteUrl.href));
          }
        }
      } else if (styleSheet.href) {
        fontFaces.push(fetchCssFontFaces(styleSheet.href));
      }
    }
    return compact(await Promise.all(fontFaces)).flat();
  }
  var fetchCssFontFaces = fetchCache(async (response) => {
    const parsed = parseCss(await response.text(), response.url);
    const importedFontFaces = await Promise.all(
      parsed.imports.map(({ url }) => fetchCssFontFaces(new URL(url, response.url).href))
    );
    return [...parsed.fontFaces, ...compact(importedFontFaces).flat()];
  });

  // node_modules/@tldraw/editor/dist-esm/lib/exports/domUtils.mjs
  function getRenderedChildNodes(node) {
    if (node.shadowRoot) {
      return node.shadowRoot.childNodes;
    }
    if (isShadowSlotElement(node)) {
      const assignedNodes = node.assignedNodes();
      if (assignedNodes?.length) {
        return assignedNodes;
      }
    }
    return node.childNodes;
  }
  function* getRenderedChildren(node) {
    for (const child of getRenderedChildNodes(node)) {
      if (isElement(child)) yield child;
    }
  }
  function getWindow(node) {
    return node.ownerDocument?.defaultView ?? globalThis;
  }
  function isElement(node) {
    return node instanceof getWindow(node).Element;
  }
  function isShadowRoot(node) {
    return node instanceof getWindow(node).ShadowRoot;
  }
  function isInShadowRoot(node) {
    return "getRootNode" in node && isShadowRoot(node.getRootNode());
  }
  function isShadowSlotElement(node) {
    return isInShadowRoot(node) && node instanceof getWindow(node).HTMLSlotElement;
  }
  function elementStyle(element) {
    return element.style;
  }
  function getComputedStyle2(element, pseudoElement) {
    return getWindow(element).getComputedStyle(element, pseudoElement);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/exports/StyleEmbedder.mjs
  var NO_STYLES = {};
  var StyleEmbedder = class {
    constructor(root) {
      this.root = root;
    }
    styles = /* @__PURE__ */ new Map();
    fonts = new FontEmbedder();
    readRootElementStyles(rootElement2) {
      this.readElementStyles(rootElement2, {
        shouldRespectDefaults: false,
        shouldSkipInheritedParentStyles: false
      });
      const children = Array.from(getRenderedChildren(rootElement2));
      while (children.length) {
        const child = children.pop();
        children.push(...getRenderedChildren(child));
        this.readElementStyles(child, {
          shouldRespectDefaults: true,
          shouldSkipInheritedParentStyles: true
        });
      }
    }
    readElementStyles(element, { shouldRespectDefaults = true, shouldSkipInheritedParentStyles = true }) {
      const defaultStyles = shouldRespectDefaults ? getDefaultStylesForTagName(element.tagName.toLowerCase()) : NO_STYLES;
      const parentStyles = shouldSkipInheritedParentStyles ? this.styles.get(element.parentElement)?.self ?? NO_STYLES : NO_STYLES;
      const info = {
        self: styleFromElement(element, { defaultStyles, parentStyles }),
        before: styleFromPseudoElement(element, "::before"),
        after: styleFromPseudoElement(element, "::after")
      };
      this.styles.set(element, info);
    }
    fetchResources() {
      const promises = [];
      for (const info of this.styles.values()) {
        for (const styles of objectMapValues(info)) {
          if (!styles) continue;
          for (const [property, value] of Object.entries(styles)) {
            if (!value) continue;
            if (property === "font-family") {
              this.fonts.onFontFamilyValue(value);
            }
            const urlMatches = parseCssValueUrls(value);
            if (urlMatches.length === 0) continue;
            promises.push(
              ...urlMatches.map(async ({ url, original }) => {
                const dataUrl = await resourceToDataUrl(url) ?? "data:";
                styles[property] = value.replace(original, `url("${dataUrl}")`);
              })
            );
          }
        }
      }
      return Promise.all(promises);
    }
    // custom elements are tricky. if we serialize the dom as-is, the custom elements wont have
    // their shadow-dom contents serialized. after we've read all the styles, we need to unwrap the
    // contents of each custom elements shadow dom directly into the parent element itself.
    unwrapCustomElements() {
      const visited = /* @__PURE__ */ new Set();
      const visit = (element, clonedParent) => {
        if (visited.has(element)) return;
        visited.add(element);
        const shadowRoot = element.shadowRoot;
        if (shadowRoot) {
          const clonedCustomEl = document.createElement("div");
          this.styles.set(clonedCustomEl, this.styles.get(element));
          clonedCustomEl.setAttribute("data-tl-custom-element", element.tagName);
          (clonedParent ?? element.parentElement).appendChild(clonedCustomEl);
          for (const child of shadowRoot.childNodes) {
            if (child instanceof Element) {
              visit(child, clonedCustomEl);
            } else {
              clonedCustomEl.appendChild(child.cloneNode(true));
            }
          }
          element.remove();
        } else if (clonedParent) {
          if (element.tagName.toLowerCase() === "style") {
            return;
          }
          const clonedEl = element.cloneNode(false);
          this.styles.set(clonedEl, this.styles.get(element));
          clonedParent.appendChild(clonedEl);
          for (const child of getRenderedChildNodes(element)) {
            if (child instanceof Element) {
              visit(child, clonedEl);
            } else {
              clonedEl.appendChild(child.cloneNode(true));
            }
          }
        }
      };
      for (const element of this.styles.keys()) {
        visit(element, null);
      }
    }
    embedStyles() {
      let css = "";
      for (const [element, info] of this.styles) {
        if (info.after || info.before) {
          const className = `pseudo-${uniqueId()}`;
          element.classList.add(className);
          if (info.before) {
            css += `.${className}::before {${formatCss(info.before)}}
`;
          }
          if (info.after) {
            css += `.${className}::after {${formatCss(info.after)}}
`;
          }
        }
        const style = elementStyle(element);
        for (const [property, value] of Object.entries(info.self)) {
          if (!value) continue;
          style.setProperty(property, value);
        }
        if (style.fontKerning === "auto") {
          style.fontKerning = "normal";
        }
      }
      return css;
    }
    async getFontFaceCss() {
      return await this.fonts.createCss();
    }
    dispose() {
      destroyDefaultStyleFrame();
    }
  };
  function styleFromElement(element, { defaultStyles, parentStyles }) {
    if (element.computedStyleMap) {
      return styleFromComputedStyleMap(element.computedStyleMap(), { defaultStyles, parentStyles });
    }
    return styleFromComputedStyle(getComputedStyle2(element), { defaultStyles, parentStyles });
  }
  function styleFromPseudoElement(element, pseudo) {
    const style = getComputedStyle2(element, pseudo);
    const content = style.getPropertyValue("content");
    if (content === "" || content === "none") {
      return void 0;
    }
    return styleFromComputedStyle(style, { defaultStyles: NO_STYLES, parentStyles: NO_STYLES });
  }
  function styleFromComputedStyleMap(style, { defaultStyles, parentStyles }) {
    const styles = {};
    for (const property of style.keys()) {
      if (!shouldIncludeCssProperty(property)) continue;
      const value = style.get(property).toString();
      if (defaultStyles[property] === value) continue;
      if (parentStyles[property] === value && isPropertyInherited(property)) continue;
      styles[property] = value;
    }
    return styles;
  }
  function styleFromComputedStyle(style, { defaultStyles, parentStyles }) {
    const styles = {};
    for (const property of style) {
      if (!shouldIncludeCssProperty(property)) continue;
      const value = style.getPropertyValue(property);
      if (defaultStyles[property] === value) continue;
      if (parentStyles[property] === value && isPropertyInherited(property)) continue;
      styles[property] = value;
    }
    return styles;
  }
  function formatCss(style) {
    let cssText = "";
    for (const [property, value] of Object.entries(style)) {
      cssText += `${property}: ${value};`;
    }
    return cssText;
  }
  var defaultStyleFrame;
  var defaultStylesByTagName = {};
  function getDefaultStyleFrame() {
    if (!defaultStyleFrame) {
      const frame2 = document.createElement("iframe");
      frame2.style.display = "none";
      document.body.appendChild(frame2);
      const frameDocument = assertExists(frame2.contentDocument, "frame must have a document");
      const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      const foreignObject = document.createElementNS("http://www.w3.org/2000/svg", "foreignObject");
      svg.appendChild(foreignObject);
      frameDocument.body.appendChild(svg);
      defaultStyleFrame = { iframe: frame2, foreignObject, document: frameDocument };
    }
    return defaultStyleFrame;
  }
  function destroyDefaultStyleFrame() {
    if (defaultStyleFrame) {
      document.body.removeChild(defaultStyleFrame.iframe);
      defaultStyleFrame = void 0;
    }
  }
  var defaultStyleReadOptions = { defaultStyles: NO_STYLES, parentStyles: NO_STYLES };
  function getDefaultStylesForTagName(tagName) {
    let existing = defaultStylesByTagName[tagName];
    if (!existing) {
      const { foreignObject, document: document2 } = getDefaultStyleFrame();
      const element = document2.createElement(tagName);
      foreignObject.appendChild(element);
      existing = element.computedStyleMap ? styleFromComputedStyleMap(element.computedStyleMap(), defaultStyleReadOptions) : styleFromComputedStyle(getComputedStyle2(element), defaultStyleReadOptions);
      foreignObject.removeChild(element);
      defaultStylesByTagName[tagName] = existing;
    }
    return existing;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/exports/embedMedia.mjs
  function copyAttrs(source, target) {
    const attrs = Array.from(source.attributes);
    attrs.forEach((attr) => {
      target.setAttribute(attr.name, attr.value);
    });
  }
  function replace(original, replacement) {
    original.replaceWith(replacement);
    return replacement;
  }
  async function createImage(dataUrl, cloneAttributesFrom) {
    const image = document.createElement("img");
    if (cloneAttributesFrom) {
      copyAttrs(cloneAttributesFrom, image);
    }
    image.setAttribute("src", dataUrl ?? "data:");
    image.setAttribute("decoding", "sync");
    image.setAttribute("loading", "eager");
    try {
      await image.decode();
    } catch {
    }
    return image;
  }
  async function getCanvasReplacement(canvas) {
    try {
      const dataURL = canvas.toDataURL();
      return await createImage(dataURL, canvas);
    } catch {
      return await createImage(null, canvas);
    }
  }
  async function getVideoReplacement(video) {
    try {
      const dataUrl = await MediaHelpers.getVideoFrameAsDataUrl(video);
      return createImage(dataUrl, video);
    } catch (err) {
      console.error("Could not get video frame", err);
    }
    if (video.poster) {
      const dataUrl = await resourceToDataUrl(video.poster);
      return createImage(dataUrl, video);
    }
    return createImage(null, video);
  }
  async function embedMedia(node) {
    if (node instanceof HTMLCanvasElement) {
      return replace(node, await getCanvasReplacement(node));
    } else if (node instanceof HTMLVideoElement) {
      return replace(node, await getVideoReplacement(node));
    } else if (node instanceof HTMLImageElement) {
      const src = node.currentSrc || node.src;
      const dataUrl = await resourceToDataUrl(src);
      node.setAttribute("src", dataUrl ?? "data:");
      node.setAttribute("decoding", "sync");
      node.setAttribute("loading", "eager");
      try {
        await node.decode();
      } catch {
      }
      return node;
    } else if (node instanceof HTMLInputElement) {
      node.setAttribute("value", node.value);
    } else if (node instanceof HTMLTextAreaElement) {
      node.textContent = node.value;
    }
    await Promise.all(
      Array.from(getRenderedChildren(node), (child) => embedMedia(child))
    );
  }

  // node_modules/@tldraw/editor/dist-esm/lib/exports/getSvgJsx.mjs
  var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
  var import_react36 = __toESM(require_react(), 1);
  var import_react_dom = __toESM(require_react_dom(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/editor/types/SvgExportContext.mjs
  var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
  var import_react35 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useEvent.mjs
  var import_react34 = __toESM(require_react(), 1);
  function useEvent(handler) {
    const handlerRef = (0, import_react34.useRef)();
    (0, import_react34.useLayoutEffect)(() => {
      handlerRef.current = handler;
    });
    (0, import_react34.useDebugValue)(handler);
    return (0, import_react34.useCallback)((...args) => {
      const fn = handlerRef.current;
      assert(fn, "fn does not exist");
      return fn(...args);
    }, []);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/editor/types/SvgExportContext.mjs
  var Context = (0, import_react35.createContext)(null);
  function SvgExportContextProvider({
    context,
    editor,
    children
  }) {
    const Provider = editor.options.exportProvider;
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(EditorProvider, { editor, children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(ContainerProvider, { container: editor.getContainer(), children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Context.Provider, { value: context, children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Provider, { children }) }) }) });
  }
  function useSvgExportContext() {
    return (0, import_react35.useContext)(Context);
  }
  function useDelaySvgExport() {
    const ctx = (0, import_react35.useContext)(Context);
    const [promise] = (0, import_react35.useState)(promiseWithResolve);
    (0, import_react35.useEffect)(() => {
      ctx?.waitUntil(promise);
      return () => {
        promise.resolve();
      };
    }, [promise, ctx]);
    return useEvent(() => {
      promise.resolve();
    });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/exports/ExportDelay.mjs
  var __create3 = Object.create;
  var __defProp3 = Object.defineProperty;
  var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
  var __knownSymbol2 = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError2 = (msg2) => {
    throw TypeError(msg2);
  };
  var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name2 = (target, value) => __defProp3(target, "name", { value, configurable: true });
  var __decoratorStart2 = (base) => [, , , __create3(base?.[__knownSymbol2("metadata")] ?? null)];
  var __decoratorStrings2 = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
  var __expectFn2 = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError2("Function expected") : fn;
  var __decoratorContext2 = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings2[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError2("Already initialized") : fns.push(__expectFn2(fn || null)) });
  var __decoratorMetadata2 = (array2, target) => __defNormalProp2(target, __knownSymbol2("metadata"), array2[3]);
  var __runInitializers2 = (array2, flags, self2, value) => {
    for (var i = 0, fns = array2[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self2) : value = fns[i].call(self2, value);
    return value;
  };
  var __decorateElement2 = (array2, flags, name, decorators, target, extra) => {
    var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
    var j = k > 3 ? array2.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings2[k + 5];
    var initializers = k > 3 && (array2[j - 1] = []), extraInitializers = array2[j] || (array2[j] = []);
    var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc3(k < 4 ? target : { get [name]() {
      return __privateGet2(this, extra);
    }, set [name](x) {
      return __privateSet2(this, extra, x);
    } }, name));
    k ? p && k < 4 && __name2(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name2(target, name);
    for (var i = decorators.length - 1; i >= 0; i--) {
      ctx = __decoratorContext2(k, name, done = {}, array2[3], extraInitializers);
      if (k) {
        ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn2(target, x) : (x) => name in x };
        if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet2 : __privateMethod2)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
        if (k > 2) access.set = p ? (x, y) => __privateSet2(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
      }
      it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
      if (k ^ 4 || it === void 0) __expectFn2(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
      else if (typeof it !== "object" || it === null) __typeError2("Object expected");
      else __expectFn2(fn = it.get) && (desc.get = fn), __expectFn2(fn = it.set) && (desc.set = fn), __expectFn2(fn = it.init) && initializers.unshift(fn);
    }
    return k || __decoratorMetadata2(array2, target), desc && __defProp3(target, name, desc), p ? k ^ 4 ? extra : desc : target;
  };
  var __publicField2 = (obj, key, value) => __defNormalProp2(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck2 = (obj, member, msg2) => member.has(obj) || __typeError2("Cannot " + msg2);
  var __privateIn2 = (member, obj) => Object(obj) !== obj ? __typeError2('Cannot use the "in" operator on this value') : member.has(obj);
  var __privateGet2 = (obj, member, getter) => (__accessCheck2(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateSet2 = (obj, member, value, setter) => (__accessCheck2(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod2 = (obj, member, method) => (__accessCheck2(obj, member, "access private method"), method);
  var _waitUntil_dec;
  var _init2;
  _waitUntil_dec = [bind];
  var ExportDelay = class {
    constructor(maxDelayTimeMs) {
      this.maxDelayTimeMs = maxDelayTimeMs;
      __runInitializers2(_init2, 5, this);
      __publicField2(this, "isResolved", false);
      __publicField2(this, "promisesToWaitFor", []);
    }
    waitUntil(promise) {
      if (this.isResolved) {
        throw new Error(
          "Cannot `waitUntil` - the export has already been resolved. Make sure to call `waitUntil` as soon as possible during an export - ie within the first react effect after rendering."
        );
      }
      this.promisesToWaitFor.push(
        promise.catch((err) => console.error("Error whilst waiting for export:", err))
      );
    }
    async resolvePromises() {
      let lastLength = null;
      while (this.promisesToWaitFor.length !== lastLength) {
        lastLength = this.promisesToWaitFor.length;
        await Promise.allSettled(this.promisesToWaitFor);
        await sleep(0);
      }
    }
    async resolve() {
      const timeoutPromise = sleep(this.maxDelayTimeMs).then(() => "timeout");
      const resolvePromise = this.resolvePromises().then(() => "resolved");
      const result = await Promise.race([timeoutPromise, resolvePromise]);
      if (result === "timeout") {
        console.warn("[tldraw] Export delay timed out after ${this.maxDelayTimeMs}ms");
      }
      this.isResolved = true;
    }
  };
  _init2 = __decoratorStart2(null);
  __decorateElement2(_init2, 1, "waitUntil", _waitUntil_dec, ExportDelay);
  __decoratorMetadata2(_init2, ExportDelay);

  // node_modules/@tldraw/editor/dist-esm/lib/exports/getSvgJsx.mjs
  function getSvgJsx(editor, ids, opts = {}) {
    if (!window.document) throw Error("No document");
    const {
      scale = 1,
      // should we include the background in the export? or is it transparent?
      background = false,
      padding = editor.options.defaultSvgPadding,
      preserveAspectRatio
    } = opts;
    const isDarkMode = opts.darkMode ?? editor.user.getIsDarkMode();
    const shapeIdsToInclude = editor.getShapeAndDescendantIds(ids);
    const renderingShapes = editor.getUnorderedRenderingShapes(false).filter(({ id }) => shapeIdsToInclude.has(id));
    let bbox = null;
    if (opts.bounds) {
      bbox = opts.bounds;
    } else {
      for (const { id } of renderingShapes) {
        const maskedPageBounds = editor.getShapeMaskedPageBounds(id);
        if (!maskedPageBounds) continue;
        if (bbox) {
          bbox.union(maskedPageBounds);
        } else {
          bbox = maskedPageBounds.clone();
        }
      }
    }
    if (!bbox) return;
    const singleFrameShapeId = ids.length === 1 && editor.isShapeOfType(editor.getShape(ids[0]), "frame") ? ids[0] : null;
    if (!singleFrameShapeId) {
      bbox.expandBy(padding);
    }
    const w = bbox.width * scale;
    const h = bbox.height * scale;
    try {
      document.body.focus?.();
    } catch {
    }
    const exportDelay = new ExportDelay(editor.options.maxExportDelayMs);
    const initialEffectPromise = promiseWithResolve();
    exportDelay.waitUntil(initialEffectPromise);
    const svg = /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
      SvgExport,
      {
        editor,
        preserveAspectRatio,
        scale,
        bbox,
        background,
        singleFrameShapeId,
        isDarkMode,
        renderingShapes,
        onMount: initialEffectPromise.resolve,
        waitUntil: exportDelay.waitUntil
      }
    );
    return { jsx: svg, width: w, height: h, exportDelay };
  }
  function SvgExport({
    editor,
    preserveAspectRatio,
    scale,
    bbox,
    background,
    singleFrameShapeId,
    isDarkMode,
    renderingShapes,
    onMount,
    waitUntil
  }) {
    const masksId = useUniqueSafeId();
    const theme = getDefaultColorTheme({ isDarkMode });
    const stateAtom = useAtom("export state", { defsById: {}, shapeElements: null });
    const { defsById, shapeElements } = useValue(stateAtom);
    const addExportDef = useEvent((def) => {
      stateAtom.update((state) => {
        if (hasOwnProperty(state.defsById, def.key)) return state;
        const promise = Promise.resolve(def.getElement());
        waitUntil(
          promise.then((result) => {
            stateAtom.update((state2) => ({
              ...state2,
              defsById: { ...state2.defsById, [def.key]: { pending: false, element: result } }
            }));
          })
        );
        return {
          ...state,
          defsById: { ...state.defsById, [def.key]: { pending: true, element: promise } }
        };
      });
    });
    const exportContext = (0, import_react36.useMemo)(
      () => ({
        isDarkMode,
        waitUntil,
        addExportDef
      }),
      [isDarkMode, waitUntil, addExportDef]
    );
    const didRenderRef = (0, import_react36.useRef)(false);
    (0, import_react36.useLayoutEffect)(() => {
      if (didRenderRef.current) {
        throw new Error("SvgExport should only render once - do not use with react strict mode");
      }
      didRenderRef.current = true;
      (async () => {
        const shapeDefs = {};
        const unorderedShapeElementPromises = renderingShapes.map(
          async ({ id, opacity, index: index2, backgroundIndex }) => {
            if (id === singleFrameShapeId) return [];
            const shape = editor.getShape(id);
            if (editor.isShapeOfType(shape, "group")) return [];
            const elements = [];
            const util = editor.getShapeUtil(shape);
            if (util.toSvg || util.toBackgroundSvg) {
              const [toSvgResult, toBackgroundSvgResult] = await Promise.all([
                util.toSvg?.(shape, exportContext),
                util.toBackgroundSvg?.(shape, exportContext)
              ]);
              const pageTransform = editor.getShapePageTransform(shape);
              let pageTransformString = pageTransform.toCssString();
              let scale2 = 1;
              if ("scale" in shape.props) {
                if (shape.props.scale !== 1) {
                  scale2 = shape.props.scale;
                  pageTransformString = `${pageTransformString} scale(${shape.props.scale}, ${shape.props.scale})`;
                }
              }
              const pageMask = editor.getShapeMask(shape.id);
              const shapeMask = pageMask ? Mat.From(Mat.Inverse(pageTransform)).applyToPoints(pageMask) : null;
              const shapeMaskId = suffixSafeId(masksId, shape.id);
              if (shapeMask) {
                shapeDefs[shapeMaskId] = {
                  pending: false,
                  element: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("clipPath", { id: shapeMaskId, children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                    "path",
                    {
                      d: `M${shapeMask.map(({ x, y }) => `${x / scale2},${y / scale2}`).join("L")}Z`
                    }
                  ) })
                };
              }
              if (toSvgResult) {
                elements.push({
                  zIndex: index2,
                  element: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                    "g",
                    {
                      transform: pageTransformString,
                      opacity,
                      clipPath: pageMask ? `url(#${shapeMaskId})` : void 0,
                      children: toSvgResult
                    },
                    `fg_${shape.id}`
                  )
                });
              }
              if (toBackgroundSvgResult) {
                elements.push({
                  zIndex: backgroundIndex,
                  element: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                    "g",
                    {
                      transform: pageTransformString,
                      opacity,
                      clipPath: pageMask ? `url(#${shapeMaskId})` : void 0,
                      children: toBackgroundSvgResult
                    },
                    `bg_${shape.id}`
                  )
                });
              }
            } else {
              elements.push({
                zIndex: index2,
                element: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                  ForeignObjectShape,
                  {
                    shape,
                    util,
                    component: InnerShape,
                    className: "tl-shape",
                    bbox,
                    opacity
                  },
                  `fg_${shape.id}`
                )
              });
              if (util.backgroundComponent) {
                elements.push({
                  zIndex: backgroundIndex,
                  element: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                    ForeignObjectShape,
                    {
                      shape,
                      util,
                      component: InnerShapeBackground,
                      className: "tl-shape tl-shape-background",
                      bbox,
                      opacity
                    },
                    `bg_${shape.id}`
                  )
                });
              }
            }
            return elements;
          }
        );
        const unorderedShapeElements = (await Promise.all(unorderedShapeElementPromises)).flat();
        (0, import_react_dom.flushSync)(() => {
          stateAtom.update((state) => ({
            ...state,
            shapeElements: unorderedShapeElements.sort((a, b) => a.zIndex - b.zIndex).map(({ element }) => element),
            defsById: { ...state.defsById, ...shapeDefs }
          }));
        });
      })();
    }, [bbox, editor, exportContext, masksId, renderingShapes, singleFrameShapeId, stateAtom]);
    (0, import_react36.useEffect)(() => {
      if (shapeElements === null) return;
      onMount();
    }, [onMount, shapeElements]);
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(SvgExportContextProvider, { editor, context: exportContext, children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
      "svg",
      {
        preserveAspectRatio,
        direction: "ltr",
        width: bbox.width * scale,
        height: bbox.height * scale,
        viewBox: `${bbox.minX} ${bbox.minY} ${bbox.width} ${bbox.height}`,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        style: {
          backgroundColor: background ? singleFrameShapeId ? theme.solid : theme.background : "transparent"
        },
        "data-color-mode": isDarkMode ? "dark" : "light",
        className: `tl-container tl-theme__force-sRGB ${isDarkMode ? "tl-theme__dark" : "tl-theme__light"}`,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("defs", { children: Object.entries(defsById).map(
            ([key, def]) => def.pending ? null : /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(import_react36.Fragment, { children: def.element }, key)
          ) }),
          shapeElements
        ]
      }
    ) });
  }
  function ForeignObjectShape({
    shape,
    util,
    className,
    component: Component2,
    bbox,
    opacity
  }) {
    const editor = useEditor();
    const transform = Mat.Translate(-bbox.minX, -bbox.minY).multiply(
      editor.getShapePageTransform(shape.id)
    );
    const bounds = editor.getShapeGeometry(shape.id).bounds;
    const width = Math.max(bounds.width, 1);
    const height = Math.max(bounds.height, 1);
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ErrorBoundary, { fallback: () => null, children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
      "foreignObject",
      {
        x: bbox.minX,
        y: bbox.minY,
        width: bbox.w,
        height: bbox.h,
        className: "tl-shape-foreign-object",
        children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "div",
          {
            className,
            "data-shape-type": shape.type,
            style: {
              clipPath: editor.getShapeClipPath(shape.id),
              transform: transform.toCssString(),
              width,
              height,
              opacity
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Component2, { shape, util })
          }
        )
      }
    ) });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/exports/exportToSvg.mjs
  var idCounter = 1;
  async function exportToSvg(editor, shapeIds, opts = {}) {
    const result = getSvgJsx(editor, shapeIds, opts);
    if (!result) return void 0;
    const container = editor.getContainer();
    const renderTarget = document.createElement("div");
    renderTarget.className = "tldraw-svg-export";
    renderTarget.inert = true;
    renderTarget.tabIndex = -1;
    Object.assign(renderTarget.style, {
      position: "absolute",
      top: "0px",
      left: "0px",
      width: result.width + "px",
      height: result.height + "px",
      pointerEvents: "none",
      opacity: 0
    });
    container.appendChild(renderTarget);
    const root = (0, import_client.createRoot)(renderTarget, { identifierPrefix: `export_${idCounter++}_` });
    try {
      await Promise.resolve();
      (0, import_react_dom2.flushSync)(() => {
        root.render(result.jsx);
      });
      await result.exportDelay.resolve();
      const svg = renderTarget.firstElementChild;
      assert(svg instanceof SVGSVGElement, "Expected an SVG element");
      await applyChangesToForeignObjects(svg);
      return { svg, width: result.width, height: result.height };
    } finally {
      setTimeout(() => {
        root.unmount();
        container.removeChild(renderTarget);
      }, 0);
    }
  }
  async function applyChangesToForeignObjects(svg) {
    const foreignObjectChildren = [
      ...svg.querySelectorAll("foreignObject.tl-shape-foreign-object > *")
    ];
    if (!foreignObjectChildren.length) return;
    const styleEmbedder = new StyleEmbedder(svg);
    try {
      styleEmbedder.fonts.startFindingCurrentDocumentFontFaces();
      await Promise.all(foreignObjectChildren.map((el) => embedMedia(el)));
      for (const el of foreignObjectChildren) {
        styleEmbedder.readRootElementStyles(el);
      }
      await styleEmbedder.fetchResources();
      const fontCss = await styleEmbedder.getFontFaceCss();
      styleEmbedder.unwrapCustomElements();
      const pseudoCss = styleEmbedder.embedStyles();
      if (fontCss || pseudoCss) {
        const style = document.createElementNS("http://www.w3.org/2000/svg", "style");
        style.textContent = `${fontCss}
${pseudoCss}`;
        svg.prepend(style);
      }
    } finally {
      styleEmbedder.dispose();
    }
  }

  // node_modules/@tldraw/editor/dist-esm/lib/globals/menus.mjs
  var tlmenus = {
    /**
     * A set of strings representing any open menus. When menus are open,
     * certain interactions will behave differently; for example, when a
     * draw tool is selected and a menu is open, a pointer-down will not
     * create a dot (because the user is probably trying to close the menu)
     * however a pointer-down event followed by a drag will begin drawing
     * a line (because the user is BOTH trying to close the menu AND start
     * drawing a line).
     *
     * @public
     */
    menus: atom("open menus", []),
    /**
     * Get the current open menus.
     *
     * @param contextId - An optional context to get menus for.
     *
     * @public
     */
    getOpenMenus(contextId) {
      if (contextId) return this.menus.get().filter((m) => m.endsWith("-" + contextId));
      return this.menus.get();
    },
    /**
     * Add an open menu.
     *
     * @example
     * ```ts
     * addOpenMenu('menu-id')
     * addOpenMenu('menu-id', myEditorId)
     * ```
     *
     * @param id - The id of the menu to add.
     * @param contextId - An optional context to add the menu to.
     *
     * @public
     */
    addOpenMenu(id, contextId = "") {
      const idWithContext = contextId ? `${id}-${contextId}` : id;
      const menus = new Set(this.menus.get());
      if (!menus.has(idWithContext)) {
        menus.add(idWithContext);
        this.menus.set([...menus]);
      }
    },
    /**
     * Delete an open menu.
     *
     * @example
     * ```ts
     * deleteOpenMenu('menu-id')
     * deleteOpenMenu('menu-id', myEditorId)
     * ```
     *
     * @param id - The id of the menu to delete.
     * @param contextId - An optional context to delete the menu from.
     *
     * @public
     */
    deleteOpenMenu(id, contextId = "") {
      const idWithContext = contextId ? `${id}-${contextId}` : id;
      const menus = new Set(this.menus.get());
      if (menus.has(idWithContext)) {
        menus.delete(idWithContext);
        this.menus.set([...menus]);
      }
    },
    /**
     * Clear all open menus.
     *
     * @example
     * ```ts
     * clearOpenMenus()
     * clearOpenMenus(myEditorId)
     * ```
     *
     * @param contextId - An optional context to clear menus for.
     *
     * @public
     */
    clearOpenMenus(contextId) {
      this.menus.set(contextId ? this.menus.get().filter((m) => !m.endsWith("-" + contextId)) : []);
    },
    _hiddenMenus: [],
    /**
     * Hide all open menus. Restore them with the `showOpenMenus` method.
     *
     * @example
     * ```ts
     * hideOpenMenus()
     * hideOpenMenus(myEditorId)
     * ```
     *
     * @param contextId - An optional context to hide menus for.
     *
     * @public
     */
    hideOpenMenus(contextId) {
      this._hiddenMenus = [...this.getOpenMenus(contextId)];
      if (this._hiddenMenus.length === 0) return;
      for (const menu of this._hiddenMenus) {
        this.deleteOpenMenu(menu, contextId);
      }
    },
    /**
     * Show all hidden menus.
     *
     * @example
     * ```ts
     * showOpenMenus()
     * showOpenMenus(myEditorId)
     * ```
     *
     * @param contextId - An optional context to show menus for.
     *
     * @public
     */
    showOpenMenus(contextId) {
      if (this._hiddenMenus.length === 0) return;
      for (const menu of this._hiddenMenus) {
        this.addOpenMenu(menu, contextId);
      }
      this._hiddenMenus = [];
    },
    /**
     * Get whether a menu is open for a given context.
     *
     * @example
     * ```ts
     * isMenuOpem(id, myEditorId)
     * ```
     *
     * @param id - The id of the menu to check.
     * @param contextId - An optional context to check menus for.
     *
     * @public
     */
    isMenuOpen(id, contextId) {
      return this.getOpenMenus(contextId).includes(id);
    },
    /**
     * Get whether any menus are open for a given context.
     *
     * @example
     * ```ts
     * hasOpenMenus(myEditorId)
     * ```
     *
     * @param contextId - A context to check menus for.
     *
     * @public
     */
    hasOpenMenus(contextId) {
      return this.getOpenMenus(contextId).length > 0;
    },
    /**
     * Get whether any menus are open for any context.
     *
     * @example
     * ```ts
     * hasAnyOpenMenus()
     * ```
     *
     * @public
     */
    hasAnyOpenMenus() {
      return this.getOpenMenus().length > 0;
    },
    forContext(contextId) {
      return {
        getOpenMenus: () => this.getOpenMenus(contextId),
        addOpenMenu: (id) => this.addOpenMenu(id, contextId),
        deleteOpenMenu: (id) => this.deleteOpenMenu(id, contextId),
        clearOpenMenus: () => this.clearOpenMenus(contextId),
        // Gets whether any menus are open
        isMenuOpen: (id) => this.isMenuOpen(id, contextId),
        hasOpenMenus: () => this.hasOpenMenus(contextId),
        hasAnyOpenMenus: () => this.hasAnyOpenMenus()
      };
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/globals/time.mjs
  var tltime = new Timers();

  // node_modules/@tldraw/editor/dist-esm/lib/options.mjs
  var import_react37 = __toESM(require_react(), 1);
  var defaultTldrawOptions = {
    maxShapesPerPage: 4e3,
    maxFilesAtOnce: 100,
    maxPages: 40,
    animationMediumMs: 320,
    followChaseViewportSnap: 2,
    doubleClickDurationMs: 450,
    multiClickDurationMs: 200,
    coarseDragDistanceSquared: 36,
    // 6 squared
    dragDistanceSquared: 16,
    // 4 squared
    defaultSvgPadding: 32,
    cameraSlideFriction: 0.09,
    maxPointsPerDrawShape: 500,
    gridSteps: [
      { min: -1, mid: 0.15, step: 64 },
      { min: 0.05, mid: 0.375, step: 16 },
      { min: 0.15, mid: 1, step: 4 },
      { min: 0.7, mid: 2.5, step: 1 }
    ],
    collaboratorInactiveTimeoutMs: 6e4,
    collaboratorIdleTimeoutMs: 3e3,
    collaboratorCheckIntervalMs: 1200,
    cameraMovingTimeoutMs: 64,
    hitTestMargin: 8,
    edgeScrollDelay: 200,
    edgeScrollEaseDuration: 200,
    edgeScrollSpeed: 25,
    edgeScrollDistance: 8,
    coarsePointerWidth: 12,
    coarseHandleRadius: 20,
    handleRadius: 12,
    longPressDurationMs: 500,
    textShadowLod: 0.35,
    adjacentShapeMargin: 10,
    flattenImageBoundsExpand: 64,
    flattenImageBoundsPadding: 16,
    laserDelayMs: 1200,
    maxExportDelayMs: 5e3,
    temporaryAssetPreviewLifetimeMs: 18e4,
    actionShortcutsLocation: "swap",
    createTextOnCanvasDoubleClick: true,
    exportProvider: import_react37.Fragment
  };

  // node_modules/@tldraw/editor/dist-esm/lib/utils/SharedStylesMap.mjs
  function sharedStyleEquals(a, b) {
    if (!b) return false;
    switch (a.type) {
      case "mixed":
        return b.type === "mixed";
      case "shared":
        return b.type === "shared" && a.value === b.value;
      default:
        throw exhaustiveSwitchError(a);
    }
  }
  var ReadonlySharedStyleMap = class {
    /** @internal */
    map;
    constructor(entries) {
      this.map = new Map(entries);
    }
    get(prop) {
      return this.map.get(prop);
    }
    getAsKnownValue(prop) {
      const value = this.get(prop);
      if (!value) return void 0;
      if (value.type === "mixed") return void 0;
      return value.value;
    }
    // eslint-disable-next-line no-restricted-syntax
    get size() {
      return this.map.size;
    }
    equals(other) {
      if (this.size !== other.size) return false;
      const checkedKeys = /* @__PURE__ */ new Set();
      for (const [styleProp, value] of this) {
        if (!sharedStyleEquals(value, other.get(styleProp))) return false;
        checkedKeys.add(styleProp);
      }
      for (const [styleProp, value] of other) {
        if (checkedKeys.has(styleProp)) continue;
        if (!sharedStyleEquals(value, this.get(styleProp))) return false;
      }
      return true;
    }
    keys() {
      return this.map.keys();
    }
    values() {
      return this.map.values();
    }
    entries() {
      return this.map.entries();
    }
    [Symbol.iterator]() {
      return this.map[Symbol.iterator]();
    }
  };
  var SharedStyleMap = class extends ReadonlySharedStyleMap {
    set(prop, value) {
      this.map.set(prop, value);
    }
    applyValue(prop, value) {
      const existingValue = this.get(prop);
      if (!existingValue) {
        this.set(prop, { type: "shared", value });
        return;
      }
      switch (existingValue.type) {
        case "mixed":
          return;
        case "shared":
          if (existingValue.value !== value) {
            this.set(prop, { type: "mixed" });
          }
          return;
        default:
          exhaustiveSwitchError(existingValue, "type");
      }
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/utils/assets.mjs
  function dataUrlToFile(url, filename, mimeType) {
    return fetch(url).then(function(res) {
      return res.arrayBuffer();
    }).then(function(buf) {
      return new File([buf], filename, { type: mimeType });
    });
  }
  var CDN_BASE_URL = "https://cdn.tldraw.com";
  function getDefaultCdnBaseUrl() {
    return `${CDN_BASE_URL}/${version}`;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/utils/deepLinks.mjs
  function createDeepLinkString(deepLink) {
    switch (deepLink.type) {
      case "shapes": {
        const ids = deepLink.shapeIds.map((id) => encodeId(id.slice("shape:".length)));
        return `s${ids.join(".")}`;
      }
      case "page": {
        return "p" + encodeId(PageRecordType.parseId(deepLink.pageId));
      }
      case "viewport": {
        const { bounds, pageId } = deepLink;
        let res = `v${Math.round(bounds.x)}.${Math.round(bounds.y)}.${Math.round(bounds.w)}.${Math.round(bounds.h)}`;
        if (pageId) {
          res += "." + encodeId(PageRecordType.parseId(pageId));
        }
        return res;
      }
      default:
        exhaustiveSwitchError(deepLink);
    }
  }
  function parseDeepLinkString(deepLinkString) {
    const type = deepLinkString[0];
    switch (type) {
      case "s": {
        const shapeIds = deepLinkString.slice(1).split(".").filter(Boolean).map((id) => createShapeId(decodeURIComponent(id)));
        return { type: "shapes", shapeIds };
      }
      case "p": {
        const pageId = PageRecordType.createId(decodeURIComponent(deepLinkString.slice(1)));
        return { type: "page", pageId };
      }
      case "v": {
        const [x, y, w, h, pageId] = deepLinkString.slice(1).split(".");
        return {
          type: "viewport",
          bounds: new Box(Number(x), Number(y), Number(w), Number(h)),
          pageId: pageId ? PageRecordType.createId(decodeURIComponent(pageId)) : void 0
        };
      }
      default:
        throw Error("Invalid deep link string");
    }
  }
  function encodeId(str) {
    return encodeURIComponent(str).replace(/\./g, "%2E");
  }

  // node_modules/@tldraw/editor/dist-esm/lib/utils/getIncrementedName.mjs
  function getIncrementedName(name, others) {
    let result = name;
    const set = new Set(others);
    while (set.has(result)) {
      result = /^.*(\d+)$/.exec(result)?.[1] ? result.replace(/(\d+)(?=\D?)$/, (m) => {
        return (+m + 1).toString();
      }) : `${result} 1`;
    }
    return result;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/utils/reorderShapes.mjs
  function getReorderingShapesChanges(editor, operation, ids, opts) {
    if (ids.length === 0) return [];
    const parents = /* @__PURE__ */ new Map();
    for (const shape of compact(ids.map((id) => editor.getShape(id)))) {
      const { parentId } = shape;
      if (!parents.has(parentId)) {
        parents.set(parentId, {
          children: compact(
            editor.getSortedChildIdsForParent(parentId).map((id) => editor.getShape(id))
          ),
          moving: /* @__PURE__ */ new Set()
        });
      }
      parents.get(parentId).moving.add(shape);
    }
    const changes = [];
    switch (operation) {
      case "toBack": {
        parents.forEach(({ moving, children }) => reorderToBack(moving, children, changes));
        break;
      }
      case "toFront": {
        parents.forEach(({ moving, children }) => reorderToFront(moving, children, changes));
        break;
      }
      case "forward": {
        parents.forEach(
          ({ moving, children }) => reorderForward(editor, moving, children, changes, opts)
        );
        break;
      }
      case "backward": {
        parents.forEach(
          ({ moving, children }) => reorderBackward(editor, moving, children, changes, opts)
        );
        break;
      }
    }
    return changes;
  }
  function reorderToBack(moving, children, changes) {
    const len = children.length;
    if (moving.size === len) return;
    let below;
    let above;
    for (let i = 0; i < len; i++) {
      const shape = children[i];
      if (moving.has(shape)) {
        below = shape.index;
        moving.delete(shape);
      } else {
        above = shape.index;
        break;
      }
    }
    if (moving.size === 0) {
      return;
    } else {
      const indices = getIndicesBetween(below, above, moving.size);
      changes.push(
        ...Array.from(moving.values()).sort(sortByIndex).map((shape, i) => ({ ...shape, index: indices[i] }))
      );
    }
  }
  function reorderToFront(moving, children, changes) {
    const len = children.length;
    if (moving.size === len) return;
    let below;
    let above;
    for (let i = len - 1; i > -1; i--) {
      const shape = children[i];
      if (moving.has(shape)) {
        above = shape.index;
        moving.delete(shape);
      } else {
        below = shape.index;
        break;
      }
    }
    if (moving.size === 0) {
      return;
    } else {
      const indices = getIndicesBetween(below, above, moving.size);
      changes.push(
        ...Array.from(moving.values()).sort(sortByIndex).map((shape, i) => ({ ...shape, index: indices[i] }))
      );
    }
  }
  function getVerticesInPageSpace(editor, shape) {
    const geo = editor.getShapeGeometry(shape);
    const pageTransform = editor.getShapePageTransform(shape);
    if (!geo || !pageTransform) return null;
    return pageTransform.applyToPoints(geo.vertices);
  }
  function getOverlapChecker(editor, moving) {
    const movingVertices = Array.from(moving).map((shape) => {
      const vertices = getVerticesInPageSpace(editor, shape);
      if (!vertices) return null;
      return { shape, vertices };
    }).filter(Boolean);
    const isOverlapping = (child) => {
      const vertices = getVerticesInPageSpace(editor, child);
      if (!vertices) return false;
      return movingVertices.some((other) => {
        return polygonsIntersect(other.vertices, vertices);
      });
    };
    return isOverlapping;
  }
  function reorderForward(editor, moving, children, changes, opts) {
    const isOverlapping = getOverlapChecker(editor, moving);
    const len = children.length;
    if (moving.size === len) return;
    let state = { name: "skipping" };
    for (let i = 0; i < len; i++) {
      const isMoving = moving.has(children[i]);
      switch (state.name) {
        case "skipping": {
          if (!isMoving) continue;
          state = { name: "selecting", selectIndex: i };
          break;
        }
        case "selecting": {
          if (isMoving) continue;
          if (!opts?.considerAllShapes && !isOverlapping(children[i])) continue;
          const { selectIndex } = state;
          getIndicesBetween(children[i].index, children[i + 1]?.index, i - selectIndex).forEach(
            (index2, k) => {
              const child = children[selectIndex + k];
              if (!moving.has(child)) return;
              changes.push({ ...child, index: index2 });
            }
          );
          state = { name: "skipping" };
          break;
        }
      }
    }
  }
  function reorderBackward(editor, moving, children, changes, opts) {
    const isOverlapping = getOverlapChecker(editor, moving);
    const len = children.length;
    if (moving.size === len) return;
    let state = { name: "skipping" };
    for (let i = len - 1; i > -1; i--) {
      const isMoving = moving.has(children[i]);
      switch (state.name) {
        case "skipping": {
          if (!isMoving) continue;
          state = { name: "selecting", selectIndex: i };
          break;
        }
        case "selecting": {
          if (isMoving) continue;
          if (!opts?.considerAllShapes && !isOverlapping(children[i])) continue;
          getIndicesBetween(children[i - 1]?.index, children[i].index, state.selectIndex - i).forEach(
            (index2, k) => {
              const child = children[i + k + 1];
              if (!moving.has(child)) return;
              changes.push({ ...child, index: index2 });
            }
          );
          state = { name: "skipping" };
          break;
        }
      }
    }
  }

  // node_modules/@tldraw/editor/dist-esm/lib/utils/rotation.mjs
  function getRotationSnapshot({
    editor,
    ids
  }) {
    const shapes = compact(ids.map((id) => editor.getShape(id)));
    const rotation = editor.getShapesSharedRotation(ids);
    const rotatedPageBounds = editor.getShapesRotatedPageBounds(ids);
    if (!rotatedPageBounds) {
      return null;
    }
    const pageCenter = rotatedPageBounds.center.clone().rotWith(rotatedPageBounds.point, rotation);
    return {
      pageCenter,
      initialCursorAngle: pageCenter.angle(editor.inputs.originPagePoint),
      initialShapesRotation: rotation,
      shapeSnapshots: shapes.map((shape) => ({
        shape,
        initialPagePoint: editor.getShapePageTransform(shape.id).point()
      }))
    };
  }
  function applyRotationToSnapshotShapes({
    delta,
    editor,
    snapshot,
    stage,
    centerOverride
  }) {
    const { pageCenter, shapeSnapshots } = snapshot;
    editor.updateShapes(
      shapeSnapshots.map(({ shape, initialPagePoint }) => {
        const parentTransform = isShapeId(shape.parentId) ? editor.getShapePageTransform(shape.parentId) : Mat.Identity();
        const newPagePoint = Vec.RotWith(initialPagePoint, centerOverride ?? pageCenter, delta);
        const newLocalPoint = Mat.applyToPoint(
          // use the current parent transform in case it has moved/resized since the start
          // (e.g. if rotating a shape at the edge of a group)
          Mat.Inverse(parentTransform),
          newPagePoint
        );
        const newRotation = canonicalizeRotation(shape.rotation + delta);
        return {
          id: shape.id,
          type: shape.type,
          x: newLocalPoint.x,
          y: newLocalPoint.y,
          rotation: newRotation
        };
      })
    );
    const changes = [];
    shapeSnapshots.forEach(({ shape }) => {
      const current = editor.getShape(shape.id);
      if (!current) return;
      const util = editor.getShapeUtil(shape);
      if (stage === "start" || stage === "one-off") {
        const changeStart = util.onRotateStart?.(shape);
        if (changeStart) changes.push(changeStart);
      }
      const changeUpdate = util.onRotate?.(shape, current);
      if (changeUpdate) changes.push(changeUpdate);
      if (stage === "end" || stage === "one-off") {
        const changeEnd = util.onRotateEnd?.(shape, current);
        if (changeEnd) changes.push(changeEnd);
      }
    });
    if (changes.length > 0) {
      editor.updateShapes(changes);
    }
  }

  // node_modules/@tldraw/editor/dist-esm/lib/editor/derivations/bindingsIndex.mjs
  var bindingsIndex = (editor) => {
    const { store } = editor;
    const bindingsHistory = store.query.filterHistory("binding");
    const bindingsQuery = store.query.records("binding");
    function fromScratch() {
      const allBindings = bindingsQuery.get();
      const shape2Binding = /* @__PURE__ */ new Map();
      for (const binding of allBindings) {
        const { fromId, toId } = binding;
        const bindingsForFromShape = shape2Binding.get(fromId);
        if (!bindingsForFromShape) {
          shape2Binding.set(fromId, [binding]);
        } else {
          bindingsForFromShape.push(binding);
        }
        const bindingsForToShape = shape2Binding.get(toId);
        if (!bindingsForToShape) {
          shape2Binding.set(toId, [binding]);
        } else {
          bindingsForToShape.push(binding);
        }
      }
      return shape2Binding;
    }
    return computed("arrowBindingsIndex", (_lastValue, lastComputedEpoch) => {
      if (isUninitialized(_lastValue)) {
        return fromScratch();
      }
      const lastValue = _lastValue;
      const diff = bindingsHistory.getDiffSince(lastComputedEpoch);
      if (diff === RESET_VALUE) {
        return fromScratch();
      }
      let nextValue = void 0;
      function removingBinding(binding) {
        nextValue ??= new Map(lastValue);
        const prevFrom = nextValue.get(binding.fromId);
        const nextFrom = prevFrom?.filter((b) => b.id !== binding.id);
        if (!nextFrom?.length) {
          nextValue.delete(binding.fromId);
        } else {
          nextValue.set(binding.fromId, nextFrom);
        }
        const prevTo = nextValue.get(binding.toId);
        const nextTo = prevTo?.filter((b) => b.id !== binding.id);
        if (!nextTo?.length) {
          nextValue.delete(binding.toId);
        } else {
          nextValue.set(binding.toId, nextTo);
        }
      }
      function ensureNewArray(shapeId) {
        nextValue ??= new Map(lastValue);
        let result = nextValue.get(shapeId);
        if (!result) {
          result = [];
          nextValue.set(shapeId, result);
        } else if (result === lastValue.get(shapeId)) {
          result = result.slice(0);
          nextValue.set(shapeId, result);
        }
        return result;
      }
      function addBinding(binding) {
        ensureNewArray(binding.fromId).push(binding);
        ensureNewArray(binding.toId).push(binding);
      }
      for (const changes of diff) {
        for (const newBinding of objectMapValues(changes.added)) {
          addBinding(newBinding);
        }
        for (const [prev, next] of objectMapValues(changes.updated)) {
          removingBinding(prev);
          addBinding(next);
        }
        for (const prev of objectMapValues(changes.removed)) {
          removingBinding(prev);
        }
      }
      return nextValue ?? lastValue;
    });
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/derivations/notVisibleShapes.mjs
  function isShapeNotVisible(editor, id, viewportPageBounds) {
    const maskedPageBounds = editor.getShapeMaskedPageBounds(id);
    if (maskedPageBounds === void 0) return true;
    return !viewportPageBounds.includes(maskedPageBounds);
  }
  var notVisibleShapes = (editor) => {
    function fromScratch(editor2) {
      const shapes = editor2.getCurrentPageShapeIds();
      const viewportPageBounds = editor2.getViewportPageBounds();
      const notVisibleShapes2 = /* @__PURE__ */ new Set();
      shapes.forEach((id) => {
        if (isShapeNotVisible(editor2, id, viewportPageBounds)) {
          notVisibleShapes2.add(id);
        }
      });
      return notVisibleShapes2;
    }
    return computed("getCulledShapes", (prevValue) => {
      if (isUninitialized(prevValue)) {
        return fromScratch(editor);
      }
      const nextValue = fromScratch(editor);
      if (prevValue.size !== nextValue.size) return nextValue;
      for (const prev of prevValue) {
        if (!nextValue.has(prev)) {
          return nextValue;
        }
      }
      return prevValue;
    });
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/derivations/parentsToChildren.mjs
  var parentsToChildren = (store) => {
    const shapeIdsQuery = store.query.ids("shape");
    const shapeHistory = store.query.filterHistory("shape");
    function fromScratch() {
      const result = {};
      const shapeIds = shapeIdsQuery.get();
      const shapes = Array(shapeIds.size);
      shapeIds.forEach((id) => shapes.push(store.get(id)));
      shapes.sort(sortByIndex);
      shapes.forEach((shape) => {
        if (!result[shape.parentId]) {
          result[shape.parentId] = [];
        }
        result[shape.parentId].push(shape.id);
      });
      return result;
    }
    return computed(
      "parentsToChildrenWithIndexes",
      (lastValue, lastComputedEpoch) => {
        if (isUninitialized(lastValue)) {
          return fromScratch();
        }
        const diff = shapeHistory.getDiffSince(lastComputedEpoch);
        if (diff === RESET_VALUE) {
          return fromScratch();
        }
        if (diff.length === 0) return lastValue;
        let newValue = null;
        const ensureNewArray = (parentId) => {
          if (!newValue) {
            newValue = { ...lastValue };
          }
          if (!newValue[parentId]) {
            newValue[parentId] = [];
          } else if (newValue[parentId] === lastValue[parentId]) {
            newValue[parentId] = [...newValue[parentId]];
          }
        };
        const toSort = /* @__PURE__ */ new Set();
        let changes;
        for (let i = 0, n = diff.length; i < n; i++) {
          changes = diff[i];
          for (const record of Object.values(changes.added)) {
            if (!isShape(record)) continue;
            ensureNewArray(record.parentId);
            newValue[record.parentId].push(record.id);
            toSort.add(newValue[record.parentId]);
          }
          for (const [from, to] of Object.values(changes.updated)) {
            if (!isShape(to)) continue;
            if (!isShape(from)) continue;
            if (from.parentId !== to.parentId) {
              ensureNewArray(from.parentId);
              ensureNewArray(to.parentId);
              newValue[from.parentId].splice(newValue[from.parentId].indexOf(to.id), 1);
              newValue[to.parentId].push(to.id);
              toSort.add(newValue[to.parentId]);
            } else if (from.index !== to.index) {
              ensureNewArray(to.parentId);
              const idx = newValue[to.parentId].indexOf(to.id);
              newValue[to.parentId][idx] = to.id;
              toSort.add(newValue[to.parentId]);
            }
          }
          for (const record of Object.values(changes.removed)) {
            if (!isShape(record)) continue;
            ensureNewArray(record.parentId);
            newValue[record.parentId].splice(newValue[record.parentId].indexOf(record.id), 1);
          }
        }
        for (const arr of toSort) {
          const shapesInArr = compact(arr.map((id) => store.get(id)));
          shapesInArr.sort(sortByIndex);
          arr.splice(0, arr.length, ...shapesInArr.map((shape) => shape.id));
        }
        return newValue ?? lastValue;
      }
    );
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/derivations/shapeIdsInCurrentPage.mjs
  var isShapeInPage = (store, pageId, shape) => {
    while (!isPageId(shape.parentId)) {
      const parent = store.get(shape.parentId);
      if (!parent) return false;
      shape = parent;
    }
    return shape.parentId === pageId;
  };
  var deriveShapeIdsInCurrentPage = (store, getCurrentPageId) => {
    const shapesIndex = store.query.ids("shape");
    let lastPageId = null;
    function fromScratch() {
      const currentPageId = getCurrentPageId();
      lastPageId = currentPageId;
      return new Set(
        [...shapesIndex.get()].filter((id) => isShapeInPage(store, currentPageId, store.get(id)))
      );
    }
    return computed("_shapeIdsInCurrentPage", (prevValue, lastComputedEpoch) => {
      if (isUninitialized(prevValue)) {
        return fromScratch();
      }
      const currentPageId = getCurrentPageId();
      if (currentPageId !== lastPageId) {
        return fromScratch();
      }
      const diff = store.history.getDiffSince(lastComputedEpoch);
      if (diff === RESET_VALUE) {
        return fromScratch();
      }
      const builder = new IncrementalSetConstructor(
        prevValue
      );
      for (const changes of diff) {
        for (const record of Object.values(changes.added)) {
          if (isShape(record) && isShapeInPage(store, currentPageId, record)) {
            builder.add(record.id);
          }
        }
        for (const [_from, to] of Object.values(changes.updated)) {
          if (isShape(to)) {
            if (isShapeInPage(store, currentPageId, to)) {
              builder.add(to.id);
            } else {
              builder.remove(to.id);
            }
          }
        }
        for (const id of Object.keys(changes.removed)) {
          if (isShapeId(id)) {
            builder.remove(id);
          }
        }
      }
      const result = builder.get();
      if (!result) {
        return prevValue;
      }
      return withDiff(result.value, result.diff);
    });
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/managers/ClickManager.mjs
  var __create4 = Object.create;
  var __defProp4 = Object.defineProperty;
  var __getOwnPropDesc4 = Object.getOwnPropertyDescriptor;
  var __knownSymbol3 = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError3 = (msg2) => {
    throw TypeError(msg2);
  };
  var __defNormalProp3 = (obj, key, value) => key in obj ? __defProp4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name3 = (target, value) => __defProp4(target, "name", { value, configurable: true });
  var __decoratorStart3 = (base) => [, , , __create4(base?.[__knownSymbol3("metadata")] ?? null)];
  var __decoratorStrings3 = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
  var __expectFn3 = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError3("Function expected") : fn;
  var __decoratorContext3 = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings3[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError3("Already initialized") : fns.push(__expectFn3(fn || null)) });
  var __decoratorMetadata3 = (array2, target) => __defNormalProp3(target, __knownSymbol3("metadata"), array2[3]);
  var __runInitializers3 = (array2, flags, self2, value) => {
    for (var i = 0, fns = array2[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self2) : value = fns[i].call(self2, value);
    return value;
  };
  var __decorateElement3 = (array2, flags, name, decorators, target, extra) => {
    var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
    var j = k > 3 ? array2.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings3[k + 5];
    var initializers = k > 3 && (array2[j - 1] = []), extraInitializers = array2[j] || (array2[j] = []);
    var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc4(k < 4 ? target : { get [name]() {
      return __privateGet3(this, extra);
    }, set [name](x) {
      return __privateSet3(this, extra, x);
    } }, name));
    k ? p && k < 4 && __name3(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name3(target, name);
    for (var i = decorators.length - 1; i >= 0; i--) {
      ctx = __decoratorContext3(k, name, done = {}, array2[3], extraInitializers);
      if (k) {
        ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn3(target, x) : (x) => name in x };
        if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet3 : __privateMethod3)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
        if (k > 2) access.set = p ? (x, y) => __privateSet3(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
      }
      it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
      if (k ^ 4 || it === void 0) __expectFn3(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
      else if (typeof it !== "object" || it === null) __typeError3("Object expected");
      else __expectFn3(fn = it.get) && (desc.get = fn), __expectFn3(fn = it.set) && (desc.set = fn), __expectFn3(fn = it.init) && initializers.unshift(fn);
    }
    return k || __decoratorMetadata3(array2, target), desc && __defProp4(target, name, desc), p ? k ^ 4 ? extra : desc : target;
  };
  var __publicField3 = (obj, key, value) => __defNormalProp3(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck3 = (obj, member, msg2) => member.has(obj) || __typeError3("Cannot " + msg2);
  var __privateIn3 = (member, obj) => Object(obj) !== obj ? __typeError3('Cannot use the "in" operator on this value') : member.has(obj);
  var __privateGet3 = (obj, member, getter) => (__accessCheck3(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateSet3 = (obj, member, value, setter) => (__accessCheck3(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod3 = (obj, member, method) => (__accessCheck3(obj, member, "access private method"), method);
  var _cancelDoubleClickTimeout_dec;
  var __getClickTimeout_dec;
  var _init3;
  var MAX_CLICK_DISTANCE = 40;
  __getClickTimeout_dec = [bind], _cancelDoubleClickTimeout_dec = [bind];
  var ClickManager = class {
    constructor(editor) {
      this.editor = editor;
      __runInitializers3(_init3, 5, this);
      __publicField3(this, "_clickId", "");
      __publicField3(this, "_clickTimeout");
      __publicField3(this, "_clickScreenPoint");
      __publicField3(this, "_previousScreenPoint");
      __publicField3(this, "_clickState", "idle");
      __publicField3(this, "lastPointerInfo", {});
    }
    _getClickTimeout(state, id = uniqueId()) {
      this._clickId = id;
      clearTimeout(this._clickTimeout);
      this._clickTimeout = this.editor.timers.setTimeout(
        () => {
          if (this._clickState === state && this._clickId === id) {
            switch (this._clickState) {
              case "pendingTriple": {
                this.editor.dispatch({
                  ...this.lastPointerInfo,
                  type: "click",
                  name: "double_click",
                  phase: "settle"
                });
                break;
              }
              case "pendingQuadruple": {
                this.editor.dispatch({
                  ...this.lastPointerInfo,
                  type: "click",
                  name: "triple_click",
                  phase: "settle"
                });
                break;
              }
              case "pendingOverflow": {
                this.editor.dispatch({
                  ...this.lastPointerInfo,
                  type: "click",
                  name: "quadruple_click",
                  phase: "settle"
                });
                break;
              }
              default: {
              }
            }
            this._clickState = "idle";
          }
        },
        state === "idle" || state === "pendingDouble" ? this.editor.options.doubleClickDurationMs : this.editor.options.multiClickDurationMs
      );
    }
    /**
     * The current click state.
     *
     * @public
     */
    // eslint-disable-next-line no-restricted-syntax
    get clickState() {
      return this._clickState;
    }
    handlePointerEvent(info) {
      switch (info.name) {
        case "pointer_down": {
          if (!this._clickState) return info;
          this._clickScreenPoint = Vec.From(info.point);
          if (this._previousScreenPoint && Vec.Dist2(this._previousScreenPoint, this._clickScreenPoint) > MAX_CLICK_DISTANCE ** 2) {
            this._clickState = "idle";
          }
          this._previousScreenPoint = this._clickScreenPoint;
          this.lastPointerInfo = info;
          switch (this._clickState) {
            case "pendingDouble": {
              this._clickState = "pendingTriple";
              this._clickTimeout = this._getClickTimeout(this._clickState);
              return {
                ...info,
                type: "click",
                name: "double_click",
                phase: "down"
              };
            }
            case "pendingTriple": {
              this._clickState = "pendingQuadruple";
              this._clickTimeout = this._getClickTimeout(this._clickState);
              return {
                ...info,
                type: "click",
                name: "triple_click",
                phase: "down"
              };
            }
            case "pendingQuadruple": {
              this._clickState = "pendingOverflow";
              this._clickTimeout = this._getClickTimeout(this._clickState);
              return {
                ...info,
                type: "click",
                name: "quadruple_click",
                phase: "down"
              };
            }
            case "idle": {
              this._clickState = "pendingDouble";
              break;
            }
            case "pendingOverflow": {
              this._clickState = "overflow";
              break;
            }
            default: {
            }
          }
          this._clickTimeout = this._getClickTimeout(this._clickState);
          return info;
        }
        case "pointer_up": {
          if (!this._clickState) return info;
          this._clickScreenPoint = Vec.From(info.point);
          switch (this._clickState) {
            case "pendingTriple": {
              return {
                ...this.lastPointerInfo,
                type: "click",
                name: "double_click",
                phase: "up"
              };
            }
            case "pendingQuadruple": {
              return {
                ...this.lastPointerInfo,
                type: "click",
                name: "triple_click",
                phase: "up"
              };
            }
            case "pendingOverflow": {
              return {
                ...this.lastPointerInfo,
                type: "click",
                name: "quadruple_click",
                phase: "up"
              };
            }
            default: {
            }
          }
          return info;
        }
        case "pointer_move": {
          if (this._clickState !== "idle" && this._clickScreenPoint && Vec.Dist2(this._clickScreenPoint, this.editor.inputs.currentScreenPoint) > (this.editor.getInstanceState().isCoarsePointer ? this.editor.options.coarseDragDistanceSquared : this.editor.options.dragDistanceSquared)) {
            this.cancelDoubleClickTimeout();
          }
          return info;
        }
      }
      return info;
    }
    cancelDoubleClickTimeout() {
      this._clickTimeout = clearTimeout(this._clickTimeout);
      this._clickState = "idle";
    }
  };
  _init3 = __decoratorStart3(null);
  __decorateElement3(_init3, 1, "_getClickTimeout", __getClickTimeout_dec, ClickManager);
  __decorateElement3(_init3, 1, "cancelDoubleClickTimeout", _cancelDoubleClickTimeout_dec, ClickManager);
  __decoratorMetadata3(_init3, ClickManager);

  // node_modules/@tldraw/editor/dist-esm/lib/editor/managers/EdgeScrollManager.mjs
  var EdgeScrollManager = class {
    constructor(editor) {
      this.editor = editor;
    }
    _isEdgeScrolling = false;
    _edgeScrollDuration = -1;
    /**
     * Update the camera position when the mouse is close to the edge of the screen.
     * Run this on every tick when in a state where edge scrolling is enabled.
     *
     * @public
     */
    updateEdgeScrolling(elapsed) {
      const { editor } = this;
      const edgeScrollProximityFactor = this.getEdgeScroll();
      if (edgeScrollProximityFactor.x === 0 && edgeScrollProximityFactor.y === 0) {
        if (this._isEdgeScrolling) {
          this._isEdgeScrolling = false;
          this._edgeScrollDuration = 0;
        }
      } else {
        if (!this._isEdgeScrolling) {
          this._isEdgeScrolling = true;
          this._edgeScrollDuration = 0;
        }
        this._edgeScrollDuration += elapsed;
        if (this._edgeScrollDuration > editor.options.edgeScrollDelay) {
          const eased = editor.options.edgeScrollEaseDuration > 0 ? EASINGS.easeInCubic(
            Math.min(
              1,
              this._edgeScrollDuration / (editor.options.edgeScrollDelay + editor.options.edgeScrollEaseDuration)
            )
          ) : 1;
          this.moveCameraWhenCloseToEdge({
            x: edgeScrollProximityFactor.x * eased,
            y: edgeScrollProximityFactor.y * eased
          });
        }
      }
    }
    /**
     * Helper function to get the scroll proximity factor for a given position.
     * @param position - The mouse position on the axis.
     * @param dimension - The component dimension on the axis.
     * @param isCoarse - Whether the pointer is coarse.
     * @param insetStart - Whether the pointer is inset at the start of the axis.
     * @param insetEnd - Whether the pointer is inset at the end of the axis.
     * @internal
     */
    getEdgeProximityFactors(position, dimension, isCoarse, insetStart, insetEnd) {
      const { editor } = this;
      const dist = editor.options.edgeScrollDistance;
      const pw = isCoarse ? editor.options.coarsePointerWidth : 0;
      const pMin = position - pw;
      const pMax = position + pw;
      const min3 = insetStart ? 0 : dist;
      const max2 = insetEnd ? dimension : dimension - dist;
      if (pMin < min3) {
        return Math.min(1, (min3 - pMin) / dist);
      } else if (pMax > max2) {
        return -Math.min(1, (pMax - max2) / dist);
      }
      return 0;
    }
    getEdgeScroll() {
      const { editor } = this;
      const {
        inputs: {
          currentScreenPoint: { x, y }
        }
      } = editor;
      const screenBounds = editor.getViewportScreenBounds();
      const {
        isCoarsePointer,
        insets: [t2, r, b, l]
      } = editor.getInstanceState();
      const proximityFactorX = this.getEdgeProximityFactors(x, screenBounds.w, isCoarsePointer, l, r);
      const proximityFactorY = this.getEdgeProximityFactors(y, screenBounds.h, isCoarsePointer, t2, b);
      return {
        x: proximityFactorX,
        y: proximityFactorY
      };
    }
    /**
     * Moves the camera when the mouse is close to the edge of the screen.
     * @public
     */
    moveCameraWhenCloseToEdge(proximityFactor) {
      const { editor } = this;
      if (!editor.inputs.isDragging || editor.inputs.isPanning || editor.getCameraOptions().isLocked)
        return;
      if (proximityFactor.x === 0 && proximityFactor.y === 0) return;
      const screenBounds = editor.getViewportScreenBounds();
      const screenSizeFactorX = screenBounds.w < 1e3 ? 0.612 : 1;
      const screenSizeFactorY = screenBounds.h < 1e3 ? 0.612 : 1;
      const zoomLevel = editor.getZoomLevel();
      const pxSpeed = editor.user.getEdgeScrollSpeed() * editor.options.edgeScrollSpeed;
      const scrollDeltaX = pxSpeed * proximityFactor.x * screenSizeFactorX / zoomLevel;
      const scrollDeltaY = pxSpeed * proximityFactor.y * screenSizeFactorY / zoomLevel;
      const { x, y, z } = editor.getCamera();
      editor.setCamera(new Vec(x + scrollDeltaX, y + scrollDeltaY, z));
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/managers/FocusManager.mjs
  var FocusManager = class {
    constructor(editor, autoFocus) {
      this.editor = editor;
      this.disposeSideEffectListener = editor.sideEffects.registerAfterChangeHandler(
        "instance",
        (prev, next) => {
          if (prev.isFocused !== next.isFocused) {
            this.updateContainerClass();
          }
        }
      );
      const currentFocusState = editor.getInstanceState().isFocused;
      if (autoFocus !== currentFocusState) {
        editor.updateInstanceState({ isFocused: !!autoFocus });
      }
      this.updateContainerClass();
    }
    disposeSideEffectListener;
    /**
     * The editor's focus state and the container's focus state
     * are not necessarily always in sync. For that reason we
     * can't rely on the css `:focus` or `:focus-within` selectors to style the
     * editor when it is in focus.
     *
     * For that reason we synchronize the editor's focus state with a
     * special class on the container: tl-container__focused
     */
    updateContainerClass() {
      const container = this.editor.getContainer();
      const instanceState = this.editor.getInstanceState();
      if (instanceState.isFocused) {
        container.classList.add("tl-container__focused");
      } else {
        container.classList.remove("tl-container__focused");
      }
    }
    focus() {
      this.editor.getContainer().focus();
    }
    blur() {
      this.editor.complete();
      this.editor.getContainer().blur();
    }
    dispose() {
      this.disposeSideEffectListener?.();
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/managers/Stack.mjs
  function stack(items) {
    if (items) {
      let result = EMPTY_STACK_ITEM;
      while (items.length) {
        result = result.push(items.pop());
      }
      return result;
    }
    return EMPTY_STACK_ITEM;
  }
  var EmptyStackItem = class {
    length = 0;
    head = null;
    tail = this;
    push(head) {
      return new StackItem(head, this);
    }
    toArray() {
      return EMPTY_ARRAY;
    }
    [Symbol.iterator]() {
      return {
        next() {
          return { value: void 0, done: true };
        }
      };
    }
  };
  var EMPTY_STACK_ITEM = new EmptyStackItem();
  var StackItem = class _StackItem {
    constructor(head, tail) {
      this.head = head;
      this.tail = tail;
      this.length = tail.length + 1;
    }
    length;
    push(head) {
      return new _StackItem(head, this);
    }
    toArray() {
      return Array.from(this);
    }
    [Symbol.iterator]() {
      let stack2 = this;
      return {
        next() {
          if (stack2.length) {
            const value = stack2.head;
            stack2 = stack2.tail;
            return { value, done: false };
          } else {
            return { value: void 0, done: true };
          }
        }
      };
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/managers/HistoryManager.mjs
  var HistoryManager = class {
    store;
    dispose;
    state = "recording";
    pendingDiff = new PendingDiff();
    stacks = atom(
      "HistoryManager.stacks",
      {
        undos: stack(),
        redos: stack()
      },
      {
        isEqual: (a, b) => a.undos === b.undos && a.redos === b.redos
      }
    );
    annotateError;
    constructor(opts) {
      this.store = opts.store;
      this.annotateError = opts.annotateError ?? noop;
      this.dispose = this.store.addHistoryInterceptor((entry2, source) => {
        if (source !== "user") return;
        switch (this.state) {
          case "recording":
            this.pendingDiff.apply(entry2.changes);
            this.stacks.update(({ undos }) => ({ undos, redos: stack() }));
            break;
          case "recordingPreserveRedoStack":
            this.pendingDiff.apply(entry2.changes);
            break;
          case "paused":
            break;
          default:
            exhaustiveSwitchError(this.state);
        }
      });
    }
    flushPendingDiff() {
      if (this.pendingDiff.isEmpty()) return;
      const diff = this.pendingDiff.clear();
      this.stacks.update(({ undos, redos }) => ({
        undos: undos.push({ type: "diff", diff }),
        redos
      }));
    }
    getNumUndos() {
      return this.stacks.get().undos.length + (this.pendingDiff.isEmpty() ? 0 : 1);
    }
    getNumRedos() {
      return this.stacks.get().redos.length;
    }
    /** @internal */
    _isInBatch = false;
    batch(fn, opts) {
      const previousState = this.state;
      if (previousState !== "paused" && opts?.history) {
        this.state = modeToState[opts.history];
      }
      try {
        if (this._isInBatch) {
          transact(fn);
          return this;
        }
        this._isInBatch = true;
        try {
          transact(fn);
        } catch (error) {
          this.annotateError(error);
          throw error;
        } finally {
          this._isInBatch = false;
        }
        return this;
      } finally {
        this.state = previousState;
      }
    }
    // History
    _undo({ pushToRedoStack, toMark = void 0 }) {
      const previousState = this.state;
      this.state = "paused";
      try {
        let { undos, redos } = this.stacks.get();
        const pendingDiff = this.pendingDiff.clear();
        const isPendingDiffEmpty = isRecordsDiffEmpty(pendingDiff);
        const diffToUndo = reverseRecordsDiff(pendingDiff);
        if (pushToRedoStack && !isPendingDiffEmpty) {
          redos = redos.push({ type: "diff", diff: pendingDiff });
        }
        let didFindMark = false;
        if (isPendingDiffEmpty) {
          while (undos.head?.type === "stop") {
            const mark = undos.head;
            undos = undos.tail;
            if (pushToRedoStack) {
              redos = redos.push(mark);
            }
            if (mark.id === toMark) {
              didFindMark = true;
              break;
            }
          }
        }
        if (!didFindMark) {
          loop: while (undos.head) {
            const undo = undos.head;
            undos = undos.tail;
            if (pushToRedoStack) {
              redos = redos.push(undo);
            }
            switch (undo.type) {
              case "diff":
                squashRecordDiffsMutable(diffToUndo, [reverseRecordsDiff(undo.diff)]);
                break;
              case "stop":
                if (!toMark) break loop;
                if (undo.id === toMark) {
                  didFindMark = true;
                  break loop;
                }
                break;
              default:
                exhaustiveSwitchError(undo);
            }
          }
        }
        if (!didFindMark && toMark) {
          return this;
        }
        this.store.applyDiff(diffToUndo, { ignoreEphemeralKeys: true });
        this.store.ensureStoreIsUsable();
        this.stacks.set({ undos, redos });
      } finally {
        this.state = previousState;
      }
      return this;
    }
    undo() {
      this._undo({ pushToRedoStack: true });
      return this;
    }
    redo() {
      const previousState = this.state;
      this.state = "paused";
      try {
        this.flushPendingDiff();
        let { undos, redos } = this.stacks.get();
        if (redos.length === 0) {
          return this;
        }
        while (redos.head?.type === "stop") {
          undos = undos.push(redos.head);
          redos = redos.tail;
        }
        const diffToRedo = createEmptyRecordsDiff();
        while (redos.head) {
          const redo = redos.head;
          undos = undos.push(redo);
          redos = redos.tail;
          if (redo.type === "diff") {
            squashRecordDiffsMutable(diffToRedo, [redo.diff]);
          } else {
            break;
          }
        }
        this.store.applyDiff(diffToRedo, { ignoreEphemeralKeys: true });
        this.store.ensureStoreIsUsable();
        this.stacks.set({ undos, redos });
      } finally {
        this.state = previousState;
      }
      return this;
    }
    bail() {
      this._undo({ pushToRedoStack: false });
      return this;
    }
    bailToMark(id) {
      this._undo({ pushToRedoStack: false, toMark: id });
      return this;
    }
    squashToMark(id) {
      let top = this.stacks.get().undos;
      const popped = [];
      while (top.head && !(top.head.type === "stop" && top.head.id === id)) {
        if (top.head.type === "diff") {
          popped.push(top.head.diff);
        }
        top = top.tail;
      }
      if (!top.head || top.head?.id !== id) {
        console.error("Could not find mark to squash to: ", id);
        return this;
      }
      if (popped.length === 0) {
        return this;
      }
      const diff = createEmptyRecordsDiff();
      squashRecordDiffsMutable(diff, popped.reverse());
      this.stacks.update(({ redos }) => ({
        undos: top.push({
          type: "diff",
          diff
        }),
        redos
      }));
      return this;
    }
    /** @internal */
    _mark(id) {
      transact(() => {
        this.flushPendingDiff();
        this.stacks.update(({ undos, redos }) => ({ undos: undos.push({ type: "stop", id }), redos }));
      });
    }
    clear() {
      this.stacks.set({ undos: stack(), redos: stack() });
      this.pendingDiff.clear();
    }
    /** @internal */
    getMarkIdMatching(idSubstring) {
      let top = this.stacks.get().undos;
      while (top.head) {
        if (top.head.type === "stop" && top.head.id.includes(idSubstring)) {
          return top.head.id;
        }
        top = top.tail;
      }
      return null;
    }
    /** @internal */
    debug() {
      const { undos, redos } = this.stacks.get();
      return {
        undos: undos.toArray(),
        redos: redos.toArray(),
        pendingDiff: this.pendingDiff.debug(),
        state: this.state
      };
    }
  };
  var modeToState = {
    record: "recording",
    "record-preserveRedoStack": "recordingPreserveRedoStack",
    ignore: "paused"
    /* Paused */
  };
  var PendingDiff = class {
    diff = createEmptyRecordsDiff();
    isEmptyAtom = atom("PendingDiff.isEmpty", true);
    clear() {
      const diff = this.diff;
      this.diff = createEmptyRecordsDiff();
      this.isEmptyAtom.set(true);
      return diff;
    }
    isEmpty() {
      return this.isEmptyAtom.get();
    }
    apply(diff) {
      squashRecordDiffsMutable(this.diff, [diff]);
      this.isEmptyAtom.set(isRecordsDiffEmpty(this.diff));
    }
    debug() {
      return { diff: this.diff, isEmpty: this.isEmpty() };
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/managers/ScribbleManager.mjs
  var ScribbleManager = class {
    constructor(editor) {
      this.editor = editor;
    }
    scribbleItems = /* @__PURE__ */ new Map();
    state = "paused";
    addScribble(scribble, id = uniqueId()) {
      const item = {
        id,
        scribble: {
          id,
          size: 20,
          color: "accent",
          opacity: 0.8,
          delay: 0,
          points: [],
          shrink: 0.1,
          taper: true,
          ...scribble,
          state: "starting"
        },
        timeoutMs: 0,
        delayRemaining: scribble.delay ?? 0,
        prev: null,
        next: null
      };
      this.scribbleItems.set(id, item);
      return item;
    }
    reset() {
      this.editor.updateInstanceState({ scribbles: [] });
      this.scribbleItems.clear();
    }
    /**
     * Start stopping the scribble. The scribble won't be removed until its last point is cleared.
     *
     * @public
     */
    stop(id) {
      const item = this.scribbleItems.get(id);
      if (!item) throw Error(`Scribble with id ${id} not found`);
      item.delayRemaining = Math.min(item.delayRemaining, 200);
      item.scribble.state = "stopping";
      return item;
    }
    /**
     * Set the scribble's next point.
     *
     * @param id - The id of the scribble to add a point to.
     * @param x - The x coordinate of the point.
     * @param y - The y coordinate of the point.
     * @param z - The z coordinate of the point.
     * @public
     */
    addPoint(id, x, y, z = 0.5) {
      const item = this.scribbleItems.get(id);
      if (!item) throw Error(`Scribble with id ${id} not found`);
      const { prev } = item;
      const point = { x, y, z };
      if (!prev || Vec.Dist(prev, point) >= 1) {
        item.next = point;
      }
      return item;
    }
    /**
     * Update on each animation frame.
     *
     * @param elapsed - The number of milliseconds since the last tick.
     * @public
     */
    tick(elapsed) {
      if (this.scribbleItems.size === 0) return;
      this.editor.run(() => {
        this.scribbleItems.forEach((item) => {
          if (item.scribble.state === "starting") {
            const { next: next2, prev: prev2 } = item;
            if (next2 && next2 !== prev2) {
              item.prev = next2;
              item.scribble.points.push(next2);
            }
            if (item.scribble.points.length > 8) {
              item.scribble.state = "active";
            }
            return;
          }
          if (item.delayRemaining > 0) {
            item.delayRemaining = Math.max(0, item.delayRemaining - elapsed);
          }
          item.timeoutMs += elapsed;
          if (item.timeoutMs >= 16) {
            item.timeoutMs = 0;
          }
          const { delayRemaining, timeoutMs, prev, next, scribble } = item;
          switch (scribble.state) {
            case "active": {
              if (next && next !== prev) {
                item.prev = next;
                scribble.points.push(next);
                if (delayRemaining === 0) {
                  if (scribble.points.length > 8) {
                    scribble.points.shift();
                  }
                }
              } else {
                if (timeoutMs === 0) {
                  if (scribble.points.length > 1) {
                    scribble.points.shift();
                  } else {
                    item.delayRemaining = scribble.delay;
                  }
                }
              }
              break;
            }
            case "stopping": {
              if (item.delayRemaining === 0) {
                if (timeoutMs === 0) {
                  if (scribble.points.length === 1) {
                    this.scribbleItems.delete(item.id);
                    return;
                  }
                  if (scribble.shrink) {
                    scribble.size = Math.max(1, scribble.size * (1 - scribble.shrink));
                  }
                  scribble.points.shift();
                }
              }
              break;
            }
            case "paused": {
              break;
            }
          }
        });
        this.editor.updateInstanceState({
          scribbles: Array.from(this.scribbleItems.values()).map(({ scribble }) => ({
            ...scribble,
            points: [...scribble.points]
          })).slice(-5)
          // limit to three as a minor sanity check
        });
      });
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/managers/SnapManager/BoundsSnaps.mjs
  var __create5 = Object.create;
  var __defProp5 = Object.defineProperty;
  var __getOwnPropDesc5 = Object.getOwnPropertyDescriptor;
  var __knownSymbol4 = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError4 = (msg2) => {
    throw TypeError(msg2);
  };
  var __defNormalProp4 = (obj, key, value) => key in obj ? __defProp5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name4 = (target, value) => __defProp5(target, "name", { value, configurable: true });
  var __decoratorStart4 = (base) => [, , , __create5(base?.[__knownSymbol4("metadata")] ?? null)];
  var __decoratorStrings4 = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
  var __expectFn4 = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError4("Function expected") : fn;
  var __decoratorContext4 = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings4[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError4("Already initialized") : fns.push(__expectFn4(fn || null)) });
  var __decoratorMetadata4 = (array2, target) => __defNormalProp4(target, __knownSymbol4("metadata"), array2[3]);
  var __runInitializers4 = (array2, flags, self2, value) => {
    for (var i = 0, fns = array2[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self2) : value = fns[i].call(self2, value);
    return value;
  };
  var __decorateElement4 = (array2, flags, name, decorators, target, extra) => {
    var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
    var j = k > 3 ? array2.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings4[k + 5];
    var initializers = k > 3 && (array2[j - 1] = []), extraInitializers = array2[j] || (array2[j] = []);
    var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc5(k < 4 ? target : { get [name]() {
      return __privateGet4(this, extra);
    }, set [name](x) {
      return __privateSet4(this, extra, x);
    } }, name));
    k ? p && k < 4 && __name4(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name4(target, name);
    for (var i = decorators.length - 1; i >= 0; i--) {
      ctx = __decoratorContext4(k, name, done = {}, array2[3], extraInitializers);
      if (k) {
        ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn4(target, x) : (x) => name in x };
        if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet4 : __privateMethod4)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
        if (k > 2) access.set = p ? (x, y) => __privateSet4(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
      }
      it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
      if (k ^ 4 || it === void 0) __expectFn4(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
      else if (typeof it !== "object" || it === null) __typeError4("Object expected");
      else __expectFn4(fn = it.get) && (desc.get = fn), __expectFn4(fn = it.set) && (desc.set = fn), __expectFn4(fn = it.init) && initializers.unshift(fn);
    }
    return k || __decoratorMetadata4(array2, target), desc && __defProp5(target, name, desc), p ? k ^ 4 ? extra : desc : target;
  };
  var __publicField4 = (obj, key, value) => __defNormalProp4(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck4 = (obj, member, msg2) => member.has(obj) || __typeError4("Cannot " + msg2);
  var __privateIn4 = (member, obj) => Object(obj) !== obj ? __typeError4('Cannot use the "in" operator on this value') : member.has(obj);
  var __privateGet4 = (obj, member, getter) => (__accessCheck4(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateSet4 = (obj, member, value, setter) => (__accessCheck4(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod4 = (obj, member, method) => (__accessCheck4(obj, member, "access private method"), method);
  var _getVisibleGaps_dec;
  var _getSnappableGapNodes_dec;
  var _getSnappablePoints_dec;
  var _getSnapPointsCache_dec;
  var _init4;
  var round = (x) => {
    const decimalPlacesTolerance = 8;
    return Math.round(x * 10 ** decimalPlacesTolerance) / 10 ** decimalPlacesTolerance;
  };
  function findAdjacentGaps(gaps, shapeId, gapLength, direction, intersection) {
    const matches = gaps.filter(
      (gap) => (direction === "forward" ? gap.startNode.id === shapeId : gap.endNode.id === shapeId) && round(gap.length) === round(gapLength) && rangeIntersection(
        gap.breadthIntersection[0],
        gap.breadthIntersection[1],
        intersection[0],
        intersection[1]
      )
    );
    if (matches.length === 0) return [];
    const nextNodes = /* @__PURE__ */ new Set();
    matches.forEach((match) => {
      const node = direction === "forward" ? match.endNode.id : match.startNode.id;
      if (!nextNodes.has(node)) {
        nextNodes.add(node);
        const foundGaps = findAdjacentGaps(
          gaps,
          node,
          gapLength,
          direction,
          rangeIntersection(
            match.breadthIntersection[0],
            match.breadthIntersection[1],
            intersection[0],
            intersection[1]
          )
        );
        matches.push(...foundGaps);
      }
    });
    return matches;
  }
  function dedupeGapSnaps(snaps) {
    snaps.sort((a, b) => b.gaps.length - a.gaps.length);
    for (let i = snaps.length - 1; i > 0; i--) {
      const snap = snaps[i];
      for (let j = i - 1; j >= 0; j--) {
        const otherSnap = snaps[j];
        if (otherSnap.direction === snap.direction && snap.gaps.every(
          (gap) => otherSnap.gaps.some(
            (otherGap) => round(gap.startEdge[0].x) === round(otherGap.startEdge[0].x) && round(gap.startEdge[0].y) === round(otherGap.startEdge[0].y) && round(gap.startEdge[1].x) === round(otherGap.startEdge[1].x) && round(gap.startEdge[1].y) === round(otherGap.startEdge[1].y)
          ) && otherSnap.gaps.some(
            (otherGap) => round(gap.endEdge[0].x) === round(otherGap.endEdge[0].x) && round(gap.endEdge[0].y) === round(otherGap.endEdge[0].y) && round(gap.endEdge[1].x) === round(otherGap.endEdge[1].x) && round(gap.endEdge[1].y) === round(otherGap.endEdge[1].y)
          )
        )) {
          snaps.splice(i, 1);
          break;
        }
      }
    }
  }
  _getSnapPointsCache_dec = [computed], _getSnappablePoints_dec = [computed], _getSnappableGapNodes_dec = [computed], _getVisibleGaps_dec = [computed];
  var BoundsSnaps = class {
    constructor(manager) {
      this.manager = manager;
      __runInitializers4(_init4, 5, this);
      __publicField4(this, "editor");
      this.editor = manager.editor;
    }
    getSnapPointsCache() {
      const { editor } = this;
      return editor.store.createComputedCache("snapPoints", (shape) => {
        const pageTransform = editor.getShapePageTransform(shape.id);
        if (!pageTransform) return void 0;
        const boundsSnapGeometry = editor.getShapeUtil(shape).getBoundsSnapGeometry(shape);
        const snapPoints = boundsSnapGeometry.points ?? editor.getShapeGeometry(shape).bounds.cornersAndCenter;
        if (!pageTransform || !snapPoints) return void 0;
        return snapPoints.map((point, i) => {
          const { x, y } = Mat.applyToPoint(pageTransform, point);
          return { x, y, id: `${shape.id}:${i}` };
        });
      });
    }
    getSnapPoints(shapeId) {
      return this.getSnapPointsCache().get(shapeId) ?? [];
    }
    getSnappablePoints() {
      const snapPointsCache = this.getSnapPointsCache();
      const snappableShapes = this.manager.getSnappableShapes();
      const result = [];
      for (const shapeId of snappableShapes) {
        const snapPoints = snapPointsCache.get(shapeId);
        if (snapPoints) {
          result.push(...snapPoints);
        }
      }
      return result;
    }
    getSnappableGapNodes() {
      return Array.from(this.manager.getSnappableShapes(), (shapeId) => ({
        id: shapeId,
        pageBounds: assertExists(this.editor.getShapePageBounds(shapeId))
      }));
    }
    getVisibleGaps() {
      const horizontal = [];
      const vertical = [];
      let startNode, endNode;
      const sortedShapesOnCurrentPageHorizontal = this.getSnappableGapNodes().sort((a, b) => {
        return a.pageBounds.minX - b.pageBounds.minX;
      });
      for (let i = 0; i < sortedShapesOnCurrentPageHorizontal.length; i++) {
        startNode = sortedShapesOnCurrentPageHorizontal[i];
        for (let j = i + 1; j < sortedShapesOnCurrentPageHorizontal.length; j++) {
          endNode = sortedShapesOnCurrentPageHorizontal[j];
          if (
            // is there space between the boxes
            startNode.pageBounds.maxX < endNode.pageBounds.minX && // and they overlap in the y axis
            rangesOverlap(
              startNode.pageBounds.minY,
              startNode.pageBounds.maxY,
              endNode.pageBounds.minY,
              endNode.pageBounds.maxY
            )
          ) {
            horizontal.push({
              startNode,
              endNode,
              startEdge: [
                new Vec(startNode.pageBounds.maxX, startNode.pageBounds.minY),
                new Vec(startNode.pageBounds.maxX, startNode.pageBounds.maxY)
              ],
              endEdge: [
                new Vec(endNode.pageBounds.minX, endNode.pageBounds.minY),
                new Vec(endNode.pageBounds.minX, endNode.pageBounds.maxY)
              ],
              length: endNode.pageBounds.minX - startNode.pageBounds.maxX,
              breadthIntersection: rangeIntersection(
                startNode.pageBounds.minY,
                startNode.pageBounds.maxY,
                endNode.pageBounds.minY,
                endNode.pageBounds.maxY
              )
            });
          }
        }
      }
      const sortedShapesOnCurrentPageVertical = sortedShapesOnCurrentPageHorizontal.sort((a, b) => {
        return a.pageBounds.minY - b.pageBounds.minY;
      });
      for (let i = 0; i < sortedShapesOnCurrentPageVertical.length; i++) {
        startNode = sortedShapesOnCurrentPageVertical[i];
        for (let j = i + 1; j < sortedShapesOnCurrentPageVertical.length; j++) {
          endNode = sortedShapesOnCurrentPageVertical[j];
          if (
            // is there space between the boxes
            startNode.pageBounds.maxY < endNode.pageBounds.minY && // do they overlap in the x axis
            rangesOverlap(
              startNode.pageBounds.minX,
              startNode.pageBounds.maxX,
              endNode.pageBounds.minX,
              endNode.pageBounds.maxX
            )
          ) {
            vertical.push({
              startNode,
              endNode,
              startEdge: [
                new Vec(startNode.pageBounds.minX, startNode.pageBounds.maxY),
                new Vec(startNode.pageBounds.maxX, startNode.pageBounds.maxY)
              ],
              endEdge: [
                new Vec(endNode.pageBounds.minX, endNode.pageBounds.minY),
                new Vec(endNode.pageBounds.maxX, endNode.pageBounds.minY)
              ],
              length: endNode.pageBounds.minY - startNode.pageBounds.maxY,
              breadthIntersection: rangeIntersection(
                startNode.pageBounds.minX,
                startNode.pageBounds.maxX,
                endNode.pageBounds.minX,
                endNode.pageBounds.maxX
              )
            });
          }
        }
      }
      return { horizontal, vertical };
    }
    snapTranslateShapes({
      lockedAxis,
      initialSelectionPageBounds,
      initialSelectionSnapPoints,
      dragDelta
    }) {
      const snapThreshold = this.manager.getSnapThreshold();
      const visibleSnapPointsNotInSelection = this.getSnappablePoints();
      const selectionPageBounds = initialSelectionPageBounds.clone().translate(dragDelta);
      const selectionSnapPoints = initialSelectionSnapPoints.map(
        ({ x, y }, i) => ({
          id: "selection:" + i,
          x: x + dragDelta.x,
          y: y + dragDelta.y
        })
      );
      const otherNodeSnapPoints = visibleSnapPointsNotInSelection;
      const nearestSnapsX = [];
      const nearestSnapsY = [];
      const minOffset = new Vec(snapThreshold, snapThreshold);
      this.collectPointSnaps({
        minOffset,
        nearestSnapsX,
        nearestSnapsY,
        otherNodeSnapPoints,
        selectionSnapPoints
      });
      this.collectGapSnaps({
        selectionPageBounds,
        nearestSnapsX,
        nearestSnapsY,
        minOffset
      });
      const nudge = new Vec(
        lockedAxis === "x" ? 0 : nearestSnapsX[0]?.nudge ?? 0,
        lockedAxis === "y" ? 0 : nearestSnapsY[0]?.nudge ?? 0
      );
      minOffset.x = 0;
      minOffset.y = 0;
      nearestSnapsX.length = 0;
      nearestSnapsY.length = 0;
      selectionSnapPoints.forEach((s) => {
        s.x += nudge.x;
        s.y += nudge.y;
      });
      selectionPageBounds.translate(nudge);
      this.collectPointSnaps({
        minOffset,
        nearestSnapsX,
        nearestSnapsY,
        otherNodeSnapPoints,
        selectionSnapPoints
      });
      this.collectGapSnaps({
        selectionPageBounds,
        nearestSnapsX,
        nearestSnapsY,
        minOffset
      });
      const pointSnapsLines = this.getPointSnapLines({
        nearestSnapsX,
        nearestSnapsY
      });
      const gapSnapLines = this.getGapSnapLines({
        selectionPageBounds,
        nearestSnapsX,
        nearestSnapsY
      });
      this.manager.setIndicators([...gapSnapLines, ...pointSnapsLines]);
      return { nudge };
    }
    snapResizeShapes({
      initialSelectionPageBounds,
      dragDelta,
      handle: originalHandle,
      isAspectRatioLocked,
      isResizingFromCenter
    }) {
      const snapThreshold = this.manager.getSnapThreshold();
      const {
        box: unsnappedResizedPageBounds,
        scaleX,
        scaleY
      } = Box.Resize(
        initialSelectionPageBounds,
        originalHandle,
        isResizingFromCenter ? dragDelta.x * 2 : dragDelta.x,
        isResizingFromCenter ? dragDelta.y * 2 : dragDelta.y,
        isAspectRatioLocked
      );
      let handle = originalHandle;
      if (scaleX < 0) {
        handle = flipSelectionHandleX(handle);
      }
      if (scaleY < 0) {
        handle = flipSelectionHandleY(handle);
      }
      if (isResizingFromCenter) {
        unsnappedResizedPageBounds.center = initialSelectionPageBounds.center;
      }
      const isXLocked = handle === "top" || handle === "bottom";
      const isYLocked = handle === "left" || handle === "right";
      const selectionSnapPoints = getResizeSnapPointsForHandle(handle, unsnappedResizedPageBounds);
      const otherNodeSnapPoints = this.getSnappablePoints();
      const nearestSnapsX = [];
      const nearestSnapsY = [];
      const minOffset = new Vec(snapThreshold, snapThreshold);
      this.collectPointSnaps({
        minOffset,
        nearestSnapsX,
        nearestSnapsY,
        otherNodeSnapPoints,
        selectionSnapPoints
      });
      const nudge = new Vec(
        isXLocked ? 0 : nearestSnapsX[0]?.nudge ?? 0,
        isYLocked ? 0 : nearestSnapsY[0]?.nudge ?? 0
      );
      if (isAspectRatioLocked && isSelectionCorner(handle) && nudge.len() !== 0) {
        const primaryNudgeAxis = nearestSnapsX.length && nearestSnapsY.length ? Math.abs(nudge.x) < Math.abs(nudge.y) ? "x" : "y" : nearestSnapsX.length ? "x" : "y";
        const ratio = initialSelectionPageBounds.aspectRatio;
        if (primaryNudgeAxis === "x") {
          nearestSnapsY.length = 0;
          nudge.y = nudge.x / ratio;
          if (handle === "bottom_left" || handle === "top_right") {
            nudge.y = -nudge.y;
          }
        } else {
          nearestSnapsX.length = 0;
          nudge.x = nudge.y * ratio;
          if (handle === "bottom_left" || handle === "top_right") {
            nudge.x = -nudge.x;
          }
        }
      }
      const snappedDelta = Vec.Add(dragDelta, nudge);
      const { box: snappedResizedPageBounds } = Box.Resize(
        initialSelectionPageBounds,
        originalHandle,
        isResizingFromCenter ? snappedDelta.x * 2 : snappedDelta.x,
        isResizingFromCenter ? snappedDelta.y * 2 : snappedDelta.y,
        isAspectRatioLocked
      );
      if (isResizingFromCenter) {
        snappedResizedPageBounds.center = initialSelectionPageBounds.center;
      }
      const snappedSelectionPoints = getResizeSnapPointsForHandle("any", snappedResizedPageBounds);
      nearestSnapsX.length = 0;
      nearestSnapsY.length = 0;
      minOffset.x = 0;
      minOffset.y = 0;
      this.collectPointSnaps({
        minOffset,
        nearestSnapsX,
        nearestSnapsY,
        otherNodeSnapPoints,
        selectionSnapPoints: snappedSelectionPoints
      });
      const pointSnaps = this.getPointSnapLines({
        nearestSnapsX,
        nearestSnapsY
      });
      this.manager.setIndicators([...pointSnaps]);
      return { nudge };
    }
    collectPointSnaps({
      selectionSnapPoints,
      otherNodeSnapPoints,
      minOffset,
      nearestSnapsX,
      nearestSnapsY
    }) {
      for (const thisSnapPoint of selectionSnapPoints) {
        for (const otherSnapPoint of otherNodeSnapPoints) {
          const offset4 = Vec.Sub(thisSnapPoint, otherSnapPoint);
          const offsetX = Math.abs(offset4.x);
          const offsetY = Math.abs(offset4.y);
          if (round(offsetX) <= round(minOffset.x)) {
            if (round(offsetX) < round(minOffset.x)) {
              nearestSnapsX.length = 0;
            }
            nearestSnapsX.push({
              type: "points",
              points: { thisPoint: thisSnapPoint, otherPoint: otherSnapPoint },
              nudge: otherSnapPoint.x - thisSnapPoint.x
            });
            minOffset.x = offsetX;
          }
          if (round(offsetY) <= round(minOffset.y)) {
            if (round(offsetY) < round(minOffset.y)) {
              nearestSnapsY.length = 0;
            }
            nearestSnapsY.push({
              type: "points",
              points: { thisPoint: thisSnapPoint, otherPoint: otherSnapPoint },
              nudge: otherSnapPoint.y - thisSnapPoint.y
            });
            minOffset.y = offsetY;
          }
        }
      }
    }
    collectGapSnaps({
      selectionPageBounds,
      minOffset,
      nearestSnapsX,
      nearestSnapsY
    }) {
      const { horizontal, vertical } = this.getVisibleGaps();
      for (const gap of horizontal) {
        if (!rangesOverlap(
          gap.breadthIntersection[0],
          gap.breadthIntersection[1],
          selectionPageBounds.minY,
          selectionPageBounds.maxY
        )) {
          continue;
        }
        const gapMidX = gap.startEdge[0].x + gap.length / 2;
        const centerNudge = gapMidX - selectionPageBounds.center.x;
        const gapIsLargerThanSelection = gap.length > selectionPageBounds.width;
        if (gapIsLargerThanSelection && round(Math.abs(centerNudge)) <= round(minOffset.x)) {
          if (round(Math.abs(centerNudge)) < round(minOffset.x)) {
            nearestSnapsX.length = 0;
          }
          minOffset.x = Math.abs(centerNudge);
          const snap = {
            type: "gap_center",
            gap,
            nudge: centerNudge
          };
          const otherCenterSnap = nearestSnapsX.find(({ type }) => type === "gap_center");
          const gapBreadthsOverlap = otherCenterSnap && rangeIntersection(
            gap.breadthIntersection[0],
            gap.breadthIntersection[1],
            otherCenterSnap.gap.breadthIntersection[0],
            otherCenterSnap.gap.breadthIntersection[1]
          );
          if (otherCenterSnap && otherCenterSnap.gap.length > gap.length && gapBreadthsOverlap) {
            nearestSnapsX[nearestSnapsX.indexOf(otherCenterSnap)] = snap;
          } else if (!otherCenterSnap || !gapBreadthsOverlap) {
            nearestSnapsX.push(snap);
          }
        }
        const duplicationLeftX = gap.startNode.pageBounds.minX - gap.length;
        const selectionRightX = selectionPageBounds.maxX;
        const duplicationLeftNudge = duplicationLeftX - selectionRightX;
        if (round(Math.abs(duplicationLeftNudge)) <= round(minOffset.x)) {
          if (round(Math.abs(duplicationLeftNudge)) < round(minOffset.x)) {
            nearestSnapsX.length = 0;
          }
          minOffset.x = Math.abs(duplicationLeftNudge);
          nearestSnapsX.push({
            type: "gap_duplicate",
            gap,
            protrusionDirection: "left",
            nudge: duplicationLeftNudge
          });
        }
        const duplicationRightX = gap.endNode.pageBounds.maxX + gap.length;
        const selectionLeftX = selectionPageBounds.minX;
        const duplicationRightNudge = duplicationRightX - selectionLeftX;
        if (round(Math.abs(duplicationRightNudge)) <= round(minOffset.x)) {
          if (round(Math.abs(duplicationRightNudge)) < round(minOffset.x)) {
            nearestSnapsX.length = 0;
          }
          minOffset.x = Math.abs(duplicationRightNudge);
          nearestSnapsX.push({
            type: "gap_duplicate",
            gap,
            protrusionDirection: "right",
            nudge: duplicationRightNudge
          });
        }
      }
      for (const gap of vertical) {
        if (!rangesOverlap(
          gap.breadthIntersection[0],
          gap.breadthIntersection[1],
          selectionPageBounds.minX,
          selectionPageBounds.maxX
        )) {
          continue;
        }
        const gapMidY = gap.startEdge[0].y + gap.length / 2;
        const centerNudge = gapMidY - selectionPageBounds.center.y;
        const gapIsLargerThanSelection = gap.length > selectionPageBounds.height;
        if (gapIsLargerThanSelection && round(Math.abs(centerNudge)) <= round(minOffset.y)) {
          if (round(Math.abs(centerNudge)) < round(minOffset.y)) {
            nearestSnapsY.length = 0;
          }
          minOffset.y = Math.abs(centerNudge);
          const snap = {
            type: "gap_center",
            gap,
            nudge: centerNudge
          };
          const otherCenterSnap = nearestSnapsY.find(({ type }) => type === "gap_center");
          const gapBreadthsOverlap = otherCenterSnap && rangesOverlap(
            otherCenterSnap.gap.breadthIntersection[0],
            otherCenterSnap.gap.breadthIntersection[1],
            gap.breadthIntersection[0],
            gap.breadthIntersection[1]
          );
          if (otherCenterSnap && otherCenterSnap.gap.length > gap.length && gapBreadthsOverlap) {
            nearestSnapsY[nearestSnapsY.indexOf(otherCenterSnap)] = snap;
          } else if (!otherCenterSnap || !gapBreadthsOverlap) {
            nearestSnapsY.push(snap);
          }
          continue;
        }
        const duplicationTopY = gap.startNode.pageBounds.minY - gap.length;
        const selectionBottomY = selectionPageBounds.maxY;
        const duplicationTopNudge = duplicationTopY - selectionBottomY;
        if (round(Math.abs(duplicationTopNudge)) <= round(minOffset.y)) {
          if (round(Math.abs(duplicationTopNudge)) < round(minOffset.y)) {
            nearestSnapsY.length = 0;
          }
          minOffset.y = Math.abs(duplicationTopNudge);
          nearestSnapsY.push({
            type: "gap_duplicate",
            gap,
            protrusionDirection: "top",
            nudge: duplicationTopNudge
          });
        }
        const duplicationBottomY = gap.endNode.pageBounds.maxY + gap.length;
        const selectionTopY = selectionPageBounds.minY;
        const duplicationBottomNudge = duplicationBottomY - selectionTopY;
        if (round(Math.abs(duplicationBottomNudge)) <= round(minOffset.y)) {
          if (round(Math.abs(duplicationBottomNudge)) < round(minOffset.y)) {
            nearestSnapsY.length = 0;
          }
          minOffset.y = Math.abs(duplicationBottomNudge);
          nearestSnapsY.push({
            type: "gap_duplicate",
            gap,
            protrusionDirection: "bottom",
            nudge: duplicationBottomNudge
          });
        }
      }
    }
    getPointSnapLines({
      nearestSnapsX,
      nearestSnapsY
    }) {
      const snapGroupsX = {};
      const snapGroupsY = {};
      if (nearestSnapsX.length > 0) {
        for (const snap of nearestSnapsX) {
          if (snap.type === "points") {
            const key = round(snap.points.otherPoint.x);
            if (!snapGroupsX[key]) {
              snapGroupsX[key] = [];
            }
            snapGroupsX[key].push(snap.points);
          }
        }
      }
      if (nearestSnapsY.length > 0) {
        for (const snap of nearestSnapsY) {
          if (snap.type === "points") {
            const key = round(snap.points.otherPoint.y);
            if (!snapGroupsY[key]) {
              snapGroupsY[key] = [];
            }
            snapGroupsY[key].push(snap.points);
          }
        }
      }
      return Object.values(snapGroupsX).concat(Object.values(snapGroupsY)).map((snapGroup) => ({
        id: uniqueId(),
        type: "points",
        points: dedupe(
          snapGroup.map((snap) => Vec.From(snap.otherPoint)).concat(snapGroup.map((snap) => Vec.From(snap.thisPoint))),
          (a, b) => a.equals(b)
        )
      }));
    }
    getGapSnapLines({
      selectionPageBounds,
      nearestSnapsX,
      nearestSnapsY
    }) {
      const { vertical, horizontal } = this.getVisibleGaps();
      const selectionSides = {
        top: selectionPageBounds.sides[0],
        right: selectionPageBounds.sides[1],
        // need bottom and left to be sorted asc, which .sides is not.
        bottom: [selectionPageBounds.corners[3], selectionPageBounds.corners[2]],
        left: [selectionPageBounds.corners[0], selectionPageBounds.corners[3]]
      };
      const result = [];
      if (nearestSnapsX.length > 0) {
        for (const snap of nearestSnapsX) {
          if (snap.type === "points") continue;
          const {
            gap: { breadthIntersection, startEdge, startNode, endNode, length, endEdge }
          } = snap;
          switch (snap.type) {
            case "gap_center": {
              const newGapsLength = (length - selectionPageBounds.width) / 2;
              const gapBreadthIntersection = rangeIntersection(
                breadthIntersection[0],
                breadthIntersection[1],
                selectionPageBounds.minY,
                selectionPageBounds.maxY
              );
              result.push({
                type: "gaps",
                direction: "horizontal",
                id: uniqueId(),
                gaps: [
                  ...findAdjacentGaps(
                    horizontal,
                    startNode.id,
                    newGapsLength,
                    "backward",
                    gapBreadthIntersection
                  ),
                  {
                    startEdge,
                    endEdge: selectionSides.left
                  },
                  {
                    startEdge: selectionSides.right,
                    endEdge
                  },
                  ...findAdjacentGaps(
                    horizontal,
                    endNode.id,
                    newGapsLength,
                    "forward",
                    gapBreadthIntersection
                  )
                ]
              });
              break;
            }
            case "gap_duplicate": {
              const gapBreadthIntersection = rangeIntersection(
                breadthIntersection[0],
                breadthIntersection[1],
                selectionPageBounds.minY,
                selectionPageBounds.maxY
              );
              result.push({
                type: "gaps",
                direction: "horizontal",
                id: uniqueId(),
                gaps: snap.protrusionDirection === "left" ? [
                  {
                    startEdge: selectionSides.right,
                    endEdge: startEdge.map(
                      (v) => v.clone().addXY(-startNode.pageBounds.width, 0)
                    )
                  },
                  { startEdge, endEdge },
                  ...findAdjacentGaps(
                    horizontal,
                    endNode.id,
                    length,
                    "forward",
                    gapBreadthIntersection
                  )
                ] : [
                  ...findAdjacentGaps(
                    horizontal,
                    startNode.id,
                    length,
                    "backward",
                    gapBreadthIntersection
                  ),
                  { startEdge, endEdge },
                  {
                    startEdge: endEdge.map(
                      (v) => v.clone().addXY(snap.gap.endNode.pageBounds.width, 0)
                    ),
                    endEdge: selectionSides.left
                  }
                ]
              });
              break;
            }
          }
        }
      }
      if (nearestSnapsY.length > 0) {
        for (const snap of nearestSnapsY) {
          if (snap.type === "points") continue;
          const {
            gap: { breadthIntersection, startEdge, startNode, endNode, length, endEdge }
          } = snap;
          switch (snap.type) {
            case "gap_center": {
              const newGapsLength = (length - selectionPageBounds.height) / 2;
              const gapBreadthIntersection = rangeIntersection(
                breadthIntersection[0],
                breadthIntersection[1],
                selectionPageBounds.minX,
                selectionPageBounds.maxX
              );
              result.push({
                type: "gaps",
                direction: "vertical",
                id: uniqueId(),
                gaps: [
                  ...findAdjacentGaps(
                    vertical,
                    startNode.id,
                    newGapsLength,
                    "backward",
                    gapBreadthIntersection
                  ),
                  {
                    startEdge,
                    endEdge: selectionSides.top
                  },
                  {
                    startEdge: selectionSides.bottom,
                    endEdge
                  },
                  ...findAdjacentGaps(
                    vertical,
                    snap.gap.endNode.id,
                    newGapsLength,
                    "forward",
                    gapBreadthIntersection
                  )
                ]
              });
              break;
            }
            case "gap_duplicate":
              {
                const gapBreadthIntersection = rangeIntersection(
                  breadthIntersection[0],
                  breadthIntersection[1],
                  selectionPageBounds.minX,
                  selectionPageBounds.maxX
                );
                result.push({
                  type: "gaps",
                  direction: "vertical",
                  id: uniqueId(),
                  gaps: snap.protrusionDirection === "top" ? [
                    {
                      startEdge: selectionSides.bottom,
                      endEdge: startEdge.map(
                        (v) => v.clone().addXY(0, -startNode.pageBounds.height)
                      )
                    },
                    { startEdge, endEdge },
                    ...findAdjacentGaps(
                      vertical,
                      endNode.id,
                      length,
                      "forward",
                      gapBreadthIntersection
                    )
                  ] : [
                    ...findAdjacentGaps(
                      vertical,
                      startNode.id,
                      length,
                      "backward",
                      gapBreadthIntersection
                    ),
                    { startEdge, endEdge },
                    {
                      startEdge: endEdge.map(
                        (v) => v.clone().addXY(0, endNode.pageBounds.height)
                      ),
                      endEdge: selectionSides.top
                    }
                  ]
                });
              }
              break;
          }
        }
      }
      dedupeGapSnaps(result);
      return result;
    }
  };
  _init4 = __decoratorStart4(null);
  __decorateElement4(_init4, 1, "getSnapPointsCache", _getSnapPointsCache_dec, BoundsSnaps);
  __decorateElement4(_init4, 1, "getSnappablePoints", _getSnappablePoints_dec, BoundsSnaps);
  __decorateElement4(_init4, 1, "getSnappableGapNodes", _getSnappableGapNodes_dec, BoundsSnaps);
  __decorateElement4(_init4, 1, "getVisibleGaps", _getVisibleGaps_dec, BoundsSnaps);
  __decoratorMetadata4(_init4, BoundsSnaps);
  function getResizeSnapPointsForHandle(handle, selectionPageBounds) {
    const { minX, maxX, minY, maxY } = selectionPageBounds;
    const result = [];
    switch (handle) {
      case "top":
      case "left":
      case "top_left":
      case "any":
        result.push({
          id: "top_left",
          handle: "top_left",
          x: minX,
          y: minY
        });
    }
    switch (handle) {
      case "top":
      case "right":
      case "top_right":
      case "any":
        result.push({
          id: "top_right",
          handle: "top_right",
          x: maxX,
          y: minY
        });
    }
    switch (handle) {
      case "bottom":
      case "right":
      case "bottom_right":
      case "any":
        result.push({
          id: "bottom_right",
          handle: "bottom_right",
          x: maxX,
          y: maxY
        });
    }
    switch (handle) {
      case "bottom":
      case "left":
      case "bottom_left":
      case "any":
        result.push({
          id: "bottom_left",
          handle: "bottom_left",
          x: minX,
          y: maxY
        });
    }
    return result;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/editor/managers/SnapManager/HandleSnaps.mjs
  var __create6 = Object.create;
  var __defProp6 = Object.defineProperty;
  var __getOwnPropDesc6 = Object.getOwnPropertyDescriptor;
  var __knownSymbol5 = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError5 = (msg2) => {
    throw TypeError(msg2);
  };
  var __defNormalProp5 = (obj, key, value) => key in obj ? __defProp6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name5 = (target, value) => __defProp6(target, "name", { value, configurable: true });
  var __decoratorStart5 = (base) => [, , , __create6(base?.[__knownSymbol5("metadata")] ?? null)];
  var __decoratorStrings5 = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
  var __expectFn5 = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError5("Function expected") : fn;
  var __decoratorContext5 = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings5[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError5("Already initialized") : fns.push(__expectFn5(fn || null)) });
  var __decoratorMetadata5 = (array2, target) => __defNormalProp5(target, __knownSymbol5("metadata"), array2[3]);
  var __runInitializers5 = (array2, flags, self2, value) => {
    for (var i = 0, fns = array2[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self2) : value = fns[i].call(self2, value);
    return value;
  };
  var __decorateElement5 = (array2, flags, name, decorators, target, extra) => {
    var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
    var j = k > 3 ? array2.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings5[k + 5];
    var initializers = k > 3 && (array2[j - 1] = []), extraInitializers = array2[j] || (array2[j] = []);
    var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc6(k < 4 ? target : { get [name]() {
      return __privateGet5(this, extra);
    }, set [name](x) {
      return __privateSet5(this, extra, x);
    } }, name));
    k ? p && k < 4 && __name5(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name5(target, name);
    for (var i = decorators.length - 1; i >= 0; i--) {
      ctx = __decoratorContext5(k, name, done = {}, array2[3], extraInitializers);
      if (k) {
        ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn5(target, x) : (x) => name in x };
        if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet5 : __privateMethod5)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
        if (k > 2) access.set = p ? (x, y) => __privateSet5(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
      }
      it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
      if (k ^ 4 || it === void 0) __expectFn5(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
      else if (typeof it !== "object" || it === null) __typeError5("Object expected");
      else __expectFn5(fn = it.get) && (desc.get = fn), __expectFn5(fn = it.set) && (desc.set = fn), __expectFn5(fn = it.init) && initializers.unshift(fn);
    }
    return k || __decoratorMetadata5(array2, target), desc && __defProp6(target, name, desc), p ? k ^ 4 ? extra : desc : target;
  };
  var __publicField5 = (obj, key, value) => __defNormalProp5(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck5 = (obj, member, msg2) => member.has(obj) || __typeError5("Cannot " + msg2);
  var __privateIn5 = (member, obj) => Object(obj) !== obj ? __typeError5('Cannot use the "in" operator on this value') : member.has(obj);
  var __privateGet5 = (obj, member, getter) => (__accessCheck5(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateSet5 = (obj, member, value, setter) => (__accessCheck5(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod5 = (obj, member, method) => (__accessCheck5(obj, member, "access private method"), method);
  var _getSnapGeometryCache_dec;
  var _init5;
  var defaultGetSelfSnapOutline = () => null;
  var defaultGetSelfSnapPoints = () => [];
  _getSnapGeometryCache_dec = [computed];
  var HandleSnaps = class {
    constructor(manager) {
      this.manager = manager;
      __runInitializers5(_init5, 5, this);
      __publicField5(this, "editor");
      this.editor = manager.editor;
    }
    getSnapGeometryCache() {
      const { editor } = this;
      return editor.store.createComputedCache("handle snap geometry", (shape) => {
        const snapGeometry = editor.getShapeUtil(shape).getHandleSnapGeometry(shape);
        const getSelfSnapOutline = snapGeometry.getSelfSnapOutline ? snapGeometry.getSelfSnapOutline.bind(snapGeometry) : defaultGetSelfSnapOutline;
        const getSelfSnapPoints = snapGeometry.getSelfSnapPoints ? snapGeometry.getSelfSnapPoints.bind(snapGeometry) : defaultGetSelfSnapPoints;
        return {
          outline: snapGeometry.outline === void 0 ? editor.getShapeGeometry(shape) : snapGeometry.outline,
          points: snapGeometry.points ?? [],
          getSelfSnapOutline,
          getSelfSnapPoints
        };
      });
    }
    *iterateSnapPointsInPageSpace(currentShapeId, currentHandle) {
      const selfSnapPoints = this.getSnapGeometryCache().get(currentShapeId)?.getSelfSnapPoints(currentHandle);
      if (selfSnapPoints && selfSnapPoints.length) {
        const shapePageTransform = assertExists(this.editor.getShapePageTransform(currentShapeId));
        for (const point of selfSnapPoints) {
          yield shapePageTransform.applyToPoint(point);
        }
      }
      for (const shapeId of this.manager.getSnappableShapes()) {
        if (shapeId === currentShapeId) continue;
        const snapPoints = this.getSnapGeometryCache().get(shapeId)?.points;
        if (!snapPoints || !snapPoints.length) continue;
        const shapePageTransform = assertExists(this.editor.getShapePageTransform(shapeId));
        for (const point of snapPoints) {
          yield shapePageTransform.applyToPoint(point);
        }
      }
    }
    *iterateSnapOutlines(currentShapeId, currentHandle) {
      const selfSnapOutline = this.getSnapGeometryCache().get(currentShapeId)?.getSelfSnapOutline(currentHandle);
      if (selfSnapOutline) {
        yield { shapeId: currentShapeId, outline: selfSnapOutline };
      }
      for (const shapeId of this.manager.getSnappableShapes()) {
        if (shapeId === currentShapeId) continue;
        const snapOutline = this.getSnapGeometryCache().get(shapeId)?.outline;
        if (!snapOutline) continue;
        yield { shapeId, outline: snapOutline };
      }
    }
    getHandleSnapPosition({
      currentShapeId,
      handle,
      handleInPageSpace
    }) {
      const snapThreshold = this.manager.getSnapThreshold();
      let minDistanceForSnapPoint = snapThreshold;
      let nearestSnapPoint = null;
      for (const snapPoint of this.iterateSnapPointsInPageSpace(currentShapeId, handle)) {
        if (Vec.DistMin(handleInPageSpace, snapPoint, minDistanceForSnapPoint)) {
          minDistanceForSnapPoint = Vec.Dist(handleInPageSpace, snapPoint);
          nearestSnapPoint = snapPoint;
        }
      }
      if (nearestSnapPoint) return nearestSnapPoint;
      let minDistanceForOutline = snapThreshold;
      let nearestPointOnOutline = null;
      for (const { shapeId, outline } of this.iterateSnapOutlines(currentShapeId, handle)) {
        const shapePageTransform = assertExists(this.editor.getShapePageTransform(shapeId));
        const pointInShapeSpace = this.editor.getPointInShapeSpace(shapeId, handleInPageSpace);
        const nearestShapePointInShapeSpace = outline.nearestPoint(pointInShapeSpace);
        const nearestInPageSpace = shapePageTransform.applyToPoint(nearestShapePointInShapeSpace);
        if (Vec.DistMin(handleInPageSpace, nearestInPageSpace, minDistanceForOutline)) {
          minDistanceForOutline = Vec.Dist(handleInPageSpace, nearestInPageSpace);
          nearestPointOnOutline = nearestInPageSpace;
        }
      }
      if (nearestPointOnOutline) return nearestPointOnOutline;
      return null;
    }
    snapHandle({
      currentShapeId,
      handle
    }) {
      const currentShapeTransform = assertExists(this.editor.getShapePageTransform(currentShapeId));
      const handleInPageSpace = currentShapeTransform.applyToPoint(handle);
      const snapPosition = this.getHandleSnapPosition({ currentShapeId, handle, handleInPageSpace });
      if (snapPosition) {
        this.manager.setIndicators([
          {
            id: uniqueId(),
            type: "points",
            points: [snapPosition]
          }
        ]);
        return { nudge: Vec.Sub(snapPosition, handleInPageSpace) };
      }
      return null;
    }
  };
  _init5 = __decoratorStart5(null);
  __decorateElement5(_init5, 1, "getSnapGeometryCache", _getSnapGeometryCache_dec, HandleSnaps);
  __decoratorMetadata5(_init5, HandleSnaps);

  // node_modules/@tldraw/editor/dist-esm/lib/editor/managers/SnapManager/SnapManager.mjs
  var __create7 = Object.create;
  var __defProp7 = Object.defineProperty;
  var __getOwnPropDesc7 = Object.getOwnPropertyDescriptor;
  var __knownSymbol6 = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError6 = (msg2) => {
    throw TypeError(msg2);
  };
  var __defNormalProp6 = (obj, key, value) => key in obj ? __defProp7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name6 = (target, value) => __defProp7(target, "name", { value, configurable: true });
  var __decoratorStart6 = (base) => [, , , __create7(base?.[__knownSymbol6("metadata")] ?? null)];
  var __decoratorStrings6 = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
  var __expectFn6 = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError6("Function expected") : fn;
  var __decoratorContext6 = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings6[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError6("Already initialized") : fns.push(__expectFn6(fn || null)) });
  var __decoratorMetadata6 = (array2, target) => __defNormalProp6(target, __knownSymbol6("metadata"), array2[3]);
  var __runInitializers6 = (array2, flags, self2, value) => {
    for (var i = 0, fns = array2[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self2) : value = fns[i].call(self2, value);
    return value;
  };
  var __decorateElement6 = (array2, flags, name, decorators, target, extra) => {
    var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
    var j = k > 3 ? array2.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings6[k + 5];
    var initializers = k > 3 && (array2[j - 1] = []), extraInitializers = array2[j] || (array2[j] = []);
    var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc7(k < 4 ? target : { get [name]() {
      return __privateGet6(this, extra);
    }, set [name](x) {
      return __privateSet6(this, extra, x);
    } }, name));
    k ? p && k < 4 && __name6(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name6(target, name);
    for (var i = decorators.length - 1; i >= 0; i--) {
      ctx = __decoratorContext6(k, name, done = {}, array2[3], extraInitializers);
      if (k) {
        ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn6(target, x) : (x) => name in x };
        if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet6 : __privateMethod6)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
        if (k > 2) access.set = p ? (x, y) => __privateSet6(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
      }
      it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
      if (k ^ 4 || it === void 0) __expectFn6(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
      else if (typeof it !== "object" || it === null) __typeError6("Object expected");
      else __expectFn6(fn = it.get) && (desc.get = fn), __expectFn6(fn = it.set) && (desc.set = fn), __expectFn6(fn = it.init) && initializers.unshift(fn);
    }
    return k || __decoratorMetadata6(array2, target), desc && __defProp7(target, name, desc), p ? k ^ 4 ? extra : desc : target;
  };
  var __publicField6 = (obj, key, value) => __defNormalProp6(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck6 = (obj, member, msg2) => member.has(obj) || __typeError6("Cannot " + msg2);
  var __privateIn6 = (member, obj) => Object(obj) !== obj ? __typeError6('Cannot use the "in" operator on this value') : member.has(obj);
  var __privateGet6 = (obj, member, getter) => (__accessCheck6(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateSet6 = (obj, member, value, setter) => (__accessCheck6(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod6 = (obj, member, method) => (__accessCheck6(obj, member, "access private method"), method);
  var _getCurrentCommonAncestor_dec;
  var _getSnappableShapes_dec;
  var _getSnapThreshold_dec;
  var _init6;
  _getSnapThreshold_dec = [computed], _getSnappableShapes_dec = [computed], _getCurrentCommonAncestor_dec = [computed];
  var SnapManager = class {
    constructor(editor) {
      this.editor = editor;
      __runInitializers6(_init6, 5, this);
      __publicField6(this, "shapeBounds");
      __publicField6(this, "handles");
      __publicField6(this, "_snapIndicators", atom("snapLines", void 0));
      this.shapeBounds = new BoundsSnaps(this);
      this.handles = new HandleSnaps(this);
    }
    getIndicators() {
      return this._snapIndicators.get() ?? EMPTY_ARRAY;
    }
    clearIndicators() {
      if (this.getIndicators().length) {
        this._snapIndicators.set(void 0);
      }
    }
    setIndicators(indicators) {
      this._snapIndicators.set(indicators);
    }
    getSnapThreshold() {
      return 8 / this.editor.getZoomLevel();
    }
    getSnappableShapes() {
      const { editor } = this;
      const renderingBounds = editor.getViewportPageBounds();
      const selectedShapeIds = editor.getSelectedShapeIds();
      const snappableShapes = /* @__PURE__ */ new Set();
      const collectSnappableShapesFromParent = (parentId) => {
        if (isShapeId(parentId)) {
          const parent = editor.getShape(parentId);
          if (parent && editor.isShapeOfType(parent, "frame")) {
            snappableShapes.add(parentId);
          }
        }
        const sortedChildIds = editor.getSortedChildIdsForParent(parentId);
        for (const childId of sortedChildIds) {
          if (selectedShapeIds.includes(childId)) continue;
          const childShape = editor.getShape(childId);
          if (!childShape) continue;
          const util = editor.getShapeUtil(childShape);
          if (!util.canSnap(childShape)) continue;
          const pageBounds = editor.getShapePageBounds(childId);
          if (!(pageBounds && renderingBounds.includes(pageBounds))) continue;
          if (editor.isShapeOfType(childShape, "group")) {
            collectSnappableShapesFromParent(childId);
            continue;
          }
          snappableShapes.add(childId);
        }
      };
      collectSnappableShapesFromParent(this.getCurrentCommonAncestor() ?? editor.getCurrentPageId());
      return snappableShapes;
    }
    getCurrentCommonAncestor() {
      return this.editor.findCommonAncestor(this.editor.getSelectedShapes());
    }
  };
  _init6 = __decoratorStart6(null);
  __decorateElement6(_init6, 1, "getSnapThreshold", _getSnapThreshold_dec, SnapManager);
  __decorateElement6(_init6, 1, "getSnappableShapes", _getSnappableShapes_dec, SnapManager);
  __decorateElement6(_init6, 1, "getCurrentCommonAncestor", _getCurrentCommonAncestor_dec, SnapManager);
  __decoratorMetadata6(_init6, SnapManager);

  // node_modules/@tldraw/editor/dist-esm/lib/editor/managers/TextManager.mjs
  var fixNewLines = /\r?\n|\r/g;
  function normalizeTextForDom(text) {
    return text.replace(fixNewLines, "\n").split("\n").map((x) => x || " ").join("\n");
  }
  var textAlignmentsForLtr = {
    start: "left",
    "start-legacy": "left",
    middle: "center",
    "middle-legacy": "center",
    end: "right",
    "end-legacy": "right"
  };
  var spaceCharacterRegex = /\s/;
  var TextManager = class {
    constructor(editor) {
      this.editor = editor;
      this.baseElem = document.createElement("div");
      this.baseElem.classList.add("tl-text");
      this.baseElem.classList.add("tl-text-measure");
      this.baseElem.tabIndex = -1;
    }
    baseElem;
    measureText(textToMeasure, opts) {
      const elm = this.baseElem.cloneNode();
      this.editor.getContainer().appendChild(elm);
      elm.setAttribute("dir", "auto");
      elm.style.setProperty("unicode-bidi", "plaintext");
      elm.style.setProperty("font-family", opts.fontFamily);
      elm.style.setProperty("font-style", opts.fontStyle);
      elm.style.setProperty("font-weight", opts.fontWeight);
      elm.style.setProperty("font-size", opts.fontSize + "px");
      elm.style.setProperty("line-height", opts.lineHeight * opts.fontSize + "px");
      elm.style.setProperty("max-width", opts.maxWidth === null ? null : opts.maxWidth + "px");
      elm.style.setProperty("min-width", opts.minWidth === null ? null : opts.minWidth + "px");
      elm.style.setProperty("padding", opts.padding);
      elm.style.setProperty(
        "overflow-wrap",
        opts.disableOverflowWrapBreaking ? "normal" : "break-word"
      );
      elm.textContent = normalizeTextForDom(textToMeasure);
      const scrollWidth = elm.scrollWidth;
      const rect = elm.getBoundingClientRect();
      elm.remove();
      return {
        x: 0,
        y: 0,
        w: rect.width,
        h: rect.height,
        scrollWidth
      };
    }
    /**
     * Given an html element, measure the position of each span of unbroken
     * word/white-space characters within any text nodes it contains.
     */
    measureElementTextNodeSpans(element, { shouldTruncateToFirstLine = false } = {}) {
      const spans = [];
      const elmBounds = element.getBoundingClientRect();
      const offsetX = -elmBounds.left;
      const offsetY = -elmBounds.top;
      const range = new Range();
      const textNode = element.childNodes[0];
      let idx = 0;
      let currentSpan = null;
      let prevCharWasSpaceCharacter = null;
      let prevCharTop = 0;
      let prevCharLeftForRTLTest = 0;
      let didTruncate = false;
      for (const childNode of element.childNodes) {
        if (childNode.nodeType !== Node.TEXT_NODE) continue;
        for (const char of childNode.textContent ?? "") {
          range.setStart(textNode, idx);
          range.setEnd(textNode, idx + char.length);
          const rects = range.getClientRects();
          const rect = rects[rects.length - 1];
          const top = rect.top + offsetY;
          const left = rect.left + offsetX;
          const right = rect.right + offsetX;
          const isRTL2 = left < prevCharLeftForRTLTest;
          const isSpaceCharacter = spaceCharacterRegex.test(char);
          if (
            // If we're at a word boundary...
            isSpaceCharacter !== prevCharWasSpaceCharacter || // ...or we're on a different line...
            top !== prevCharTop || // ...or we're at the start of the text and haven't created a span yet...
            !currentSpan
          ) {
            if (currentSpan) {
              if (shouldTruncateToFirstLine && top !== prevCharTop) {
                didTruncate = true;
                break;
              }
              spans.push(currentSpan);
            }
            currentSpan = {
              box: { x: left, y: top, w: rect.width, h: rect.height },
              text: char
            };
            prevCharLeftForRTLTest = left;
          } else {
            if (isRTL2) {
              currentSpan.box.x = left;
            }
            currentSpan.box.w = isRTL2 ? currentSpan.box.w + rect.width : right - currentSpan.box.x;
            currentSpan.text += char;
          }
          if (char === "\n") {
            prevCharLeftForRTLTest = 0;
          }
          prevCharWasSpaceCharacter = isSpaceCharacter;
          prevCharTop = top;
          idx += char.length;
        }
      }
      if (currentSpan) {
        spans.push(currentSpan);
      }
      return { spans, didTruncate };
    }
    /**
     * Measure text into individual spans. Spans are created by rendering the
     * text, then dividing it up according to line breaks and word boundaries.
     *
     * It works by having the browser render the text, then measuring the
     * position of each character. You can use this to replicate the text-layout
     * algorithm of the current browser in e.g. an SVG export.
     */
    measureTextSpans(textToMeasure, opts) {
      if (textToMeasure === "") return [];
      const elm = this.baseElem.cloneNode();
      this.editor.getContainer().appendChild(elm);
      const elementWidth = Math.ceil(opts.width - opts.padding * 2);
      elm.setAttribute("dir", "auto");
      elm.style.setProperty("unicode-bidi", "plaintext");
      elm.style.setProperty("width", `${elementWidth}px`);
      elm.style.setProperty("height", "min-content");
      elm.style.setProperty("font-size", `${opts.fontSize}px`);
      elm.style.setProperty("font-family", opts.fontFamily);
      elm.style.setProperty("font-weight", opts.fontWeight);
      elm.style.setProperty("line-height", `${opts.lineHeight * opts.fontSize}px`);
      elm.style.setProperty("text-align", textAlignmentsForLtr[opts.textAlign]);
      const shouldTruncateToFirstLine = opts.overflow === "truncate-ellipsis" || opts.overflow === "truncate-clip";
      if (shouldTruncateToFirstLine) {
        elm.style.setProperty("overflow-wrap", "anywhere");
        elm.style.setProperty("word-break", "break-all");
      }
      const normalizedText = normalizeTextForDom(textToMeasure);
      elm.textContent = normalizedText;
      const { spans, didTruncate } = this.measureElementTextNodeSpans(elm, {
        shouldTruncateToFirstLine
      });
      if (opts.overflow === "truncate-ellipsis" && didTruncate) {
        elm.textContent = "\u2026";
        const ellipsisWidth = Math.ceil(this.measureElementTextNodeSpans(elm).spans[0].box.w);
        elm.style.setProperty("width", `${elementWidth - ellipsisWidth}px`);
        elm.textContent = normalizedText;
        const truncatedSpans = this.measureElementTextNodeSpans(elm, {
          shouldTruncateToFirstLine: true
        }).spans;
        const lastSpan = truncatedSpans[truncatedSpans.length - 1];
        truncatedSpans.push({
          text: "\u2026",
          box: {
            x: Math.min(lastSpan.box.x + lastSpan.box.w, opts.width - opts.padding - ellipsisWidth),
            y: lastSpan.box.y,
            w: ellipsisWidth,
            h: lastSpan.box.h
          }
        });
        return truncatedSpans;
      }
      elm.remove();
      return spans;
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/managers/TickManager.mjs
  var __create8 = Object.create;
  var __defProp8 = Object.defineProperty;
  var __getOwnPropDesc8 = Object.getOwnPropertyDescriptor;
  var __knownSymbol7 = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError7 = (msg2) => {
    throw TypeError(msg2);
  };
  var __defNormalProp7 = (obj, key, value) => key in obj ? __defProp8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name7 = (target, value) => __defProp8(target, "name", { value, configurable: true });
  var __decoratorStart7 = (base) => [, , , __create8(base?.[__knownSymbol7("metadata")] ?? null)];
  var __decoratorStrings7 = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
  var __expectFn7 = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError7("Function expected") : fn;
  var __decoratorContext7 = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings7[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError7("Already initialized") : fns.push(__expectFn7(fn || null)) });
  var __decoratorMetadata7 = (array2, target) => __defNormalProp7(target, __knownSymbol7("metadata"), array2[3]);
  var __runInitializers7 = (array2, flags, self2, value) => {
    for (var i = 0, fns = array2[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self2) : value = fns[i].call(self2, value);
    return value;
  };
  var __decorateElement7 = (array2, flags, name, decorators, target, extra) => {
    var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
    var j = k > 3 ? array2.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings7[k + 5];
    var initializers = k > 3 && (array2[j - 1] = []), extraInitializers = array2[j] || (array2[j] = []);
    var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc8(k < 4 ? target : { get [name]() {
      return __privateGet7(this, extra);
    }, set [name](x) {
      return __privateSet7(this, extra, x);
    } }, name));
    k ? p && k < 4 && __name7(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name7(target, name);
    for (var i = decorators.length - 1; i >= 0; i--) {
      ctx = __decoratorContext7(k, name, done = {}, array2[3], extraInitializers);
      if (k) {
        ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn7(target, x) : (x) => name in x };
        if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet7 : __privateMethod7)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
        if (k > 2) access.set = p ? (x, y) => __privateSet7(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
      }
      it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
      if (k ^ 4 || it === void 0) __expectFn7(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
      else if (typeof it !== "object" || it === null) __typeError7("Object expected");
      else __expectFn7(fn = it.get) && (desc.get = fn), __expectFn7(fn = it.set) && (desc.set = fn), __expectFn7(fn = it.init) && initializers.unshift(fn);
    }
    return k || __decoratorMetadata7(array2, target), desc && __defProp8(target, name, desc), p ? k ^ 4 ? extra : desc : target;
  };
  var __publicField7 = (obj, key, value) => __defNormalProp7(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck7 = (obj, member, msg2) => member.has(obj) || __typeError7("Cannot " + msg2);
  var __privateIn7 = (member, obj) => Object(obj) !== obj ? __typeError7('Cannot use the "in" operator on this value') : member.has(obj);
  var __privateGet7 = (obj, member, getter) => (__accessCheck7(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateSet7 = (obj, member, value, setter) => (__accessCheck7(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod7 = (obj, member, method) => (__accessCheck7(obj, member, "access private method"), method);
  var _dispose_dec;
  var _tick_dec;
  var _init7;
  var throttleToNextFrame2 = typeof process !== "undefined" && false ? (
    // At test time we should use actual raf and not throttle, because throttle was set up to evaluate immediately during tests, which causes stack overflow
    // for the tick manager since it sets up a raf loop.
    function mockThrottle(cb) {
      const frame2 = requestAnimationFrame(cb);
      return () => cancelAnimationFrame(frame2);
    }
  ) : throttleToNextFrame;
  _tick_dec = [bind], _dispose_dec = [bind];
  var TickManager = class {
    constructor(editor) {
      this.editor = editor;
      __runInitializers7(_init7, 5, this);
      __publicField7(this, "cancelRaf");
      __publicField7(this, "isPaused", true);
      __publicField7(this, "now", 0);
      __publicField7(this, "prevPoint", new Vec());
      this.editor.disposables.add(this.dispose);
      this.start();
    }
    start() {
      this.isPaused = false;
      this.cancelRaf?.();
      this.cancelRaf = throttleToNextFrame2(this.tick);
      this.now = Date.now();
    }
    tick() {
      if (this.isPaused) {
        return;
      }
      const now = Date.now();
      const elapsed = now - this.now;
      this.now = now;
      this.updatePointerVelocity(elapsed);
      this.editor.emit("frame", elapsed);
      this.editor.emit("tick", elapsed);
      this.cancelRaf = throttleToNextFrame2(this.tick);
    }
    dispose() {
      this.isPaused = true;
      this.cancelRaf?.();
    }
    updatePointerVelocity(elapsed) {
      const {
        prevPoint,
        editor: {
          inputs: { currentScreenPoint, pointerVelocity }
        }
      } = this;
      if (elapsed === 0) return;
      const delta = Vec.Sub(currentScreenPoint, prevPoint);
      this.prevPoint = currentScreenPoint.clone();
      const length = delta.len();
      const direction = length ? delta.div(length) : new Vec(0, 0);
      const next = pointerVelocity.clone().lrp(direction.mul(length / elapsed), 0.5);
      if (Math.abs(next.x) < 0.01) next.x = 0;
      if (Math.abs(next.y) < 0.01) next.y = 0;
      if (!pointerVelocity.equals(next)) {
        this.editor.inputs.pointerVelocity = next;
      }
    }
  };
  _init7 = __decoratorStart7(null);
  __decorateElement7(_init7, 1, "tick", _tick_dec, TickManager);
  __decorateElement7(_init7, 1, "dispose", _dispose_dec, TickManager);
  __decoratorMetadata7(_init7, TickManager);

  // node_modules/@tldraw/editor/dist-esm/lib/editor/managers/UserPreferencesManager.mjs
  var __create9 = Object.create;
  var __defProp9 = Object.defineProperty;
  var __getOwnPropDesc9 = Object.getOwnPropertyDescriptor;
  var __knownSymbol8 = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError8 = (msg2) => {
    throw TypeError(msg2);
  };
  var __defNormalProp8 = (obj, key, value) => key in obj ? __defProp9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name8 = (target, value) => __defProp9(target, "name", { value, configurable: true });
  var __decoratorStart8 = (base) => [, , , __create9(base?.[__knownSymbol8("metadata")] ?? null)];
  var __decoratorStrings8 = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
  var __expectFn8 = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError8("Function expected") : fn;
  var __decoratorContext8 = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings8[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError8("Already initialized") : fns.push(__expectFn8(fn || null)) });
  var __decoratorMetadata8 = (array2, target) => __defNormalProp8(target, __knownSymbol8("metadata"), array2[3]);
  var __runInitializers8 = (array2, flags, self2, value) => {
    for (var i = 0, fns = array2[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self2) : value = fns[i].call(self2, value);
    return value;
  };
  var __decorateElement8 = (array2, flags, name, decorators, target, extra) => {
    var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
    var j = k > 3 ? array2.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings8[k + 5];
    var initializers = k > 3 && (array2[j - 1] = []), extraInitializers = array2[j] || (array2[j] = []);
    var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc9(k < 4 ? target : { get [name]() {
      return __privateGet8(this, extra);
    }, set [name](x) {
      return __privateSet8(this, extra, x);
    } }, name));
    k ? p && k < 4 && __name8(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name8(target, name);
    for (var i = decorators.length - 1; i >= 0; i--) {
      ctx = __decoratorContext8(k, name, done = {}, array2[3], extraInitializers);
      if (k) {
        ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn8(target, x) : (x) => name in x };
        if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet8 : __privateMethod8)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
        if (k > 2) access.set = p ? (x, y) => __privateSet8(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
      }
      it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
      if (k ^ 4 || it === void 0) __expectFn8(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
      else if (typeof it !== "object" || it === null) __typeError8("Object expected");
      else __expectFn8(fn = it.get) && (desc.get = fn), __expectFn8(fn = it.set) && (desc.set = fn), __expectFn8(fn = it.init) && initializers.unshift(fn);
    }
    return k || __decoratorMetadata8(array2, target), desc && __defProp9(target, name, desc), p ? k ^ 4 ? extra : desc : target;
  };
  var __publicField8 = (obj, key, value) => __defNormalProp8(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck8 = (obj, member, msg2) => member.has(obj) || __typeError8("Cannot " + msg2);
  var __privateIn8 = (member, obj) => Object(obj) !== obj ? __typeError8('Cannot use the "in" operator on this value') : member.has(obj);
  var __privateGet8 = (obj, member, getter) => (__accessCheck8(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateSet8 = (obj, member, value, setter) => (__accessCheck8(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod8 = (obj, member, method) => (__accessCheck8(obj, member, "access private method"), method);
  var _getIsPasteAtCursorMode_dec;
  var _getIsDynamicResizeMode_dec;
  var _getIsWrapMode_dec;
  var _getIsSnapMode_dec;
  var _getColor_dec;
  var _getLocale_dec;
  var _getName_dec;
  var _getId_dec;
  var _getAnimationSpeed_dec;
  var _getEdgeScrollSpeed_dec;
  var _getIsDarkMode_dec;
  var _getUserPreferences_dec;
  var _init8;
  _getUserPreferences_dec = [computed], _getIsDarkMode_dec = [computed], _getEdgeScrollSpeed_dec = [computed], _getAnimationSpeed_dec = [computed], _getId_dec = [computed], _getName_dec = [computed], _getLocale_dec = [computed], _getColor_dec = [computed], _getIsSnapMode_dec = [computed], _getIsWrapMode_dec = [computed], _getIsDynamicResizeMode_dec = [computed], _getIsPasteAtCursorMode_dec = [computed];
  var UserPreferencesManager = class {
    constructor(user, inferDarkMode) {
      this.user = user;
      this.inferDarkMode = inferDarkMode;
      __runInitializers8(_init8, 5, this);
      __publicField8(this, "systemColorScheme", atom("systemColorScheme", "light"));
      __publicField8(this, "disposables", /* @__PURE__ */ new Set());
      if (typeof window === "undefined" || !("matchMedia" in window)) return;
      const darkModeMediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
      if (darkModeMediaQuery?.matches) {
        this.systemColorScheme.set("dark");
      }
      const handleChange = (e) => {
        if (e.matches) {
          this.systemColorScheme.set("dark");
        } else {
          this.systemColorScheme.set("light");
        }
      };
      darkModeMediaQuery?.addEventListener("change", handleChange);
      this.disposables.add(() => darkModeMediaQuery?.removeEventListener("change", handleChange));
    }
    dispose() {
      this.disposables.forEach((d) => d());
    }
    updateUserPreferences(userPreferences) {
      this.user.setUserPreferences({
        ...this.user.userPreferences.get(),
        ...userPreferences
      });
    }
    getUserPreferences() {
      return {
        id: this.getId(),
        name: this.getName(),
        locale: this.getLocale(),
        color: this.getColor(),
        animationSpeed: this.getAnimationSpeed(),
        isSnapMode: this.getIsSnapMode(),
        colorScheme: this.user.userPreferences.get().colorScheme,
        isDarkMode: this.getIsDarkMode(),
        isWrapMode: this.getIsWrapMode(),
        isDynamicResizeMode: this.getIsDynamicResizeMode()
      };
    }
    getIsDarkMode() {
      switch (this.user.userPreferences.get().colorScheme) {
        case "dark":
          return true;
        case "light":
          return false;
        case "system":
          return this.systemColorScheme.get() === "dark";
        default:
          return this.inferDarkMode ? this.systemColorScheme.get() === "dark" : false;
      }
    }
    getEdgeScrollSpeed() {
      return this.user.userPreferences.get().edgeScrollSpeed ?? defaultUserPreferences.edgeScrollSpeed;
    }
    getAnimationSpeed() {
      return this.user.userPreferences.get().animationSpeed ?? defaultUserPreferences.animationSpeed;
    }
    getId() {
      return this.user.userPreferences.get().id;
    }
    getName() {
      return this.user.userPreferences.get().name ?? defaultUserPreferences.name;
    }
    getLocale() {
      return this.user.userPreferences.get().locale ?? defaultUserPreferences.locale;
    }
    getColor() {
      return this.user.userPreferences.get().color ?? defaultUserPreferences.color;
    }
    getIsSnapMode() {
      return this.user.userPreferences.get().isSnapMode ?? defaultUserPreferences.isSnapMode;
    }
    getIsWrapMode() {
      return this.user.userPreferences.get().isWrapMode ?? defaultUserPreferences.isWrapMode;
    }
    getIsDynamicResizeMode() {
      return this.user.userPreferences.get().isDynamicSizeMode ?? defaultUserPreferences.isDynamicSizeMode;
    }
    getIsPasteAtCursorMode() {
      return this.user.userPreferences.get().isPasteAtCursorMode ?? defaultUserPreferences.isPasteAtCursorMode;
    }
  };
  _init8 = __decoratorStart8(null);
  __decorateElement8(_init8, 1, "getUserPreferences", _getUserPreferences_dec, UserPreferencesManager);
  __decorateElement8(_init8, 1, "getIsDarkMode", _getIsDarkMode_dec, UserPreferencesManager);
  __decorateElement8(_init8, 1, "getEdgeScrollSpeed", _getEdgeScrollSpeed_dec, UserPreferencesManager);
  __decorateElement8(_init8, 1, "getAnimationSpeed", _getAnimationSpeed_dec, UserPreferencesManager);
  __decorateElement8(_init8, 1, "getId", _getId_dec, UserPreferencesManager);
  __decorateElement8(_init8, 1, "getName", _getName_dec, UserPreferencesManager);
  __decorateElement8(_init8, 1, "getLocale", _getLocale_dec, UserPreferencesManager);
  __decorateElement8(_init8, 1, "getColor", _getColor_dec, UserPreferencesManager);
  __decorateElement8(_init8, 1, "getIsSnapMode", _getIsSnapMode_dec, UserPreferencesManager);
  __decorateElement8(_init8, 1, "getIsWrapMode", _getIsWrapMode_dec, UserPreferencesManager);
  __decorateElement8(_init8, 1, "getIsDynamicResizeMode", _getIsDynamicResizeMode_dec, UserPreferencesManager);
  __decorateElement8(_init8, 1, "getIsPasteAtCursorMode", _getIsPasteAtCursorMode_dec, UserPreferencesManager);
  __decoratorMetadata8(_init8, UserPreferencesManager);

  // node_modules/@tldraw/editor/dist-esm/lib/editor/types/event-types.mjs
  var EVENT_NAME_MAP = {
    wheel: "onWheel",
    pointer_down: "onPointerDown",
    pointer_move: "onPointerMove",
    long_press: "onLongPress",
    pointer_up: "onPointerUp",
    right_click: "onRightClick",
    middle_click: "onMiddleClick",
    key_down: "onKeyDown",
    key_up: "onKeyUp",
    key_repeat: "onKeyRepeat",
    cancel: "onCancel",
    complete: "onComplete",
    interrupt: "onInterrupt",
    double_click: "onDoubleClick",
    triple_click: "onTripleClick",
    quadruple_click: "onQuadrupleClick",
    tick: "onTick"
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/tools/StateNode.mjs
  var STATE_NODES_TO_MEASURE = [
    "brushing",
    "cropping",
    "dragging",
    "dragging_handle",
    "drawing",
    "erasing",
    "lasering",
    "resizing",
    "rotating",
    "scribble_brushing",
    "translating"
  ];
  var StateNode = class {
    constructor(editor, parent) {
      this.editor = editor;
      const { id, children, initial, isLockable } = this.constructor;
      this.id = id;
      this._isActive = atom("toolIsActive" + this.id, false);
      this._current = atom("toolState" + this.id, void 0);
      this._path = computed("toolPath" + this.id, () => {
        const current = this.getCurrent();
        return this.id + (current ? `.${current.getPath()}` : "");
      });
      this.parent = parent ?? {};
      if (this.parent) {
        if (children && initial) {
          this.type = "branch";
          this.initial = initial;
          this.children = Object.fromEntries(
            children().map((Ctor) => [Ctor.id, new Ctor(this.editor, this)])
          );
          this._current.set(this.children[this.initial]);
        } else {
          this.type = "leaf";
        }
      } else {
        this.type = "root";
        if (children && initial) {
          this.initial = initial;
          this.children = Object.fromEntries(
            children().map((Ctor) => [Ctor.id, new Ctor(this.editor, this)])
          );
          this._current.set(this.children[this.initial]);
        }
      }
      this.isLockable = isLockable;
      this.performanceTracker = new PerformanceTracker();
    }
    performanceTracker;
    static id;
    static initial;
    static children;
    static isLockable = true;
    id;
    type;
    shapeType;
    initial;
    children;
    isLockable;
    parent;
    /**
     * This node's path of active state nodes
     *
     * @public
     */
    getPath() {
      return this._path.get();
    }
    _path;
    /**
     * This node's current active child node, if any.
     *
     * @public
     */
    getCurrent() {
      return this._current.get();
    }
    _current;
    /**
     * Whether this node is active.
     *
     * @public
     */
    getIsActive() {
      return this._isActive.get();
    }
    _isActive;
    /**
     * Transition to a new active child state node.
     *
     * @example
     * ```ts
     * parentState.transition('childStateA')
     * parentState.transition('childStateB', { myData: 4 })
     *```
     *
     * @param id - The id of the child state node to transition to.
     * @param info - Any data to pass to the `onEnter` and `onExit` handlers.
     *
     * @public
     */
    transition(id, info = {}) {
      const path = id.split(".");
      let currState = this;
      for (let i = 0; i < path.length; i++) {
        const id2 = path[i];
        const prevChildState = currState.getCurrent();
        const nextChildState = currState.children?.[id2];
        if (!nextChildState) {
          throw Error(`${currState.id} - no child state exists with the id ${id2}.`);
        }
        if (prevChildState?.id !== nextChildState.id) {
          prevChildState?.exit(info, id2);
          currState._current.set(nextChildState);
          nextChildState.enter(info, prevChildState?.id || "initial");
          if (!nextChildState.getIsActive()) break;
        }
        currState = nextChildState;
      }
      return this;
    }
    handleEvent(info) {
      const cbName = EVENT_NAME_MAP[info.name];
      const currentActiveChild = this._current.__unsafe__getWithoutCapture();
      this[cbName]?.(info);
      if (this._isActive.__unsafe__getWithoutCapture() && currentActiveChild && currentActiveChild === this._current.__unsafe__getWithoutCapture()) {
        currentActiveChild.handleEvent(info);
      }
    }
    // todo: move this logic into transition
    enter(info, from) {
      if (debugFlags.measurePerformance.get() && STATE_NODES_TO_MEASURE.includes(this.id)) {
        this.performanceTracker.start(this.id);
      }
      this._isActive.set(true);
      this.onEnter?.(info, from);
      if (this.children && this.initial && this.getIsActive()) {
        const initial = this.children[this.initial];
        this._current.set(initial);
        initial.enter(info, from);
      }
    }
    // todo: move this logic into transition
    exit(info, from) {
      if (debugFlags.measurePerformance.get() && this.performanceTracker.isStarted()) {
        this.performanceTracker.stop();
      }
      this._isActive.set(false);
      this.onExit?.(info, from);
      if (!this.getIsActive()) {
        this.getCurrent()?.exit(info, from);
      }
    }
    /**
     * This is a hack / escape hatch that will tell the editor to
     * report a different state as active (in `getCurrentToolId()`) when
     * this state is active. This is usually used when a tool transitions
     * to a child of a different state for a certain interaction and then
     * returns to the original tool when that interaction completes; and
     * where we would want to show the original tool as active in the UI.
     *
     * @public
     */
    _currentToolIdMask = atom("curent tool id mask", void 0);
    getCurrentToolIdMask() {
      return this._currentToolIdMask.get();
    }
    setCurrentToolIdMask(id) {
      this._currentToolIdMask.set(id);
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/tools/RootState.mjs
  var RootState = class extends StateNode {
    static id = "root";
    static initial = "";
    static children() {
      return [];
    }
    onKeyDown(info) {
      switch (info.code) {
        case "KeyZ": {
          if (!(info.shiftKey || info.ctrlKey)) {
            const currentTool = this.getCurrent();
            if (currentTool && currentTool.getCurrent()?.id === "idle" && this.children["zoom"]) {
              this.editor.setCurrentTool("zoom", { ...info, onInteractionEnd: currentTool.id });
            }
          }
          break;
        }
      }
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/Editor.mjs
  var __create10 = Object.create;
  var __defProp10 = Object.defineProperty;
  var __getOwnPropDesc10 = Object.getOwnPropertyDescriptor;
  var __knownSymbol9 = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError9 = (msg2) => {
    throw TypeError(msg2);
  };
  var __defNormalProp9 = (obj, key, value) => key in obj ? __defProp10(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name9 = (target, value) => __defProp10(target, "name", { value, configurable: true });
  var __decoratorStart9 = (base) => [, , , __create10(base?.[__knownSymbol9("metadata")] ?? null)];
  var __decoratorStrings9 = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
  var __expectFn9 = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError9("Function expected") : fn;
  var __decoratorContext9 = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings9[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError9("Already initialized") : fns.push(__expectFn9(fn || null)) });
  var __decoratorMetadata9 = (array2, target) => __defNormalProp9(target, __knownSymbol9("metadata"), array2[3]);
  var __runInitializers9 = (array2, flags, self2, value) => {
    for (var i = 0, fns = array2[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self2) : value = fns[i].call(self2, value);
    return value;
  };
  var __decorateElement9 = (array2, flags, name, decorators, target, extra) => {
    var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
    var j = k > 3 ? array2.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings9[k + 5];
    var initializers = k > 3 && (array2[j - 1] = []), extraInitializers = array2[j] || (array2[j] = []);
    var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc10(k < 4 ? target : { get [name]() {
      return __privateGet9(this, extra);
    }, set [name](x) {
      return __privateSet9(this, extra, x);
    } }, name));
    k ? p && k < 4 && __name9(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name9(target, name);
    for (var i = decorators.length - 1; i >= 0; i--) {
      ctx = __decoratorContext9(k, name, done = {}, array2[3], extraInitializers);
      if (k) {
        ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn9(target, x) : (x) => name in x };
        if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet9 : __privateMethod9)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
        if (k > 2) access.set = p ? (x, y) => __privateSet9(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
      }
      it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
      if (k ^ 4 || it === void 0) __expectFn9(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
      else if (typeof it !== "object" || it === null) __typeError9("Object expected");
      else __expectFn9(fn = it.get) && (desc.get = fn), __expectFn9(fn = it.set) && (desc.set = fn), __expectFn9(fn = it.init) && initializers.unshift(fn);
    }
    return k || __decoratorMetadata9(array2, target), desc && __defProp10(target, name, desc), p ? k ^ 4 ? extra : desc : target;
  };
  var __publicField9 = (obj, key, value) => __defNormalProp9(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck9 = (obj, member, msg2) => member.has(obj) || __typeError9("Cannot " + msg2);
  var __privateIn9 = (member, obj) => Object(obj) !== obj ? __typeError9('Cannot use the "in" operator on this value') : member.has(obj);
  var __privateGet9 = (obj, member, getter) => (__accessCheck9(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateSet9 = (obj, member, value, setter) => (__accessCheck9(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod9 = (obj, member, method) => (__accessCheck9(obj, member, "access private method"), method);
  var __setMetaKeyTimeout_dec;
  var __setCtrlKeyTimeout_dec;
  var __setAltKeyTimeout_dec;
  var __setShiftKeyTimeout_dec;
  var _getIsReadonly_dec;
  var _getIsFocused_dec;
  var _getSharedOpacity_dec;
  var _getSharedStyles_dec;
  var __getSelectionSharedStyles_dec;
  var __getBindingsIndexCache_dec;
  var _getCurrentPageRenderingShapesSorted_dec;
  var _getCurrentPageShapesSorted_dec;
  var _getCurrentPageShapes_dec;
  var _getCurrentPageBounds_dec;
  var _getCulledShapes_dec;
  var __notVisibleShapes_dec;
  var __getShapeMaskedPageBoundsCache_dec;
  var __getShapeMaskCache_dec;
  var __getShapeClipPathCache_dec;
  var __getShapePageBoundsCache_dec;
  var __getShapePageTransformCache_dec;
  var __getShapeHandlesCache_dec;
  var __getShapeGeometryCache_dec;
  var __getAllAssetsQuery_dec;
  var _getCurrentPageShapeIdsSorted_dec;
  var _getCurrentPageId_dec;
  var _getPages_dec;
  var __getAllPagesQuery_dec;
  var _getRenderingShapes_dec;
  var _getCollaboratorsOnCurrentPage_dec;
  var _getCollaborators_dec;
  var __getCollaboratorsQuery_dec;
  var _getViewportPageBounds_dec;
  var _getViewportScreenCenter_dec;
  var _getViewportScreenBounds_dec;
  var _getZoomLevel_dec;
  var _getCameraForFollowing_dec;
  var _getViewportPageBoundsForFollowing_dec;
  var _getCamera_dec;
  var __unsafe_getCameraId_dec;
  var _getErasingShapes_dec;
  var _getErasingShapeIds_dec;
  var _getHintingShape_dec;
  var _getHintingShapeIds_dec;
  var _getHoveredShape_dec;
  var _getHoveredShapeId_dec;
  var _getEditingShape_dec;
  var _getEditingShapeId_dec;
  var _getFocusedGroup_dec;
  var _getFocusedGroupId_dec;
  var _getSelectionRotatedScreenBounds_dec;
  var _getSelectionRotatedPageBounds_dec;
  var _getSelectionRotation_dec;
  var _getSelectionPageBounds_dec;
  var _getOnlySelectedShape_dec;
  var _getOnlySelectedShapeId_dec;
  var _getSelectedShapes_dec;
  var _getSelectedShapeIds_dec;
  var __getCurrentPageStateId_dec;
  var _getCurrentPageState_dec;
  var __getPageStatesQuery_dec;
  var _getPageStates_dec;
  var _getIsMenuOpen_dec;
  var _getOpenMenus_dec;
  var _getInstanceState_dec;
  var _getDocumentSettings_dec;
  var _getCurrentToolId_dec;
  var _getCurrentTool_dec;
  var _getPath_dec;
  var _getCanRedo_dec;
  var _getCanUndo_dec;
  var _getIsShapeHiddenCache_dec;
  var _a;
  var _init9;
  var Editor = class extends (_a = import_eventemitter3.default, _getIsShapeHiddenCache_dec = [computed], _getCanUndo_dec = [computed], _getCanRedo_dec = [computed], _getPath_dec = [computed], _getCurrentTool_dec = [computed], _getCurrentToolId_dec = [computed], _getDocumentSettings_dec = [computed], _getInstanceState_dec = [computed], _getOpenMenus_dec = [computed], _getIsMenuOpen_dec = [computed], _getPageStates_dec = [computed], __getPageStatesQuery_dec = [computed], _getCurrentPageState_dec = [computed], __getCurrentPageStateId_dec = [computed], _getSelectedShapeIds_dec = [computed], _getSelectedShapes_dec = [computed], _getOnlySelectedShapeId_dec = [computed], _getOnlySelectedShape_dec = [computed], _getSelectionPageBounds_dec = [computed], _getSelectionRotation_dec = [computed], _getSelectionRotatedPageBounds_dec = [computed], _getSelectionRotatedScreenBounds_dec = [computed], _getFocusedGroupId_dec = [computed], _getFocusedGroup_dec = [computed], _getEditingShapeId_dec = [computed], _getEditingShape_dec = [computed], _getHoveredShapeId_dec = [computed], _getHoveredShape_dec = [computed], _getHintingShapeIds_dec = [computed], _getHintingShape_dec = [computed], _getErasingShapeIds_dec = [computed], _getErasingShapes_dec = [computed], __unsafe_getCameraId_dec = [computed], _getCamera_dec = [computed], _getViewportPageBoundsForFollowing_dec = [computed], _getCameraForFollowing_dec = [computed], _getZoomLevel_dec = [computed], _getViewportScreenBounds_dec = [computed], _getViewportScreenCenter_dec = [computed], _getViewportPageBounds_dec = [computed], __getCollaboratorsQuery_dec = [computed], _getCollaborators_dec = [computed], _getCollaboratorsOnCurrentPage_dec = [computed], _getRenderingShapes_dec = [computed], __getAllPagesQuery_dec = [computed], _getPages_dec = [computed], _getCurrentPageId_dec = [computed], _getCurrentPageShapeIdsSorted_dec = [computed], __getAllAssetsQuery_dec = [computed], __getShapeGeometryCache_dec = [computed], __getShapeHandlesCache_dec = [computed], __getShapePageTransformCache_dec = [computed], __getShapePageBoundsCache_dec = [computed], __getShapeClipPathCache_dec = [computed], __getShapeMaskCache_dec = [computed], __getShapeMaskedPageBoundsCache_dec = [computed], __notVisibleShapes_dec = [computed], _getCulledShapes_dec = [computed], _getCurrentPageBounds_dec = [computed], _getCurrentPageShapes_dec = [computed], _getCurrentPageShapesSorted_dec = [computed], _getCurrentPageRenderingShapesSorted_dec = [computed], __getBindingsIndexCache_dec = [computed], __getSelectionSharedStyles_dec = [computed], _getSharedStyles_dec = [computed({ isEqual: (a, b) => a.equals(b) })], _getSharedOpacity_dec = [computed], _getIsFocused_dec = [computed], _getIsReadonly_dec = [computed], __setShiftKeyTimeout_dec = [bind], __setAltKeyTimeout_dec = [bind], __setCtrlKeyTimeout_dec = [bind], __setMetaKeyTimeout_dec = [bind], _a) {
    constructor({
      store,
      user,
      shapeUtils,
      bindingUtils,
      tools,
      getContainer,
      cameraOptions,
      initialState: initialState2,
      autoFocus,
      inferDarkMode,
      options,
      isShapeHidden
    }) {
      super();
      __runInitializers9(_init9, 5, this);
      __publicField9(this, "_isShapeHiddenPredicate");
      __publicField9(this, "options");
      __publicField9(this, "contextId", uniqueId());
      __publicField9(this, "store");
      __publicField9(this, "root");
      __publicField9(this, "disposables", /* @__PURE__ */ new Set());
      __publicField9(this, "isDisposed", false);
      __publicField9(this, "_tickManager");
      __publicField9(this, "snaps");
      __publicField9(this, "timers", tltime.forContext(this.contextId));
      __publicField9(this, "user");
      __publicField9(this, "textMeasure");
      __publicField9(this, "environment", tlenv);
      __publicField9(this, "scribbles");
      __publicField9(this, "sideEffects");
      __publicField9(this, "edgeScrollManager");
      __publicField9(this, "focusManager");
      __publicField9(this, "getContainer");
      __publicField9(this, "shapeUtils");
      __publicField9(this, "styleProps");
      __publicField9(this, "bindingUtils");
      __publicField9(this, "history");
      __publicField9(this, "_shouldIgnoreShapeLock", false);
      __publicField9(this, "_crashingError", null);
      __publicField9(this, "_isChangingStyleTimeout", -1);
      __publicField9(this, "menus", tlmenus.forContext(this.contextId));
      __publicField9(this, "_cameraOptions", atom("camera options", DEFAULT_CAMERA_OPTIONS));
      __publicField9(this, "_viewportAnimation", null);
      __publicField9(this, "_willSetInitialBounds", true);
      __publicField9(this, "_isLockedOnFollowingUser", atom("isLockedOnFollowingUser", false));
      __publicField9(this, "_cameraState", atom("camera state", "idle"));
      __publicField9(this, "_cameraStateTimeoutRemaining", 0);
      __publicField9(this, "_currentPageShapeIds");
      __publicField9(this, "_parentIdsToChildIds");
      __publicField9(this, "animatingShapes", /* @__PURE__ */ new Map());
      __publicField9(this, "externalAssetContentHandlers", {
        file: null,
        url: null
      });
      __publicField9(this, "temporaryAssetPreview", /* @__PURE__ */ new Map());
      __publicField9(this, "externalContentHandlers", {
        text: null,
        files: null,
        embed: null,
        "svg-text": null,
        url: null
      });
      __publicField9(this, "inputs", {
        /** The most recent pointer down's position in the current page space. */
        originPagePoint: new Vec(),
        /** The most recent pointer down's position in screen space. */
        originScreenPoint: new Vec(),
        /** The previous pointer position in the current page space. */
        previousPagePoint: new Vec(),
        /** The previous pointer position in screen space. */
        previousScreenPoint: new Vec(),
        /** The most recent pointer position in the current page space. */
        currentPagePoint: new Vec(),
        /** The most recent pointer position in screen space. */
        currentScreenPoint: new Vec(),
        /** A set containing the currently pressed keys. */
        keys: /* @__PURE__ */ new Set(),
        /** A set containing the currently pressed buttons. */
        buttons: /* @__PURE__ */ new Set(),
        /** Whether the input is from a pe. */
        isPen: false,
        /** Whether the shift key is currently pressed. */
        shiftKey: false,
        /** Whether the meta key is currently pressed. */
        metaKey: false,
        /** Whether the control or command key is currently pressed. */
        ctrlKey: false,
        /** Whether the alt or option key is currently pressed. */
        altKey: false,
        /** Whether the user is dragging. */
        isDragging: false,
        /** Whether the user is pointing. */
        isPointing: false,
        /** Whether the user is pinching. */
        isPinching: false,
        /** Whether the user is editing. */
        isEditing: false,
        /** Whether the user is panning. */
        isPanning: false,
        /** Whether the user is spacebar panning. */
        isSpacebarPanning: false,
        /** Velocity of mouse pointer, in pixels per millisecond */
        pointerVelocity: new Vec()
      });
      __publicField9(this, "_clickManager", new ClickManager(this));
      __publicField9(this, "_prevCursor", "default");
      __publicField9(this, "_shiftKeyTimeout", -1);
      __publicField9(this, "_altKeyTimeout", -1);
      __publicField9(this, "_ctrlKeyTimeout", -1);
      __publicField9(this, "_metaKeyTimeout", -1);
      __publicField9(this, "_restoreToolId", "select");
      __publicField9(this, "_pinchStart", 1);
      __publicField9(this, "_didPinch", false);
      __publicField9(this, "_selectedShapeIdsAtPointerDown", []);
      __publicField9(this, "_longPressTimeout", -1);
      __publicField9(this, "capturedPointerId", null);
      __publicField9(this, "performanceTracker");
      __publicField9(this, "performanceTrackerTimeout", -1);
      __publicField9(this, "_pendingEventsForNextTick", []);
      this._isShapeHiddenPredicate = isShapeHidden;
      this.options = { ...defaultTldrawOptions, ...options };
      this.store = store;
      this.disposables.add(this.store.dispose.bind(this.store));
      this.history = new HistoryManager({
        store,
        annotateError: (error) => {
          this.annotateError(error, { origin: "history.batch", willCrashApp: true });
          this.crash(error);
        }
      });
      this.snaps = new SnapManager(this);
      this.disposables.add(this.timers.dispose);
      this._cameraOptions.set({ ...DEFAULT_CAMERA_OPTIONS, ...cameraOptions });
      this.user = new UserPreferencesManager(user ?? createTLUser(), inferDarkMode ?? false);
      this.disposables.add(() => this.user.dispose());
      this.getContainer = getContainer;
      this.textMeasure = new TextManager(this);
      this._tickManager = new TickManager(this);
      class NewRoot extends RootState {
        static initial = initialState2 ?? "";
      }
      this.root = new NewRoot(this);
      this.root.children = {};
      const allShapeUtils = checkShapesAndAddCore(shapeUtils);
      const _shapeUtils = {};
      const _styleProps = {};
      const allStylesById = /* @__PURE__ */ new Map();
      for (const Util of allShapeUtils) {
        const util = new Util(this);
        _shapeUtils[Util.type] = util;
        const propKeysByStyle = getShapePropKeysByStyle(Util.props ?? {});
        _styleProps[Util.type] = propKeysByStyle;
        for (const style of propKeysByStyle.keys()) {
          if (!allStylesById.has(style.id)) {
            allStylesById.set(style.id, style);
          } else if (allStylesById.get(style.id) !== style) {
            throw Error(
              `Multiple style props with id "${style.id}" in use. Style prop IDs must be unique.`
            );
          }
        }
      }
      this.shapeUtils = _shapeUtils;
      this.styleProps = _styleProps;
      const allBindingUtils = checkBindings(bindingUtils);
      const _bindingUtils = {};
      for (const Util of allBindingUtils) {
        const util = new Util(this);
        _bindingUtils[Util.type] = util;
      }
      this.bindingUtils = _bindingUtils;
      for (const Tool of [...tools]) {
        if (hasOwnProperty(this.root.children, Tool.id)) {
          throw Error(`Can't override tool with id "${Tool.id}"`);
        }
        this.root.children[Tool.id] = new Tool(this, this.root);
      }
      this.scribbles = new ScribbleManager(this);
      const cleanupInstancePageState = (prevPageState, shapesNoLongerInPage) => {
        let nextPageState = null;
        const selectedShapeIds = prevPageState.selectedShapeIds.filter(
          (id) => !shapesNoLongerInPage.has(id)
        );
        if (selectedShapeIds.length !== prevPageState.selectedShapeIds.length) {
          if (!nextPageState) nextPageState = { ...prevPageState };
          nextPageState.selectedShapeIds = selectedShapeIds;
        }
        const erasingShapeIds = prevPageState.erasingShapeIds.filter(
          (id) => !shapesNoLongerInPage.has(id)
        );
        if (erasingShapeIds.length !== prevPageState.erasingShapeIds.length) {
          if (!nextPageState) nextPageState = { ...prevPageState };
          nextPageState.erasingShapeIds = erasingShapeIds;
        }
        if (prevPageState.hoveredShapeId && shapesNoLongerInPage.has(prevPageState.hoveredShapeId)) {
          if (!nextPageState) nextPageState = { ...prevPageState };
          nextPageState.hoveredShapeId = null;
        }
        if (prevPageState.editingShapeId && shapesNoLongerInPage.has(prevPageState.editingShapeId)) {
          if (!nextPageState) nextPageState = { ...prevPageState };
          nextPageState.editingShapeId = null;
        }
        const hintingShapeIds = prevPageState.hintingShapeIds.filter(
          (id) => !shapesNoLongerInPage.has(id)
        );
        if (hintingShapeIds.length !== prevPageState.hintingShapeIds.length) {
          if (!nextPageState) nextPageState = { ...prevPageState };
          nextPageState.hintingShapeIds = hintingShapeIds;
        }
        if (prevPageState.focusedGroupId && shapesNoLongerInPage.has(prevPageState.focusedGroupId)) {
          if (!nextPageState) nextPageState = { ...prevPageState };
          nextPageState.focusedGroupId = null;
        }
        return nextPageState;
      };
      this.sideEffects = this.store.sideEffects;
      let deletedBindings = /* @__PURE__ */ new Map();
      const deletedShapeIds = /* @__PURE__ */ new Set();
      const invalidParents = /* @__PURE__ */ new Set();
      let invalidBindingTypes = /* @__PURE__ */ new Set();
      this.disposables.add(
        this.sideEffects.registerOperationCompleteHandler(() => {
          deletedShapeIds.clear();
          for (const parentId of invalidParents) {
            invalidParents.delete(parentId);
            const parent = this.getShape(parentId);
            if (!parent) continue;
            const util = this.getShapeUtil(parent);
            const changes = util.onChildrenChange?.(parent);
            if (changes?.length) {
              this.updateShapes(changes);
            }
          }
          if (invalidBindingTypes.size) {
            const t2 = invalidBindingTypes;
            invalidBindingTypes = /* @__PURE__ */ new Set();
            for (const type of t2) {
              const util = this.getBindingUtil(type);
              util.onOperationComplete?.();
            }
          }
          if (deletedBindings.size) {
            const t2 = deletedBindings;
            deletedBindings = /* @__PURE__ */ new Map();
            for (const opts of t2.values()) {
              this.getBindingUtil(opts.binding).onAfterDelete?.(opts);
            }
          }
          this.emit("update");
        })
      );
      this.disposables.add(
        this.sideEffects.register({
          shape: {
            afterChange: (shapeBefore, shapeAfter) => {
              for (const binding of this.getBindingsInvolvingShape(shapeAfter)) {
                invalidBindingTypes.add(binding.type);
                if (binding.fromId === shapeAfter.id) {
                  this.getBindingUtil(binding).onAfterChangeFromShape?.({
                    binding,
                    shapeBefore,
                    shapeAfter
                  });
                }
                if (binding.toId === shapeAfter.id) {
                  this.getBindingUtil(binding).onAfterChangeToShape?.({
                    binding,
                    shapeBefore,
                    shapeAfter
                  });
                }
              }
              if (shapeBefore.parentId !== shapeAfter.parentId) {
                const notifyBindingAncestryChange = (id) => {
                  const descendantShape = this.getShape(id);
                  if (!descendantShape) return;
                  for (const binding of this.getBindingsInvolvingShape(descendantShape)) {
                    invalidBindingTypes.add(binding.type);
                    if (binding.fromId === descendantShape.id) {
                      this.getBindingUtil(binding).onAfterChangeFromShape?.({
                        binding,
                        shapeBefore: descendantShape,
                        shapeAfter: descendantShape
                      });
                    }
                    if (binding.toId === descendantShape.id) {
                      this.getBindingUtil(binding).onAfterChangeToShape?.({
                        binding,
                        shapeBefore: descendantShape,
                        shapeAfter: descendantShape
                      });
                    }
                  }
                };
                notifyBindingAncestryChange(shapeAfter.id);
                this.visitDescendants(shapeAfter.id, notifyBindingAncestryChange);
              }
              if (shapeBefore.parentId !== shapeAfter.parentId && isPageId(shapeAfter.parentId)) {
                const allMovingIds = /* @__PURE__ */ new Set([shapeBefore.id]);
                this.visitDescendants(shapeBefore.id, (id) => {
                  allMovingIds.add(id);
                });
                for (const instancePageState of this.getPageStates()) {
                  if (instancePageState.pageId === shapeAfter.parentId) continue;
                  const nextPageState = cleanupInstancePageState(instancePageState, allMovingIds);
                  if (nextPageState) {
                    this.store.put([nextPageState]);
                  }
                }
              }
              if (shapeBefore.parentId && isShapeId(shapeBefore.parentId)) {
                invalidParents.add(shapeBefore.parentId);
              }
              if (shapeAfter.parentId !== shapeBefore.parentId && isShapeId(shapeAfter.parentId)) {
                invalidParents.add(shapeAfter.parentId);
              }
            },
            beforeDelete: (shape) => {
              if (deletedShapeIds.has(shape.id)) return;
              if (shape.parentId && isShapeId(shape.parentId)) {
                invalidParents.add(shape.parentId);
              }
              deletedShapeIds.add(shape.id);
              const deleteBindingIds = [];
              for (const binding of this.getBindingsInvolvingShape(shape)) {
                invalidBindingTypes.add(binding.type);
                deleteBindingIds.push(binding.id);
                const util = this.getBindingUtil(binding);
                if (binding.fromId === shape.id) {
                  util.onBeforeIsolateToShape?.({ binding, removedShape: shape });
                  util.onBeforeDeleteFromShape?.({ binding, shape });
                } else {
                  util.onBeforeIsolateFromShape?.({ binding, removedShape: shape });
                  util.onBeforeDeleteToShape?.({ binding, shape });
                }
              }
              if (deleteBindingIds.length) {
                this.deleteBindings(deleteBindingIds);
              }
              const deletedIds = /* @__PURE__ */ new Set([shape.id]);
              const updates = compact(
                this.getPageStates().map((pageState) => {
                  return cleanupInstancePageState(pageState, deletedIds);
                })
              );
              if (updates.length) {
                this.store.put(updates);
              }
            }
          },
          binding: {
            beforeCreate: (binding) => {
              const next = this.getBindingUtil(binding).onBeforeCreate?.({ binding });
              if (next) return next;
              return binding;
            },
            afterCreate: (binding) => {
              invalidBindingTypes.add(binding.type);
              this.getBindingUtil(binding).onAfterCreate?.({ binding });
            },
            beforeChange: (bindingBefore, bindingAfter) => {
              const updated = this.getBindingUtil(bindingAfter).onBeforeChange?.({
                bindingBefore,
                bindingAfter
              });
              if (updated) return updated;
              return bindingAfter;
            },
            afterChange: (bindingBefore, bindingAfter) => {
              invalidBindingTypes.add(bindingAfter.type);
              this.getBindingUtil(bindingAfter).onAfterChange?.({ bindingBefore, bindingAfter });
            },
            beforeDelete: (binding) => {
              this.getBindingUtil(binding).onBeforeDelete?.({ binding });
            },
            afterDelete: (binding) => {
              this.getBindingUtil(binding).onAfterDelete?.({ binding });
              invalidBindingTypes.add(binding.type);
            }
          },
          page: {
            afterCreate: (record) => {
              const cameraId = CameraRecordType.createId(record.id);
              const _pageStateId = InstancePageStateRecordType.createId(record.id);
              if (!this.store.has(cameraId)) {
                this.store.put([CameraRecordType.create({ id: cameraId })]);
              }
              if (!this.store.has(_pageStateId)) {
                this.store.put([
                  InstancePageStateRecordType.create({ id: _pageStateId, pageId: record.id })
                ]);
              }
            },
            afterDelete: (record, source) => {
              if (this.getInstanceState()?.currentPageId === record.id) {
                const backupPageId = this.getPages().find((p) => p.id !== record.id)?.id;
                if (backupPageId) {
                  this.store.put([{ ...this.getInstanceState(), currentPageId: backupPageId }]);
                } else if (source === "user") {
                  this.store.ensureStoreIsUsable();
                }
              }
              const cameraId = CameraRecordType.createId(record.id);
              const instance_PageStateId = InstancePageStateRecordType.createId(record.id);
              this.store.remove([cameraId, instance_PageStateId]);
            }
          },
          instance: {
            afterChange: (prev, next, source) => {
              if (!this.store.has(next.currentPageId)) {
                const backupPageId = this.store.has(prev.currentPageId) ? prev.currentPageId : this.getPages()[0]?.id;
                if (backupPageId) {
                  this.store.update(next.id, (instance) => ({
                    ...instance,
                    currentPageId: backupPageId
                  }));
                } else if (source === "user") {
                  this.store.ensureStoreIsUsable();
                }
              }
            }
          },
          instance_page_state: {
            afterChange: (prev, next) => {
              if (prev?.selectedShapeIds !== next?.selectedShapeIds) {
                const filtered = next.selectedShapeIds.filter((id) => {
                  let parentId = this.getShape(id)?.parentId;
                  while (isShapeId(parentId)) {
                    if (next.selectedShapeIds.includes(parentId)) {
                      return false;
                    }
                    parentId = this.getShape(parentId)?.parentId;
                  }
                  return true;
                });
                let nextFocusedGroupId = null;
                if (filtered.length > 0) {
                  const commonGroupAncestor = this.findCommonAncestor(
                    compact(filtered.map((id) => this.getShape(id))),
                    (shape) => this.isShapeOfType(shape, "group")
                  );
                  if (commonGroupAncestor) {
                    nextFocusedGroupId = commonGroupAncestor;
                  }
                } else {
                  if (next?.focusedGroupId) {
                    nextFocusedGroupId = next.focusedGroupId;
                  }
                }
                if (filtered.length !== next.selectedShapeIds.length || nextFocusedGroupId !== next.focusedGroupId) {
                  this.store.put([
                    {
                      ...next,
                      selectedShapeIds: filtered,
                      focusedGroupId: nextFocusedGroupId ?? null
                    }
                  ]);
                }
              }
            }
          }
        })
      );
      this._currentPageShapeIds = deriveShapeIdsInCurrentPage(
        this.store,
        () => this.getCurrentPageId()
      );
      this._parentIdsToChildIds = parentsToChildren(this.store);
      this.disposables.add(
        this.store.listen((changes) => {
          this.emit("change", changes);
        })
      );
      this.disposables.add(this.history.dispose);
      this.run(
        () => {
          this.store.ensureStoreIsUsable();
          this._updateCurrentPageState({
            editingShapeId: null,
            hoveredShapeId: null,
            erasingShapeIds: []
          });
        },
        { history: "ignore" }
      );
      if (initialState2 && this.root.children[initialState2] === void 0) {
        throw Error(`No state found for initialState "${initialState2}".`);
      }
      this.root.enter(void 0, "initial");
      this.edgeScrollManager = new EdgeScrollManager(this);
      this.focusManager = new FocusManager(this, autoFocus);
      this.disposables.add(this.focusManager.dispose.bind(this.focusManager));
      if (this.getInstanceState().followingUserId) {
        this.stopFollowingUser();
      }
      this.on("tick", this._flushEventsForTick);
      this.timers.requestAnimationFrame(() => {
        this._tickManager.start();
      });
      this.performanceTracker = new PerformanceTracker();
      if (this.store.props.collaboration?.mode) {
        const mode = this.store.props.collaboration.mode;
        this.disposables.add(
          react("update collaboration mode", () => {
            this.store.put([{ ...this.getInstanceState(), isReadonly: mode.get() === "readonly" }]);
          })
        );
      }
    }
    getIsShapeHiddenCache() {
      if (!this._isShapeHiddenPredicate) return null;
      return this.store.createComputedCache("isShapeHidden", (shape) => {
        const hiddenParent = this.findShapeAncestor(shape, (p) => this.isShapeHidden(p));
        if (hiddenParent) return true;
        return this._isShapeHiddenPredicate(shape, this) ?? false;
      });
    }
    isShapeHidden(shapeOrId) {
      if (!this._isShapeHiddenPredicate) return false;
      return !!this.getIsShapeHiddenCache().get(
        typeof shapeOrId === "string" ? shapeOrId : shapeOrId.id
      );
    }
    /**
     * Dispose the editor.
     *
     * @public
     */
    dispose() {
      this.disposables.forEach((dispose) => dispose());
      this.disposables.clear();
      this.isDisposed = true;
    }
    getShapeUtil(arg) {
      const type = typeof arg === "string" ? arg : arg.type;
      const shapeUtil = getOwnProperty(this.shapeUtils, type);
      assert(shapeUtil, `No shape util found for type "${type}"`);
      return shapeUtil;
    }
    getBindingUtil(arg) {
      const type = typeof arg === "string" ? arg : arg.type;
      const bindingUtil = getOwnProperty(this.bindingUtils, type);
      assert(bindingUtil, `No binding util found for type "${type}"`);
      return bindingUtil;
    }
    /**
     * Undo to the last mark.
     *
     * @example
     * ```ts
     * editor.undo()
     * ```
     *
     * @public
     */
    undo() {
      this._flushEventsForTick(0);
      this.complete();
      this.history.undo();
      return this;
    }
    getCanUndo() {
      return this.history.getNumUndos() > 0;
    }
    /**
     * Redo to the next mark.
     *
     * @example
     * ```ts
     * editor.redo()
     * ```
     *
     * @public
     */
    redo() {
      this._flushEventsForTick(0);
      this.complete();
      this.history.redo();
      return this;
    }
    clearHistory() {
      this.history.clear();
      return this;
    }
    getCanRedo() {
      return this.history.getNumRedos() > 0;
    }
    /**
     * Create a new "mark", or stopping point, in the undo redo history. Creating a mark will clear
     * any redos.
     *
     * @example
     * ```ts
     * editor.mark()
     * editor.mark('flip shapes')
     * ```
     *
     * @param markId - The mark's id, usually the reason for adding the mark.
     *
     * @public
     * @deprecated use {@link Editor.markHistoryStoppingPoint} instead
     */
    mark(markId) {
      if (typeof markId === "string") {
        console.warn(
          `[tldraw] \`editor.history.mark("${markId}")\` is deprecated. Please use \`const myMarkId = editor.markHistoryStoppingPoint()\` instead.`
        );
      } else {
        console.warn(
          "[tldraw] `editor.mark()` is deprecated. Use `editor.markHistoryStoppingPoint()` instead."
        );
      }
      this.history._mark(markId ?? uniqueId());
      return this;
    }
    /**
     * Create a new "mark", or stopping point, in the undo redo history. Creating a mark will clear
     * any redos. You typically want to do this just before a user interaction begins or is handled.
     *
     * @example
     * ```ts
     * editor.markHistoryStoppingPoint()
     * editor.flipShapes(editor.getSelectedShapes())
     * ```
     * @example
     * ```ts
     * const beginRotateMark = editor.markHistoryStoppingPoint()
     * // if the use cancels the rotation, you can bail back to this mark
     * editor.bailToMark(beginRotateMark)
     * ```
     *
     * @public
     * @param name - The name of the mark, useful for debugging the undo/redo stacks
     * @returns a unique id for the mark that can be used with `squashToMark` or `bailToMark`.
     */
    markHistoryStoppingPoint(name) {
      const id = `[${name ?? "stop"}]_${uniqueId()}`;
      this.history._mark(id);
      return id;
    }
    /**
     * @internal this is only used to implement some backwards-compatibility logic. Should be fine to delete after 6 months or whatever.
     */
    getMarkIdMatching(idSubstring) {
      return this.history.getMarkIdMatching(idSubstring);
    }
    /**
     * Coalesces all changes since the given mark into a single change, removing any intermediate marks.
     *
     * This is useful if you need to 'compress' the recent history to simplify the undo/redo experience of a complex interaction.
     *
     * @example
     * ```ts
     * const bumpShapesMark = editor.markHistoryStoppingPoint()
     * // ... some changes
     * editor.squashToMark(bumpShapesMark)
     * ```
     *
     * @param markId - The mark id to squash to.
     */
    squashToMark(markId) {
      this.history.squashToMark(markId);
      return this;
    }
    /**
     * Undo to the closest mark, discarding the changes so they cannot be redone.
     *
     * @example
     * ```ts
     * editor.bail()
     * ```
     *
     * @public
     */
    bail() {
      this.history.bail();
      return this;
    }
    /**
     * Undo to the given mark, discarding the changes so they cannot be redone.
     *
     * @example
     * ```ts
     * const beginDrag = editor.markHistoryStoppingPoint()
     * // ... some changes
     * editor.bailToMark(beginDrag)
     * ```
     *
     * @public
     */
    bailToMark(id) {
      this.history.bailToMark(id);
      return this;
    }
    /**
     * Run a function in a transaction with optional options for context.
     * You can use the options to change the way that history is treated
     * or allow changes to locked shapes.
     *
     * @example
     * ```ts
     * // updating with
     * editor.run(() => {
     * 	editor.updateShape({ ...myShape, x: 100 })
     * }, { history: "ignore" })
     *
     * // forcing changes / deletions for locked shapes
     * editor.toggleLock([myShape])
     * editor.run(() => {
     * 	editor.updateShape({ ...myShape, x: 100 })
     * 	editor.deleteShape(myShape)
     * }, { ignoreShapeLock: true }, )
     * ```
     *
     * @param fn - The callback function to run.
     * @param opts - The options for the batch.
     *
     *
     * @public
     */
    run(fn, opts) {
      const previousIgnoreShapeLock = this._shouldIgnoreShapeLock;
      this._shouldIgnoreShapeLock = opts?.ignoreShapeLock ?? previousIgnoreShapeLock;
      try {
        this.history.batch(fn, opts);
      } finally {
        this._shouldIgnoreShapeLock = previousIgnoreShapeLock;
      }
      return this;
    }
    /**
     * @deprecated Use `Editor.run` instead.
     */
    batch(fn, opts) {
      return this.run(fn, opts);
    }
    /* --------------------- Errors --------------------- */
    /** @internal */
    annotateError(error, {
      origin,
      willCrashApp,
      tags,
      extras
    }) {
      const defaultAnnotations = this.createErrorAnnotations(origin, willCrashApp);
      annotateError(error, {
        tags: { ...defaultAnnotations.tags, ...tags },
        extras: { ...defaultAnnotations.extras, ...extras }
      });
      if (willCrashApp) {
        this.store.markAsPossiblyCorrupted();
      }
      return this;
    }
    /** @internal */
    createErrorAnnotations(origin, willCrashApp) {
      try {
        const editingShapeId = this.getEditingShapeId();
        return {
          tags: {
            origin,
            willCrashApp
          },
          extras: {
            activeStateNode: this.root.getPath(),
            selectedShapes: this.getSelectedShapes(),
            editingShape: editingShapeId ? this.getShape(editingShapeId) : void 0,
            inputs: this.inputs
          }
        };
      } catch {
        return {
          tags: {
            origin,
            willCrashApp
          },
          extras: {}
        };
      }
    }
    /**
     * We can't use an `atom` here because there's a chance that when `crashAndReportError` is called,
     * we're in a transaction that's about to be rolled back due to the same error we're currently
     * reporting.
     *
     * Instead, to listen to changes to this value, you need to listen to app's `crash` event.
     *
     * @internal
     */
    getCrashingError() {
      return this._crashingError;
    }
    /** @internal */
    crash(error) {
      this._crashingError = error;
      this.store.markAsPossiblyCorrupted();
      this.emit("crash", { error });
      return this;
    }
    getPath() {
      return this.root.getPath().split("root.")[1];
    }
    /**
     * Get whether a certain tool (or other state node) is currently active.
     *
     * @example
     * ```ts
     * editor.isIn('select')
     * editor.isIn('select.brushing')
     * ```
     *
     * @param path - The path of active states, separated by periods.
     *
     * @public
     */
    isIn(path) {
      const ids = path.split(".").reverse();
      let state = this.root;
      while (ids.length > 0) {
        const id = ids.pop();
        if (!id) return true;
        const current = state.getCurrent();
        if (current?.id === id) {
          if (ids.length === 0) return true;
          state = current;
          continue;
        } else return false;
      }
      return false;
    }
    /**
     * Get whether the state node is in any of the given active paths.
     *
     * @example
     * ```ts
     * state.isInAny('select', 'erase')
     * state.isInAny('select.brushing', 'erase.idle')
     * ```
     *
     * @public
     */
    isInAny(...paths) {
      return paths.some((path) => this.isIn(path));
    }
    /**
     * Set the selected tool.
     *
     * @example
     * ```ts
     * editor.setCurrentTool('hand')
     * editor.setCurrentTool('hand', { date: Date.now() })
     * ```
     *
     * @param id - The id of the tool to select.
     * @param info - Arbitrary data to pass along into the transition.
     *
     * @public
     */
    setCurrentTool(id, info = {}) {
      this.root.transition(id, info);
      return this;
    }
    getCurrentTool() {
      return this.root.getCurrent();
    }
    getCurrentToolId() {
      const currentTool = this.getCurrentTool();
      if (!currentTool) return "";
      return currentTool.getCurrentToolIdMask() ?? currentTool.id;
    }
    /**
     * Get a descendant by its path.
     *
     * @example
     * ```ts
     * state.getStateDescendant('select')
     * state.getStateDescendant('select.brushing')
     * ```
     *
     * @param path - The descendant's path of state ids, separated by periods.
     *
     * @public
     */
    getStateDescendant(path) {
      const ids = path.split(".").reverse();
      let state = this.root;
      while (ids.length > 0) {
        const id = ids.pop();
        if (!id) return state;
        const childState = state.children?.[id];
        if (!childState) return void 0;
        state = childState;
      }
      return state;
    }
    getDocumentSettings() {
      return this.store.get(TLDOCUMENT_ID);
    }
    /**
     * Update the global document settings that apply to all users.
     *
     * @public
     **/
    updateDocumentSettings(settings) {
      this.run(
        () => {
          this.store.put([{ ...this.getDocumentSettings(), ...settings }]);
        },
        { history: "ignore" }
      );
      return this;
    }
    getInstanceState() {
      return this.store.get(TLINSTANCE_ID);
    }
    /**
     * Update the instance's state.
     *
     * @param partial - A partial object to update the instance state with.
     * @param historyOptions - History batch options.
     *
     * @public
     */
    updateInstanceState(partial, historyOptions) {
      this._updateInstanceState(partial, { history: "ignore", ...historyOptions });
      if (partial.isChangingStyle !== void 0) {
        clearTimeout(this._isChangingStyleTimeout);
        if (partial.isChangingStyle === true) {
          this._isChangingStyleTimeout = this.timers.setTimeout(() => {
            this._updateInstanceState({ isChangingStyle: false }, { history: "ignore" });
          }, 2e3);
        }
      }
      return this;
    }
    /** @internal */
    _updateInstanceState(partial, opts) {
      this.run(() => {
        this.store.put([
          {
            ...this.getInstanceState(),
            ...partial
          }
        ]);
      }, opts);
    }
    getOpenMenus() {
      return this.menus.getOpenMenus();
    }
    /**
     * @deprecated Use `editor.menus.addOpenMenu` instead.
     *
     * @public
     */
    addOpenMenu(id) {
      this.menus.addOpenMenu(id);
      return this;
    }
    /**
     * @deprecated Use `editor.menus.deleteOpenMenu` instead.
     *
     * @public
     */
    deleteOpenMenu(id) {
      this.menus.deleteOpenMenu(id);
      return this;
    }
    /**
     * @deprecated Use `editor.menus.clearOpenMenus` instead.
     *
     * @public
     */
    clearOpenMenus() {
      this.menus.clearOpenMenus();
      return this;
    }
    getIsMenuOpen() {
      return this.menus.hasAnyOpenMenus();
    }
    /* --------------------- Cursor --------------------- */
    /**
     * Set the cursor.
     *
     * @param cursor - The cursor to set.
     * @public
     */
    setCursor(cursor) {
      this.updateInstanceState({ cursor: { ...this.getInstanceState().cursor, ...cursor } });
      return this;
    }
    getPageStates() {
      return this._getPageStatesQuery().get();
    }
    _getPageStatesQuery() {
      return this.store.query.records("instance_page_state");
    }
    getCurrentPageState() {
      return this.store.get(this._getCurrentPageStateId());
    }
    _getCurrentPageStateId() {
      return InstancePageStateRecordType.createId(this.getCurrentPageId());
    }
    /**
     * Update this instance's page state.
     *
     * @example
     * ```ts
     * editor.updateCurrentPageState({ id: 'page1', editingShapeId: 'shape:123' })
     * ```
     *
     * @param partial - The partial of the page state object containing the changes.
     *
     * @public
     */
    updateCurrentPageState(partial) {
      this._updateCurrentPageState(partial);
      return this;
    }
    _updateCurrentPageState(partial) {
      this.store.update(partial.id ?? this.getCurrentPageState().id, (state) => ({
        ...state,
        ...partial
      }));
    }
    getSelectedShapeIds() {
      return this.getCurrentPageState().selectedShapeIds;
    }
    getSelectedShapes() {
      const { selectedShapeIds } = this.getCurrentPageState();
      return compact(selectedShapeIds.map((id) => this.store.get(id)));
    }
    /**
     * Select one or more shapes.
     *
     * @example
     * ```ts
     * editor.setSelectedShapes(['id1'])
     * editor.setSelectedShapes(['id1', 'id2'])
     * ```
     *
     * @param shapes - The shape (or shape ids) to select.
     *
     * @public
     */
    setSelectedShapes(shapes) {
      return this.run(
        () => {
          const ids = shapes.map((shape) => typeof shape === "string" ? shape : shape.id);
          const { selectedShapeIds: prevSelectedShapeIds } = this.getCurrentPageState();
          const prevSet = new Set(prevSelectedShapeIds);
          if (ids.length === prevSet.size && ids.every((id) => prevSet.has(id))) return null;
          this.store.put([{ ...this.getCurrentPageState(), selectedShapeIds: ids }]);
        },
        { history: "record-preserveRedoStack" }
      );
    }
    /**
     * Determine whether or not any of a shape's ancestors are selected.
     *
     * @param shape - The shape (or shape id) of the shape to check.
     *
     * @public
     */
    isAncestorSelected(shape) {
      const id = typeof shape === "string" ? shape : shape?.id ?? null;
      const _shape = this.getShape(id);
      if (!_shape) return false;
      const selectedShapeIds = this.getSelectedShapeIds();
      return !!this.findShapeAncestor(_shape, (parent) => selectedShapeIds.includes(parent.id));
    }
    /**
     * Select one or more shapes.
     *
     * @example
     * ```ts
     * editor.select('id1')
     * editor.select('id1', 'id2')
     * ```
     *
     * @param shapes - The shape (or the shape ids) to select.
     *
     * @public
     */
    select(...shapes) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((shape) => shape.id);
      this.setSelectedShapes(ids);
      return this;
    }
    /**
     * Remove a shape from the existing set of selected shapes.
     *
     * @example
     * ```ts
     * editor.deselect(shape.id)
     * ```
     *
     * @public
     */
    deselect(...shapes) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((shape) => shape.id);
      const selectedShapeIds = this.getSelectedShapeIds();
      if (selectedShapeIds.length > 0 && ids.length > 0) {
        this.setSelectedShapes(selectedShapeIds.filter((id) => !ids.includes(id)));
      }
      return this;
    }
    /**
     * Select all direct children of the current page.
     *
     * @example
     * ```ts
     * editor.selectAll()
     * ```
     *
     * @public
     */
    selectAll() {
      const ids = this.getSortedChildIdsForParent(this.getCurrentPageId());
      if (ids.length <= 0) return this;
      this.setSelectedShapes(this._getUnlockedShapeIds(ids));
      return this;
    }
    /**
     * Clear the selection.
     *
     * @example
     * ```ts
     * editor.selectNone()
     * ```
     *
     * @public
     */
    selectNone() {
      if (this.getSelectedShapeIds().length > 0) {
        this.setSelectedShapes([]);
      }
      return this;
    }
    getOnlySelectedShapeId() {
      return this.getOnlySelectedShape()?.id ?? null;
    }
    getOnlySelectedShape() {
      const selectedShapes = this.getSelectedShapes();
      return selectedShapes.length === 1 ? selectedShapes[0] : null;
    }
    /**
     * @internal
     */
    getShapesPageBounds(shapeIds) {
      const bounds = compact(shapeIds.map((id) => this.getShapePageBounds(id)));
      if (bounds.length === 0) return null;
      return Box.Common(bounds);
    }
    getSelectionPageBounds() {
      return this.getShapesPageBounds(this.getSelectedShapeIds());
    }
    /**
     * @internal
     */
    getShapesSharedRotation(shapeIds) {
      let foundFirst = false;
      let rotation = 0;
      for (let i = 0, n = shapeIds.length; i < n; i++) {
        const pageTransform = this.getShapePageTransform(shapeIds[i]);
        if (!pageTransform) continue;
        if (foundFirst) {
          if (pageTransform.rotation() !== rotation) {
            return 0;
          }
        } else {
          foundFirst = true;
          rotation = pageTransform.rotation();
        }
      }
      return rotation;
    }
    getSelectionRotation() {
      return this.getShapesSharedRotation(this.getSelectedShapeIds());
    }
    /**
     * @internal
     */
    getShapesRotatedPageBounds(shapeIds) {
      if (shapeIds.length === 0) {
        return void 0;
      }
      const selectionRotation = this.getShapesSharedRotation(shapeIds);
      if (selectionRotation === 0) {
        return this.getShapesPageBounds(shapeIds) ?? void 0;
      }
      if (shapeIds.length === 1) {
        const bounds = this.getShapeGeometry(shapeIds[0]).bounds.clone();
        const pageTransform = this.getShapePageTransform(shapeIds[0]);
        bounds.point = pageTransform.applyToPoint(bounds.point);
        return bounds;
      }
      const boxFromRotatedVertices = Box.FromPoints(
        shapeIds.flatMap((id) => {
          const pageTransform = this.getShapePageTransform(id);
          if (!pageTransform) return [];
          return pageTransform.applyToPoints(this.getShapeGeometry(id).bounds.corners);
        }).map((p) => p.rot(-selectionRotation))
      );
      boxFromRotatedVertices.point = boxFromRotatedVertices.point.rot(selectionRotation);
      return boxFromRotatedVertices;
    }
    getSelectionRotatedPageBounds() {
      return this.getShapesRotatedPageBounds(this.getSelectedShapeIds());
    }
    getSelectionRotatedScreenBounds() {
      const bounds = this.getSelectionRotatedPageBounds();
      if (!bounds) return void 0;
      const { x, y } = this.pageToScreen(bounds.point);
      const zoom = this.getZoomLevel();
      return new Box(x, y, bounds.width * zoom, bounds.height * zoom);
    }
    getFocusedGroupId() {
      return this.getCurrentPageState().focusedGroupId ?? this.getCurrentPageId();
    }
    getFocusedGroup() {
      const focusedGroupId = this.getFocusedGroupId();
      return focusedGroupId ? this.getShape(focusedGroupId) : void 0;
    }
    /**
     * Set the current focused group shape.
     *
     * @param shape - The group shape id (or group shape's id) to set as the focused group shape.
     *
     * @public
     */
    setFocusedGroup(shape) {
      const id = typeof shape === "string" ? shape : shape?.id ?? null;
      if (id !== null) {
        const shape2 = this.getShape(id);
        if (!shape2) {
          throw Error(`Editor.setFocusedGroup: Shape with id ${id} does not exist`);
        }
        if (!this.isShapeOfType(shape2, "group")) {
          throw Error(
            `Editor.setFocusedGroup: Cannot set focused group to shape of type ${shape2.type}`
          );
        }
      }
      if (id === this.getFocusedGroupId()) return this;
      return this.run(
        () => {
          this.store.update(this.getCurrentPageState().id, (s) => ({ ...s, focusedGroupId: id }));
        },
        { history: "record-preserveRedoStack" }
      );
    }
    /**
     * Exit the current focused group, moving up to the next parent group if there is one.
     *
     * @public
     */
    popFocusedGroupId() {
      const focusedGroup = this.getFocusedGroup();
      if (focusedGroup) {
        const match = this.findShapeAncestor(
          focusedGroup,
          (shape) => this.isShapeOfType(shape, "group")
        );
        this.setFocusedGroup(match?.id ?? null);
        this.select(focusedGroup.id);
      } else {
        this.setFocusedGroup(null);
        this.selectNone();
      }
      return this;
    }
    getEditingShapeId() {
      return this.getCurrentPageState().editingShapeId;
    }
    getEditingShape() {
      const editingShapeId = this.getEditingShapeId();
      return editingShapeId ? this.getShape(editingShapeId) : void 0;
    }
    /**
     * Set the current editing shape.
     *
     * @example
     * ```ts
     * editor.setEditingShape(myShape)
     * editor.setEditingShape(myShape.id)
     * ```
     *
     * @param shape - The shape (or shape id) to set as editing.
     *
     * @public
     */
    setEditingShape(shape) {
      const id = typeof shape === "string" ? shape : shape?.id ?? null;
      if (id !== this.getEditingShapeId()) {
        if (id) {
          const shape2 = this.getShape(id);
          if (shape2 && this.getShapeUtil(shape2).canEdit(shape2)) {
            this.run(
              () => {
                this._updateCurrentPageState({ editingShapeId: id });
              },
              { history: "ignore" }
            );
            return this;
          }
        }
        this.run(
          () => {
            this._updateCurrentPageState({ editingShapeId: null });
          },
          { history: "ignore" }
        );
      }
      return this;
    }
    getHoveredShapeId() {
      return this.getCurrentPageState().hoveredShapeId;
    }
    getHoveredShape() {
      const hoveredShapeId = this.getHoveredShapeId();
      return hoveredShapeId ? this.getShape(hoveredShapeId) : void 0;
    }
    /**
     * Set the editor's current hovered shape.
     *
     * @example
     * ```ts
     * editor.setHoveredShape(myShape)
     * editor.setHoveredShape(myShape.id)
     * ```
     *
     * @param shape - The shape (or shape id) to set as hovered.
     *
     * @public
     */
    setHoveredShape(shape) {
      const id = typeof shape === "string" ? shape : shape?.id ?? null;
      if (id === this.getHoveredShapeId()) return this;
      this.run(
        () => {
          this.updateCurrentPageState({ hoveredShapeId: id });
        },
        { history: "ignore" }
      );
      return this;
    }
    getHintingShapeIds() {
      return this.getCurrentPageState().hintingShapeIds;
    }
    getHintingShape() {
      const hintingShapeIds = this.getHintingShapeIds();
      return compact(hintingShapeIds.map((id) => this.getShape(id)));
    }
    /**
     * Set the editor's current hinting shapes.
     *
     * @example
     * ```ts
     * editor.setHintingShapes([myShape])
     * editor.setHintingShapes([myShape.id])
     * ```
     *
     * @param shapes - The shapes (or shape ids) to set as hinting.
     *
     * @public
     */
    setHintingShapes(shapes) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((shape) => shape.id);
      this.run(
        () => {
          this._updateCurrentPageState({ hintingShapeIds: dedupe(ids) });
        },
        { history: "ignore" }
      );
      return this;
    }
    getErasingShapeIds() {
      return this.getCurrentPageState().erasingShapeIds;
    }
    getErasingShapes() {
      const erasingShapeIds = this.getErasingShapeIds();
      return compact(erasingShapeIds.map((id) => this.getShape(id)));
    }
    /**
     * Set the editor's current erasing shapes.
     *
     * @example
     * ```ts
     * editor.setErasingShapes([myShape])
     * editor.setErasingShapes([myShape.id])
     * ```
     *
     * @param shapes - The shapes (or shape ids) to set as hinting.
     *
     * @public
     */
    setErasingShapes(shapes) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((shape) => shape.id);
      ids.sort();
      const erasingShapeIds = this.getErasingShapeIds();
      this.run(
        () => {
          if (ids.length === erasingShapeIds.length) {
            for (let i = 0; i < ids.length; i++) {
              if (ids[i] !== erasingShapeIds[i]) {
                this._updateCurrentPageState({ erasingShapeIds: ids });
                break;
              }
            }
          } else {
            this._updateCurrentPageState({ erasingShapeIds: ids });
          }
        },
        { history: "ignore" }
      );
      return this;
    }
    // Cropping
    /**
     * The current cropping shape's id.
     *
     * @public
     */
    getCroppingShapeId() {
      return this.getCurrentPageState().croppingShapeId;
    }
    /**
     * Set the current cropping shape.
     *
     * @example
     * ```ts
     * editor.setCroppingShape(myShape)
     * editor.setCroppingShape(myShape.id)
     * ```
     *
     *
     * @param shape - The shape (or shape id) to set as cropping.
     *
     * @public
     */
    setCroppingShape(shape) {
      const id = typeof shape === "string" ? shape : shape?.id ?? null;
      if (id !== this.getCroppingShapeId()) {
        this.run(
          () => {
            if (!id) {
              this.updateCurrentPageState({ croppingShapeId: null });
            } else {
              const shape2 = this.getShape(id);
              const util = this.getShapeUtil(shape2);
              if (shape2 && util.canCrop(shape2)) {
                this.updateCurrentPageState({ croppingShapeId: id });
              }
            }
          },
          { history: "ignore" }
        );
      }
      return this;
    }
    _unsafe_getCameraId() {
      return CameraRecordType.createId(this.getCurrentPageId());
    }
    getCamera() {
      const baseCamera = this.store.get(this._unsafe_getCameraId());
      if (this._isLockedOnFollowingUser.get()) {
        const followingCamera = this.getCameraForFollowing();
        if (followingCamera) {
          return { ...baseCamera, ...followingCamera };
        }
      }
      return baseCamera;
    }
    getViewportPageBoundsForFollowing() {
      const followingUserId = this.getInstanceState().followingUserId;
      if (!followingUserId) return null;
      const leaderPresence = this.getCollaborators().find((c) => c.userId === followingUserId);
      if (!leaderPresence) return null;
      if (!leaderPresence.camera || !leaderPresence.screenBounds) return null;
      const { w: lw, h: lh } = leaderPresence.screenBounds;
      const { x: lx, y: ly, z: lz2 } = leaderPresence.camera;
      const theirViewport = new Box(-lx, -ly, lw / lz2, lh / lz2);
      const ourViewport = this.getViewportScreenBounds().clone();
      const ourAspectRatio = ourViewport.width / ourViewport.height;
      ourViewport.width = theirViewport.width;
      ourViewport.height = ourViewport.width / ourAspectRatio;
      if (ourViewport.height < theirViewport.height) {
        ourViewport.height = theirViewport.height;
        ourViewport.width = ourViewport.height * ourAspectRatio;
      }
      ourViewport.center = theirViewport.center;
      return ourViewport;
    }
    getCameraForFollowing() {
      const viewport = this.getViewportPageBoundsForFollowing();
      if (!viewport) return null;
      return {
        x: -viewport.x,
        y: -viewport.y,
        z: this.getViewportScreenBounds().w / viewport.width
      };
    }
    getZoomLevel() {
      return this.getCamera().z;
    }
    /**
     * Get the camera's initial or reset zoom level.
     *
     * @example
     * ```ts
     * editor.getInitialZoom()
     * ```
     *
     * @public */
    getInitialZoom() {
      const cameraOptions = this.getCameraOptions();
      if (!cameraOptions.constraints) return 1;
      if (cameraOptions.constraints.initialZoom === "default") return 1;
      const { zx, zy } = getCameraFitXFitY(this, cameraOptions);
      switch (cameraOptions.constraints.initialZoom) {
        case "fit-min": {
          return Math.max(zx, zy);
        }
        case "fit-max": {
          return Math.min(zx, zy);
        }
        case "fit-x": {
          return zx;
        }
        case "fit-y": {
          return zy;
        }
        case "fit-min-100": {
          return Math.min(1, Math.max(zx, zy));
        }
        case "fit-max-100": {
          return Math.min(1, Math.min(zx, zy));
        }
        case "fit-x-100": {
          return Math.min(1, zx);
        }
        case "fit-y-100": {
          return Math.min(1, zy);
        }
        default: {
          throw exhaustiveSwitchError(cameraOptions.constraints.initialZoom);
        }
      }
    }
    /**
     * Get the camera's base level for calculating actual zoom levels based on the zoom steps.
     *
     * @example
     * ```ts
     * editor.getBaseZoom()
     * ```
     *
     * @public */
    getBaseZoom() {
      const cameraOptions = this.getCameraOptions();
      if (!cameraOptions.constraints) return 1;
      if (cameraOptions.constraints.baseZoom === "default") return 1;
      const { zx, zy } = getCameraFitXFitY(this, cameraOptions);
      switch (cameraOptions.constraints.baseZoom) {
        case "fit-min": {
          return Math.max(zx, zy);
        }
        case "fit-max": {
          return Math.min(zx, zy);
        }
        case "fit-x": {
          return zx;
        }
        case "fit-y": {
          return zy;
        }
        case "fit-min-100": {
          return Math.min(1, Math.max(zx, zy));
        }
        case "fit-max-100": {
          return Math.min(1, Math.min(zx, zy));
        }
        case "fit-x-100": {
          return Math.min(1, zx);
        }
        case "fit-y-100": {
          return Math.min(1, zy);
        }
        default: {
          throw exhaustiveSwitchError(cameraOptions.constraints.baseZoom);
        }
      }
    }
    /**
     * Get the current camera options.
     *
     * @example
     * ```ts
     * editor.getCameraOptions()
     * ```
     *
     *  @public */
    getCameraOptions() {
      return this._cameraOptions.get();
    }
    /**
     * Set the camera options. Changing the options won't immediately change the camera itself, so you may want to call `setCamera` after changing the options.
     *
     * @example
     * ```ts
     * editor.setCameraOptions(myCameraOptions)
     * editor.setCamera(editor.getCamera())
     * ```
     *
     * @param opts - The camera options to set.
     *
     * @public */
    setCameraOptions(opts) {
      const next = structuredClone({
        ...this._cameraOptions.__unsafe__getWithoutCapture(),
        ...opts
      });
      if (next.zoomSteps?.length < 1) next.zoomSteps = [1];
      this._cameraOptions.set(next);
      this.setCamera(this.getCamera());
      return this;
    }
    /** @internal */
    getConstrainedCamera(point, opts) {
      const currentCamera = this.getCamera();
      let { x, y, z = currentCamera.z } = point;
      if (!opts?.force) {
        const cameraOptions = this.getCameraOptions();
        const zoomMin = cameraOptions.zoomSteps[0];
        const zoomMax = last(cameraOptions.zoomSteps);
        const vsb = this.getViewportScreenBounds();
        if (cameraOptions.constraints) {
          const { constraints } = cameraOptions;
          const py = Math.min(constraints.padding.y, vsb.w / 2);
          const px = Math.min(constraints.padding.x, vsb.h / 2);
          const bounds = Box.From(cameraOptions.constraints.bounds);
          const zx = (vsb.w - px * 2) / bounds.w;
          const zy = (vsb.h - py * 2) / bounds.h;
          const baseZoom = this.getBaseZoom();
          const maxZ = zoomMax * baseZoom;
          const minZ = zoomMin * baseZoom;
          if (opts?.reset) {
            z = this.getInitialZoom();
          }
          if (z < minZ || z > maxZ) {
            const { x: cx, y: cy, z: cz } = currentCamera;
            const cxA = -cx + vsb.w / cz / 2;
            const cyA = -cy + vsb.h / cz / 2;
            z = clamp(z, minZ, maxZ);
            const cxB = -cx + vsb.w / z / 2;
            const cyB = -cy + vsb.h / z / 2;
            x = cx + cxB - cxA;
            y = cy + cyB - cyA;
          }
          const minX = px / z - bounds.x;
          const minY = py / z - bounds.y;
          const freeW = (vsb.w - px * 2) / z - bounds.w;
          const freeH = (vsb.h - py * 2) / z - bounds.h;
          const originX = minX + freeW * constraints.origin.x;
          const originY = minY + freeH * constraints.origin.y;
          const behaviorX = typeof constraints.behavior === "string" ? constraints.behavior : constraints.behavior.x;
          const behaviorY = typeof constraints.behavior === "string" ? constraints.behavior : constraints.behavior.y;
          if (opts?.reset) {
            x = originX;
            y = originY;
          } else {
            switch (behaviorX) {
              case "fixed": {
                x = originX;
                break;
              }
              case "contain": {
                if (z < zx) x = originX;
                else x = clamp(x, minX + freeW, minX);
                break;
              }
              case "inside": {
                if (z < zx) x = clamp(x, minX, (vsb.w - px) / z - bounds.w);
                else x = clamp(x, minX + freeW, minX);
                break;
              }
              case "outside": {
                x = clamp(x, px / z - bounds.w, (vsb.w - px) / z);
                break;
              }
              case "free": {
                break;
              }
              default: {
                throw exhaustiveSwitchError(behaviorX);
              }
            }
            switch (behaviorY) {
              case "fixed": {
                y = originY;
                break;
              }
              case "contain": {
                if (z < zy) y = originY;
                else y = clamp(y, minY + freeH, minY);
                break;
              }
              case "inside": {
                if (z < zy) y = clamp(y, minY, (vsb.h - py) / z - bounds.h);
                else y = clamp(y, minY + freeH, minY);
                break;
              }
              case "outside": {
                y = clamp(y, py / z - bounds.h, (vsb.h - py) / z);
                break;
              }
              case "free": {
                break;
              }
              default: {
                throw exhaustiveSwitchError(behaviorY);
              }
            }
          }
        } else {
          if (z > zoomMax || z < zoomMin) {
            const { x: cx, y: cy, z: cz } = currentCamera;
            z = clamp(z, zoomMin, zoomMax);
            x = cx + (-cx + vsb.w / z / 2) - (-cx + vsb.w / cz / 2);
            y = cy + (-cy + vsb.h / z / 2) - (-cy + vsb.h / cz / 2);
          }
        }
      }
      return { x, y, z };
    }
    /** @internal */
    _setCamera(point, opts) {
      const currentCamera = this.getCamera();
      const { x, y, z } = this.getConstrainedCamera(point, opts);
      if (currentCamera.x === x && currentCamera.y === y && currentCamera.z === z) {
        return this;
      }
      transact(() => {
        const camera = { ...currentCamera, x, y, z };
        this.run(
          () => {
            this.store.put([camera]);
          },
          { history: "ignore" }
        );
        const { currentScreenPoint, currentPagePoint } = this.inputs;
        const { screenBounds } = this.store.unsafeGetWithoutCapture(TLINSTANCE_ID);
        if (currentScreenPoint.x / z - x !== currentPagePoint.x || currentScreenPoint.y / z - y !== currentPagePoint.y) {
          const event = {
            type: "pointer",
            target: "canvas",
            name: "pointer_move",
            // weird but true: we need to put the screen point back into client space
            point: Vec.AddXY(currentScreenPoint, screenBounds.x, screenBounds.y),
            pointerId: INTERNAL_POINTER_IDS.CAMERA_MOVE,
            ctrlKey: this.inputs.ctrlKey,
            altKey: this.inputs.altKey,
            shiftKey: this.inputs.shiftKey,
            metaKey: this.inputs.metaKey,
            accelKey: isAccelKey(this.inputs),
            button: 0,
            isPen: this.getInstanceState().isPenMode ?? false
          };
          if (opts?.immediate) {
            this._flushEventForTick(event);
          } else {
            this.dispatch(event);
          }
        }
        this._tickCameraState();
      });
      return this;
    }
    /**
     * Set the current camera.
     *
     * @example
     * ```ts
     * editor.setCamera({ x: 0, y: 0})
     * editor.setCamera({ x: 0, y: 0, z: 1.5})
     * editor.setCamera({ x: 0, y: 0, z: 1.5}, { animation: { duration: 1000, easing: (t) => t * t } })
     * ```
     *
     * @param point - The new camera position.
     * @param opts - The camera move options.
     *
     * @public
     */
    setCamera(point, opts) {
      const { isLocked } = this._cameraOptions.__unsafe__getWithoutCapture();
      if (isLocked && !opts?.force) return this;
      this.stopCameraAnimation();
      if (this.getInstanceState().followingUserId) {
        this.stopFollowingUser();
      }
      const _point = Vec.Cast(point);
      if (!Number.isFinite(_point.x)) _point.x = 0;
      if (!Number.isFinite(_point.y)) _point.y = 0;
      if (_point.z === void 0 || !Number.isFinite(_point.z)) point.z = this.getZoomLevel();
      const camera = this.getConstrainedCamera(_point, opts);
      if (opts?.animation) {
        const { width, height } = this.getViewportScreenBounds();
        this._animateToViewport(
          new Box(-camera.x, -camera.y, width / camera.z, height / camera.z),
          opts
        );
      } else {
        this._setCamera(camera, {
          ...opts,
          // we already did the constraining, so we don't need to do it again
          force: true
        });
      }
      return this;
    }
    /**
     * Center the camera on a point (in the current page space).
     *
     * @example
     * ```ts
     * editor.centerOnPoint({ x: 100, y: 100 })
     * editor.centerOnPoint({ x: 100, y: 100 }, { animation: { duration: 200 } })
     * ```
     *
     * @param point - The point in the current page space to center on.
     * @param opts - The camera move options.
     *
     * @public
     */
    centerOnPoint(point, opts) {
      const { isLocked } = this.getCameraOptions();
      if (isLocked && !opts?.force) return this;
      const { width: pw, height: ph } = this.getViewportPageBounds();
      this.setCamera(new Vec(-(point.x - pw / 2), -(point.y - ph / 2), this.getCamera().z), opts);
      return this;
    }
    /**
     * Zoom the camera to fit the current page's content in the viewport.
     *
     * @example
     * ```ts
     * editor.zoomToFit()
     * editor.zoomToFit({ animation: { duration: 200 } })
     * ```
     *
     * @param opts - The camera move options.
     *
     * @public
     */
    zoomToFit(opts) {
      const ids = [...this.getCurrentPageShapeIds()];
      if (ids.length <= 0) return this;
      const pageBounds = Box.Common(compact(ids.map((id) => this.getShapePageBounds(id))));
      this.zoomToBounds(pageBounds, opts);
      return this;
    }
    /**
     * Set the zoom back to 100%.
     *
     * @example
     * ```ts
     * editor.resetZoom()
     * editor.resetZoom(editor.getViewportScreenCenter(), { animation: { duration: 200 } })
     * editor.resetZoom(editor.getViewportScreenCenter(), { animation: { duration: 200 } })
     * ```
     *
     * @param point - The screen point to zoom out on. Defaults to the viewport screen center.
     * @param opts - The camera move options.
     *
     * @public
     */
    resetZoom(point = this.getViewportScreenCenter(), opts) {
      const { isLocked, constraints } = this.getCameraOptions();
      if (isLocked && !opts?.force) return this;
      const currentCamera = this.getCamera();
      const { x: cx, y: cy, z: cz } = currentCamera;
      const { x, y } = point;
      let z = 1;
      if (constraints) {
        const initialZoom = this.getInitialZoom();
        if (cz !== initialZoom) {
          z = initialZoom;
        }
      }
      this.setCamera(
        new Vec(cx + (x / z - x) - (x / cz - x), cy + (y / z - y) - (y / cz - y), z),
        opts
      );
      return this;
    }
    /**
     * Zoom the camera in.
     *
     * @example
     * ```ts
     * editor.zoomIn()
     * editor.zoomIn(editor.getViewportScreenCenter(), { animation: { duration: 200 } })
     * editor.zoomIn(editor.inputs.currentScreenPoint, { animation: { duration: 200 } })
     * ```
     *
     * @param point - The screen point to zoom in on. Defaults to the screen center
     * @param opts - The camera move options.
     *
     * @public
     */
    zoomIn(point = this.getViewportScreenCenter(), opts) {
      const { isLocked } = this.getCameraOptions();
      if (isLocked && !opts?.force) return this;
      const { x: cx, y: cy, z: cz } = this.getCamera();
      const { zoomSteps } = this.getCameraOptions();
      if (zoomSteps !== null && zoomSteps.length > 1) {
        const baseZoom = this.getBaseZoom();
        let zoom = last(zoomSteps) * baseZoom;
        for (let i = 1; i < zoomSteps.length; i++) {
          const z1 = zoomSteps[i - 1] * baseZoom;
          const z2 = zoomSteps[i] * baseZoom;
          if (z2 - cz <= (z2 - z1) / 2) continue;
          zoom = z2;
          break;
        }
        this.setCamera(
          new Vec(
            cx + (point.x / zoom - point.x) - (point.x / cz - point.x),
            cy + (point.y / zoom - point.y) - (point.y / cz - point.y),
            zoom
          ),
          opts
        );
      }
      return this;
    }
    /**
     * Zoom the camera out.
     *
     * @example
     * ```ts
     * editor.zoomOut()
     * editor.zoomOut(editor.getViewportScreenCenter(), { animation: { duration: 120 } })
     * editor.zoomOut(editor.inputs.currentScreenPoint, { animation: { duration: 120 } })
     * ```
     *
     * @param point - The point to zoom out on. Defaults to the viewport screen center.
     * @param opts - The camera move options.
     *
     * @public
     */
    zoomOut(point = this.getViewportScreenCenter(), opts) {
      const { isLocked } = this.getCameraOptions();
      if (isLocked && !opts?.force) return this;
      const { zoomSteps } = this.getCameraOptions();
      if (zoomSteps !== null && zoomSteps.length > 1) {
        const baseZoom = this.getBaseZoom();
        const { x: cx, y: cy, z: cz } = this.getCamera();
        let zoom = zoomSteps[0] * baseZoom;
        for (let i = zoomSteps.length - 1; i > 0; i--) {
          const z1 = zoomSteps[i - 1] * baseZoom;
          const z2 = zoomSteps[i] * baseZoom;
          if (z2 - cz >= (z2 - z1) / 2) continue;
          zoom = z1;
          break;
        }
        this.setCamera(
          new Vec(
            cx + (point.x / zoom - point.x) - (point.x / cz - point.x),
            cy + (point.y / zoom - point.y) - (point.y / cz - point.y),
            zoom
          ),
          opts
        );
      }
      return this;
    }
    /**
     * Zoom the camera to fit the current selection in the viewport.
     *
     * @example
     * ```ts
     * editor.zoomToSelection()
     * editor.zoomToSelection({ animation: { duration: 200 } })
     * ```
     *
     * @param opts - The camera move options.
     *
     * @public
     */
    zoomToSelection(opts) {
      const { isLocked } = this.getCameraOptions();
      if (isLocked && !opts?.force) return this;
      const selectionPageBounds = this.getSelectionPageBounds();
      if (selectionPageBounds) {
        this.zoomToBounds(selectionPageBounds, {
          targetZoom: Math.max(1, this.getZoomLevel()),
          ...opts
        });
      }
      return this;
    }
    /**
     * Zoom the camera to fit a bounding box (in the current page space).
     *
     * @example
     * ```ts
     * editor.zoomToBounds(myBounds)
     * editor.zoomToBounds(myBounds, { animation: { duration: 200 } })
     * editor.zoomToBounds(myBounds, { animation: { duration: 200 }, inset: 0, targetZoom: 1 })
     * ```
     *
     * @param bounds - The bounding box.
     * @param opts - The camera move options, target zoom, or custom inset amount.
     *
     * @public
     */
    zoomToBounds(bounds, opts) {
      const cameraOptions = this._cameraOptions.__unsafe__getWithoutCapture();
      if (cameraOptions.isLocked && !opts?.force) return this;
      const viewportScreenBounds = this.getViewportScreenBounds();
      const inset = opts?.inset ?? Math.min(ZOOM_TO_FIT_PADDING, viewportScreenBounds.width * 0.28);
      const baseZoom = this.getBaseZoom();
      const zoomMin = cameraOptions.zoomSteps[0];
      const zoomMax = last(cameraOptions.zoomSteps);
      let zoom = clamp(
        Math.min(
          (viewportScreenBounds.width - inset) / bounds.w,
          (viewportScreenBounds.height - inset) / bounds.h
        ),
        zoomMin * baseZoom,
        zoomMax * baseZoom
      );
      if (opts?.targetZoom !== void 0) {
        zoom = Math.min(opts.targetZoom, zoom);
      }
      this.setCamera(
        new Vec(
          -bounds.x + (viewportScreenBounds.width - bounds.w * zoom) / 2 / zoom,
          -bounds.y + (viewportScreenBounds.height - bounds.h * zoom) / 2 / zoom,
          zoom
        ),
        opts
      );
      return this;
    }
    /**
     * Stop the current camera animation, if any.
     *
     * @example
     * ```ts
     * editor.stopCameraAnimation()
     * ```
     *
     * @public
     */
    stopCameraAnimation() {
      this.emit("stop-camera-animation");
      return this;
    }
    /** @internal */
    _animateViewport(ms) {
      if (!this._viewportAnimation) return;
      this._viewportAnimation.elapsed += ms;
      const { elapsed, easing, duration, start, end } = this._viewportAnimation;
      if (elapsed > duration) {
        this.off("tick", this._animateViewport);
        this._viewportAnimation = null;
        this._setCamera(new Vec(-end.x, -end.y, this.getViewportScreenBounds().width / end.width));
        return;
      }
      const remaining = duration - elapsed;
      const t2 = easing(1 - remaining / duration);
      const left = start.minX + (end.minX - start.minX) * t2;
      const top = start.minY + (end.minY - start.minY) * t2;
      const right = start.maxX + (end.maxX - start.maxX) * t2;
      this._setCamera(new Vec(-left, -top, this.getViewportScreenBounds().width / (right - left)), {
        force: true
      });
    }
    /** @internal */
    _animateToViewport(targetViewportPage, opts = { animation: DEFAULT_ANIMATION_OPTIONS }) {
      const { animation, ...rest } = opts;
      if (!animation) return;
      const { duration = 0, easing = EASINGS.easeInOutCubic } = animation;
      const animationSpeed = this.user.getAnimationSpeed();
      const viewportPageBounds = this.getViewportPageBounds();
      this.stopCameraAnimation();
      if (this.getInstanceState().followingUserId) {
        this.stopFollowingUser();
      }
      if (duration === 0 || animationSpeed === 0) {
        return this._setCamera(
          new Vec(
            -targetViewportPage.x,
            -targetViewportPage.y,
            this.getViewportScreenBounds().width / targetViewportPage.width
          ),
          { ...rest }
        );
      }
      this._viewportAnimation = {
        elapsed: 0,
        duration: duration / animationSpeed,
        easing,
        start: viewportPageBounds.clone(),
        end: targetViewportPage.clone()
      };
      this.once("stop-camera-animation", () => {
        this.off("tick", this._animateViewport);
        this._viewportAnimation = null;
      });
      this.on("tick", this._animateViewport);
      return this;
    }
    /**
     * Slide the camera in a certain direction.
     *
     * @example
     * ```ts
     * editor.slideCamera({ speed: 1, direction: { x: 1, y: 0 }, friction: 0.1 })
     * ```
     *
     * @param opts - Options for the slide
     * @public
     */
    slideCamera(opts = {}) {
      const { isLocked } = this.getCameraOptions();
      if (isLocked && !opts?.force) return this;
      const animationSpeed = this.user.getAnimationSpeed();
      if (animationSpeed === 0) return this;
      this.stopCameraAnimation();
      const {
        speed,
        friction = this.options.cameraSlideFriction,
        direction,
        speedThreshold = 0.01
      } = opts;
      let currentSpeed = Math.min(speed, 1);
      const cancel = () => {
        this.off("tick", moveCamera);
        this.off("stop-camera-animation", cancel);
      };
      this.once("stop-camera-animation", cancel);
      const moveCamera = (elapsed) => {
        const { x: cx, y: cy, z: cz } = this.getCamera();
        const movementVec = Vec.Mul(direction, currentSpeed * elapsed / cz);
        currentSpeed *= 1 - friction;
        if (currentSpeed < speedThreshold) {
          cancel();
        } else {
          this._setCamera(new Vec(cx + movementVec.x, cy + movementVec.y, cz));
        }
      };
      this.on("tick", moveCamera);
      return this;
    }
    /**
     * Animate the camera to a user's cursor position. This also briefly show the user's cursor if it's not currently visible.
     *
     * @example
     * ```ts
     * editor.zoomToUser(myUserId)
     * editor.zoomToUser(myUserId, { animation: { duration: 200 } })
     * ```
     *
     * @param userId - The id of the user to animate to.
     * @param opts - The camera move options.
     * @public
     */
    zoomToUser(userId, opts = { animation: { duration: 500 } }) {
      const presence = this.getCollaborators().find((c) => c.userId === userId);
      if (!presence) return this;
      const cursor = presence.cursor;
      if (!cursor) return this;
      this.run(() => {
        if (this.getInstanceState().followingUserId !== null) {
          this.stopFollowingUser();
        }
        const isOnSamePage = presence.currentPageId === this.getCurrentPageId();
        if (!isOnSamePage) {
          this.setCurrentPage(presence.currentPageId);
        }
        if (opts && opts.animation && !isOnSamePage) {
          opts.animation = void 0;
        }
        this.centerOnPoint(cursor, opts);
        const { highlightedUserIds } = this.getInstanceState();
        this.updateInstanceState({ highlightedUserIds: [...highlightedUserIds, userId] });
        this.timers.setTimeout(() => {
          const highlightedUserIds2 = [...this.getInstanceState().highlightedUserIds];
          const index2 = highlightedUserIds2.indexOf(userId);
          if (index2 < 0) return;
          highlightedUserIds2.splice(index2, 1);
          this.updateInstanceState({ highlightedUserIds: highlightedUserIds2 });
        }, this.options.collaboratorIdleTimeoutMs);
      });
      return this;
    }
    /**
     * Update the viewport. The viewport will measure the size and screen position of its container
     * element. This should be done whenever the container's position on the screen changes.
     *
     * @example
     * ```ts
     * editor.updateViewportScreenBounds(new Box(0, 0, 1280, 1024))
     * editor.updateViewportScreenBounds(new Box(0, 0, 1280, 1024), true)
     * ```
     *
     * @param screenBounds - The new screen bounds of the viewport.
     * @param center - Whether to preserve the viewport page center as the viewport changes.
     *
     * @public
     */
    updateViewportScreenBounds(screenBounds, center = false) {
      if (screenBounds instanceof HTMLElement) {
        const rect = screenBounds.getBoundingClientRect();
        screenBounds = new Box(
          rect.left || rect.x,
          rect.top || rect.y,
          Math.max(rect.width, 1),
          Math.max(rect.height, 1)
        );
      } else {
        screenBounds.width = Math.max(screenBounds.width, 1);
        screenBounds.height = Math.max(screenBounds.height, 1);
      }
      const insets = [
        // top
        screenBounds.minY !== 0,
        // right
        !approximately(document.body.scrollWidth, screenBounds.maxX, 1),
        // bottom
        !approximately(document.body.scrollHeight, screenBounds.maxY, 1),
        // left
        screenBounds.minX !== 0
      ];
      const { _willSetInitialBounds } = this;
      this._willSetInitialBounds = false;
      const { screenBounds: prevScreenBounds, insets: prevInsets } = this.getInstanceState();
      if (screenBounds.equals(prevScreenBounds) && insets.every((v, i) => v === prevInsets[i])) {
        return this;
      }
      if (_willSetInitialBounds) {
        this.updateInstanceState({ screenBounds: screenBounds.toJson(), insets });
        this.setCamera(this.getCamera());
      } else {
        if (center && !this.getInstanceState().followingUserId) {
          const before = this.getViewportPageBounds().center;
          this.updateInstanceState({ screenBounds: screenBounds.toJson(), insets });
          this.centerOnPoint(before);
        } else {
          this.updateInstanceState({ screenBounds: screenBounds.toJson(), insets });
          this._setCamera(Vec.From({ ...this.getCamera() }));
        }
      }
      this._tickCameraState();
      return this;
    }
    getViewportScreenBounds() {
      const { x, y, w, h } = this.getInstanceState().screenBounds;
      return new Box(x, y, w, h);
    }
    getViewportScreenCenter() {
      const viewportScreenBounds = this.getViewportScreenBounds();
      return new Vec(
        viewportScreenBounds.midX - viewportScreenBounds.minX,
        viewportScreenBounds.midY - viewportScreenBounds.minY
      );
    }
    getViewportPageBounds() {
      const { w, h } = this.getViewportScreenBounds();
      const { x: cx, y: cy, z: cz } = this.getCamera();
      return new Box(-cx, -cy, w / cz, h / cz);
    }
    /**
     * Convert a point in screen space to a point in the current page space.
     *
     * @example
     * ```ts
     * editor.screenToPage({ x: 100, y: 100 })
     * ```
     *
     * @param point - The point in screen space.
     *
     * @public
     */
    screenToPage(point) {
      const { screenBounds } = this.store.unsafeGetWithoutCapture(TLINSTANCE_ID);
      const { x: cx, y: cy, z: cz = 1 } = this.getCamera();
      return new Vec(
        (point.x - screenBounds.x) / cz - cx,
        (point.y - screenBounds.y) / cz - cy,
        point.z ?? 0.5
      );
    }
    /**
     * Convert a point in the current page space to a point in current screen space.
     *
     * @example
     * ```ts
     * editor.pageToScreen({ x: 100, y: 100 })
     * ```
     *
     * @param point - The point in page space.
     *
     * @public
     */
    pageToScreen(point) {
      const { screenBounds } = this.store.unsafeGetWithoutCapture(TLINSTANCE_ID);
      const { x: cx, y: cy, z: cz = 1 } = this.getCamera();
      return new Vec(
        (point.x + cx) * cz + screenBounds.x,
        (point.y + cy) * cz + screenBounds.y,
        point.z ?? 0.5
      );
    }
    /**
     * Convert a point in the current page space to a point in current viewport space.
     *
     * @example
     * ```ts
     * editor.pageToViewport({ x: 100, y: 100 })
     * ```
     *
     * @param point - The point in page space.
     *
     * @public
     */
    pageToViewport(point) {
      const { x: cx, y: cy, z: cz = 1 } = this.getCamera();
      return new Vec((point.x + cx) * cz, (point.y + cy) * cz, point.z ?? 0.5);
    }
    _getCollaboratorsQuery() {
      return this.store.query.records("instance_presence", () => ({
        userId: { neq: this.user.getId() }
      }));
    }
    getCollaborators() {
      const allPresenceRecords = this._getCollaboratorsQuery().get();
      if (!allPresenceRecords.length) return EMPTY_ARRAY;
      const userIds = [...new Set(allPresenceRecords.map((c) => c.userId))].sort();
      return userIds.map((id) => {
        const latestPresence = maxBy(
          allPresenceRecords.filter((c) => c.userId === id),
          (p) => p.lastActivityTimestamp ?? 0
        );
        return latestPresence;
      });
    }
    getCollaboratorsOnCurrentPage() {
      const currentPageId = this.getCurrentPageId();
      return this.getCollaborators().filter((c) => c.currentPageId === currentPageId);
    }
    /**
     * Start viewport-following a user.
     *
     * @example
     * ```ts
     * editor.startFollowingUser(myUserId)
     * ```
     *
     * @param userId - The id of the user to follow.
     *
     * @public
     */
    startFollowingUser(userId) {
      this.stopFollowingUser();
      const leaderPresences = this._getCollaboratorsQuery().get().filter((p) => p.userId === userId);
      if (!leaderPresences.length) {
        console.warn("User not found");
        return this;
      }
      const thisUserId = this.user.getId();
      if (!thisUserId) {
        console.warn("You should set the userId for the current instance before following a user");
      }
      if (leaderPresences.some((p) => p.followingUserId === thisUserId)) {
        return this;
      }
      const latestLeaderPresence = computed("latestLeaderPresence", () => {
        return this.getCollaborators().find((p) => p.userId === userId);
      });
      transact(() => {
        this.updateInstanceState({ followingUserId: userId }, { history: "ignore" });
        const dispose = react("update current page", () => {
          const leaderPresence = latestLeaderPresence.get();
          if (!leaderPresence) {
            this.stopFollowingUser();
            return;
          }
          if (leaderPresence.currentPageId !== this.getCurrentPageId() && this.getPage(leaderPresence.currentPageId)) {
            this.run(
              () => {
                this.store.put([
                  { ...this.getInstanceState(), currentPageId: leaderPresence.currentPageId }
                ]);
                this._isLockedOnFollowingUser.set(true);
              },
              { history: "ignore" }
            );
          }
        });
        const cancel = () => {
          dispose();
          this._isLockedOnFollowingUser.set(false);
          this.off("frame", moveTowardsUser);
          this.off("stop-following", cancel);
        };
        const moveTowardsUser = () => {
          const leaderPresence = latestLeaderPresence.get();
          if (!leaderPresence) {
            this.stopFollowingUser();
            return;
          }
          if (this._isLockedOnFollowingUser.get()) return;
          const animationSpeed = this.user.getAnimationSpeed();
          if (animationSpeed === 0) {
            this._isLockedOnFollowingUser.set(true);
            return;
          }
          const targetViewport = this.getViewportPageBoundsForFollowing();
          if (!targetViewport) {
            this.stopFollowingUser();
            return;
          }
          const currentViewport = this.getViewportPageBounds();
          const diffX = Math.abs(targetViewport.minX - currentViewport.minX) + Math.abs(targetViewport.maxX - currentViewport.maxX);
          const diffY = Math.abs(targetViewport.minY - currentViewport.minY) + Math.abs(targetViewport.maxY - currentViewport.maxY);
          if (diffX < this.options.followChaseViewportSnap && diffY < this.options.followChaseViewportSnap) {
            this._isLockedOnFollowingUser.set(true);
            return;
          }
          const t2 = clamp(animationSpeed * 0.5, 0.1, 0.8);
          const nextViewport = new Box(
            lerp(currentViewport.minX, targetViewport.minX, t2),
            lerp(currentViewport.minY, targetViewport.minY, t2),
            lerp(currentViewport.width, targetViewport.width, t2),
            lerp(currentViewport.height, targetViewport.height, t2)
          );
          const nextCamera = new Vec(
            -nextViewport.x,
            -nextViewport.y,
            this.getViewportScreenBounds().width / nextViewport.width
          );
          this.stopCameraAnimation();
          this._setCamera(nextCamera);
        };
        this.once("stop-following", cancel);
        this.addListener("frame", moveTowardsUser);
        moveTowardsUser();
      });
      return this;
    }
    /**
     * Stop viewport-following a user.
     *
     * @example
     * ```ts
     * editor.stopFollowingUser()
     * ```
     * @public
     */
    stopFollowingUser() {
      this.run(
        () => {
          this.store.put([this.getCamera()]);
          this._isLockedOnFollowingUser.set(false);
          this.updateInstanceState({ followingUserId: null });
          this.emit("stop-following");
        },
        { history: "ignore" }
      );
      return this;
    }
    /** @internal */
    getUnorderedRenderingShapes(useEditorState) {
      const renderingShapes = [];
      let nextIndex = this.options.maxShapesPerPage * 2;
      let nextBackgroundIndex = this.options.maxShapesPerPage;
      const erasingShapeIds = this.getErasingShapeIds();
      const addShapeById = (id, opacity, isAncestorErasing) => {
        const shape = this.getShape(id);
        if (!shape) return;
        if (this.isShapeHidden(shape)) return;
        opacity *= shape.opacity;
        let isShapeErasing = false;
        const util = this.getShapeUtil(shape);
        if (useEditorState) {
          isShapeErasing = !isAncestorErasing && erasingShapeIds.includes(id);
          if (isShapeErasing) {
            opacity *= 0.32;
          }
        }
        renderingShapes.push({
          id,
          shape,
          util,
          index: nextIndex,
          backgroundIndex: nextBackgroundIndex,
          opacity
        });
        nextIndex += 1;
        nextBackgroundIndex += 1;
        const childIds = this.getSortedChildIdsForParent(id);
        if (!childIds.length) return;
        let backgroundIndexToRestore = null;
        if (util.providesBackgroundForChildren(shape)) {
          backgroundIndexToRestore = nextBackgroundIndex;
          nextBackgroundIndex = nextIndex;
          nextIndex += this.options.maxShapesPerPage;
        }
        for (const childId of childIds) {
          addShapeById(childId, opacity, isAncestorErasing || isShapeErasing);
        }
        if (backgroundIndexToRestore !== null) {
          nextBackgroundIndex = backgroundIndexToRestore;
        }
      };
      const pages = useEditorState ? [this.getCurrentPage()] : this.getPages();
      for (const page of pages) {
        for (const childId of this.getSortedChildIdsForParent(page.id)) {
          addShapeById(childId, 1, false);
        }
      }
      return renderingShapes;
    }
    _decayCameraStateTimeout(elapsed) {
      this._cameraStateTimeoutRemaining -= elapsed;
      if (this._cameraStateTimeoutRemaining > 0) return;
      this.off("tick", this._decayCameraStateTimeout);
      this._cameraState.set("idle");
    }
    _tickCameraState() {
      this._cameraStateTimeoutRemaining = this.options.cameraMovingTimeoutMs;
      if (this._cameraState.__unsafe__getWithoutCapture() !== "idle") return;
      this._cameraState.set("moving");
      this.on("tick", this._decayCameraStateTimeout);
    }
    /**
     * Whether the camera is moving or idle.
     *
     * @example
     * ```ts
     * editor.getCameraState()
     * ```
     *
     * @public
     */
    getCameraState() {
      return this._cameraState.get();
    }
    getRenderingShapes() {
      const renderingShapes = this.getUnorderedRenderingShapes(true);
      return renderingShapes.sort(sortById);
    }
    _getAllPagesQuery() {
      return this.store.query.records("page");
    }
    getPages() {
      return Array.from(this._getAllPagesQuery().get()).sort(sortByIndex);
    }
    /**
     * The current page.
     *
     * @example
     * ```ts
     * editor.getCurrentPage()
     * ```
     *
     * @public
     */
    getCurrentPage() {
      return this.getPage(this.getCurrentPageId());
    }
    getCurrentPageId() {
      return this.getInstanceState().currentPageId;
    }
    /**
     * Get a page.
     *
     * @example
     * ```ts
     * editor.getPage(myPage.id)
     * editor.getPage(myPage)
     * ```
     *
     * @param page - The page (or the page id) to get.
     *
     * @public
     */
    getPage(page) {
      return this.store.get(typeof page === "string" ? page : page.id);
    }
    /**
     * An array of all of the shapes on the current page.
     *
     * @example
     * ```ts
     * editor.getCurrentPageIds()
     * ```
     *
     * @public
     */
    getCurrentPageShapeIds() {
      return this._currentPageShapeIds.get();
    }
    getCurrentPageShapeIdsSorted() {
      return Array.from(this.getCurrentPageShapeIds()).sort();
    }
    /**
     * Get the ids of shapes on a page.
     *
     * @example
     * ```ts
     * const idsOnPage1 = editor.getPageShapeIds('page1')
     * const idsOnPage2 = editor.getPageShapeIds(myPage2)
     * ```
     *
     * @param page - The page (or the page id) to get the shape ids for.
     *
     * @public
     **/
    getPageShapeIds(page) {
      const pageId = typeof page === "string" ? page : page.id;
      const result = this.store.query.exec("shape", { parentId: { eq: pageId } });
      return this.getShapeAndDescendantIds(result.map((s) => s.id));
    }
    /**
     * Set the current page.
     *
     * @example
     * ```ts
     * editor.setCurrentPage('page1')
     * editor.setCurrentPage(myPage1)
     * ```
     *
     * @param page - The page (or the page id) to set as the current page.
     *
     * @public
     */
    setCurrentPage(page) {
      const pageId = typeof page === "string" ? page : page.id;
      if (!this.store.has(pageId)) {
        console.error("Tried to set the current page id to a page that doesn't exist.");
        return this;
      }
      this.stopFollowingUser();
      this.complete();
      return this.run(
        () => {
          this.store.put([{ ...this.getInstanceState(), currentPageId: pageId }]);
          this.setCamera(this.getCamera());
        },
        { history: "record-preserveRedoStack" }
      );
    }
    /**
     * Update a page.
     *
     * @example
     * ```ts
     * editor.updatePage({ id: 'page2', name: 'Page 2' })
     * ```
     *
     * @param partial - The partial of the shape to update.
     *
     * @public
     */
    updatePage(partial) {
      if (this.getIsReadonly()) return this;
      const prev = this.getPage(partial.id);
      if (!prev) return this;
      return this.run(() => this.store.update(partial.id, (page) => ({ ...page, ...partial })));
    }
    /**
     * Create a page.
     *
     * @example
     * ```ts
     * editor.createPage(myPage)
     * editor.createPage({ name: 'Page 2' })
     * ```
     *
     * @param page - The page (or page partial) to create.
     *
     * @public
     */
    createPage(page) {
      this.run(() => {
        if (this.getIsReadonly()) return;
        if (this.getPages().length >= this.options.maxPages) return;
        const pages = this.getPages();
        const name = getIncrementedName(
          page.name ?? "Page 1",
          pages.map((p) => p.name)
        );
        let index2 = page.index;
        if (!index2 || pages.some((p) => p.index === index2)) {
          index2 = getIndexAbove(pages[pages.length - 1].index);
        }
        const newPage = PageRecordType.create({
          meta: {},
          ...page,
          name,
          index: index2
        });
        this.store.put([newPage]);
      });
      return this;
    }
    /**
     * Delete a page.
     *
     * @example
     * ```ts
     * editor.deletePage('page1')
     * ```
     *
     * @param page - The page (or the page id) to delete.
     *
     * @public
     */
    deletePage(page) {
      const id = typeof page === "string" ? page : page.id;
      this.run(() => {
        if (this.getIsReadonly()) return;
        const pages = this.getPages();
        if (pages.length === 1) return;
        const deletedPage = this.getPage(id);
        if (!deletedPage) return;
        if (id === this.getCurrentPageId()) {
          const index2 = pages.findIndex((page2) => page2.id === id);
          const next = pages[index2 - 1] ?? pages[index2 + 1];
          this.setCurrentPage(next.id);
        }
        this.store.remove([deletedPage.id]);
      });
      return this;
    }
    /**
     * Duplicate a page.
     *
     * @param page - The page (or the page id) to duplicate. Defaults to the current page.
     * @param createId - The id of the new page. Defaults to a new id.
     *
     * @public
     */
    duplicatePage(page, createId = PageRecordType.createId()) {
      if (this.getPages().length >= this.options.maxPages) return this;
      const id = typeof page === "string" ? page : page.id;
      const freshPage = this.getPage(id);
      if (!freshPage) return this;
      const prevCamera = { ...this.getCamera() };
      const content = this.getContentFromCurrentPage(this.getSortedChildIdsForParent(freshPage.id));
      this.run(() => {
        const pages = this.getPages();
        const index2 = getIndexBetween(freshPage.index, pages[pages.indexOf(freshPage) + 1]?.index);
        this.createPage({ name: freshPage.name + " Copy", id: createId, index: index2 });
        this.setCurrentPage(createId);
        this.setCamera(prevCamera);
        if (content) {
          return this.putContentOntoCurrentPage(content);
        }
      });
      return this;
    }
    /**
     * Rename a page.
     *
     * @example
     * ```ts
     * editor.renamePage('page1', 'My Page')
     * ```
     *
     * @param page - The page (or the page id) to rename.
     * @param name - The new name.
     *
     * @public
     */
    renamePage(page, name) {
      const id = typeof page === "string" ? page : page.id;
      if (this.getIsReadonly()) return this;
      this.updatePage({ id, name });
      return this;
    }
    _getAllAssetsQuery() {
      return this.store.query.records("asset");
    }
    /**
     * Get all assets in the editor.
     *
     * @public
     */
    getAssets() {
      return this._getAllAssetsQuery().get();
    }
    /**
     * Create one or more assets.
     *
     * @example
     * ```ts
     * editor.createAssets([...myAssets])
     * ```
     *
     * @param assets - The assets to create.
     *
     * @public
     */
    createAssets(assets) {
      if (this.getIsReadonly()) return this;
      if (assets.length <= 0) return this;
      this.run(() => this.store.put(assets), { history: "ignore" });
      return this;
    }
    /**
     * Update one or more assets.
     *
     * @example
     * ```ts
     * editor.updateAssets([{ id: 'asset1', name: 'New name' }])
     * ```
     *
     * @param assets - The assets to update.
     *
     * @public
     */
    updateAssets(assets) {
      if (this.getIsReadonly()) return this;
      if (assets.length <= 0) return this;
      this.run(
        () => {
          this.store.put(
            assets.map((partial) => ({
              ...this.store.get(partial.id),
              ...partial
            }))
          );
        },
        { history: "ignore" }
      );
      return this;
    }
    /**
     * Delete one or more assets.
     *
     * @example
     * ```ts
     * editor.deleteAssets(['asset1', 'asset2'])
     * ```
     *
     * @param assets - The assets (or asset ids) to delete.
     *
     * @public
     */
    deleteAssets(assets) {
      if (this.getIsReadonly()) return this;
      const ids = typeof assets[0] === "string" ? assets : assets.map((a) => a.id);
      if (ids.length <= 0) return this;
      this.run(() => this.store.remove(ids), { history: "ignore" });
      return this;
    }
    /**
     * Get an asset by its id.
     *
     * @example
     * ```ts
     * editor.getAsset('asset1')
     * ```
     *
     * @param asset - The asset (or asset id) to get.
     *
     * @public
     */
    getAsset(asset) {
      return this.store.get(typeof asset === "string" ? asset : asset.id);
    }
    async resolveAssetUrl(assetId, context) {
      if (!assetId) return null;
      const asset = this.getAsset(assetId);
      if (!asset) return null;
      const { screenScale = 1, shouldResolveToOriginal = false } = context;
      const zoomStepFunction = (zoom) => Math.pow(2, Math.ceil(Math.log2(zoom)));
      const steppedScreenScale = Math.max(0.125, zoomStepFunction(screenScale));
      const networkEffectiveType = "connection" in navigator ? navigator.connection.effectiveType : null;
      const dpr = this.getInstanceState().devicePixelRatio;
      return await this.store.props.assets.resolve(asset, {
        screenScale: screenScale || 1,
        steppedScreenScale,
        dpr,
        networkEffectiveType,
        shouldResolveToOriginal
      });
    }
    /**
     * Upload an asset to the store's asset service, returning a URL that can be used to resolve the
     * asset.
     */
    async uploadAsset(asset, file, abortSignal) {
      return await this.store.props.assets.upload(asset, file, abortSignal);
    }
    _getShapeGeometryCache() {
      return this.store.createComputedCache(
        "bounds",
        (shape) => this.getShapeUtil(shape).getGeometry(shape),
        (a, b) => a.props === b.props
      );
    }
    /**
     * Get the geometry of a shape.
     *
     * @example
     * ```ts
     * editor.getShapeGeometry(myShape)
     * editor.getShapeGeometry(myShapeId)
     * ```
     *
     * @param shape - The shape (or shape id) to get the geometry for.
     *
     * @public
     */
    getShapeGeometry(shape) {
      return this._getShapeGeometryCache().get(typeof shape === "string" ? shape : shape.id);
    }
    _getShapeHandlesCache() {
      return this.store.createComputedCache("handles", (shape) => {
        return this.getShapeUtil(shape).getHandles?.(shape);
      });
    }
    /**
     * Get the handles (if any) for a shape.
     *
     * @example
     * ```ts
     * editor.getShapeHandles(myShape)
     * editor.getShapeHandles(myShapeId)
     * ```
     *
     * @param shape - The shape (or shape id) to get the handles for.
     * @public
     */
    getShapeHandles(shape) {
      return this._getShapeHandlesCache().get(typeof shape === "string" ? shape : shape.id);
    }
    /**
     * Get the local transform for a shape as a matrix model. This transform reflects both its
     * translation (x, y) from from either its parent's top left corner, if the shape's parent is
     * another shape, or else from the 0,0 of the page, if the shape's parent is the page; and the
     * shape's rotation.
     *
     * @example
     * ```ts
     * editor.getShapeLocalTransform(myShape)
     * ```
     *
     * @param shape - The shape to get the local transform for.
     *
     * @public
     */
    getShapeLocalTransform(shape) {
      const id = typeof shape === "string" ? shape : shape.id;
      const freshShape = this.getShape(id);
      if (!freshShape) throw Error("Editor.getTransform: shape not found");
      return Mat.Identity().translate(freshShape.x, freshShape.y).rotate(freshShape.rotation);
    }
    _getShapePageTransformCache() {
      return this.store.createComputedCache("pageTransformCache", (shape) => {
        if (isPageId(shape.parentId)) {
          return this.getShapeLocalTransform(shape);
        }
        const parentTransform = this._getShapePageTransformCache().get(shape.parentId) ?? Mat.Identity();
        return Mat.Compose(parentTransform, this.getShapeLocalTransform(shape));
      });
    }
    /**
     * Get the local transform of a shape's parent as a matrix model.
     *
     * @example
     * ```ts
     * editor.getShapeParentTransform(myShape)
     * ```
     *
     * @param shape - The shape (or shape id) to get the parent transform for.
     *
     * @public
     */
    getShapeParentTransform(shape) {
      const id = typeof shape === "string" ? shape : shape.id;
      const freshShape = this.getShape(id);
      if (!freshShape || isPageId(freshShape.parentId)) return Mat.Identity();
      return this._getShapePageTransformCache().get(freshShape.parentId) ?? Mat.Identity();
    }
    /**
     * Get the transform of a shape in the current page space.
     *
     * @example
     * ```ts
     * editor.getShapePageTransform(myShape)
     * editor.getShapePageTransform(myShapeId)
     * ```
     *
     * @param shape - The shape (or shape id) to get the page transform for.
     *
     * @public
     */
    getShapePageTransform(shape) {
      const id = typeof shape === "string" ? shape : shape.id;
      return this._getShapePageTransformCache().get(id) ?? Mat.Identity();
    }
    _getShapePageBoundsCache() {
      return this.store.createComputedCache("pageBoundsCache", (shape) => {
        const pageTransform = this._getShapePageTransformCache().get(shape.id);
        if (!pageTransform) return new Box();
        const result = Box.FromPoints(
          Mat.applyToPoints(pageTransform, this.getShapeGeometry(shape).vertices)
        );
        return result;
      });
    }
    /**
     * Get the bounds of a shape in the current page space.
     *
     * @example
     * ```ts
     * editor.getShapePageBounds(myShape)
     * editor.getShapePageBounds(myShapeId)
     * ```
     *
     * @param shape - The shape (or shape id) to get the bounds for.
     *
     * @public
     */
    getShapePageBounds(shape) {
      return this._getShapePageBoundsCache().get(typeof shape === "string" ? shape : shape.id);
    }
    _getShapeClipPathCache() {
      return this.store.createComputedCache("clipPathCache", (shape) => {
        const pageMask = this._getShapeMaskCache().get(shape.id);
        if (!pageMask) return void 0;
        if (pageMask.length === 0) {
          return `polygon(0px 0px, 0px 0px, 0px 0px)`;
        }
        const pageTransform = this._getShapePageTransformCache().get(shape.id);
        if (!pageTransform) return void 0;
        const localMask = Mat.applyToPoints(Mat.Inverse(pageTransform), pageMask);
        return `polygon(${localMask.map((p) => `${p.x}px ${p.y}px`).join(",")})`;
      });
    }
    /**
     * Get the clip path for a shape.
     *
     * @example
     * ```ts
     * const clipPath = editor.getShapeClipPath(shape)
     * const clipPath = editor.getShapeClipPath(shape.id)
     * ```
     *
     * @param shape - The shape (or shape id) to get the clip path for.
     *
     * @returns The clip path or undefined.
     *
     * @public
     */
    getShapeClipPath(shape) {
      return this._getShapeClipPathCache().get(typeof shape === "string" ? shape : shape.id);
    }
    _getShapeMaskCache() {
      return this.store.createComputedCache("pageMaskCache", (shape) => {
        if (isPageId(shape.parentId)) return void 0;
        const frameAncestors = this.getShapeAncestors(shape.id).filter(
          (shape2) => this.isShapeOfType(shape2, "frame")
        );
        if (frameAncestors.length === 0) return void 0;
        const pageMask = frameAncestors.map(
          (s) => (
            // Apply the frame transform to the frame outline to get the frame outline in the current page space
            this._getShapePageTransformCache().get(s.id).applyToPoints(this.getShapeGeometry(s).vertices)
          )
        ).reduce((acc, b) => {
          if (!(b && acc)) return void 0;
          const intersection = intersectPolygonPolygon(acc, b);
          if (intersection) {
            return intersection.map(Vec.Cast);
          }
          return [];
        });
        return pageMask;
      });
    }
    /**
     * Get the mask (in the current page space) for a shape.
     *
     * @example
     * ```ts
     * const pageMask = editor.getShapeMask(shape.id)
     * ```
     *
     * @param shape - The shape (or the shape id) of the shape to get the mask for.
     *
     * @returns The mask for the shape.
     *
     * @public
     */
    getShapeMask(shape) {
      return this._getShapeMaskCache().get(typeof shape === "string" ? shape : shape.id);
    }
    /**
     * Get the bounds of a shape in the current page space, incorporating any masks. For example, if the
     * shape were the child of a frame and was half way out of the frame, the bounds would be the half
     * of the shape that was in the frame.
     *
     * @example
     * ```ts
     * editor.getShapeMaskedPageBounds(myShape)
     * editor.getShapeMaskedPageBounds(myShapeId)
     * ```
     *
     * @param shape - The shape to get the masked bounds for.
     *
     * @public
     */
    getShapeMaskedPageBounds(shape) {
      if (typeof shape !== "string") shape = shape.id;
      return this._getShapeMaskedPageBoundsCache().get(shape);
    }
    _getShapeMaskedPageBoundsCache() {
      return this.store.createComputedCache("shapeMaskedPageBoundsCache", (shape) => {
        const pageBounds = this._getShapePageBoundsCache().get(shape.id);
        if (!pageBounds) return;
        const pageMask = this._getShapeMaskCache().get(shape.id);
        if (pageMask) {
          if (pageMask.length === 0) return void 0;
          const { corners } = pageBounds;
          if (corners.every((p, i) => p && Vec.Equals(p, pageMask[i]))) return pageBounds.clone();
          const intersection = intersectPolygonPolygon(pageMask, corners);
          if (!intersection) return;
          return Box.FromPoints(intersection);
        }
        return pageBounds;
      });
    }
    /**
     * Get the ancestors of a shape.
     *
     * @example
     * ```ts
     * const ancestors = editor.getShapeAncestors(myShape)
     * const ancestors = editor.getShapeAncestors(myShapeId)
     * ```
     *
     * @param shape - The shape (or shape id) to get the ancestors for.
     * @param acc - The accumulator.
     *
     * @public
     */
    getShapeAncestors(shape, acc = []) {
      const id = typeof shape === "string" ? shape : shape.id;
      const freshShape = this.getShape(id);
      if (!freshShape) return acc;
      const parentId = freshShape.parentId;
      if (isPageId(parentId)) {
        acc.reverse();
        return acc;
      }
      const parent = this.store.get(parentId);
      if (!parent) return acc;
      acc.push(parent);
      return this.getShapeAncestors(parent, acc);
    }
    /**
     * Find the first ancestor matching the given predicate
     *
     * @example
     * ```ts
     * const ancestor = editor.findShapeAncestor(myShape)
     * const ancestor = editor.findShapeAncestor(myShape.id)
     * const ancestor = editor.findShapeAncestor(myShape.id, (shape) => shape.type === 'frame')
     * ```
     *
     * @param shape - The shape to check the ancestors for.
     * @param predicate - The predicate to match.
     *
     * @public
     */
    findShapeAncestor(shape, predicate) {
      const id = typeof shape === "string" ? shape : shape.id;
      const freshShape = this.getShape(id);
      if (!freshShape) return;
      const parentId = freshShape.parentId;
      if (isPageId(parentId)) return;
      const parent = this.getShape(parentId);
      if (!parent) return;
      return predicate(parent) ? parent : this.findShapeAncestor(parent, predicate);
    }
    /**
     * Returns true if the the given shape has the given ancestor.
     *
     * @param shape - The shape.
     * @param ancestorId - The id of the ancestor.
     *
     * @public
     */
    hasAncestor(shape, ancestorId) {
      const id = typeof shape === "string" ? shape : shape?.id;
      const freshShape = id && this.getShape(id);
      if (!freshShape) return false;
      if (freshShape.parentId === ancestorId) return true;
      return this.hasAncestor(this.getShapeParent(freshShape), ancestorId);
    }
    /**
     * Get the common ancestor of two or more shapes that matches a predicate.
     *
     * @param shapes - The shapes (or shape ids) to check.
     * @param predicate - The predicate to match.
     */
    findCommonAncestor(shapes, predicate) {
      if (shapes.length === 0) {
        return;
      }
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      const freshShapes = compact(ids.map((id) => this.getShape(id)));
      if (freshShapes.length === 1) {
        const parentId = freshShapes[0].parentId;
        if (isPageId(parentId)) {
          return;
        }
        return predicate ? this.findShapeAncestor(freshShapes[0], predicate)?.id : parentId;
      }
      const [nodeA, ...others] = freshShapes;
      let ancestor = this.getShapeParent(nodeA);
      while (ancestor) {
        if (predicate && !predicate(ancestor)) {
          ancestor = this.getShapeParent(ancestor);
          continue;
        }
        if (others.every((shape) => this.hasAncestor(shape, ancestor.id))) {
          return ancestor.id;
        }
        ancestor = this.getShapeParent(ancestor);
      }
      return void 0;
    }
    isShapeOrAncestorLocked(arg) {
      const shape = typeof arg === "string" ? this.getShape(arg) : arg;
      if (shape === void 0) return false;
      if (shape.isLocked) return true;
      return this.isShapeOrAncestorLocked(this.getShapeParent(shape));
    }
    _notVisibleShapes() {
      return notVisibleShapes(this);
    }
    getCulledShapes() {
      const notVisibleShapes2 = this._notVisibleShapes().get();
      const selectedShapeIds = this.getSelectedShapeIds();
      const editingId = this.getEditingShapeId();
      const culledShapes = new Set(notVisibleShapes2);
      if (editingId) {
        culledShapes.delete(editingId);
      }
      selectedShapeIds.forEach((id) => {
        culledShapes.delete(id);
      });
      return culledShapes;
    }
    getCurrentPageBounds() {
      let commonBounds;
      this.getCurrentPageShapeIdsSorted().forEach((shapeId) => {
        const bounds = this.getShapeMaskedPageBounds(shapeId);
        if (!bounds) return;
        if (!commonBounds) {
          commonBounds = bounds.clone();
        } else {
          commonBounds = commonBounds.expand(bounds);
        }
      });
      return commonBounds;
    }
    /**
     * Get the top-most selected shape at the given point, ignoring groups.
     *
     * @param point - The point to check.
     *
     * @returns The top-most selected shape at the given point, or undefined if there is no shape at the point.
     */
    getSelectedShapeAtPoint(point) {
      const selectedShapeIds = this.getSelectedShapeIds();
      return this.getCurrentPageShapesSorted().filter((shape) => shape.type !== "group" && selectedShapeIds.includes(shape.id)).reverse().find((shape) => this.isPointInShape(shape, point, { hitInside: true, margin: 0 }));
    }
    /**
     * Get the shape at the current point.
     *
     * @param point - The point to check.
     * @param opts - Options for the check: `hitInside` to check if the point is inside the shape, `margin` to check if the point is within a margin of the shape, `hitFrameInside` to check if the point is inside the frame, and `filter` to filter the shapes to check.
     *
     * @returns The shape at the given point, or undefined if there is no shape at the point.
     */
    getShapeAtPoint(point, opts = {}) {
      const zoomLevel = this.getZoomLevel();
      const viewportPageBounds = this.getViewportPageBounds();
      const {
        filter: filter2,
        margin = 0,
        hitLocked = false,
        hitLabels = false,
        hitInside = false,
        hitFrameInside = false
      } = opts;
      let inHollowSmallestArea = Infinity;
      let inHollowSmallestAreaHit = null;
      let inMarginClosestToEdgeDistance = Infinity;
      let inMarginClosestToEdgeHit = null;
      const shapesToCheck = (opts.renderingOnly ? this.getCurrentPageRenderingShapesSorted() : this.getCurrentPageShapesSorted()).filter((shape) => {
        if (shape.isLocked && !hitLocked || this.isShapeHidden(shape) || this.isShapeOfType(shape, "group"))
          return false;
        const pageMask = this.getShapeMask(shape);
        if (pageMask && !pointInPolygon(point, pageMask)) return false;
        if (filter2) return filter2(shape);
        return true;
      });
      for (let i = shapesToCheck.length - 1; i >= 0; i--) {
        const shape = shapesToCheck[i];
        const geometry = this.getShapeGeometry(shape);
        const isGroup = geometry instanceof Group2d;
        const pointInShapeSpace = this.getPointInShapeSpace(shape, point);
        if (this.isShapeOfType(shape, "frame") || (this.isShapeOfType(shape, "arrow") || this.isShapeOfType(shape, "geo") && shape.props.fill === "none") && shape.props.text.trim()) {
          for (const childGeometry of geometry.children) {
            if (childGeometry.isLabel && childGeometry.isPointInBounds(pointInShapeSpace)) {
              return shape;
            }
          }
        }
        if (this.isShapeOfType(shape, "frame")) {
          const distance2 = geometry.distanceToPoint(pointInShapeSpace, hitInside);
          if (Math.abs(distance2) <= margin) {
            return inMarginClosestToEdgeHit || shape;
          }
          if (geometry.hitTestPoint(pointInShapeSpace, 0, true)) {
            return inMarginClosestToEdgeHit || inHollowSmallestAreaHit || (hitFrameInside ? shape : void 0);
          }
          continue;
        }
        let distance;
        if (isGroup) {
          let minDistance = Infinity;
          for (const childGeometry of geometry.children) {
            if (childGeometry.isLabel && !hitLabels) continue;
            const tDistance = childGeometry.distanceToPoint(pointInShapeSpace, hitInside);
            if (tDistance < minDistance) {
              minDistance = tDistance;
            }
          }
          distance = minDistance;
        } else {
          if (margin === 0 && (geometry.bounds.w < 1 || geometry.bounds.h < 1)) {
            distance = geometry.distanceToPoint(pointInShapeSpace, hitInside);
          } else {
            if (geometry.bounds.containsPoint(pointInShapeSpace, margin)) {
              distance = geometry.distanceToPoint(pointInShapeSpace, hitInside);
            } else {
              distance = Infinity;
            }
          }
        }
        if (geometry.isClosed) {
          if (distance <= margin) {
            if (geometry.isFilled || isGroup && geometry.children[0].isFilled) {
              return inMarginClosestToEdgeHit || shape;
            } else {
              if (this.getShapePageBounds(shape).contains(viewportPageBounds)) continue;
              if (Math.abs(distance) < margin) {
                if (Math.abs(distance) < inMarginClosestToEdgeDistance) {
                  inMarginClosestToEdgeDistance = Math.abs(distance);
                  inMarginClosestToEdgeHit = shape;
                }
              } else if (!inMarginClosestToEdgeHit) {
                const { area } = geometry;
                if (area < inHollowSmallestArea) {
                  inHollowSmallestArea = area;
                  inHollowSmallestAreaHit = shape;
                }
              }
            }
          }
        } else {
          if (distance < this.options.hitTestMargin / zoomLevel) {
            return shape;
          }
        }
      }
      return inMarginClosestToEdgeHit || inHollowSmallestAreaHit || void 0;
    }
    /**
     * Get the shapes, if any, at a given page point.
     *
     * @example
     * ```ts
     * editor.getShapesAtPoint({ x: 100, y: 100 })
     * editor.getShapesAtPoint({ x: 100, y: 100 }, { hitInside: true, exact: true })
     * ```
     *
     * @param point - The page point to test.
     * @param opts - The options for the hit point testing.
     *
     * @public
     */
    getShapesAtPoint(point, opts = {}) {
      return this.getCurrentPageShapes().filter(
        (shape) => !this.isShapeHidden(shape) && this.isPointInShape(shape, point, opts)
      );
    }
    /**
     * Test whether a point (in the current page space) will will a shape. This method takes into account masks,
     * such as when a shape is the child of a frame and is partially clipped by the frame.
     *
     * @example
     * ```ts
     * editor.isPointInShape({ x: 100, y: 100 }, myShape)
     * ```
     *
     * @param shape - The shape to test against.
     * @param point - The page point to test (in the current page space).
     * @param opts - The options for the hit point testing.
     *
     * @public
     */
    isPointInShape(shape, point, opts = {}) {
      const { hitInside = false, margin = 0 } = opts;
      const id = typeof shape === "string" ? shape : shape.id;
      const pageMask = this.getShapeMask(id);
      if (pageMask && !pointInPolygon(point, pageMask)) return false;
      return this.getShapeGeometry(id).hitTestPoint(
        this.getPointInShapeSpace(shape, point),
        margin,
        hitInside
      );
    }
    /**
     * Convert a point in the current page space to a point in the local space of a shape. For example, if a
     * shape's page point were `{ x: 100, y: 100 }`, a page point at `{ x: 110, y: 110 }` would be at
     * `{ x: 10, y: 10 }` in the shape's local space.
     *
     * @example
     * ```ts
     * editor.getPointInShapeSpace(myShape, { x: 100, y: 100 })
     * ```
     *
     * @param shape - The shape to get the point in the local space of.
     * @param point - The page point to get in the local space of the shape.
     *
     * @public
     */
    getPointInShapeSpace(shape, point) {
      const id = typeof shape === "string" ? shape : shape.id;
      return this._getShapePageTransformCache().get(id).clone().invert().applyToPoint(point);
    }
    /**
     * Convert a delta in the current page space to a point in the local space of a shape's parent.
     *
     * @example
     * ```ts
     * editor.getPointInParentSpace(myShape.id, { x: 100, y: 100 })
     * ```
     *
     * @param shape - The shape to get the point in the local space of.
     * @param point - The page point to get in the local space of the shape.
     *
     * @public
     */
    getPointInParentSpace(shape, point) {
      const id = typeof shape === "string" ? shape : shape.id;
      const freshShape = this.getShape(id);
      if (!freshShape) return new Vec(0, 0);
      if (isPageId(freshShape.parentId)) return Vec.From(point);
      const parentTransform = this.getShapePageTransform(freshShape.parentId);
      if (!parentTransform) return Vec.From(point);
      return parentTransform.clone().invert().applyToPoint(point);
    }
    getCurrentPageShapes() {
      return Array.from(this.getCurrentPageShapeIds(), (id) => this.store.get(id));
    }
    getCurrentPageShapesSorted() {
      const result = [];
      const topLevelShapes = this.getSortedChildIdsForParent(this.getCurrentPageId());
      for (let i = 0, n = topLevelShapes.length; i < n; i++) {
        pushShapeWithDescendants(this, topLevelShapes[i], result);
      }
      return result;
    }
    getCurrentPageRenderingShapesSorted() {
      const culledShapes = this.getCulledShapes();
      return this.getCurrentPageShapesSorted().filter(
        ({ id }) => !culledShapes.has(id) && !this.isShapeHidden(id)
      );
    }
    isShapeOfType(arg, type) {
      const shape = typeof arg === "string" ? this.getShape(arg) : arg;
      if (!shape) return false;
      return shape.type === type;
    }
    /**
     * Get a shape by its id.
     *
     * @example
     * ```ts
     * editor.getShape('box1')
     * ```
     *
     * @param shape - The shape (or the id of the shape) to get.
     *
     * @public
     */
    getShape(shape) {
      const id = typeof shape === "string" ? shape : shape.id;
      if (!isShapeId(id)) return void 0;
      return this.store.get(id);
    }
    /**
     * Get the parent shape for a given shape. Returns undefined if the shape is the direct child of
     * the page.
     *
     * @example
     * ```ts
     * editor.getShapeParent(myShape)
     * ```
     *
     * @public
     */
    getShapeParent(shape) {
      const id = typeof shape === "string" ? shape : shape?.id;
      if (!id) return void 0;
      const freshShape = this.getShape(id);
      if (freshShape === void 0 || !isShapeId(freshShape.parentId)) return void 0;
      return this.store.get(freshShape.parentId);
    }
    /**
     * If siblingShape and targetShape are siblings, this returns targetShape. If targetShape has an
     * ancestor who is a sibling of siblingShape, this returns that ancestor. Otherwise, this returns
     * undefined.
     *
     * @internal
     */
    getShapeNearestSibling(siblingShape, targetShape) {
      if (!targetShape) {
        return void 0;
      }
      if (targetShape.parentId === siblingShape.parentId) {
        return targetShape;
      }
      const ancestor = this.findShapeAncestor(
        targetShape,
        (ancestor2) => ancestor2.parentId === siblingShape.parentId
      );
      return ancestor;
    }
    /**
     * Get whether the given shape is the descendant of the given page.
     *
     * @example
     * ```ts
     * editor.isShapeInPage(myShape)
     * editor.isShapeInPage(myShape, 'page1')
     * ```
     *
     * @param shape - The shape to check.
     * @param pageId - The id of the page to check against. Defaults to the current page.
     *
     * @public
     */
    isShapeInPage(shape, pageId = this.getCurrentPageId()) {
      const id = typeof shape === "string" ? shape : shape.id;
      const shapeToCheck = this.getShape(id);
      if (!shapeToCheck) return false;
      let shapeIsInPage = false;
      if (shapeToCheck.parentId === pageId) {
        shapeIsInPage = true;
      } else {
        let parent = this.getShape(shapeToCheck.parentId);
        isInPageSearch: while (parent) {
          if (parent.parentId === pageId) {
            shapeIsInPage = true;
            break isInPageSearch;
          }
          parent = this.getShape(parent.parentId);
        }
      }
      return shapeIsInPage;
    }
    /**
     * Get the id of the containing page for a given shape.
     *
     * @param shape - The shape to get the page id for.
     *
     * @returns The id of the page that contains the shape, or undefined if the shape is undefined.
     *
     * @public
     */
    getAncestorPageId(shape) {
      const id = typeof shape === "string" ? shape : shape?.id;
      const _shape = id && this.getShape(id);
      if (!_shape) return void 0;
      if (isPageId(_shape.parentId)) {
        return _shape.parentId;
      } else {
        return this.getAncestorPageId(this.getShape(_shape.parentId));
      }
    }
    /**
     * Reparent shapes to a new parent. This operation preserves the shape's current page positions /
     * rotations.
     *
     * @example
     * ```ts
     * editor.reparentShapes([box1, box2], 'frame1')
     * editor.reparentShapes([box1.id, box2.id], 'frame1')
     * editor.reparentShapes([box1.id, box2.id], 'frame1', 4)
     * ```
     *
     * @param shapes - The shapes (or shape ids) of the shapes to reparent.
     * @param parentId - The id of the new parent shape.
     * @param insertIndex - The index to insert the children.
     *
     * @public
     */
    reparentShapes(shapes, parentId, insertIndex) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (ids.length === 0) return this;
      const changes = [];
      const parentTransform = isPageId(parentId) ? Mat.Identity() : this.getShapePageTransform(parentId);
      const parentPageRotation = parentTransform.rotation();
      let indices = [];
      const sibs = compact(this.getSortedChildIdsForParent(parentId).map((id) => this.getShape(id)));
      if (insertIndex) {
        const sibWithInsertIndex = sibs.find((s) => s.index === insertIndex);
        if (sibWithInsertIndex) {
          const sibAbove = sibs[sibs.indexOf(sibWithInsertIndex) + 1];
          if (sibAbove) {
            indices = getIndicesBetween(insertIndex, sibAbove.index, ids.length);
          } else {
            indices = getIndicesAbove(insertIndex, ids.length);
          }
        } else {
          const sibAbove = sibs.sort(sortByIndex).find((s) => s.index > insertIndex);
          if (sibAbove) {
            indices = getIndicesBetween(insertIndex, sibAbove.index, ids.length);
          } else {
            indices = getIndicesAbove(insertIndex, ids.length);
          }
        }
      } else {
        const sib = sibs.length && sibs[sibs.length - 1];
        indices = sib ? getIndicesAbove(sib.index, ids.length) : getIndices(ids.length);
      }
      const invertedParentTransform = parentTransform.clone().invert();
      const shapesToReparent = compact(ids.map((id) => this.getShape(id)));
      this.run(
        () => {
          for (let i = 0; i < shapesToReparent.length; i++) {
            const shape = shapesToReparent[i];
            const pageTransform = this.getShapePageTransform(shape);
            if (!pageTransform) continue;
            const pagePoint = pageTransform.point();
            if (!pagePoint) continue;
            const newPoint = invertedParentTransform.applyToPoint(pagePoint);
            const newRotation = pageTransform.rotation() - parentPageRotation;
            changes.push({
              id: shape.id,
              type: shape.type,
              parentId,
              x: newPoint.x,
              y: newPoint.y,
              rotation: newRotation,
              index: indices[i]
            });
          }
          this.updateShapes(changes);
        },
        { ignoreShapeLock: true }
      );
      return this;
    }
    /**
     * Get the index above the highest child of a given parent.
     *
     * @param parent - The parent (or the id) of the parent.
     *
     * @returns The index.
     *
     * @public
     */
    getHighestIndexForParent(parent) {
      const parentId = typeof parent === "string" ? parent : parent.id;
      const children = this._parentIdsToChildIds.get()[parentId];
      if (!children || children.length === 0) {
        return "a1";
      }
      const shape = this.getShape(children[children.length - 1]);
      return getIndexAbove(shape.index);
    }
    /**
     * Get an array of all the children of a shape.
     *
     * @example
     * ```ts
     * editor.getSortedChildIdsForParent('frame1')
     * ```
     *
     * @param parent - The parent (or the id) of the parent shape.
     *
     * @public
     */
    getSortedChildIdsForParent(parent) {
      const parentId = typeof parent === "string" ? parent : parent.id;
      const ids = this._parentIdsToChildIds.get()[parentId];
      if (!ids) return EMPTY_ARRAY;
      return ids;
    }
    /**
     * Run a visitor function for all descendants of a shape.
     *
     * @example
     * ```ts
     * editor.visitDescendants('frame1', myCallback)
     * ```
     *
     * @param parent - The parent (or the id) of the parent shape.
     * @param visitor - The visitor function.
     *
     * @public
     */
    visitDescendants(parent, visitor) {
      const parentId = typeof parent === "string" ? parent : parent.id;
      const children = this.getSortedChildIdsForParent(parentId);
      for (const id of children) {
        if (visitor(id) === false) continue;
        this.visitDescendants(id, visitor);
      }
      return this;
    }
    /**
     * Get the shape ids of all descendants of the given shapes (including the shapes themselves). IDs are returned in z-index order.
     *
     * @param ids - The ids of the shapes to get descendants of.
     *
     * @returns The descendant ids.
     *
     * @public
     */
    getShapeAndDescendantIds(ids) {
      const shapeIds = /* @__PURE__ */ new Set();
      for (const shape of ids.map((id) => this.getShape(id)).sort(sortByIndex)) {
        shapeIds.add(shape.id);
        this.visitDescendants(shape, (descendantId) => {
          shapeIds.add(descendantId);
        });
      }
      return shapeIds;
    }
    /**
     * Get the shape that some shapes should be dropped on at a given point.
     *
     * @param point - The point to find the parent for.
     * @param droppingShapes - The shapes that are being dropped.
     *
     * @returns The shape to drop on.
     *
     * @public
     */
    getDroppingOverShape(point, droppingShapes = []) {
      const currentPageShapesSorted = this.getCurrentPageShapesSorted();
      for (let i = currentPageShapesSorted.length - 1; i >= 0; i--) {
        const shape = currentPageShapesSorted[i];
        if (
          // ignore hidden shapes
          this.isShapeHidden(shape) || // don't allow dropping on selected shapes
          this.getSelectedShapeIds().includes(shape.id) || // only allow shapes that can receive children
          !this.getShapeUtil(shape).canDropShapes(shape, droppingShapes) || // don't allow dropping a shape on itself or one of it's children
          droppingShapes.find((s) => s.id === shape.id || this.hasAncestor(shape, s.id))
        ) {
          continue;
        }
        const maskedPageBounds = this.getShapeMaskedPageBounds(shape.id);
        if (maskedPageBounds && maskedPageBounds.containsPoint(point) && this.getShapeGeometry(shape).hitTestPoint(this.getPointInShapeSpace(shape, point), 0, true)) {
          return shape;
        }
      }
    }
    /**
     * Get the shape that should be selected when you click on a given shape, assuming there is
     * nothing already selected. It will not return anything higher than or including the current
     * focus layer.
     *
     * @param shape - The shape to get the outermost selectable shape for.
     * @param filter - A function to filter the selectable shapes.
     *
     * @returns The outermost selectable shape.
     *
     * @public
     */
    getOutermostSelectableShape(shape, filter2) {
      const id = typeof shape === "string" ? shape : shape.id;
      const freshShape = this.getShape(id);
      let match = freshShape;
      let node = freshShape;
      const focusedGroup = this.getFocusedGroup();
      while (node) {
        if (this.isShapeOfType(node, "group") && focusedGroup?.id !== node.id && !this.hasAncestor(focusedGroup, node.id) && (filter2?.(node) ?? true)) {
          match = node;
        } else if (focusedGroup?.id === node.id) {
          break;
        }
        node = this.getShapeParent(node);
      }
      return match;
    }
    _getBindingsIndexCache() {
      const index2 = bindingsIndex(this);
      return this.store.createComputedCache("bindingsIndex", (shape) => {
        return index2.get().get(shape.id);
      });
    }
    /**
     * Get a binding from the store by its ID if it exists.
     */
    getBinding(id) {
      return this.store.get(id);
    }
    /**
     * Get all bindings of a certain type _from_ a particular shape. These are the bindings whose
     * `fromId` matched the shape's ID.
     */
    getBindingsFromShape(shape, type) {
      const id = typeof shape === "string" ? shape : shape.id;
      return this.getBindingsInvolvingShape(id).filter(
        (b) => b.fromId === id && b.type === type
      );
    }
    /**
     * Get all bindings of a certain type _to_ a particular shape. These are the bindings whose
     * `toId` matches the shape's ID.
     */
    getBindingsToShape(shape, type) {
      const id = typeof shape === "string" ? shape : shape.id;
      return this.getBindingsInvolvingShape(id).filter(
        (b) => b.toId === id && b.type === type
      );
    }
    /**
     * Get all bindings involving a particular shape. This includes bindings where the shape is the
     * `fromId` or `toId`. If a type is provided, only bindings of that type are returned.
     */
    getBindingsInvolvingShape(shape, type) {
      const id = typeof shape === "string" ? shape : shape.id;
      const result = this._getBindingsIndexCache().get(id) ?? EMPTY_ARRAY;
      if (!type) return result;
      return result.filter((b) => b.type === type);
    }
    /**
     * Create bindings from a list of partial bindings. You can omit the ID and most props of a
     * binding, but the `type`, `toId`, and `fromId` must all be provided.
     */
    createBindings(partials) {
      const bindings = [];
      for (const partial of partials) {
        const fromShape = this.getShape(partial.fromId);
        const toShape = this.getShape(partial.toId);
        if (!fromShape || !toShape) continue;
        if (!this.canBindShapes({ fromShape, toShape, binding: partial })) continue;
        const util = this.getBindingUtil(partial.type);
        const defaultProps = util.getDefaultProps();
        const binding = this.store.schema.types.binding.create({
          ...partial,
          id: partial.id ?? createBindingId(),
          props: {
            ...defaultProps,
            ...partial.props
          }
        });
        bindings.push(binding);
      }
      this.store.put(bindings);
      return this;
    }
    /**
     * Create a single binding from a partial. You can omit the ID and most props of a binding, but
     * the `type`, `toId`, and `fromId` must all be provided.
     */
    createBinding(partial) {
      return this.createBindings([partial]);
    }
    /**
     * Update bindings from a list of partial bindings. Each partial must include an ID, which will
     * be used to match the binding to it's existing record. If there is no existing record, that
     * binding is skipped. The changes from the partial are merged into the existing record.
     */
    updateBindings(partials) {
      const updated = [];
      for (const partial of partials) {
        if (!partial) continue;
        const current = this.getBinding(partial.id);
        if (!current) continue;
        const updatedBinding = applyPartialToRecordWithProps(current, partial);
        if (updatedBinding === current) continue;
        const fromShape = this.getShape(updatedBinding.fromId);
        const toShape = this.getShape(updatedBinding.toId);
        if (!fromShape || !toShape) continue;
        if (!this.canBindShapes({ fromShape, toShape, binding: updatedBinding })) continue;
        updated.push(updatedBinding);
      }
      this.store.put(updated);
      return this;
    }
    /**
     * Update a binding from a partial binding. Each partial must include an ID, which will be used
     * to match the binding to it's existing record. If there is no existing record, that binding is
     * skipped. The changes from the partial are merged into the existing record.
     */
    updateBinding(partial) {
      return this.updateBindings([partial]);
    }
    /**
     * Delete several bindings by their IDs. If a binding ID doesn't exist, it's ignored.
     */
    deleteBindings(bindings, { isolateShapes = false } = {}) {
      const ids = bindings.map((binding) => typeof binding === "string" ? binding : binding.id);
      if (isolateShapes) {
        this.store.atomic(() => {
          for (const id of ids) {
            const binding = this.getBinding(id);
            if (!binding) continue;
            const util = this.getBindingUtil(binding);
            util.onBeforeIsolateFromShape?.({ binding, removedShape: this.getShape(binding.toId) });
            util.onBeforeIsolateToShape?.({ binding, removedShape: this.getShape(binding.fromId) });
            this.store.remove([id]);
          }
        });
      } else {
        this.store.remove(ids);
      }
      return this;
    }
    /**
     * Delete a binding by its ID. If the binding doesn't exist, it's ignored.
     */
    deleteBinding(binding, opts) {
      return this.deleteBindings([binding], opts);
    }
    canBindShapes({
      fromShape,
      toShape,
      binding
    }) {
      const fromShapeType = typeof fromShape === "string" ? fromShape : fromShape.type;
      const toShapeType = typeof toShape === "string" ? toShape : toShape.type;
      const bindingType = typeof binding === "string" ? binding : binding.type;
      const canBindOpts = { fromShapeType, toShapeType, bindingType };
      if (fromShapeType === toShapeType) {
        return this.getShapeUtil(fromShapeType).canBind(canBindOpts);
      }
      return this.getShapeUtil(fromShapeType).canBind(canBindOpts) && this.getShapeUtil(toShapeType).canBind(canBindOpts);
    }
    /* -------------------- Commands -------------------- */
    /**
     * Rotate shapes by a delta in radians.
     *
     * @example
     * ```ts
     * editor.rotateShapesBy(editor.getSelectedShapeIds(), Math.PI)
     * editor.rotateShapesBy(editor.getSelectedShapeIds(), Math.PI / 2)
     * ```
     *
     * @param shapes - The shapes (or shape ids) of the shapes to move.
     * @param delta - The delta in radians to apply to the selection rotation.
     * @param opts - The options for the rotation.
     */
    rotateShapesBy(shapes, delta, opts) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (ids.length <= 0) return this;
      const snapshot = getRotationSnapshot({ editor: this, ids });
      if (!snapshot) return this;
      applyRotationToSnapshotShapes({
        delta,
        snapshot,
        editor: this,
        stage: "one-off",
        centerOverride: opts?.center
      });
      return this;
    }
    getChangesToTranslateShape(initialShape, newShapeCoords) {
      let workingShape = initialShape;
      const util = this.getShapeUtil(initialShape);
      workingShape = applyPartialToRecordWithProps(
        workingShape,
        util.onTranslateStart?.(workingShape) ?? void 0
      );
      workingShape = applyPartialToRecordWithProps(workingShape, {
        id: initialShape.id,
        type: initialShape.type,
        x: newShapeCoords.x,
        y: newShapeCoords.y
      });
      workingShape = applyPartialToRecordWithProps(
        workingShape,
        util.onTranslate?.(initialShape, workingShape) ?? void 0
      );
      workingShape = applyPartialToRecordWithProps(
        workingShape,
        util.onTranslateEnd?.(initialShape, workingShape) ?? void 0
      );
      return workingShape;
    }
    /**
     * Move shapes by a delta.
     *
     * @example
     * ```ts
     * editor.nudgeShapes(['box1', 'box2'], { x: 8, y: 8 })
     * ```
     *
     * @param shapes - The shapes (or shape ids) to move.
     * @param offset - The offset to apply to the shapes.
     */
    nudgeShapes(shapes, offset4) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (ids.length <= 0) return this;
      const changes = [];
      for (const id of ids) {
        const shape = this.getShape(id);
        const localDelta = Vec.From(offset4);
        const parentTransform = this.getShapeParentTransform(shape);
        if (parentTransform) localDelta.rot(-parentTransform.rotation());
        changes.push(this.getChangesToTranslateShape(shape, localDelta.add(shape)));
      }
      this.updateShapes(changes);
      return this;
    }
    /**
     * Duplicate shapes.
     *
     * @example
     * ```ts
     * editor.duplicateShapes(['box1', 'box2'], { x: 8, y: 8 })
     * editor.duplicateShapes(editor.getSelectedShapes(), { x: 8, y: 8 })
     * ```
     *
     * @param shapes - The shapes (or shape ids) to duplicate.
     * @param offset - The offset (in pixels) to apply to the duplicated shapes.
     *
     * @public
     */
    duplicateShapes(shapes, offset4) {
      this.run(() => {
        const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
        if (ids.length <= 0) return this;
        const initialIds = new Set(ids);
        const shapeIdSet = this.getShapeAndDescendantIds(ids);
        const orderedShapeIds = [...shapeIdSet].reverse();
        const shapeIds = /* @__PURE__ */ new Map();
        for (const shapeId of shapeIdSet) {
          shapeIds.set(shapeId, createShapeId());
        }
        const { shapesToCreateWithOriginals, bindingsToCreate } = withIsolatedShapes(
          this,
          shapeIdSet,
          (bindingIdsToMaintain) => {
            const bindingsToCreate2 = [];
            for (const originalId of bindingIdsToMaintain) {
              const originalBinding = this.getBinding(originalId);
              if (!originalBinding) continue;
              const duplicatedId = createBindingId();
              bindingsToCreate2.push({
                ...originalBinding,
                id: duplicatedId,
                fromId: assertExists(shapeIds.get(originalBinding.fromId)),
                toId: assertExists(shapeIds.get(originalBinding.toId))
              });
            }
            const shapesToCreateWithOriginals2 = [];
            for (const originalId of orderedShapeIds) {
              const duplicatedId = assertExists(shapeIds.get(originalId));
              const originalShape = this.getShape(originalId);
              if (!originalShape) continue;
              let ox = 0;
              let oy = 0;
              if (offset4 && initialIds.has(originalId)) {
                const parentTransform = this.getShapeParentTransform(originalShape);
                const vec = new Vec(offset4.x, offset4.y).rot(-parentTransform.rotation());
                ox = vec.x;
                oy = vec.y;
              }
              shapesToCreateWithOriginals2.push({
                shape: {
                  ...originalShape,
                  id: duplicatedId,
                  x: originalShape.x + ox,
                  y: originalShape.y + oy,
                  // Use a dummy index for now, it will get updated outside of the `withIsolatedShapes`
                  index: "a1",
                  parentId: shapeIds.get(originalShape.parentId) ?? originalShape.parentId
                },
                originalShape
              });
            }
            return { shapesToCreateWithOriginals: shapesToCreateWithOriginals2, bindingsToCreate: bindingsToCreate2 };
          }
        );
        shapesToCreateWithOriginals.forEach(({ shape, originalShape }) => {
          const parentId = originalShape.parentId;
          const siblings = this.getSortedChildIdsForParent(parentId);
          const currentIndex = siblings.indexOf(originalShape.id);
          const siblingAboveId = siblings[currentIndex + 1];
          const siblingAbove = siblingAboveId ? this.getShape(siblingAboveId) : void 0;
          const index2 = getIndexBetween(originalShape.index, siblingAbove?.index);
          shape.index = index2;
        });
        const shapesToCreate = shapesToCreateWithOriginals.map(({ shape }) => shape);
        const maxShapesReached = shapesToCreate.length + this.getCurrentPageShapeIds().size > this.options.maxShapesPerPage;
        if (maxShapesReached) {
          alertMaxShapes(this);
          return;
        }
        this.createShapes(shapesToCreate);
        this.createBindings(bindingsToCreate);
        this.setSelectedShapes(compact(ids.map((id) => shapeIds.get(id))));
        if (offset4 !== void 0) {
          const selectionPageBounds = this.getSelectionPageBounds();
          const viewportPageBounds = this.getViewportPageBounds();
          if (selectionPageBounds && !viewportPageBounds.contains(selectionPageBounds)) {
            this.centerOnPoint(selectionPageBounds.center, {
              animation: { duration: this.options.animationMediumMs }
            });
          }
        }
      });
      return this;
    }
    /**
     * Move shapes to page.
     *
     * @example
     * ```ts
     * editor.moveShapesToPage(['box1', 'box2'], 'page1')
     * ```
     *
     * @param shapes - The shapes (or shape ids) of the shapes to move.
     * @param pageId - The id of the page where the shapes will be moved.
     *
     * @public
     */
    moveShapesToPage(shapes, pageId) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (ids.length === 0) return this;
      if (this.getIsReadonly()) return this;
      const currentPageId = this.getCurrentPageId();
      if (pageId === currentPageId) return this;
      if (!this.store.has(pageId)) return this;
      const content = this.getContentFromCurrentPage(ids);
      if (!content) return this;
      if (this.getPageShapeIds(pageId).size + content.shapes.length > this.options.maxShapesPerPage) {
        alertMaxShapes(this, pageId);
        return this;
      }
      const fromPageZ = this.getCamera().z;
      this.run(() => {
        this.deleteShapes(ids);
        this.setCurrentPage(pageId);
        this.setFocusedGroup(null);
        this.selectNone();
        this.putContentOntoCurrentPage(content, {
          select: true,
          preserveIds: true,
          preservePosition: true
        });
        this.setCamera({ ...this.getCamera(), z: fromPageZ });
        this.centerOnPoint(this.getSelectionRotatedPageBounds().center);
      });
      return this;
    }
    /**
     * Toggle the lock state of one or more shapes. If there is a mix of locked and unlocked shapes, all shapes will be locked.
     *
     * @param shapes - The shapes (or shape ids) to toggle.
     *
     * @public
     */
    toggleLock(shapes) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (this.getIsReadonly() || ids.length === 0) return this;
      let allLocked = true, allUnlocked = true;
      const shapesToToggle = [];
      for (const id of ids) {
        const shape = this.getShape(id);
        if (shape) {
          shapesToToggle.push(shape);
          if (shape.isLocked) {
            allUnlocked = false;
          } else {
            allLocked = false;
          }
        }
      }
      this.run(() => {
        if (allUnlocked) {
          this.updateShapes(
            shapesToToggle.map((shape) => ({ id: shape.id, type: shape.type, isLocked: true }))
          );
          this.setSelectedShapes([]);
        } else if (allLocked) {
          this.updateShapes(
            shapesToToggle.map((shape) => ({ id: shape.id, type: shape.type, isLocked: false }))
          );
        } else {
          this.updateShapes(
            shapesToToggle.map((shape) => ({ id: shape.id, type: shape.type, isLocked: true }))
          );
        }
      });
      return this;
    }
    /**
     * Send shapes to the back of the page's object list.
     *
     * @example
     * ```ts
     * editor.sendToBack(['id1', 'id2'])
     * editor.sendToBack(box1, box2)
     * ```
     *
     * @param shapes - The shapes (or shape ids) to move.
     *
     * @public
     */
    sendToBack(shapes) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      const changes = getReorderingShapesChanges(this, "toBack", ids, {
        considerAllShapes: true
      });
      if (changes) this.updateShapes(changes);
      return this;
    }
    /**
     * Send shapes backward in the page's object list.
     *
     * @example
     * ```ts
     * editor.sendBackward(['id1', 'id2'])
     * editor.sendBackward([box1, box2])
     * ```
     *
     * By default, the operation will only consider overlapping shapes.
     * To consider all shapes, pass `{ considerAllShapes: true }` in the options.
     *
     * @example
     * ```ts
     * editor.sendBackward(['id1', 'id2'], { considerAllShapes: true })
     * ```
     *
     * @param shapes - The shapes (or shape ids) to move.
     * @param opts - The options for the backward operation.
     *
     * @public
     */
    sendBackward(shapes, opts = {}) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      const changes = getReorderingShapesChanges(this, "backward", ids, opts);
      if (changes) this.updateShapes(changes);
      return this;
    }
    /**
     * Bring shapes forward in the page's object list.
     *
     * @example
     * ```ts
     * editor.bringForward(['id1', 'id2'])
     * editor.bringForward(box1,  box2)
     * ```
     *
     * By default, the operation will only consider overlapping shapes.
     * To consider all shapes, pass `{ considerAllShapes: true }` in the options.
     *
     * @example
     * ```ts
     * editor.bringForward(['id1', 'id2'], { considerAllShapes: true })
     * ```
     *
     * @param shapes - The shapes (or shape ids) to move.
     * @param opts - The options for the forward operation.
     *
     * @public
     */
    bringForward(shapes, opts = {}) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      const changes = getReorderingShapesChanges(this, "forward", ids, opts);
      if (changes) this.updateShapes(changes);
      return this;
    }
    /**
     * Bring shapes to the front of the page's object list.
     *
     * @example
     * ```ts
     * editor.bringToFront(['id1', 'id2'])
     * editor.bringToFront([box1, box2])
     * ```
     *
     * @param shapes - The shapes (or shape ids) to move.
     *
     * @public
     */
    bringToFront(shapes) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      const changes = getReorderingShapesChanges(this, "toFront", ids);
      if (changes) this.updateShapes(changes);
      return this;
    }
    /**
     * Flip shape positions.
     *
     * @example
     * ```ts
     * editor.flipShapes([box1, box2], 'horizontal', 32)
     * editor.flipShapes(editor.getSelectedShapeIds(), 'horizontal', 32)
     * ```
     *
     * @param shapes - The ids of the shapes to flip.
     * @param operation - Whether to flip horizontally or vertically.
     *
     * @public
     */
    flipShapes(shapes, operation) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (this.getIsReadonly()) return this;
      let shapesToFlip = compact(ids.map((id) => this.getShape(id)));
      if (!shapesToFlip.length) return this;
      shapesToFlip = compact(
        shapesToFlip.map((shape) => {
          if (this.isShapeOfType(shape, "group")) {
            return this.getSortedChildIdsForParent(shape.id).map((id) => this.getShape(id));
          }
          return shape;
        }).flat()
      );
      const scaleOriginPage = Box.Common(
        compact(shapesToFlip.map((id) => this.getShapePageBounds(id)))
      ).center;
      this.run(() => {
        for (const shape of shapesToFlip) {
          const bounds = this.getShapeGeometry(shape).bounds;
          const initialPageTransform = this.getShapePageTransform(shape.id);
          if (!initialPageTransform) continue;
          this.resizeShape(
            shape.id,
            { x: operation === "horizontal" ? -1 : 1, y: operation === "vertical" ? -1 : 1 },
            {
              initialBounds: bounds,
              initialPageTransform,
              initialShape: shape,
              mode: "scale_shape",
              isAspectRatioLocked: this.getShapeUtil(shape).isAspectRatioLocked(shape),
              scaleOrigin: scaleOriginPage,
              scaleAxisRotation: 0
            }
          );
        }
      });
      return this;
    }
    /**
     * Stack shape.
     *
     * @example
     * ```ts
     * editor.stackShapes([box1, box2], 'horizontal', 32)
     * editor.stackShapes(editor.getSelectedShapeIds(), 'horizontal', 32)
     * ```
     *
     * @param shapes - The shapes (or shape ids) to stack.
     * @param operation - Whether to stack horizontally or vertically.
     * @param gap - The gap to leave between shapes.
     *
     * @public
     */
    stackShapes(shapes, operation, gap) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (this.getIsReadonly()) return this;
      const shapesToStack = ids.map((id) => this.getShape(id)).filter((shape) => {
        if (!shape) return false;
        return this.getShapeUtil(shape).canBeLaidOut(shape);
      });
      const len = shapesToStack.length;
      if (gap === 0 && len < 3 || len < 2) return this;
      const pageBounds = Object.fromEntries(
        shapesToStack.map((shape) => [shape.id, this.getShapePageBounds(shape)])
      );
      let val;
      let min3;
      let max2;
      let dim;
      if (operation === "horizontal") {
        val = "x";
        min3 = "minX";
        max2 = "maxX";
        dim = "width";
      } else {
        val = "y";
        min3 = "minY";
        max2 = "maxY";
        dim = "height";
      }
      let shapeGap;
      if (gap === 0) {
        const gaps = [];
        shapesToStack.sort((a, b) => pageBounds[a.id][min3] - pageBounds[b.id][min3]);
        for (let i = 0; i < len - 1; i++) {
          const shape = shapesToStack[i];
          const nextShape = shapesToStack[i + 1];
          const bounds = pageBounds[shape.id];
          const nextBounds = pageBounds[nextShape.id];
          const gap2 = nextBounds[min3] - bounds[max2];
          const current = gaps.find((g) => g.gap === gap2);
          if (current) {
            current.count++;
          } else {
            gaps.push({ gap: gap2, count: 1 });
          }
        }
        let maxCount = 0;
        gaps.forEach((g) => {
          if (g.count > maxCount) {
            maxCount = g.count;
            shapeGap = g.gap;
          }
        });
        if (maxCount === 1) {
          shapeGap = Math.max(0, gaps.reduce((a, c) => a + c.gap * c.count, 0) / (len - 1));
        }
      } else {
        shapeGap = gap;
      }
      const changes = [];
      let v = pageBounds[shapesToStack[0].id][max2];
      shapesToStack.forEach((shape, i) => {
        if (i === 0) return;
        const delta = { x: 0, y: 0 };
        delta[val] = v + shapeGap - pageBounds[shape.id][val];
        const parent = this.getShapeParent(shape);
        const localDelta = parent ? Vec.Rot(delta, -this.getShapePageTransform(parent).decompose().rotation) : delta;
        const translateStartChanges = this.getShapeUtil(shape).onTranslateStart?.(shape);
        changes.push(
          translateStartChanges ? {
            ...translateStartChanges,
            [val]: shape[val] + localDelta[val]
          } : {
            id: shape.id,
            type: shape.type,
            [val]: shape[val] + localDelta[val]
          }
        );
        v += pageBounds[shape.id][dim] + shapeGap;
      });
      this.updateShapes(changes);
      return this;
    }
    /**
     * Pack shapes into a grid centered on their current position. Based on potpack (https://github.com/mapbox/potpack).
     *
     * @example
     * ```ts
     * editor.packShapes([box1, box2], 32)
     * editor.packShapes(editor.getSelectedShapeIds(), 32)
     * ```
     *
     *
     * @param shapes - The shapes (or shape ids) to pack.
     * @param gap - The padding to apply to the packed shapes. Defaults to 16.
     */
    packShapes(shapes, gap) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (this.getIsReadonly()) return this;
      if (ids.length < 2) return this;
      const shapesToPack = ids.map((id) => this.getShape(id)).filter((shape2) => {
        if (!shape2) return false;
        return this.getShapeUtil(shape2).canBeLaidOut(shape2);
      });
      const shapePageBounds = {};
      const nextShapePageBounds = {};
      let shape, bounds, area = 0;
      for (let i = 0; i < shapesToPack.length; i++) {
        shape = shapesToPack[i];
        bounds = this.getShapePageBounds(shape);
        shapePageBounds[shape.id] = bounds;
        nextShapePageBounds[shape.id] = bounds.clone();
        area += bounds.width * bounds.height;
      }
      const commonBounds = Box.Common(compact(Object.values(shapePageBounds)));
      const maxWidth2 = commonBounds.width;
      shapesToPack.sort((a, b) => shapePageBounds[b.id].height - shapePageBounds[a.id].height);
      const startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth2);
      const spaces = [new Box(commonBounds.x, commonBounds.y, startWidth, Infinity)];
      let width = 0;
      let height = 0;
      let space;
      let last22;
      for (let i = 0; i < shapesToPack.length; i++) {
        shape = shapesToPack[i];
        bounds = nextShapePageBounds[shape.id];
        for (let i2 = spaces.length - 1; i2 >= 0; i2--) {
          space = spaces[i2];
          if (bounds.width > space.width || bounds.height > space.height) continue;
          bounds.x = space.x;
          bounds.y = space.y;
          height = Math.max(height, bounds.maxY);
          width = Math.max(width, bounds.maxX);
          if (bounds.width === space.width && bounds.height === space.height) {
            last22 = spaces.pop();
            if (i2 < spaces.length) spaces[i2] = last22;
          } else if (bounds.height === space.height) {
            space.x += bounds.width + gap;
            space.width -= bounds.width + gap;
          } else if (bounds.width === space.width) {
            space.y += bounds.height + gap;
            space.height -= bounds.height + gap;
          } else {
            spaces.push(
              new Box(
                space.x + (bounds.width + gap),
                space.y,
                space.width - (bounds.width + gap),
                bounds.height
              )
            );
            space.y += bounds.height + gap;
            space.height -= bounds.height + gap;
          }
          break;
        }
      }
      const commonAfter = Box.Common(Object.values(nextShapePageBounds));
      const centerDelta = Vec.Sub(commonBounds.center, commonAfter.center);
      let nextBounds;
      const changes = [];
      for (let i = 0; i < shapesToPack.length; i++) {
        shape = shapesToPack[i];
        bounds = shapePageBounds[shape.id];
        nextBounds = nextShapePageBounds[shape.id];
        const delta = Vec.Sub(nextBounds.point, bounds.point).add(centerDelta);
        const parentTransform = this.getShapeParentTransform(shape);
        if (parentTransform) delta.rot(-parentTransform.rotation());
        const change = {
          id: shape.id,
          type: shape.type,
          x: shape.x + delta.x,
          y: shape.y + delta.y
        };
        const translateStartChange = this.getShapeUtil(shape).onTranslateStart?.({
          ...shape,
          ...change
        });
        if (translateStartChange) {
          changes.push({ ...change, ...translateStartChange });
        } else {
          changes.push(change);
        }
      }
      if (changes.length) {
        this.updateShapes(changes);
      }
      return this;
    }
    /**
     * Align shape positions.
     *
     * @example
     * ```ts
     * editor.alignShapes([box1, box2], 'left')
     * editor.alignShapes(editor.getSelectedShapeIds(), 'left')
     * ```
     *
     * @param shapes - The shapes (or shape ids) to align.
     * @param operation - The align operation to apply.
     *
     * @public
     */
    alignShapes(shapes, operation) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (this.getIsReadonly()) return this;
      if (ids.length < 2) return this;
      const shapesToAlign = compact(ids.map((id) => this.getShape(id)));
      const shapePageBounds = Object.fromEntries(
        shapesToAlign.map((shape) => [shape.id, this.getShapePageBounds(shape)])
      );
      const commonBounds = Box.Common(compact(Object.values(shapePageBounds)));
      const changes = [];
      shapesToAlign.forEach((shape) => {
        const pageBounds = shapePageBounds[shape.id];
        if (!pageBounds) return;
        const delta = { x: 0, y: 0 };
        switch (operation) {
          case "top": {
            delta.y = commonBounds.minY - pageBounds.minY;
            break;
          }
          case "center-vertical": {
            delta.y = commonBounds.midY - pageBounds.minY - pageBounds.height / 2;
            break;
          }
          case "bottom": {
            delta.y = commonBounds.maxY - pageBounds.minY - pageBounds.height;
            break;
          }
          case "left": {
            delta.x = commonBounds.minX - pageBounds.minX;
            break;
          }
          case "center-horizontal": {
            delta.x = commonBounds.midX - pageBounds.minX - pageBounds.width / 2;
            break;
          }
          case "right": {
            delta.x = commonBounds.maxX - pageBounds.minX - pageBounds.width;
            break;
          }
        }
        const parent = this.getShapeParent(shape);
        const localDelta = parent ? Vec.Rot(delta, -this.getShapePageTransform(parent).decompose().rotation) : delta;
        changes.push(this.getChangesToTranslateShape(shape, Vec.Add(shape, localDelta)));
      });
      this.updateShapes(changes);
      return this;
    }
    /**
     * Distribute shape positions.
     *
     * @example
     * ```ts
     * editor.distributeShapes([box1, box2], 'horizontal')
     * editor.distributeShapes(editor.getSelectedShapeIds(), 'horizontal')
     * ```
     *
     * @param shapes - The shapes (or shape ids) to distribute.
     * @param operation - Whether to distribute shapes horizontally or vertically.
     *
     * @public
     */
    distributeShapes(shapes, operation) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (this.getIsReadonly()) return this;
      if (ids.length < 3) return this;
      const len = ids.length;
      const shapesToDistribute = compact(ids.map((id) => this.getShape(id)));
      const pageBounds = Object.fromEntries(
        shapesToDistribute.map((shape) => [shape.id, this.getShapePageBounds(shape)])
      );
      let val;
      let min3;
      let max2;
      let mid;
      let dim;
      if (operation === "horizontal") {
        val = "x";
        min3 = "minX";
        max2 = "maxX";
        mid = "midX";
        dim = "width";
      } else {
        val = "y";
        min3 = "minY";
        max2 = "maxY";
        mid = "midY";
        dim = "height";
      }
      const changes = [];
      const first = shapesToDistribute.sort(
        (a, b) => pageBounds[a.id][min3] - pageBounds[b.id][min3]
      )[0];
      const last22 = shapesToDistribute.sort((a, b) => pageBounds[b.id][max2] - pageBounds[a.id][max2])[0];
      const midFirst = pageBounds[first.id][mid];
      const step = (pageBounds[last22.id][mid] - midFirst) / (len - 1);
      const v = midFirst + step;
      shapesToDistribute.filter((shape) => shape !== first && shape !== last22).sort((a, b) => pageBounds[a.id][mid] - pageBounds[b.id][mid]).forEach((shape, i) => {
        const delta = { x: 0, y: 0 };
        delta[val] = v + step * i - pageBounds[shape.id][dim] / 2 - pageBounds[shape.id][val];
        const parent = this.getShapeParent(shape);
        const localDelta = parent ? Vec.Rot(delta, -this.getShapePageTransform(parent).rotation()) : delta;
        changes.push(this.getChangesToTranslateShape(shape, Vec.Add(shape, localDelta)));
      });
      this.updateShapes(changes);
      return this;
    }
    /**
     * Stretch shape sizes and positions to fill their common bounding box.
     *
     * @example
     * ```ts
     * editor.stretchShapes([box1, box2], 'horizontal')
     * editor.stretchShapes(editor.getSelectedShapeIds(), 'horizontal')
     * ```
     *
     * @param shapes - The shapes (or shape ids) to stretch.
     * @param operation - Whether to stretch shapes horizontally or vertically.
     *
     * @public
     */
    stretchShapes(shapes, operation) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (this.getIsReadonly()) return this;
      if (ids.length < 2) return this;
      const shapesToStretch = compact(ids.map((id) => this.getShape(id)));
      const shapeBounds = Object.fromEntries(ids.map((id) => [id, this.getShapeGeometry(id).bounds]));
      const shapePageBounds = Object.fromEntries(ids.map((id) => [id, this.getShapePageBounds(id)]));
      const commonBounds = Box.Common(compact(Object.values(shapePageBounds)));
      switch (operation) {
        case "vertical": {
          this.run(() => {
            for (const shape of shapesToStretch) {
              const pageRotation = this.getShapePageTransform(shape).rotation();
              if (pageRotation % PI2) continue;
              const bounds = shapeBounds[shape.id];
              const pageBounds = shapePageBounds[shape.id];
              const localOffset = new Vec(0, commonBounds.minY - pageBounds.minY);
              const parentTransform = this.getShapeParentTransform(shape);
              if (parentTransform) localOffset.rot(-parentTransform.rotation());
              const { x, y } = Vec.Add(localOffset, shape);
              this.updateShapes([{ id: shape.id, type: shape.type, x, y }]);
              const scale = new Vec(1, commonBounds.height / pageBounds.height);
              this.resizeShape(shape.id, scale, {
                initialBounds: bounds,
                scaleOrigin: new Vec(pageBounds.center.x, commonBounds.minY),
                isAspectRatioLocked: this.getShapeUtil(shape).isAspectRatioLocked(shape),
                scaleAxisRotation: 0
              });
            }
          });
          break;
        }
        case "horizontal": {
          this.run(() => {
            for (const shape of shapesToStretch) {
              const bounds = shapeBounds[shape.id];
              const pageBounds = shapePageBounds[shape.id];
              const pageRotation = this.getShapePageTransform(shape).rotation();
              if (pageRotation % PI2) continue;
              const localOffset = new Vec(commonBounds.minX - pageBounds.minX, 0);
              const parentTransform = this.getShapeParentTransform(shape);
              if (parentTransform) localOffset.rot(-parentTransform.rotation());
              const { x, y } = Vec.Add(localOffset, shape);
              this.updateShapes([{ id: shape.id, type: shape.type, x, y }]);
              const scale = new Vec(commonBounds.width / pageBounds.width, 1);
              this.resizeShape(shape.id, scale, {
                initialBounds: bounds,
                scaleOrigin: new Vec(commonBounds.minX, pageBounds.center.y),
                isAspectRatioLocked: this.getShapeUtil(shape).isAspectRatioLocked(shape),
                scaleAxisRotation: 0
              });
            }
          });
          break;
        }
      }
      return this;
    }
    /**
     * Resize a shape.
     *
     * @param shape - The shape (or the shape id of the shape) to resize.
     * @param scale - The scale factor to apply to the shape.
     * @param opts - Additional options.
     *
     * @public
     */
    resizeShape(shape, scale, opts = {}) {
      const id = typeof shape === "string" ? shape : shape.id;
      if (this.getIsReadonly()) return this;
      if (!Number.isFinite(scale.x)) scale = new Vec(1, scale.y);
      if (!Number.isFinite(scale.y)) scale = new Vec(scale.x, 1);
      const initialShape = opts.initialShape ?? this.getShape(id);
      if (!initialShape) return this;
      const scaleOrigin = opts.scaleOrigin ?? this.getShapePageBounds(id)?.center;
      if (!scaleOrigin) return this;
      const pageTransform = opts.initialPageTransform ? Mat.Cast(opts.initialPageTransform) : this.getShapePageTransform(id);
      if (!pageTransform) return this;
      const pageRotation = pageTransform.rotation();
      if (pageRotation == null) return this;
      const scaleAxisRotation = opts.scaleAxisRotation ?? pageRotation;
      const initialBounds = opts.initialBounds ?? this.getShapeGeometry(id).bounds;
      if (!initialBounds) return this;
      const isAspectRatioLocked = opts.isAspectRatioLocked ?? this.getShapeUtil(initialShape).isAspectRatioLocked(initialShape);
      if (!areAnglesCompatible(pageRotation, scaleAxisRotation)) {
        return this._resizeUnalignedShape(id, scale, {
          ...opts,
          initialBounds,
          scaleOrigin,
          scaleAxisRotation,
          initialPageTransform: pageTransform,
          isAspectRatioLocked,
          initialShape
        });
      }
      const util = this.getShapeUtil(initialShape);
      if (isAspectRatioLocked) {
        if (Math.abs(scale.x) > Math.abs(scale.y)) {
          scale = new Vec(scale.x, Math.sign(scale.y) * Math.abs(scale.x));
        } else {
          scale = new Vec(Math.sign(scale.x) * Math.abs(scale.y), scale.y);
        }
      }
      if (util.onResize && util.canResize(initialShape)) {
        const newPagePoint = this._scalePagePoint(
          Mat.applyToPoint(pageTransform, new Vec(0, 0)),
          scaleOrigin,
          scale,
          scaleAxisRotation
        );
        const newLocalPoint = this.getPointInParentSpace(initialShape.id, newPagePoint);
        const myScale = new Vec(scale.x, scale.y);
        const areWidthAndHeightAlignedWithCorrectAxis = approximately(
          (pageRotation - scaleAxisRotation) % Math.PI,
          0
        );
        myScale.x = areWidthAndHeightAlignedWithCorrectAxis ? scale.x : scale.y;
        myScale.y = areWidthAndHeightAlignedWithCorrectAxis ? scale.y : scale.x;
        const initialPagePoint = Mat.applyToPoint(pageTransform, new Vec());
        const { x, y } = this.getPointInParentSpace(initialShape.id, initialPagePoint);
        let workingShape = initialShape;
        if (!opts.skipStartAndEndCallbacks) {
          workingShape = applyPartialToRecordWithProps(
            initialShape,
            util.onResizeStart?.(initialShape) ?? void 0
          );
        }
        workingShape = applyPartialToRecordWithProps(workingShape, {
          id,
          type: initialShape.type,
          x: newLocalPoint.x,
          y: newLocalPoint.y,
          ...util.onResize(
            { ...initialShape, x, y },
            {
              newPoint: newLocalPoint,
              handle: opts.dragHandle ?? "bottom_right",
              // don't set isSingle to true for children
              mode: opts.mode ?? "scale_shape",
              scaleX: myScale.x,
              scaleY: myScale.y,
              initialBounds,
              initialShape
            }
          )
        });
        if (!opts.skipStartAndEndCallbacks) {
          workingShape = applyPartialToRecordWithProps(
            workingShape,
            util.onResizeEnd?.(initialShape, workingShape) ?? void 0
          );
        }
        this.updateShapes([workingShape]);
      } else {
        const initialPageCenter = Mat.applyToPoint(pageTransform, initialBounds.center);
        const newPageCenter = this._scalePagePoint(
          initialPageCenter,
          scaleOrigin,
          scale,
          scaleAxisRotation
        );
        const initialPageCenterInParentSpace = this.getPointInParentSpace(
          initialShape.id,
          initialPageCenter
        );
        const newPageCenterInParentSpace = this.getPointInParentSpace(initialShape.id, newPageCenter);
        const delta = Vec.Sub(newPageCenterInParentSpace, initialPageCenterInParentSpace);
        this.updateShapes([
          {
            id,
            type: initialShape.type,
            x: initialShape.x + delta.x,
            y: initialShape.y + delta.y
          }
        ]);
      }
      return this;
    }
    /** @internal */
    _scalePagePoint(point, scaleOrigin, scale, scaleAxisRotation) {
      const relativePoint = Vec.RotWith(point, scaleOrigin, -scaleAxisRotation).sub(scaleOrigin);
      const newRelativePagePoint = Vec.MulV(relativePoint, scale);
      const destination = Vec.Add(newRelativePagePoint, scaleOrigin).rotWith(
        scaleOrigin,
        scaleAxisRotation
      );
      return destination;
    }
    /** @internal */
    _resizeUnalignedShape(id, scale, options) {
      const { type } = options.initialShape;
      const shapeScale = new Vec(scale.x, scale.y);
      if (Math.abs(scale.x) > Math.abs(scale.y)) {
        shapeScale.x = Math.sign(scale.x) * Math.abs(scale.y);
      } else {
        shapeScale.y = Math.sign(scale.y) * Math.abs(scale.x);
      }
      this.resizeShape(id, shapeScale, {
        initialShape: options.initialShape,
        initialBounds: options.initialBounds,
        isAspectRatioLocked: options.isAspectRatioLocked
      });
      if (Math.sign(scale.x) * Math.sign(scale.y) < 0) {
        let { rotation } = Mat.Decompose(options.initialPageTransform);
        rotation -= 2 * rotation;
        this.updateShapes([{ id, type, rotation }]);
      }
      const preScaleShapePageCenter = Mat.applyToPoint(
        options.initialPageTransform,
        options.initialBounds.center
      );
      const postScaleShapePageCenter = this._scalePagePoint(
        preScaleShapePageCenter,
        options.scaleOrigin,
        scale,
        options.scaleAxisRotation
      );
      const pageBounds = this.getShapePageBounds(id);
      const pageTransform = this.getShapePageTransform(id);
      const currentPageCenter = pageBounds.center;
      const shapePageTransformOrigin = pageTransform.point();
      if (!currentPageCenter || !shapePageTransformOrigin) return this;
      const pageDelta = Vec.Sub(postScaleShapePageCenter, currentPageCenter);
      const postScaleShapePagePoint = Vec.Add(shapePageTransformOrigin, pageDelta);
      const { x, y } = this.getPointInParentSpace(id, postScaleShapePagePoint);
      this.updateShapes([{ id, type, x, y }]);
      return this;
    }
    /**
     * Get the initial meta value for a shape.
     *
     * @example
     * ```ts
     * editor.getInitialMetaForShape = (shape) => {
     *   if (shape.type === 'note') {
     *     return { createdBy: myCurrentUser.id }
     *   }
     * }
     * ```
     *
     * @param shape - The shape to get the initial meta for.
     *
     * @public
     */
    getInitialMetaForShape(_shape) {
      return {};
    }
    /**
     * Create a single shape.
     *
     * @example
     * ```ts
     * editor.createShape(myShape)
     * editor.createShape({ id: 'box1', type: 'text', props: { text: "ok" } })
     * ```
     *
     * @param shape - The shape (or shape partial) to create.
     *
     * @public
     */
    createShape(shape) {
      this.createShapes([shape]);
      return this;
    }
    /**
     * Create shapes.
     *
     * @example
     * ```ts
     * editor.createShapes([myShape])
     * editor.createShapes([{ id: 'box1', type: 'text', props: { text: "ok" } }])
     * ```
     *
     * @param shapes - The shapes (or shape partials) to create.
     *
     * @public
     */
    createShapes(shapes) {
      if (!Array.isArray(shapes)) {
        throw Error("Editor.createShapes: must provide an array of shapes or shape partials");
      }
      if (this.getIsReadonly()) return this;
      if (shapes.length <= 0) return this;
      const currentPageShapeIds = this.getCurrentPageShapeIds();
      const maxShapesReached = shapes.length + currentPageShapeIds.size > this.options.maxShapesPerPage;
      if (maxShapesReached) {
        alertMaxShapes(this);
        return this;
      }
      const focusedGroupId = this.getFocusedGroupId();
      this.run(() => {
        const currentPageShapesSorted = this.getCurrentPageShapesSorted();
        const partials = shapes.map((partial) => {
          if (!partial.id) {
            partial = { id: createShapeId(), ...partial };
          }
          if (!partial.parentId || !(this.store.has(partial.parentId) || shapes.some((p) => p.id === partial.parentId))) {
            let parentId = this.getFocusedGroupId();
            for (let i = currentPageShapesSorted.length - 1; i >= 0; i--) {
              const parent = currentPageShapesSorted[i];
              if (!this.isShapeHidden(parent) && this.getShapeUtil(parent).canReceiveNewChildrenOfType(parent, partial.type) && this.isPointInShape(
                parent,
                // If no parent is provided, then we can treat the
                // shape's provided x/y as being in the page's space.
                { x: partial.x ?? 0, y: partial.y ?? 0 },
                {
                  margin: 0,
                  hitInside: true
                }
              )) {
                parentId = parent.id;
                break;
              }
            }
            const prevParentId = partial.parentId;
            if (parentId === partial.id) {
              parentId = focusedGroupId;
            }
            if (parentId !== prevParentId) {
              partial = { ...partial };
              partial.parentId = parentId;
              if (isShapeId(parentId)) {
                const point = this.getPointInShapeSpace(this.getShape(parentId), {
                  x: partial.x ?? 0,
                  y: partial.y ?? 0
                });
                partial.x = point.x;
                partial.y = point.y;
                partial.rotation = -this.getShapePageTransform(parentId).rotation() + (partial.rotation ?? 0);
              }
            }
          }
          return partial;
        });
        const parentIndices = /* @__PURE__ */ new Map();
        const shapeRecordsToCreate = [];
        const { opacityForNextShape } = this.getInstanceState();
        for (const partial of partials) {
          const util = this.getShapeUtil(partial);
          let index2 = partial.index;
          if (!index2) {
            const parentId = partial.parentId ?? focusedGroupId;
            if (!parentIndices.has(parentId)) {
              parentIndices.set(parentId, this.getHighestIndexForParent(parentId));
            }
            index2 = parentIndices.get(parentId);
            parentIndices.set(parentId, getIndexAbove(index2));
          }
          const initialProps = util.getDefaultProps();
          for (const [style, propKey] of this.styleProps[partial.type]) {
            ;
            initialProps[propKey] = this.getStyleForNextShape(style);
          }
          let shapeRecordToCreate = this.store.schema.types.shape.create({
            ...partial,
            index: index2,
            opacity: partial.opacity ?? opacityForNextShape,
            parentId: partial.parentId ?? focusedGroupId,
            props: "props" in partial ? { ...initialProps, ...partial.props } : initialProps
          });
          if (shapeRecordToCreate.index === void 0) {
            throw Error("no index!");
          }
          const next = this.getShapeUtil(shapeRecordToCreate).onBeforeCreate?.(shapeRecordToCreate);
          if (next) {
            shapeRecordToCreate = next;
          }
          shapeRecordsToCreate.push(shapeRecordToCreate);
        }
        shapeRecordsToCreate.forEach((shape) => {
          shape.meta = {
            ...this.getInitialMetaForShape(shape),
            ...shape.meta
          };
        });
        this.store.put(shapeRecordsToCreate);
      });
      return this;
    }
    /**
     * Animate a shape.
     *
     * @example
     * ```ts
     * editor.animateShape({ id: 'box1', type: 'box', x: 100, y: 100 })
     * editor.animateShape({ id: 'box1', type: 'box', x: 100, y: 100 }, { animation: { duration: 100, ease: t => t*t } })
     * ```
     *
     * @param partial - The shape partial to update.
     * @param opts - The animation's options.
     *
     * @public
     */
    animateShape(partial, opts = { animation: DEFAULT_ANIMATION_OPTIONS }) {
      return this.animateShapes([partial], opts);
    }
    /**
     * Animate shapes.
     *
     * @example
     * ```ts
     * editor.animateShapes([{ id: 'box1', type: 'box', x: 100, y: 100 }])
     * editor.animateShapes([{ id: 'box1', type: 'box', x: 100, y: 100 }], { animation: { duration: 100, ease: t => t*t } })
     * ```
     *
     * @param partials - The shape partials to update.
     * @param opts - The animation's options.
     *
     * @public
     */
    animateShapes(partials, opts = { animation: DEFAULT_ANIMATION_OPTIONS }) {
      if (!opts.animation) return this;
      const { duration = 500, easing = EASINGS.linear } = opts.animation;
      const animationId = uniqueId();
      let remaining = duration;
      let t2;
      const animations = [];
      let partial, result;
      for (let i = 0, n = partials.length; i < n; i++) {
        partial = partials[i];
        if (!partial) continue;
        const shape = this.getShape(partial.id);
        if (!shape) continue;
        result = {
          start: structuredClone(shape),
          end: applyPartialToRecordWithProps(structuredClone(shape), partial)
        };
        animations.push(result);
        this.animatingShapes.set(shape.id, animationId);
      }
      const handleTick = (elapsed) => {
        remaining -= elapsed;
        if (remaining < 0) {
          const { animatingShapes: animatingShapes2 } = this;
          const partialsToUpdate = partials.filter(
            (p) => p && animatingShapes2.get(p.id) === animationId
          );
          if (partialsToUpdate.length) {
            this.updateShapes(partialsToUpdate);
          }
          this.off("tick", handleTick);
          return;
        }
        t2 = easing(1 - remaining / duration);
        const { animatingShapes } = this;
        const updates = [];
        let animationIdForShape;
        for (let i = 0, n = animations.length; i < n; i++) {
          const { start, end } = animations[i];
          animationIdForShape = animatingShapes.get(start.id);
          if (animationIdForShape !== animationId) continue;
          updates.push({
            ...end,
            x: start.x + (end.x - start.x) * t2,
            y: start.y + (end.y - start.y) * t2,
            opacity: start.opacity + (end.opacity - start.opacity) * t2,
            rotation: start.rotation + (end.rotation - start.rotation) * t2,
            props: this.getShapeUtil(end).getInterpolatedProps?.(start, end, t2) ?? end.props
          });
        }
        this._updateShapes(updates);
      };
      this.on("tick", handleTick);
      return this;
    }
    groupShapes(shapes, opts = {}) {
      const { groupId = createShapeId(), select = true } = opts;
      if (!Array.isArray(shapes)) {
        throw Error("Editor.groupShapes: must provide an array of shapes or shape ids");
      }
      if (this.getIsReadonly()) return this;
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (ids.length <= 1) return this;
      const shapesToGroup = compact(
        (this._shouldIgnoreShapeLock ? ids : this._getUnlockedShapeIds(ids)).map(
          (id) => this.getShape(id)
        )
      );
      const sortedShapeIds = shapesToGroup.sort(sortByIndex).map((s) => s.id);
      const pageBounds = Box.Common(compact(shapesToGroup.map((id) => this.getShapePageBounds(id))));
      const { x, y } = pageBounds.point;
      const parentId = this.findCommonAncestor(shapesToGroup) ?? this.getCurrentPageId();
      if (this.getCurrentToolId() !== "select") return this;
      if (!this.isIn("select.idle")) {
        this.cancel();
      }
      const shapesWithRootParent = shapesToGroup.filter((shape) => shape.parentId === parentId).sort(sortByIndex);
      const highestIndex = shapesWithRootParent[shapesWithRootParent.length - 1]?.index;
      this.run(() => {
        this.createShapes([
          {
            id: groupId,
            type: "group",
            parentId,
            index: highestIndex,
            x,
            y,
            opacity: 1,
            props: {}
          }
        ]);
        this.reparentShapes(sortedShapeIds, groupId);
        if (select) {
          this.select(groupId);
        }
      });
      return this;
    }
    ungroupShapes(shapes, opts = {}) {
      if (this.getIsReadonly()) return this;
      const { select = true } = opts;
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      const shapesToUngroup = compact(
        (this._shouldIgnoreShapeLock ? ids : this._getUnlockedShapeIds(ids)).map(
          (id) => this.getShape(id)
        )
      );
      if (shapesToUngroup.length === 0) return this;
      if (this.getCurrentToolId() !== "select") return this;
      if (!this.isIn("select.idle")) {
        this.cancel();
      }
      const idsToSelect = /* @__PURE__ */ new Set();
      const groups = [];
      shapesToUngroup.forEach((shape) => {
        if (this.isShapeOfType(shape, "group")) {
          groups.push(shape);
        } else {
          idsToSelect.add(shape.id);
        }
      });
      if (groups.length === 0) return this;
      this.run(() => {
        let group;
        for (let i = 0, n = groups.length; i < n; i++) {
          group = groups[i];
          const childIds = this.getSortedChildIdsForParent(group.id);
          for (let j = 0, n2 = childIds.length; j < n2; j++) {
            idsToSelect.add(childIds[j]);
          }
          this.reparentShapes(childIds, group.parentId, group.index);
        }
        this.deleteShapes(groups.map((group2) => group2.id));
        if (select) {
          this.select(...idsToSelect);
        }
      });
      return this;
    }
    /**
     * Update a shape using a partial of the shape.
     *
     * @example
     * ```ts
     * editor.updateShape({ id: 'box1', type: 'geo', props: { w: 100, h: 100 } })
     * ```
     *
     * @param partial - The shape partial to update.
     *
     * @public
     */
    updateShape(partial) {
      this.updateShapes([partial]);
      return this;
    }
    /**
     * Update shapes using partials of each shape.
     *
     * @example
     * ```ts
     * editor.updateShapes([{ id: 'box1', type: 'geo', props: { w: 100, h: 100 } }])
     * ```
     *
     * @param partials - The shape partials to update.
     *
     * @public
     */
    updateShapes(partials) {
      const compactedPartials = Array(partials.length);
      for (let i = 0, n = partials.length; i < n; i++) {
        const partial = partials[i];
        if (!partial) continue;
        const shape = this.getShape(partial.id);
        if (!shape) continue;
        if (!this._shouldIgnoreShapeLock) {
          if (shape.isLocked) {
            if (!(Object.hasOwn(partial, "isLocked") && !partial.isLocked)) {
              continue;
            }
          } else if (this.isShapeOrAncestorLocked(shape)) {
            continue;
          }
        }
        this.animatingShapes.delete(partial.id);
        compactedPartials.push(partial);
      }
      this._updateShapes(compactedPartials);
      return this;
    }
    /** @internal */
    _updateShapes(_partials) {
      if (this.getIsReadonly()) return;
      this.run(() => {
        const updates = [];
        let shape;
        let updated;
        for (let i = 0, n = _partials.length; i < n; i++) {
          const partial = _partials[i];
          if (!partial) continue;
          shape = this.getShape(partial.id);
          if (!shape) continue;
          updated = applyPartialToRecordWithProps(shape, partial);
          if (updated === shape) continue;
          updated = this.getShapeUtil(shape).onBeforeUpdate?.(shape, updated) ?? updated;
          updates.push(updated);
        }
        this.store.put(updates);
      });
    }
    /** @internal */
    _getUnlockedShapeIds(ids) {
      return ids.filter((id) => !this.getShape(id)?.isLocked);
    }
    deleteShapes(_ids) {
      if (this.getIsReadonly()) return this;
      if (!Array.isArray(_ids)) {
        throw Error("Editor.deleteShapes: must provide an array of shapes or shapeIds");
      }
      const shapeIds = typeof _ids[0] === "string" ? _ids : _ids.map((s) => s.id);
      const shapeIdsToDelete = this._shouldIgnoreShapeLock ? shapeIds : this._getUnlockedShapeIds(shapeIds);
      if (shapeIdsToDelete.length === 0) return this;
      const allShapeIdsToDelete = new Set(shapeIdsToDelete);
      for (const id of shapeIdsToDelete) {
        this.visitDescendants(id, (childId) => {
          allShapeIdsToDelete.add(childId);
        });
      }
      return this.run(() => this.store.remove([...allShapeIdsToDelete]));
    }
    deleteShape(_id) {
      this.deleteShapes([typeof _id === "string" ? _id : _id.id]);
      return this;
    }
    /* --------------------- Styles --------------------- */
    /**
     * Get all the current styles among the users selected shapes
     *
     * @internal
     */
    _extractSharedStyles(shape, sharedStyleMap) {
      if (this.isShapeOfType(shape, "group")) {
        const childIds = this._parentIdsToChildIds.get()[shape.id];
        if (!childIds) return;
        for (let i = 0, n = childIds.length; i < n; i++) {
          this._extractSharedStyles(this.getShape(childIds[i]), sharedStyleMap);
        }
      } else {
        for (const [style, propKey] of this.styleProps[shape.type]) {
          sharedStyleMap.applyValue(style, getOwnProperty(shape.props, propKey));
        }
      }
    }
    _getSelectionSharedStyles() {
      const selectedShapes = this.getSelectedShapes();
      const sharedStyles = new SharedStyleMap();
      for (const selectedShape of selectedShapes) {
        this._extractSharedStyles(selectedShape, sharedStyles);
      }
      return sharedStyles;
    }
    /**
     * Get the style for the next shape.
     *
     * @example
     * ```ts
     * const color = editor.getStyleForNextShape(DefaultColorStyle)
     * ```
     *
     * @param style - The style to get.
     *
     * @public */
    getStyleForNextShape(style) {
      const value = this.getInstanceState().stylesForNextShape[style.id];
      return value === void 0 ? style.defaultValue : value;
    }
    getShapeStyleIfExists(shape, style) {
      const styleKey = this.styleProps[shape.type].get(style);
      if (styleKey === void 0) return void 0;
      return getOwnProperty(shape.props, styleKey);
    }
    getSharedStyles() {
      if (this.isIn("select") && this.getSelectedShapeIds().length > 0) {
        return this._getSelectionSharedStyles();
      }
      const currentTool = this.root.getCurrent();
      const styles = new SharedStyleMap();
      if (!currentTool) return styles;
      if (currentTool.shapeType) {
        for (const style of this.styleProps[currentTool.shapeType].keys()) {
          styles.applyValue(style, this.getStyleForNextShape(style));
        }
      }
      return styles;
    }
    getSharedOpacity() {
      if (this.isIn("select") && this.getSelectedShapeIds().length > 0) {
        const shapesToCheck = [];
        const addShape = (shapeId) => {
          const shape = this.getShape(shapeId);
          if (!shape) return;
          if (this.isShapeOfType(shape, "group")) {
            for (const childId of this.getSortedChildIdsForParent(shape.id)) {
              addShape(childId);
            }
          } else {
            shapesToCheck.push(shape);
          }
        };
        for (const shapeId of this.getSelectedShapeIds()) {
          addShape(shapeId);
        }
        let opacity = null;
        for (const shape of shapesToCheck) {
          if (opacity === null) {
            opacity = shape.opacity;
          } else if (opacity !== shape.opacity) {
            return { type: "mixed" };
          }
        }
        if (opacity !== null) return { type: "shared", value: opacity };
      }
      return { type: "shared", value: this.getInstanceState().opacityForNextShape };
    }
    /**
     * Set the opacity for the next shapes. This will effect subsequently created shapes.
     *
     * @example
     * ```ts
     * editor.setOpacityForNextShapes(0.5)
     * ```
     *
     * @param opacity - The opacity to set. Must be a number between 0 and 1 inclusive.
     * @param historyOptions - The history options for the change.
     */
    setOpacityForNextShapes(opacity, historyOptions) {
      this.updateInstanceState({ opacityForNextShape: opacity }, historyOptions);
      return this;
    }
    /**
     * Set the current opacity. This will effect any selected shapes.
     *
     * @example
     * ```ts
     * editor.setOpacityForSelectedShapes(0.5)
     * ```
     *
     * @param opacity - The opacity to set. Must be a number between 0 and 1 inclusive.
     */
    setOpacityForSelectedShapes(opacity) {
      const selectedShapes = this.getSelectedShapes();
      if (selectedShapes.length > 0) {
        const shapesToUpdate = [];
        const addShapeById = (shape) => {
          if (this.isShapeOfType(shape, "group")) {
            const childIds = this.getSortedChildIdsForParent(shape);
            for (const childId of childIds) {
              addShapeById(this.getShape(childId));
            }
          } else {
            shapesToUpdate.push(shape);
          }
        };
        for (const id of selectedShapes) {
          addShapeById(id);
        }
        this.updateShapes(
          shapesToUpdate.map((shape) => {
            return {
              id: shape.id,
              type: shape.type,
              opacity
            };
          })
        );
      }
      return this;
    }
    /**
     * Set the value of a {@link @tldraw/tlschema#StyleProp} for the next shapes. This change will be applied to subsequently created shapes.
     *
     * @example
     * ```ts
     * editor.setStyleForNextShapes(DefaultColorStyle, 'red')
     * editor.setStyleForNextShapes(DefaultColorStyle, 'red', { ephemeral: true })
     * ```
     *
     * @param style - The style to set.
     * @param value - The value to set.
     * @param historyOptions - The history options for the change.
     *
     * @public
     */
    setStyleForNextShapes(style, value, historyOptions) {
      const stylesForNextShape = this.getInstanceState().stylesForNextShape;
      this.updateInstanceState(
        { stylesForNextShape: { ...stylesForNextShape, [style.id]: value } },
        historyOptions
      );
      return this;
    }
    /**
     * Set the value of a {@link @tldraw/tlschema#StyleProp}. This change will be applied to the currently selected shapes.
     *
     * @example
     * ```ts
     * editor.setStyleForSelectedShapes(DefaultColorStyle, 'red')
     * ```
     *
     * @param style - The style to set.
     * @param value - The value to set.
     *
     * @public
     */
    setStyleForSelectedShapes(style, value) {
      const selectedShapes = this.getSelectedShapes();
      if (selectedShapes.length > 0) {
        const updates = [];
        const addShapeById = (shape) => {
          if (this.isShapeOfType(shape, "group")) {
            const childIds = this.getSortedChildIdsForParent(shape.id);
            for (const childId of childIds) {
              addShapeById(this.getShape(childId));
            }
          } else {
            const util = this.getShapeUtil(shape);
            const stylePropKey = this.styleProps[shape.type].get(style);
            if (stylePropKey) {
              const shapePartial = {
                id: shape.id,
                type: shape.type,
                props: { [stylePropKey]: value }
              };
              updates.push({
                util,
                originalShape: shape,
                updatePartial: shapePartial
              });
            }
          }
        };
        for (const shape of selectedShapes) {
          addShapeById(shape);
        }
        this.updateShapes(updates.map(({ updatePartial }) => updatePartial));
      }
      return this;
    }
    /**
     * Register an external asset handler. This handler will be called when the editor needs to
     * create an asset for some external content, like an image/video file or a bookmark URL. For
     * example, the 'file' type handler will be called when a user drops an image onto the canvas.
     *
     * The handler should extract any relevant metadata for the asset, upload it to blob storage
     * using {@link Editor.uploadAsset} if needed, and return the asset with the metadata & uploaded
     * URL.
     *
     * @example
     * ```ts
     * editor.registerExternalAssetHandler('file', myHandler)
     * ```
     *
     * @param type - The type of external content.
     * @param handler - The handler to use for this content type.
     *
     * @public
     */
    registerExternalAssetHandler(type, handler) {
      this.externalAssetContentHandlers[type] = handler;
      return this;
    }
    /**
     * Register a temporary preview of an asset. This is useful for showing a ghost image of
     * something that is being uploaded. Retrieve the placeholder with
     * {@link Editor.getTemporaryAssetPreview}. Placeholders last for 3 minutes by default, but this
     * can be configured using
     *
     * @example
     * ```ts
     * editor.createTemporaryAssetPreview(assetId, file)
     * ```
     *
     * @param assetId - The asset's id.
     * @param file - The raw file.
     *
     * @public
     */
    createTemporaryAssetPreview(assetId, file) {
      if (this.temporaryAssetPreview.has(assetId)) {
        return this.temporaryAssetPreview.get(assetId);
      }
      const objectUrl = URL.createObjectURL(file);
      this.temporaryAssetPreview.set(assetId, objectUrl);
      setTimeout(() => {
        this.temporaryAssetPreview.delete(assetId);
        URL.revokeObjectURL(objectUrl);
      }, this.options.temporaryAssetPreviewLifetimeMs);
      return objectUrl;
    }
    /**
     * Get temporary preview of an asset. This is useful for showing a ghost
     * image of something that is being uploaded.
     *
     * @example
     * ```ts
     * editor.getTemporaryAssetPreview('someId')
     * ```
     *
     * @param assetId - The asset's id.
     *
     * @public
     */
    getTemporaryAssetPreview(assetId) {
      return this.temporaryAssetPreview.get(assetId);
    }
    /**
     * Get an asset for an external asset content type.
     *
     * @example
     * ```ts
     * const asset = await editor.getAssetForExternalContent({ type: 'file', file: myFile })
     * const asset = await editor.getAssetForExternalContent({ type: 'url', url: myUrl })
     * ```
     *
     * @param info - Info about the external content.
     * @returns The asset.
     */
    async getAssetForExternalContent(info) {
      return await this.externalAssetContentHandlers[info.type]?.(info);
    }
    hasExternalAssetHandler(type) {
      return !!this.externalAssetContentHandlers[type];
    }
    /**
     * Register an external content handler. This handler will be called when the editor receives
     * external content of the provided type. For example, the 'image' type handler will be called
     * when a user drops an image onto the canvas.
     *
     * @example
     * ```ts
     * editor.registerExternalContentHandler('text', myHandler)
     * ```
     * @example
     * ```ts
     * editor.registerExternalContentHandler<'embed', MyEmbedType>('embed', myHandler)
     * ```
     *
     * @param type - The type of external content.
     * @param handler - The handler to use for this content type.
     *
     * @public
     */
    registerExternalContentHandler(type, handler) {
      this.externalContentHandlers[type] = handler;
      return this;
    }
    /**
     * Handle external content, such as files, urls, embeds, or plain text which has been put into the app, for example by pasting external text or dropping external images onto canvas.
     *
     * @param info - Info about the external content.
     */
    async putExternalContent(info) {
      return this.externalContentHandlers[info.type]?.(info);
    }
    /**
     * Get content that can be exported for the given shape ids.
     *
     * @param shapes - The shapes (or shape ids) to get content for.
     *
     * @returns The exported content.
     *
     * @public
     */
    getContentFromCurrentPage(shapes) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (!ids) return;
      if (ids.length === 0) return;
      const shapeIds = this.getShapeAndDescendantIds(ids);
      return withIsolatedShapes(this, shapeIds, (bindingIdsToKeep) => {
        const bindings = [];
        for (const id of bindingIdsToKeep) {
          const binding = this.getBinding(id);
          if (!binding) continue;
          bindings.push(binding);
        }
        const rootShapeIds = [];
        const shapes2 = [];
        for (const shapeId of shapeIds) {
          const shape = this.getShape(shapeId);
          if (!shape) continue;
          const isRootShape = !shapeIds.has(shape.parentId);
          if (isRootShape) {
            const pageTransform = this.getShapePageTransform(shape.id);
            const pagePoint = pageTransform.point();
            shapes2.push({
              ...shape,
              x: pagePoint.x,
              y: pagePoint.y,
              rotation: pageTransform.rotation(),
              parentId: this.getCurrentPageId()
            });
            rootShapeIds.push(shape.id);
          } else {
            shapes2.push(shape);
          }
        }
        const assets = [];
        const seenAssetIds = /* @__PURE__ */ new Set();
        for (const shape of shapes2) {
          if (!("assetId" in shape.props)) continue;
          const assetId = shape.props.assetId;
          if (!assetId || seenAssetIds.has(assetId)) continue;
          seenAssetIds.add(assetId);
          const asset = this.getAsset(assetId);
          if (!asset) continue;
          assets.push(asset);
        }
        return {
          schema: this.store.schema.serialize(),
          shapes: shapes2,
          rootShapeIds,
          bindings,
          assets
        };
      });
    }
    async resolveAssetsInContent(content) {
      if (!content) return void 0;
      const assets = [];
      await Promise.allSettled(
        content.assets.map(async (asset) => {
          if ((asset.type === "image" || asset.type === "video") && !asset.props.src?.startsWith("data:image") && !asset.props.src?.startsWith("data:video") && !asset.props.src?.startsWith("http")) {
            const assetWithDataUrl = structuredClone(asset);
            const objectUrl = await this.store.props.assets.resolve(asset, {
              screenScale: 1,
              steppedScreenScale: 1,
              dpr: 1,
              networkEffectiveType: null,
              shouldResolveToOriginal: true
            });
            assetWithDataUrl.props.src = await FileHelpers.blobToDataUrl(
              await fetch(objectUrl).then((r) => r.blob())
            );
            assets.push(assetWithDataUrl);
          } else {
            assets.push(asset);
          }
        })
      );
      content.assets = assets;
      return content;
    }
    /**
     * Place content into the editor.
     *
     * @param content - The content.
     * @param opts - Options for placing the content.
     *
     * @public
     */
    putContentOntoCurrentPage(content, opts = {}) {
      if (this.getIsReadonly()) return this;
      if (!content.schema) {
        throw Error("Could not put content:\ncontent is missing a schema.");
      }
      const { select = false, preserveIds = false, preservePosition = false } = opts;
      let { point = void 0 } = opts;
      const currentPageId = this.getCurrentPageId();
      const { rootShapeIds } = content;
      const assets = [];
      const shapes = [];
      const bindings = [];
      const store = {
        store: {
          ...Object.fromEntries(content.assets.map((asset) => [asset.id, asset])),
          ...Object.fromEntries(content.shapes.map((shape) => [shape.id, shape])),
          ...Object.fromEntries(
            content.bindings?.map((bindings2) => [bindings2.id, bindings2]) ?? []
          )
        },
        schema: content.schema
      };
      const result = this.store.schema.migrateStoreSnapshot(store);
      if (result.type === "error") {
        throw Error("Could not put content: could not migrate content");
      }
      for (const record of Object.values(result.value)) {
        switch (record.typeName) {
          case "asset": {
            assets.push(record);
            break;
          }
          case "shape": {
            shapes.push(record);
            break;
          }
          case "binding": {
            bindings.push(record);
            break;
          }
        }
      }
      const shapeIdMap = new Map(
        preserveIds ? shapes.map((shape) => [shape.id, shape.id]) : shapes.map((shape) => [shape.id, createShapeId()])
      );
      const bindingIdMap = new Map(
        preserveIds ? bindings.map((binding) => [binding.id, binding.id]) : bindings.map((binding) => [binding.id, createBindingId()])
      );
      let pasteParentId = this.getCurrentPageId();
      let lowestDepth = Infinity;
      let lowestAncestors = [];
      for (const shape of this.getSelectedShapes()) {
        if (lowestDepth === 0) break;
        const isFrame = this.isShapeOfType(shape, "frame");
        const ancestors = this.getShapeAncestors(shape);
        if (isFrame) ancestors.push(shape);
        const depth = isFrame ? ancestors.length + 1 : ancestors.length;
        if (depth < lowestDepth) {
          lowestDepth = depth;
          lowestAncestors = ancestors;
          pasteParentId = isFrame ? shape.id : shape.parentId;
        } else if (depth === lowestDepth) {
          if (lowestAncestors.length !== ancestors.length) {
            throw Error(`Ancestors: ${lowestAncestors.length} !== ${ancestors.length}`);
          }
          if (lowestAncestors.length === 0) {
            pasteParentId = currentPageId;
            break;
          } else {
            pasteParentId = currentPageId;
            for (let i = 0; i < lowestAncestors.length; i++) {
              if (ancestors[i] !== lowestAncestors[i]) break;
              pasteParentId = ancestors[i].id;
            }
          }
        }
      }
      let isDuplicating = false;
      if (!isPageId(pasteParentId)) {
        const parent = this.getShape(pasteParentId);
        if (parent) {
          if (!this.getViewportPageBounds().includes(this.getShapePageBounds(parent))) {
            pasteParentId = currentPageId;
          } else {
            if (rootShapeIds.length === 1) {
              const rootShape = shapes.find((s) => s.id === rootShapeIds[0]);
              if (this.isShapeOfType(parent, "frame") && this.isShapeOfType(rootShape, "frame") && rootShape.props.w === parent?.props.w && rootShape.props.h === parent?.props.h) {
                isDuplicating = true;
              }
            }
          }
        } else {
          pasteParentId = currentPageId;
        }
      }
      if (!isDuplicating) {
        isDuplicating = shapeIdMap.has(pasteParentId);
      }
      if (isDuplicating) {
        pasteParentId = this.getShape(pasteParentId).parentId;
      }
      let index2 = this.getHighestIndexForParent(pasteParentId);
      const rootShapes = [];
      const newShapes = shapes.map((oldShape) => {
        const newId = shapeIdMap.get(oldShape.id);
        const newShape = { ...oldShape, id: newId };
        if (rootShapeIds.includes(oldShape.id)) {
          newShape.parentId = currentPageId;
          rootShapes.push(newShape);
        }
        if (shapeIdMap.has(newShape.parentId)) {
          newShape.parentId = shapeIdMap.get(oldShape.parentId);
        } else {
          rootShapeIds.push(newShape.id);
          newShape.index = index2;
          index2 = getIndexAbove(index2);
        }
        return newShape;
      });
      if (newShapes.length + this.getCurrentPageShapeIds().size > this.options.maxShapesPerPage) {
        alertMaxShapes(this);
        return this;
      }
      const newBindings = bindings.map(
        (oldBinding) => ({
          ...oldBinding,
          id: assertExists(bindingIdMap.get(oldBinding.id)),
          fromId: assertExists(shapeIdMap.get(oldBinding.fromId)),
          toId: assertExists(shapeIdMap.get(oldBinding.toId))
        })
      );
      const assetsToCreate = [];
      const assetsToUpdate = [];
      for (const asset of assets) {
        if (this.store.has(asset.id)) {
          continue;
        }
        if (asset.type === "image" && asset.props.src?.startsWith("data:image") || asset.type === "video" && asset.props.src?.startsWith("data:video")) {
          assetsToUpdate.push(structuredClone(asset));
          asset.props.src = null;
        }
        assetsToCreate.push(asset);
      }
      Promise.allSettled(
        assetsToUpdate.map(async (asset) => {
          const file = await dataUrlToFile(
            asset.props.src,
            asset.props.name,
            asset.props.mimeType ?? "image/png"
          );
          const newAsset = await this.getAssetForExternalContent({
            type: "file",
            file,
            assetId: asset.id
          });
          if (!newAsset) {
            this.deleteAssets([asset.id]);
            return;
          }
          this.updateAssets([{ ...newAsset, id: asset.id }]);
        })
      );
      this.run(() => {
        if (assetsToCreate.length > 0) {
          this.createAssets(assetsToCreate);
        }
        this.createShapes(newShapes);
        this.createBindings(newBindings);
        if (select) {
          this.select(...rootShapes.map((s) => s.id));
        }
        if (pasteParentId !== currentPageId) {
          this.reparentShapes(
            rootShapes.map((s) => s.id),
            pasteParentId
          );
        }
        const newCreatedShapes = newShapes.map((s) => this.getShape(s.id));
        const bounds = Box.Common(newCreatedShapes.map((s) => this.getShapePageBounds(s)));
        if (point === void 0) {
          if (!isPageId(pasteParentId)) {
            const shape = this.getShape(pasteParentId);
            point = Mat.applyToPoint(
              this.getShapePageTransform(shape),
              this.getShapeGeometry(shape).bounds.center
            );
          } else {
            const viewportPageBounds = this.getViewportPageBounds();
            if (preservePosition || viewportPageBounds.includes(Box.From(bounds))) {
              point = bounds.center;
            } else {
              point = viewportPageBounds.center;
            }
          }
        }
        if (rootShapes.length === 1) {
          const onlyRoot = rootShapes[0];
          if (this.isShapeOfType(onlyRoot, "frame")) {
            while (this.getShapesAtPoint(point).some(
              (shape) => this.isShapeOfType(shape, "frame") && shape.props.w === onlyRoot.props.w && shape.props.h === onlyRoot.props.h
            )) {
              point.x += bounds.w + 16;
            }
          }
        }
        const pageCenter = Box.Common(
          compact(rootShapes.map(({ id }) => this.getShapePageBounds(id)))
        ).center;
        const offset4 = Vec.Sub(point, pageCenter);
        this.updateShapes(
          rootShapes.map(({ id }) => {
            const s = this.getShape(id);
            const localRotation = this.getShapeParentTransform(id).decompose().rotation;
            const localDelta = Vec.Rot(offset4, -localRotation);
            return { id: s.id, type: s.type, x: s.x + localDelta.x, y: s.y + localDelta.y };
          })
        );
      });
      return this;
    }
    /**
     * Get an exported SVG element of the given shapes.
     *
     * @param shapes - The shapes (or shape ids) to export.
     * @param opts - Options for the export.
     *
     * @returns The SVG element.
     *
     * @public
     */
    async getSvgElement(shapes, opts = {}) {
      const ids = typeof shapes[0] === "string" ? shapes : shapes.map((s) => s.id);
      if (ids.length === 0) return void 0;
      return exportToSvg(this, ids, opts);
    }
    /**
     * Get an exported SVG string of the given shapes.
     *
     * @param shapes - The shapes (or shape ids) to export.
     * @param opts - Options for the export.
     *
     * @returns The SVG element.
     *
     * @public
     */
    async getSvgString(shapes, opts = {}) {
      const result = await this.getSvgElement(shapes, opts);
      if (!result) return void 0;
      const serializer = new XMLSerializer();
      return {
        svg: serializer.serializeToString(result.svg),
        width: result.width,
        height: result.height
      };
    }
    /** @deprecated Use {@link Editor.getSvgString} or {@link Editor.getSvgElement} instead. */
    async getSvg(shapes, opts = {}) {
      const result = await this.getSvgElement(shapes, opts);
      if (!result) return void 0;
      return result.svg;
    }
    /**
     * Update the input points from a pointer, pinch, or wheel event.
     *
     * @param info - The event info.
     */
    _updateInputsFromEvent(info) {
      const {
        pointerVelocity,
        previousScreenPoint,
        previousPagePoint,
        currentScreenPoint,
        currentPagePoint
      } = this.inputs;
      const { screenBounds } = this.store.unsafeGetWithoutCapture(TLINSTANCE_ID);
      const { x: cx, y: cy, z: cz } = unsafe__withoutCapture(() => this.getCamera());
      const sx = info.point.x - screenBounds.x;
      const sy = info.point.y - screenBounds.y;
      const sz = info.point.z ?? 0.5;
      previousScreenPoint.setTo(currentScreenPoint);
      previousPagePoint.setTo(currentPagePoint);
      currentScreenPoint.set(sx, sy);
      const nx = sx / cz - cx;
      const ny = sy / cz - cy;
      if (isFinite(nx) && isFinite(ny)) {
        currentPagePoint.set(nx, ny, sz);
      }
      this.inputs.isPen = info.type === "pointer" && info.isPen;
      if (info.name === "pointer_down" || this.inputs.isPinching) {
        pointerVelocity.set(0, 0);
        this.inputs.originScreenPoint.setTo(currentScreenPoint);
        this.inputs.originPagePoint.setTo(currentPagePoint);
      }
      this.run(
        () => {
          this.store.put([
            {
              id: TLPOINTER_ID,
              typeName: "pointer",
              x: currentPagePoint.x,
              y: currentPagePoint.y,
              lastActivityTimestamp: (
                // If our pointer moved only because we're following some other user, then don't
                // update our last activity timestamp; otherwise, update it to the current timestamp.
                info.type === "pointer" && info.pointerId === INTERNAL_POINTER_IDS.CAMERA_MOVE ? this.store.unsafeGetWithoutCapture(TLPOINTER_ID)?.lastActivityTimestamp ?? this._tickManager.now : this._tickManager.now
              ),
              meta: {}
            }
          ]);
        },
        { history: "ignore" }
      );
    }
    /**
     * Dispatch a cancel event.
     *
     * @example
     * ```ts
     * editor.cancel()
     * ```
     *
     * @public
     */
    cancel() {
      this.dispatch({ type: "misc", name: "cancel" });
      return this;
    }
    /**
     * Dispatch an interrupt event.
     *
     * @example
     * ```ts
     * editor.interrupt()
     * ```
     *
     * @public
     */
    interrupt() {
      this.dispatch({ type: "misc", name: "interrupt" });
      return this;
    }
    /**
     * Dispatch a complete event.
     *
     * @example
     * ```ts
     * editor.complete()
     * ```
     *
     * @public
     */
    complete() {
      this.dispatch({ type: "misc", name: "complete" });
      return this;
    }
    /**
     * Puts the editor into focused mode.
     *
     * This makes the editor eligible to receive keyboard events and some pointer events (move, wheel).
     *
     * @example
     * ```ts
     * editor.focus()
     * ```
     *
     * By default this also dispatches a 'focus' event to the container element. To prevent this, pass `focusContainer: false`.
     *
     * @example
     * ```ts
     * editor.focus({ focusContainer: false })
     * ```
     *
     * @public
     */
    focus({ focusContainer = true } = {}) {
      if (this.getIsFocused()) return this;
      if (focusContainer) this.focusManager.focus();
      this.updateInstanceState({ isFocused: true });
      return this;
    }
    /**
     * Switches off the editor's focused mode.
     *
     * This makes the editor ignore keyboard events and some pointer events (move, wheel).
     *
     * @example
     * ```ts
     * editor.blur()
     * ```
     * By default this also dispatches a 'blur' event to the container element. To prevent this, pass `blurContainer: false`.
     *
     * @example
     * ```ts
     * editor.blur({ blurContainer: false })
     * ```
     *
     * @public
     */
    blur({ blurContainer = true } = {}) {
      if (!this.getIsFocused()) return this;
      if (blurContainer) {
        this.focusManager.blur();
      } else {
        this.complete();
      }
      this.updateInstanceState({ isFocused: false });
      return this;
    }
    getIsFocused() {
      return this.getInstanceState().isFocused;
    }
    getIsReadonly() {
      return this.getInstanceState().isReadonly;
    }
    /**
     * @public
     * @returns a snapshot of the store's UI and document state
     */
    getSnapshot() {
      return getSnapshot(this.store);
    }
    /**
     * Loads a snapshot into the editor.
     * @param snapshot - The snapshot to load.
     * @param opts - The options for loading the snapshot.
     * @returns
     */
    loadSnapshot(snapshot, opts) {
      loadSnapshot(this.store, snapshot, opts);
      return this;
    }
    _zoomToFitPageContentAt100Percent() {
      const bounds = this.getCurrentPageBounds();
      if (bounds) {
        this.zoomToBounds(bounds, { immediate: true, targetZoom: this.getBaseZoom() });
      }
    }
    _navigateToDeepLink(deepLink) {
      this.run(() => {
        switch (deepLink.type) {
          case "page": {
            const page = this.getPage(deepLink.pageId);
            if (page) {
              this.setCurrentPage(page);
            }
            this._zoomToFitPageContentAt100Percent();
            return;
          }
          case "shapes": {
            const allShapes = compact(deepLink.shapeIds.map((id) => this.getShape(id)));
            const byPage = {};
            for (const shape of allShapes) {
              const pageId2 = this.getAncestorPageId(shape);
              if (!pageId2) continue;
              byPage[pageId2] ??= [];
              byPage[pageId2].push(shape);
            }
            const [pageId, shapes] = Object.entries(byPage).sort(
              ([_, a], [__, b]) => b.length - a.length
            )[0] ?? ["", []];
            if (!pageId || !shapes.length) {
              this._zoomToFitPageContentAt100Percent();
            } else {
              this.setCurrentPage(pageId);
              const bounds = Box.Common(shapes.map((s) => this.getShapePageBounds(s)));
              this.zoomToBounds(bounds, { immediate: true, targetZoom: this.getBaseZoom() });
            }
            return;
          }
          case "viewport": {
            if (deepLink.pageId) {
              if (!this.getPage(deepLink.pageId)) {
                this._zoomToFitPageContentAt100Percent();
                return;
              }
              this.setCurrentPage(deepLink.pageId);
            }
            this.zoomToBounds(deepLink.bounds, { immediate: true, inset: 0 });
            return;
          }
          default:
            exhaustiveSwitchError(deepLink);
        }
      });
    }
    /**
     * Handles navigating to the content specified by the query param in the given URL.
     *
     * Use {@link Editor#createDeepLink} to create a URL with a deep link query param.
     *
     * If no URL is provided, it will look for the param in the current `window.location.href`.
     *
     * @example
     * ```ts
     * editor.navigateToDeepLink()
     * ```
     *
     * The default parameter name is 'd'. You can override this by providing the `param` option.
     *
     * @example
     * ```ts
     * // disable page parameter and change viewport parameter to 'c'
     * editor.navigateToDeepLink({
     *   param: 'x',
     *   url: 'https://my-app.com/my-document?x=200.12.454.23.xyz123',
     * })
     * ```
     *
     * @param opts - Options for loading the state from the URL.
     */
    navigateToDeepLink(opts) {
      if (opts && "type" in opts) {
        this._navigateToDeepLink(opts);
        return this;
      }
      const url = new URL(opts?.url ?? window.location.href);
      const deepLinkString = url.searchParams.get(opts?.param ?? "d");
      if (!deepLinkString) {
        this._zoomToFitPageContentAt100Percent();
        return this;
      }
      try {
        this._navigateToDeepLink(parseDeepLinkString(deepLinkString));
      } catch (e) {
        console.warn(e);
        this._zoomToFitPageContentAt100Percent();
      }
      return this;
    }
    /**
     * Turns the given URL into a deep link by adding a query parameter.
     *
     * e.g. `https://my-app.com/my-document?d=100.100.200.200.xyz123`
     *
     * If no URL is provided, it will use the current `window.location.href`.
     *
     * @example
     * ```ts
     * // create a deep link to the current page + viewport
     * navigator.clipboard.writeText(editor.createDeepLink())
     * ```
     *
     * You can link to a particular set of shapes by providing a `to` parameter.
     *
     * @example
     * ```ts
     * // create a deep link to the set of currently selected shapes
     * navigator.clipboard.writeText(editor.createDeepLink({
     *   to: { type: 'selection', shapeIds: editor.getSelectedShapeIds() }
     * }))
     * ```
     *
     * The default query param is 'd'. You can override this by providing a `param` parameter.
     *
     * @example
     * ```ts
     * // Use `x` as the param name instead
     * editor.createDeepLink({ param: 'x' })
     * ```
     *
     * @param opts - Options for adding the state to the URL.
     * @returns the updated URL
     */
    createDeepLink(opts) {
      const url = new URL(opts?.url ?? window.location.href);
      url.searchParams.set(
        opts?.param ?? "d",
        createDeepLinkString(
          opts?.to ?? {
            type: "viewport",
            pageId: this.options.maxPages === 1 ? void 0 : this.getCurrentPageId(),
            bounds: this.getViewportPageBounds()
          }
        )
      );
      return url;
    }
    /**
     * Register a listener for changes to a deep link for the current document.
     *
     * You'll typically want to use this indirectly via the {@link TldrawEditorBaseProps.deepLinks} prop on the `<Tldraw />` component.
     *
     * By default this will update `window.location` in place, but you can provide a custom callback
     * to handle state changes on your own.
     *
     * @example
     * ```ts
     * editor.registerDeepLinkListener({
     *   onChange(url) {
     *     window.history.replaceState({}, document.title, url.toString())
     *   }
     * })
     * ```
     *
     * You can also provide a custom URL to update, in which case you must also provide `onChange`.
     *
     * @example
     * ```ts
     * editor.registerDeepLinkListener({
     *   getUrl: () => `https://my-app.com/my-document`,
     *   onChange(url) {
     *     setShareUrl(url.toString())
     *   }
     * })
     * ```
     *
     * By default this will update with a debounce interval of 500ms, but you can provide a custom interval.
     *
     * @example
     * ```ts
     * editor.registerDeepLinkListener({ debounceMs: 1000 })
     * ```
     * The default parameter name is `d`. You can override this by providing a `param` option.
     *
     * @example
     * ```ts
     * editor.registerDeepLinkListener({ param: 'x' })
     * ```
     * @param opts - Options for setting up the listener.
     * @returns a function that will stop the listener.
     */
    registerDeepLinkListener(opts) {
      if (opts?.getUrl && !opts?.onChange) {
        throw Error(
          "[tldraw:urlStateSync] If you specify getUrl, you must also specify the onChange callback."
        );
      }
      const url$ = computed("url with state", () => {
        const url = opts?.getUrl?.(this) ?? window.location.href;
        const urlWithState = this.createDeepLink({
          param: opts?.param,
          url,
          to: opts?.getTarget?.(this)
        });
        return urlWithState.toString();
      });
      const announceChange = opts?.onChange ?? (() => {
        const url = this.createDeepLink({
          param: opts?.param,
          to: opts?.getTarget?.(this)
        });
        window.history.replaceState({}, document.title, url.toString());
      });
      const scheduleEffect = debounce((execute) => execute(), opts?.debounceMs ?? 500);
      const unlisten = react(
        "update url on state change",
        () => announceChange(new URL(url$.get()), this),
        { scheduleEffect }
      );
      return () => {
        unlisten();
        scheduleEffect.cancel();
      };
    }
    /**
     * Prevent a double click event from firing the next time the user clicks
     *
     * @public
     */
    cancelDoubleClick() {
      this._clickManager.cancelDoubleClickTimeout();
    }
    _setShiftKeyTimeout() {
      this.inputs.shiftKey = false;
      this.dispatch({
        type: "keyboard",
        name: "key_up",
        key: "Shift",
        shiftKey: this.inputs.shiftKey,
        ctrlKey: this.inputs.ctrlKey,
        altKey: this.inputs.altKey,
        metaKey: this.inputs.metaKey,
        accelKey: isAccelKey(this.inputs),
        code: "ShiftLeft"
      });
    }
    _setAltKeyTimeout() {
      this.inputs.altKey = false;
      this.dispatch({
        type: "keyboard",
        name: "key_up",
        key: "Alt",
        shiftKey: this.inputs.shiftKey,
        ctrlKey: this.inputs.ctrlKey,
        altKey: this.inputs.altKey,
        metaKey: this.inputs.metaKey,
        accelKey: isAccelKey(this.inputs),
        code: "AltLeft"
      });
    }
    _setCtrlKeyTimeout() {
      this.inputs.ctrlKey = false;
      this.dispatch({
        type: "keyboard",
        name: "key_up",
        key: "Ctrl",
        shiftKey: this.inputs.shiftKey,
        ctrlKey: this.inputs.ctrlKey,
        altKey: this.inputs.altKey,
        metaKey: this.inputs.metaKey,
        accelKey: isAccelKey(this.inputs),
        code: "ControlLeft"
      });
    }
    _setMetaKeyTimeout() {
      this.inputs.metaKey = false;
      this.dispatch({
        type: "keyboard",
        name: "key_up",
        key: "Meta",
        shiftKey: this.inputs.shiftKey,
        ctrlKey: this.inputs.ctrlKey,
        altKey: this.inputs.altKey,
        metaKey: this.inputs.metaKey,
        accelKey: isAccelKey(this.inputs),
        code: "MetaLeft"
      });
    }
    /**
     * Dispatch an event to the editor.
     *
     * @example
     * ```ts
     * editor.dispatch(myPointerEvent)
     * ```
     *
     * @param info - The event info.
     *
     * @public
     */
    dispatch(info) {
      this._pendingEventsForNextTick.push(info);
      if (!(info.type === "pointer" && info.name === "pointer_move" || info.type === "wheel" || info.type === "pinch")) {
        this._flushEventsForTick(0);
      }
      return this;
    }
    _flushEventsForTick(elapsed) {
      this.run(() => {
        if (this._pendingEventsForNextTick.length > 0) {
          const events = [...this._pendingEventsForNextTick];
          this._pendingEventsForNextTick.length = 0;
          for (const info of events) {
            this._flushEventForTick(info);
          }
        }
        if (elapsed > 0) {
          this.root.handleEvent({ type: "misc", name: "tick", elapsed });
        }
        this.scribbles.tick(elapsed);
      });
    }
    _flushEventForTick(info) {
      if (this.getCrashingError()) return this;
      const { inputs } = this;
      const { type } = info;
      if (info.type === "misc") {
        if (info.name === "cancel" || info.name === "complete") {
          this.inputs.isDragging = false;
          if (this.inputs.isPanning) {
            this.inputs.isPanning = false;
            this.inputs.isSpacebarPanning = false;
            this.setCursor({ type: this._prevCursor, rotation: 0 });
          }
        }
        this.root.handleEvent(info);
        return;
      }
      if (info.shiftKey) {
        clearTimeout(this._shiftKeyTimeout);
        this._shiftKeyTimeout = -1;
        inputs.shiftKey = true;
      } else if (!info.shiftKey && inputs.shiftKey && this._shiftKeyTimeout === -1) {
        this._shiftKeyTimeout = this.timers.setTimeout(this._setShiftKeyTimeout, 150);
      }
      if (info.altKey) {
        clearTimeout(this._altKeyTimeout);
        this._altKeyTimeout = -1;
        inputs.altKey = true;
      } else if (!info.altKey && inputs.altKey && this._altKeyTimeout === -1) {
        this._altKeyTimeout = this.timers.setTimeout(this._setAltKeyTimeout, 150);
      }
      if (info.ctrlKey) {
        clearTimeout(this._ctrlKeyTimeout);
        this._ctrlKeyTimeout = -1;
        inputs.ctrlKey = true;
      } else if (!info.ctrlKey && inputs.ctrlKey && this._ctrlKeyTimeout === -1) {
        this._ctrlKeyTimeout = this.timers.setTimeout(this._setCtrlKeyTimeout, 150);
      }
      if (info.metaKey) {
        clearTimeout(this._metaKeyTimeout);
        this._metaKeyTimeout = -1;
        inputs.metaKey = true;
      } else if (!info.metaKey && inputs.metaKey && this._metaKeyTimeout === -1) {
        this._metaKeyTimeout = this.timers.setTimeout(this._setMetaKeyTimeout, 150);
      }
      const { originPagePoint, currentPagePoint } = inputs;
      if (!inputs.isPointing) {
        inputs.isDragging = false;
      }
      const instanceState = this.store.unsafeGetWithoutCapture(TLINSTANCE_ID);
      const pageState = this.store.get(this._getCurrentPageStateId());
      const cameraOptions = this._cameraOptions.__unsafe__getWithoutCapture();
      switch (type) {
        case "pinch": {
          if (cameraOptions.isLocked) return;
          clearTimeout(this._longPressTimeout);
          this._updateInputsFromEvent(info);
          switch (info.name) {
            case "pinch_start": {
              if (inputs.isPinching) return;
              if (!inputs.isEditing) {
                this._pinchStart = this.getCamera().z;
                if (!this._selectedShapeIdsAtPointerDown.length) {
                  this._selectedShapeIdsAtPointerDown = [...pageState.selectedShapeIds];
                }
                this._didPinch = true;
                inputs.isPinching = true;
                this.interrupt();
              }
              return;
            }
            case "pinch": {
              if (!inputs.isPinching) return;
              const {
                point: { z = 1 },
                delta: { x: dx, y: dy }
              } = info;
              const { x, y } = Vec.SubXY(
                info.point,
                instanceState.screenBounds.x,
                instanceState.screenBounds.y
              );
              this.stopCameraAnimation();
              if (instanceState.followingUserId) {
                this.stopFollowingUser();
              }
              const { x: cx, y: cy, z: cz } = unsafe__withoutCapture(() => this.getCamera());
              const { panSpeed, zoomSpeed } = cameraOptions;
              this._setCamera(
                new Vec(
                  cx + dx * panSpeed / cz - x / cz + x / (z * zoomSpeed),
                  cy + dy * panSpeed / cz - y / cz + y / (z * zoomSpeed),
                  z * zoomSpeed
                ),
                { immediate: true }
              );
              return;
            }
            case "pinch_end": {
              if (!inputs.isPinching) return this;
              inputs.isPinching = false;
              const { _selectedShapeIdsAtPointerDown: shapesToReselect } = this;
              this.setSelectedShapes(this._selectedShapeIdsAtPointerDown);
              this._selectedShapeIdsAtPointerDown = [];
              if (this._didPinch) {
                this._didPinch = false;
                if (shapesToReselect.length > 0) {
                  this.once("tick", () => {
                    if (!this._didPinch) {
                      this.setSelectedShapes(shapesToReselect);
                    }
                  });
                }
              }
              return;
            }
          }
        }
        case "wheel": {
          if (cameraOptions.isLocked) return;
          this._updateInputsFromEvent(info);
          const { panSpeed, zoomSpeed, wheelBehavior } = cameraOptions;
          if (wheelBehavior !== "none") {
            this.stopCameraAnimation();
            if (instanceState.followingUserId) {
              this.stopFollowingUser();
            }
            const { x: cx, y: cy, z: cz } = unsafe__withoutCapture(() => this.getCamera());
            const { x: dx, y: dy, z: dz = 0 } = info.delta;
            let behavior = wheelBehavior;
            if (inputs.ctrlKey) behavior = wheelBehavior === "pan" ? "zoom" : "pan";
            switch (behavior) {
              case "zoom": {
                const { x, y } = this.inputs.currentScreenPoint;
                let delta = dz;
                if (wheelBehavior === "zoom") {
                  if (Math.abs(dy) > 10) {
                    delta = 10 * Math.sign(dy) / 100;
                  } else {
                    delta = dy / 100;
                  }
                }
                const zoom = cz + (delta ?? 0) * zoomSpeed * cz;
                this._setCamera(
                  new Vec(
                    cx + (x / zoom - x) - (x / cz - x),
                    cy + (y / zoom - y) - (y / cz - y),
                    zoom
                  ),
                  { immediate: true }
                );
                this.maybeTrackPerformance("Zooming");
                return;
              }
              case "pan": {
                this._setCamera(new Vec(cx + dx * panSpeed / cz, cy + dy * panSpeed / cz, cz), {
                  immediate: true
                });
                this.maybeTrackPerformance("Panning");
                return;
              }
            }
          }
          break;
        }
        case "pointer": {
          if (inputs.isPinching) return;
          this._updateInputsFromEvent(info);
          const { isPen } = info;
          const { isPenMode } = instanceState;
          switch (info.name) {
            case "pointer_down": {
              if (isPenMode && !isPen) return;
              if (!this.inputs.isPanning) {
                this._longPressTimeout = this.timers.setTimeout(() => {
                  const vsb = this.getViewportScreenBounds();
                  this.dispatch({
                    ...info,
                    // important! non-obvious!! the screenpoint was adjusted using the
                    // viewport bounds, and will be again when this event is handled...
                    // so we need to counter-adjust from the stored value so that the
                    // new value is set correctly.
                    point: this.inputs.originScreenPoint.clone().addXY(vsb.x, vsb.y),
                    name: "long_press"
                  });
                }, this.options.longPressDurationMs);
              }
              this._selectedShapeIdsAtPointerDown = this.getSelectedShapeIds();
              if (info.button === LEFT_MOUSE_BUTTON) this.capturedPointerId = info.pointerId;
              inputs.buttons.add(info.button);
              inputs.isPointing = true;
              inputs.isDragging = false;
              if (!isPenMode && isPen) this.updateInstanceState({ isPenMode: true });
              if (info.button === STYLUS_ERASER_BUTTON) {
                this._restoreToolId = this.getCurrentToolId();
                this.complete();
                this.setCurrentTool("eraser");
              } else if (info.button === MIDDLE_MOUSE_BUTTON) {
                if (!this.inputs.isPanning) {
                  this._prevCursor = this.getInstanceState().cursor.type;
                }
                this.inputs.isPanning = true;
                clearTimeout(this._longPressTimeout);
              }
              if (this.inputs.isPanning) {
                this.stopCameraAnimation();
                this.setCursor({ type: "grabbing", rotation: 0 });
                return this;
              }
              break;
            }
            case "pointer_move": {
              if (!isPen && isPenMode) return;
              const { x: cx, y: cy, z: cz } = unsafe__withoutCapture(() => this.getCamera());
              if (this.inputs.isPanning && this.inputs.isPointing) {
                const { currentScreenPoint, previousScreenPoint } = this.inputs;
                const { panSpeed } = cameraOptions;
                const offset4 = Vec.Sub(currentScreenPoint, previousScreenPoint);
                this.setCamera(
                  new Vec(cx + offset4.x * panSpeed / cz, cy + offset4.y * panSpeed / cz, cz),
                  { immediate: true }
                );
                this.maybeTrackPerformance("Panning");
                return;
              }
              if (inputs.isPointing && !inputs.isDragging && Vec.Dist2(originPagePoint, currentPagePoint) * this.getZoomLevel() > (instanceState.isCoarsePointer ? this.options.coarseDragDistanceSquared : this.options.dragDistanceSquared) / cz) {
                inputs.isDragging = true;
                clearTimeout(this._longPressTimeout);
              }
              break;
            }
            case "pointer_up": {
              inputs.isDragging = false;
              inputs.isPointing = false;
              clearTimeout(this._longPressTimeout);
              inputs.buttons.delete(info.button);
              if (instanceState.isPenMode && !isPen) return;
              if (this.capturedPointerId === info.pointerId) {
                this.capturedPointerId = null;
                info.button = 0;
              }
              if (inputs.isPanning) {
                if (!inputs.keys.has("Space")) {
                  inputs.isPanning = false;
                  inputs.isSpacebarPanning = false;
                }
                const slideDirection = this.inputs.pointerVelocity;
                const slideSpeed = Math.min(2, slideDirection.len());
                switch (info.button) {
                  case LEFT_MOUSE_BUTTON: {
                    this.setCursor({ type: "grab", rotation: 0 });
                    break;
                  }
                  case MIDDLE_MOUSE_BUTTON: {
                    if (this.inputs.keys.has(" ")) {
                      this.setCursor({ type: "grab", rotation: 0 });
                    } else {
                      this.setCursor({ type: this._prevCursor, rotation: 0 });
                    }
                  }
                }
                if (slideSpeed > 0) {
                  this.slideCamera({ speed: slideSpeed, direction: slideDirection });
                }
              } else {
                if (info.button === STYLUS_ERASER_BUTTON) {
                  this.complete();
                  this.setCurrentTool(this._restoreToolId);
                }
              }
              break;
            }
          }
          break;
        }
        case "keyboard": {
          if (info.key === "ShiftRight") info.key = "ShiftLeft";
          if (info.key === "AltRight") info.key = "AltLeft";
          if (info.code === "ControlRight") info.code = "ControlLeft";
          if (info.code === "MetaRight") info.code = "MetaLeft";
          switch (info.name) {
            case "key_down": {
              inputs.keys.add(info.code);
              if (info.code === "Space" && !info.ctrlKey) {
                if (!this.inputs.isPanning) {
                  this._prevCursor = instanceState.cursor.type;
                }
                this.inputs.isPanning = true;
                this.inputs.isSpacebarPanning = true;
                clearTimeout(this._longPressTimeout);
                this.setCursor({ type: this.inputs.isPointing ? "grabbing" : "grab", rotation: 0 });
              }
              if (this.inputs.isSpacebarPanning) {
                let offset4;
                switch (info.code) {
                  case "ArrowUp": {
                    offset4 = new Vec(0, -1);
                    break;
                  }
                  case "ArrowRight": {
                    offset4 = new Vec(1, 0);
                    break;
                  }
                  case "ArrowDown": {
                    offset4 = new Vec(0, 1);
                    break;
                  }
                  case "ArrowLeft": {
                    offset4 = new Vec(-1, 0);
                    break;
                  }
                }
                if (offset4) {
                  const bounds = this.getViewportPageBounds();
                  const next = bounds.clone().translate(offset4.mulV({ x: bounds.w, y: bounds.h }));
                  this._animateToViewport(next, { animation: { duration: 320 } });
                }
              }
              break;
            }
            case "key_up": {
              inputs.keys.delete(info.code);
              if (info.code === "Space") {
                if (this.inputs.buttons.has(MIDDLE_MOUSE_BUTTON)) {
                } else {
                  this.inputs.isPanning = false;
                  this.inputs.isSpacebarPanning = false;
                  this.setCursor({ type: this._prevCursor, rotation: 0 });
                }
              }
              break;
            }
            case "key_repeat": {
              break;
            }
          }
          break;
        }
      }
      if (info.type === "pointer") {
        if (info.button === MIDDLE_MOUSE_BUTTON) {
          info.name = "middle_click";
        } else if (info.button === RIGHT_MOUSE_BUTTON) {
          info.name = "right_click";
        }
        const { isPenMode } = this.store.unsafeGetWithoutCapture(TLINSTANCE_ID);
        if (info.isPen === isPenMode) {
          const clickInfo = this._clickManager.handlePointerEvent(info);
          if (info.name !== clickInfo.name) {
            this.root.handleEvent(info);
            this.emit("event", info);
            this.root.handleEvent(clickInfo);
            this.emit("event", clickInfo);
            return;
          }
        }
      }
      this.root.handleEvent(info);
      this.emit("event", info);
      if (info.type === "pointer" && info.name === "pointer_down") {
        this.menus.clearOpenMenus();
      }
      return this;
    }
    /** @internal */
    maybeTrackPerformance(name) {
      if (debugFlags.measurePerformance.get()) {
        if (this.performanceTracker.isStarted()) {
          clearTimeout(this.performanceTrackerTimeout);
        } else {
          this.performanceTracker.start(name);
        }
        this.performanceTrackerTimeout = this.timers.setTimeout(() => {
          this.performanceTracker.stop();
        }, 50);
      }
    }
  };
  _init9 = __decoratorStart9(_a);
  __decorateElement9(_init9, 1, "getIsShapeHiddenCache", _getIsShapeHiddenCache_dec, Editor);
  __decorateElement9(_init9, 1, "getCanUndo", _getCanUndo_dec, Editor);
  __decorateElement9(_init9, 1, "getCanRedo", _getCanRedo_dec, Editor);
  __decorateElement9(_init9, 1, "getPath", _getPath_dec, Editor);
  __decorateElement9(_init9, 1, "getCurrentTool", _getCurrentTool_dec, Editor);
  __decorateElement9(_init9, 1, "getCurrentToolId", _getCurrentToolId_dec, Editor);
  __decorateElement9(_init9, 1, "getDocumentSettings", _getDocumentSettings_dec, Editor);
  __decorateElement9(_init9, 1, "getInstanceState", _getInstanceState_dec, Editor);
  __decorateElement9(_init9, 1, "getOpenMenus", _getOpenMenus_dec, Editor);
  __decorateElement9(_init9, 1, "getIsMenuOpen", _getIsMenuOpen_dec, Editor);
  __decorateElement9(_init9, 1, "getPageStates", _getPageStates_dec, Editor);
  __decorateElement9(_init9, 1, "_getPageStatesQuery", __getPageStatesQuery_dec, Editor);
  __decorateElement9(_init9, 1, "getCurrentPageState", _getCurrentPageState_dec, Editor);
  __decorateElement9(_init9, 1, "_getCurrentPageStateId", __getCurrentPageStateId_dec, Editor);
  __decorateElement9(_init9, 1, "getSelectedShapeIds", _getSelectedShapeIds_dec, Editor);
  __decorateElement9(_init9, 1, "getSelectedShapes", _getSelectedShapes_dec, Editor);
  __decorateElement9(_init9, 1, "getOnlySelectedShapeId", _getOnlySelectedShapeId_dec, Editor);
  __decorateElement9(_init9, 1, "getOnlySelectedShape", _getOnlySelectedShape_dec, Editor);
  __decorateElement9(_init9, 1, "getSelectionPageBounds", _getSelectionPageBounds_dec, Editor);
  __decorateElement9(_init9, 1, "getSelectionRotation", _getSelectionRotation_dec, Editor);
  __decorateElement9(_init9, 1, "getSelectionRotatedPageBounds", _getSelectionRotatedPageBounds_dec, Editor);
  __decorateElement9(_init9, 1, "getSelectionRotatedScreenBounds", _getSelectionRotatedScreenBounds_dec, Editor);
  __decorateElement9(_init9, 1, "getFocusedGroupId", _getFocusedGroupId_dec, Editor);
  __decorateElement9(_init9, 1, "getFocusedGroup", _getFocusedGroup_dec, Editor);
  __decorateElement9(_init9, 1, "getEditingShapeId", _getEditingShapeId_dec, Editor);
  __decorateElement9(_init9, 1, "getEditingShape", _getEditingShape_dec, Editor);
  __decorateElement9(_init9, 1, "getHoveredShapeId", _getHoveredShapeId_dec, Editor);
  __decorateElement9(_init9, 1, "getHoveredShape", _getHoveredShape_dec, Editor);
  __decorateElement9(_init9, 1, "getHintingShapeIds", _getHintingShapeIds_dec, Editor);
  __decorateElement9(_init9, 1, "getHintingShape", _getHintingShape_dec, Editor);
  __decorateElement9(_init9, 1, "getErasingShapeIds", _getErasingShapeIds_dec, Editor);
  __decorateElement9(_init9, 1, "getErasingShapes", _getErasingShapes_dec, Editor);
  __decorateElement9(_init9, 1, "_unsafe_getCameraId", __unsafe_getCameraId_dec, Editor);
  __decorateElement9(_init9, 1, "getCamera", _getCamera_dec, Editor);
  __decorateElement9(_init9, 1, "getViewportPageBoundsForFollowing", _getViewportPageBoundsForFollowing_dec, Editor);
  __decorateElement9(_init9, 1, "getCameraForFollowing", _getCameraForFollowing_dec, Editor);
  __decorateElement9(_init9, 1, "getZoomLevel", _getZoomLevel_dec, Editor);
  __decorateElement9(_init9, 1, "getViewportScreenBounds", _getViewportScreenBounds_dec, Editor);
  __decorateElement9(_init9, 1, "getViewportScreenCenter", _getViewportScreenCenter_dec, Editor);
  __decorateElement9(_init9, 1, "getViewportPageBounds", _getViewportPageBounds_dec, Editor);
  __decorateElement9(_init9, 1, "_getCollaboratorsQuery", __getCollaboratorsQuery_dec, Editor);
  __decorateElement9(_init9, 1, "getCollaborators", _getCollaborators_dec, Editor);
  __decorateElement9(_init9, 1, "getCollaboratorsOnCurrentPage", _getCollaboratorsOnCurrentPage_dec, Editor);
  __decorateElement9(_init9, 1, "getRenderingShapes", _getRenderingShapes_dec, Editor);
  __decorateElement9(_init9, 1, "_getAllPagesQuery", __getAllPagesQuery_dec, Editor);
  __decorateElement9(_init9, 1, "getPages", _getPages_dec, Editor);
  __decorateElement9(_init9, 1, "getCurrentPageId", _getCurrentPageId_dec, Editor);
  __decorateElement9(_init9, 1, "getCurrentPageShapeIdsSorted", _getCurrentPageShapeIdsSorted_dec, Editor);
  __decorateElement9(_init9, 1, "_getAllAssetsQuery", __getAllAssetsQuery_dec, Editor);
  __decorateElement9(_init9, 1, "_getShapeGeometryCache", __getShapeGeometryCache_dec, Editor);
  __decorateElement9(_init9, 1, "_getShapeHandlesCache", __getShapeHandlesCache_dec, Editor);
  __decorateElement9(_init9, 1, "_getShapePageTransformCache", __getShapePageTransformCache_dec, Editor);
  __decorateElement9(_init9, 1, "_getShapePageBoundsCache", __getShapePageBoundsCache_dec, Editor);
  __decorateElement9(_init9, 1, "_getShapeClipPathCache", __getShapeClipPathCache_dec, Editor);
  __decorateElement9(_init9, 1, "_getShapeMaskCache", __getShapeMaskCache_dec, Editor);
  __decorateElement9(_init9, 1, "_getShapeMaskedPageBoundsCache", __getShapeMaskedPageBoundsCache_dec, Editor);
  __decorateElement9(_init9, 1, "_notVisibleShapes", __notVisibleShapes_dec, Editor);
  __decorateElement9(_init9, 1, "getCulledShapes", _getCulledShapes_dec, Editor);
  __decorateElement9(_init9, 1, "getCurrentPageBounds", _getCurrentPageBounds_dec, Editor);
  __decorateElement9(_init9, 1, "getCurrentPageShapes", _getCurrentPageShapes_dec, Editor);
  __decorateElement9(_init9, 1, "getCurrentPageShapesSorted", _getCurrentPageShapesSorted_dec, Editor);
  __decorateElement9(_init9, 1, "getCurrentPageRenderingShapesSorted", _getCurrentPageRenderingShapesSorted_dec, Editor);
  __decorateElement9(_init9, 1, "_getBindingsIndexCache", __getBindingsIndexCache_dec, Editor);
  __decorateElement9(_init9, 1, "_getSelectionSharedStyles", __getSelectionSharedStyles_dec, Editor);
  __decorateElement9(_init9, 1, "getSharedStyles", _getSharedStyles_dec, Editor);
  __decorateElement9(_init9, 1, "getSharedOpacity", _getSharedOpacity_dec, Editor);
  __decorateElement9(_init9, 1, "getIsFocused", _getIsFocused_dec, Editor);
  __decorateElement9(_init9, 1, "getIsReadonly", _getIsReadonly_dec, Editor);
  __decorateElement9(_init9, 1, "_setShiftKeyTimeout", __setShiftKeyTimeout_dec, Editor);
  __decorateElement9(_init9, 1, "_setAltKeyTimeout", __setAltKeyTimeout_dec, Editor);
  __decorateElement9(_init9, 1, "_setCtrlKeyTimeout", __setCtrlKeyTimeout_dec, Editor);
  __decorateElement9(_init9, 1, "_setMetaKeyTimeout", __setMetaKeyTimeout_dec, Editor);
  __decoratorMetadata9(_init9, Editor);
  function alertMaxShapes(editor, pageId = editor.getCurrentPageId()) {
    const name = editor.getPage(pageId).name;
    editor.emit("max-shapes", { name, pageId, count: editor.options.maxShapesPerPage });
  }
  function applyPartialToRecordWithProps(prev, partial) {
    if (!partial) return prev;
    let next = null;
    const entries = Object.entries(partial);
    for (let i = 0, n = entries.length; i < n; i++) {
      const [k, v] = entries[i];
      if (v === void 0) continue;
      if (k === "id" || k === "type" || k === "typeName") continue;
      if (v === prev[k]) continue;
      if (!next) next = { ...prev };
      if (k === "props" || k === "meta") {
        next[k] = { ...prev[k] };
        for (const [nextKey, nextValue] of Object.entries(v)) {
          ;
          next[k][nextKey] = nextValue;
        }
        continue;
      }
      ;
      next[k] = v;
    }
    if (!next) return prev;
    return next;
  }
  function pushShapeWithDescendants(editor, id, result) {
    const shape = editor.getShape(id);
    if (!shape) return;
    result.push(shape);
    const childIds = editor.getSortedChildIdsForParent(id);
    for (let i = 0, n = childIds.length; i < n; i++) {
      pushShapeWithDescendants(editor, childIds[i], result);
    }
  }
  function withIsolatedShapes(editor, shapeIds, callback) {
    let result;
    editor.run(
      () => {
        const changes = editor.store.extractingChanges(() => {
          const bindingsWithBoth = /* @__PURE__ */ new Set();
          const bindingsToRemove = /* @__PURE__ */ new Set();
          for (const shapeId of shapeIds) {
            const shape = editor.getShape(shapeId);
            if (!shape) continue;
            for (const binding of editor.getBindingsInvolvingShape(shapeId)) {
              const hasFrom = shapeIds.has(binding.fromId);
              const hasTo = shapeIds.has(binding.toId);
              if (hasFrom && hasTo) {
                bindingsWithBoth.add(binding.id);
                continue;
              }
              if (!hasFrom || !hasTo) {
                bindingsToRemove.add(binding.id);
              }
            }
          }
          editor.deleteBindings([...bindingsToRemove], { isolateShapes: true });
          try {
            result = Result.ok(callback(bindingsWithBoth));
          } catch (error) {
            result = Result.err(error);
          }
        });
        editor.store.applyDiff(reverseRecordsDiff(changes));
      },
      { history: "ignore" }
    );
    if (result.ok) {
      return result.value;
    } else {
      throw result.error;
    }
  }
  function getCameraFitXFitY(editor, cameraOptions) {
    if (!cameraOptions.constraints) throw Error("Should have constraints here");
    const {
      padding: { x: px, y: py }
    } = cameraOptions.constraints;
    const vsb = editor.getViewportScreenBounds();
    const bounds = Box.From(cameraOptions.constraints.bounds);
    const zx = (vsb.w - px * 2) / bounds.w;
    const zy = (vsb.h - py * 2) / bounds.h;
    return { zx, zy };
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useIsDarkMode.mjs
  function useIsDarkMode() {
    const editor = useEditor();
    const exportContext = useSvgExportContext();
    return useValue("isDarkMode", () => exportContext?.isDarkMode ?? editor.user.getIsDarkMode(), [
      exportContext,
      editor
    ]);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useCursor.mjs
  var CORNER_SVG = `<path d='m19.7432 17.0869-4.072 4.068 2.829 2.828-8.473-.013-.013-8.47 2.841 2.842 4.075-4.068 1.414-1.415-2.844-2.842h8.486v8.484l-2.83-2.827z' fill='%23fff'/><path d='m18.6826 16.7334-4.427 4.424 1.828 1.828-5.056-.016-.014-5.054 1.842 1.841 4.428-4.422 2.474-2.475-1.844-1.843h5.073v5.071l-1.83-1.828z' fill='%23000'/>`;
  var EDGE_SVG = `<path d='m9 17.9907v.005l5.997 5.996.001-3.999h1.999 2.02v4l5.98-6.001-5.98-5.999.001 4.019-2.021.002h-2l.001-4.022zm1.411.003 3.587-3.588-.001 2.587h3.5 2.521v-2.585l3.565 3.586-3.564 3.585-.001-2.585h-2.521l-3.499-.001-.001 2.586z' fill='%23fff'/><path d='m17.4971 18.9932h2.521v2.586l3.565-3.586-3.565-3.585v2.605h-2.521-3.5v-2.607l-3.586 3.587 3.586 3.586v-2.587z' fill='%23000'/>`;
  var ROTATE_CORNER_SVG = `<path d="M22.4789 9.45728L25.9935 12.9942L22.4789 16.5283V14.1032C18.126 14.1502 14.6071 17.6737 14.5675 22.0283H17.05L13.513 25.543L9.97889 22.0283H12.5674C12.6071 16.5691 17.0214 12.1503 22.4789 12.1031L22.4789 9.45728Z" fill="black"/><path fill-rule="evenodd" clip-rule="evenodd" d="M21.4789 7.03223L27.4035 12.9945L21.4789 18.9521V15.1868C18.4798 15.6549 16.1113 18.0273 15.649 21.0284H19.475L13.5128 26.953L7.55519 21.0284H11.6189C12.1243 15.8155 16.2679 11.6677 21.4789 11.1559L21.4789 7.03223ZM22.4789 12.1031C17.0214 12.1503 12.6071 16.5691 12.5674 22.0284H9.97889L13.513 25.543L17.05 22.0284H14.5675C14.5705 21.6896 14.5947 21.3558 14.6386 21.0284C15.1157 17.4741 17.9266 14.6592 21.4789 14.1761C21.8063 14.1316 22.1401 14.1069 22.4789 14.1032V16.5284L25.9935 12.9942L22.4789 9.45729L22.4789 12.1031Z" fill="white"/>`;
  function getCursorCss(svg, r, tr, f, color, hotspotX = 16, hotspotY = 16) {
    const a = (-tr - r) * (PI / 180);
    const s = Math.sin(a);
    const c = Math.cos(a);
    const dx = 1 * c - 1 * s;
    const dy = 1 * s + 1 * c;
    return `url("data:image/svg+xml,<svg height='32' width='32' viewBox='0 0 32 32' xmlns='http://www.w3.org/2000/svg' style='color: ${color};'><defs><filter id='shadow' y='-40%' x='-40%' width='180px' height='180%' color-interpolation-filters='sRGB'><feDropShadow dx='${dx}' dy='${dy}' stdDeviation='1.2' flood-opacity='.5'/></filter></defs><g fill='none' transform='rotate(${r + tr} 16 16)${f ? ` scale(-1,-1) translate(0, -32)` : ""}' filter='url(%23shadow)'>` + svg.replaceAll(`"`, `'`) + `</g></svg>") ${hotspotX} ${hotspotY}, pointer`;
  }
  var STATIC_CURSORS = [
    "default",
    "pointer",
    "cross",
    "move",
    "grab",
    "grabbing",
    "text",
    "zoom-in",
    "zoom-out"
  ];
  var CURSORS = {
    none: () => "none",
    "ew-resize": (r, f, c) => getCursorCss(EDGE_SVG, r, 0, f, c),
    "ns-resize": (r, f, c) => getCursorCss(EDGE_SVG, r, 90, f, c),
    "nesw-resize": (r, f, c) => getCursorCss(CORNER_SVG, r, 0, f, c),
    "nwse-resize": (r, f, c) => getCursorCss(CORNER_SVG, r, 90, f, c),
    "nwse-rotate": (r, f, c) => getCursorCss(ROTATE_CORNER_SVG, r, 0, f, c),
    "nesw-rotate": (r, f, c) => getCursorCss(ROTATE_CORNER_SVG, r, 90, f, c),
    "senw-rotate": (r, f, c) => getCursorCss(ROTATE_CORNER_SVG, r, 180, f, c),
    "swne-rotate": (r, f, c) => getCursorCss(ROTATE_CORNER_SVG, r, 270, f, c)
  };
  function getCursor(cursor, rotation = 0, color = "black") {
    return CURSORS[cursor](radiansToDegrees(rotation), false, color);
  }
  function useCursor() {
    const editor = useEditor();
    const container = useContainer();
    const isDarkMode = useIsDarkMode();
    useQuickReactor(
      "useCursor",
      () => {
        const { type, rotation } = editor.getInstanceState().cursor;
        if (STATIC_CURSORS.includes(type)) {
          container.style.setProperty("--tl-cursor", `var(--tl-cursor-${type})`);
          return;
        }
        container.style.setProperty(
          "--tl-cursor",
          getCursor(type, rotation, isDarkMode ? "white" : "black")
        );
      },
      [editor, container, isDarkMode]
    );
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useDarkMode.mjs
  var import_react38 = __toESM(require_react(), 1);
  function useDarkMode() {
    const editor = useEditor();
    const container = useContainer();
    const isDarkMode = useIsDarkMode();
    const forceSrgb = useValue(debugFlags.forceSrgb);
    import_react38.default.useEffect(() => {
      if (isDarkMode) {
        container.setAttribute("data-color-mode", "dark");
        container.classList.remove("tl-theme__light");
        container.classList.add("tl-theme__dark");
      } else {
        container.setAttribute("data-color-mode", "light");
        container.classList.remove("tl-theme__dark");
        container.classList.add("tl-theme__light");
      }
      if (forceSrgb) {
        container.classList.add("tl-theme__force-sRGB");
      } else {
        container.classList.remove("tl-theme__force-sRGB");
      }
    }, [editor, container, forceSrgb, isDarkMode]);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useForceUpdate.mjs
  var import_react39 = __toESM(require_react(), 1);
  function useForceUpdate() {
    const [_, ss] = (0, import_react39.useState)(0);
    (0, import_react39.useEffect)(() => ss((s) => s + 1), []);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useLocalStore.mjs
  var import_react41 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/config/createTLStore.mjs
  var defaultAssetResolve = (asset) => asset.props.src;
  var inlineBase64AssetStore = {
    upload: (_, file) => FileHelpers.blobToDataUrl(file)
  };
  function createTLSchemaFromUtils(opts) {
    if ("schema" in opts && opts.schema) return opts.schema;
    return createTLSchema({
      shapes: "shapeUtils" in opts && opts.shapeUtils ? utilsToMap(checkShapesAndAddCore(opts.shapeUtils)) : void 0,
      bindings: "bindingUtils" in opts && opts.bindingUtils ? utilsToMap(checkBindings(opts.bindingUtils)) : void 0,
      migrations: "migrations" in opts ? opts.migrations : void 0
    });
  }
  function createTLStore({
    initialData,
    defaultName = "",
    id,
    assets = inlineBase64AssetStore,
    onMount,
    collaboration,
    ...rest
  } = {}) {
    const schema = createTLSchemaFromUtils(rest);
    const store = new Store({
      id,
      schema,
      initialData,
      props: {
        defaultName,
        assets: {
          upload: assets.upload,
          resolve: assets.resolve ?? defaultAssetResolve
        },
        onMount: (editor) => {
          assert(editor instanceof Editor);
          onMount?.(editor);
        },
        collaboration
      }
    });
    if (rest.snapshot) {
      if (initialData) throw new Error("Cannot provide both initialData and snapshot");
      loadSnapshot(store, rest.snapshot);
    }
    return store;
  }
  function utilsToMap(utils) {
    return Object.fromEntries(
      utils.map((s) => [
        s.type,
        {
          props: s.props,
          migrations: s.migrations
        }
      ])
    );
  }

  // node_modules/@tldraw/editor/dist-esm/lib/utils/sync/alerts.mjs
  function showCantWriteToIndexDbAlert() {
    window.alert(
      `Oops! We could not save changes to your browser's storage. We now need to reload the page and try again.

Keep seeing this message?
\u2022 If you're using tldraw in a private or "incognito" window, try loading tldraw in a regular window or in a different browser.
\u2022 If your hard disk is full, try clearing up some space and then reload the page.`
    );
  }
  function showCantReadFromIndexDbAlert() {
    window.alert(
      `Oops! We could not access your browser's storage\u2014and the app won't work correctly without that. We now need to reload the page and try again.

Keep seeing this message?
\u2022 If you're using tldraw in a private or "incognito" window, try loading tldraw in a regular window or in a different browser.`
    );
  }

  // node_modules/@tldraw/editor/dist-esm/lib/utils/sync/TLLocalSyncClient.mjs
  var PERSIST_THROTTLE_MS = 350;
  var PERSIST_RETRY_THROTTLE_MS = 1e4;
  var UPDATE_INSTANCE_STATE = Symbol("UPDATE_INSTANCE_STATE");
  var msg = (msg2) => msg2;
  var BroadcastChannelMock = class {
    onmessage;
    constructor(_name) {
    }
    postMessage(_msg) {
    }
    close() {
    }
  };
  var BC = typeof BroadcastChannel === "undefined" ? BroadcastChannelMock : BroadcastChannel;
  var TLLocalSyncClient = class {
    constructor(store, {
      persistenceKey,
      sessionId = TAB_ID,
      onLoad,
      onLoadError
    }, channel2 = new BC(`tldraw-tab-sync-${persistenceKey}`)) {
      this.store = store;
      this.channel = channel2;
      if (typeof window !== "undefined") {
        ;
        window.tlsync = this;
      }
      this.persistenceKey = persistenceKey;
      this.sessionId = sessionId;
      this.db = new LocalIndexedDb(persistenceKey);
      this.disposables.add(() => this.db.close());
      this.serializedSchema = this.store.schema.serialize();
      this.$sessionStateSnapshot = createSessionStateSnapshotSignal(this.store);
      this.disposables.add(
        // Set up a subscription to changes from the store: When
        // the store changes (and if the change was made by the user)
        // then immediately send the diff to other tabs via postMessage
        // and schedule a persist.
        store.listen(
          ({ changes }) => {
            this.diffQueue.push(changes);
            this.channel.postMessage(
              msg({
                type: "diff",
                storeId: this.store.id,
                changes,
                schema: this.serializedSchema
              })
            );
            this.schedulePersist();
          },
          { source: "user", scope: "document" }
        )
      );
      this.disposables.add(
        store.listen(
          () => {
            this.diffQueue.push(UPDATE_INSTANCE_STATE);
            this.schedulePersist();
          },
          { scope: "session" }
        )
      );
      this.connect(onLoad, onLoadError);
      this.documentTypes = new Set(
        Object.values(this.store.schema.types).filter((t2) => t2.scope === "document").map((t2) => t2.typeName)
      );
    }
    disposables = /* @__PURE__ */ new Set();
    diffQueue = [];
    didDispose = false;
    shouldDoFullDBWrite = true;
    isReloading = false;
    persistenceKey;
    sessionId;
    serializedSchema;
    isDebugging = false;
    documentTypes;
    $sessionStateSnapshot;
    /** @internal */
    db;
    initTime = Date.now();
    debug(...args) {
      if (this.isDebugging) {
        console.debug(...args);
      }
    }
    async connect(onLoad, onLoadError) {
      this.debug("connecting");
      let data;
      try {
        data = await this.db.load({ sessionId: this.sessionId });
      } catch (error) {
        onLoadError(error);
        showCantReadFromIndexDbAlert();
        return;
      }
      this.debug("loaded data from store", data, "didDispose", this.didDispose);
      if (this.didDispose) return;
      try {
        if (data) {
          const documentSnapshot = Object.fromEntries(data.records.map((r) => [r.id, r]));
          const sessionStateSnapshot = data.sessionStateSnapshot ?? extractSessionStateFromLegacySnapshot(documentSnapshot);
          const migrationResult = this.store.schema.migrateStoreSnapshot({
            store: documentSnapshot,
            // eslint-disable-next-line @typescript-eslint/no-deprecated
            schema: data.schema ?? this.store.schema.serializeEarliestVersion()
          });
          if (migrationResult.type === "error") {
            console.error("failed to migrate store", migrationResult);
            onLoadError(new Error(`Failed to migrate store: ${migrationResult.reason}`));
            return;
          }
          const records = Object.values(migrationResult.value).filter(
            (r) => this.documentTypes.has(r.typeName)
          );
          if (records.length > 0) {
            this.store.mergeRemoteChanges(() => {
              this.store.put(records, "initialize");
            });
          }
          if (sessionStateSnapshot) {
            loadSessionStateSnapshotIntoStore(this.store, sessionStateSnapshot);
          }
        }
        this.channel.onmessage = ({ data: data2 }) => {
          this.debug("got message", data2);
          const msg2 = data2;
          const res = this.store.schema.getMigrationsSince(msg2.schema);
          if (!res.ok) {
            const timeSinceInit = Date.now() - this.initTime;
            if (timeSinceInit < 5e3) {
              onLoadError(new Error("Schema mismatch, please close other tabs and reload the page"));
              return;
            }
            this.debug("reloading");
            this.isReloading = true;
            window?.location?.reload?.();
            return;
          } else if (res.value.length > 0) {
            this.debug("telling them to reload");
            this.channel.postMessage({ type: "announce", schema: this.serializedSchema });
            this.shouldDoFullDBWrite = true;
            this.persistIfNeeded();
            return;
          }
          if (msg2.type === "diff") {
            this.debug("applying diff");
            transact(() => {
              this.store.mergeRemoteChanges(() => {
                this.store.applyDiff(msg2.changes);
              });
            });
          }
        };
        this.channel.postMessage({ type: "announce", schema: this.serializedSchema });
        this.disposables.add(() => {
          this.channel.close();
        });
        onLoad(this);
      } catch (e) {
        this.debug("error loading data from store", e);
        if (this.didDispose) return;
        onLoadError(e);
        return;
      }
    }
    close() {
      this.debug("closing");
      this.didDispose = true;
      this.disposables.forEach((d) => d());
    }
    isPersisting = false;
    didLastWriteError = false;
    // eslint-disable-next-line no-restricted-globals
    scheduledPersistTimeout = null;
    /**
     * Schedule a persist. Persists don't happen immediately: they are throttled to avoid writing too
     * often, and will retry if failed.
     *
     * @internal
     */
    schedulePersist() {
      this.debug("schedulePersist", this.scheduledPersistTimeout);
      if (this.scheduledPersistTimeout) return;
      this.scheduledPersistTimeout = setTimeout(
        () => {
          this.scheduledPersistTimeout = null;
          this.persistIfNeeded();
        },
        this.didLastWriteError ? PERSIST_RETRY_THROTTLE_MS : PERSIST_THROTTLE_MS
      );
    }
    /**
     * Persist to IndexedDB only under certain circumstances:
     *
     * - If we're not already persisting
     * - If we're not reloading the page
     * - And we have something to persist (a full db write scheduled or changes in the diff queue)
     *
     * @internal
     */
    persistIfNeeded() {
      this.debug("persistIfNeeded", {
        isPersisting: this.isPersisting,
        isReloading: this.isReloading,
        shouldDoFullDBWrite: this.shouldDoFullDBWrite,
        diffQueueLength: this.diffQueue.length,
        storeIsPossiblyCorrupt: this.store.isPossiblyCorrupted()
      });
      if (this.scheduledPersistTimeout) {
        clearTimeout(this.scheduledPersistTimeout);
        this.scheduledPersistTimeout = null;
      }
      if (this.isPersisting) return;
      if (this.isReloading) return;
      if (this.store.isPossiblyCorrupted()) return;
      if (this.shouldDoFullDBWrite || this.diffQueue.length > 0) {
        this.doPersist();
      }
    }
    /**
     * Actually persist to IndexedDB. If the write fails, then we'll retry with a full db write after
     * a short delay.
     */
    async doPersist() {
      assert(!this.isPersisting, "persist already in progress");
      if (this.didDispose) return;
      this.isPersisting = true;
      this.debug("doPersist start");
      const diffQueue = this.diffQueue;
      this.diffQueue = [];
      try {
        if (this.shouldDoFullDBWrite) {
          this.shouldDoFullDBWrite = false;
          await this.db.storeSnapshot({
            schema: this.store.schema,
            snapshot: this.store.serialize(),
            sessionId: this.sessionId,
            sessionStateSnapshot: this.$sessionStateSnapshot.get()
          });
        } else {
          const diffs = squashRecordDiffs(
            diffQueue.filter((d) => d !== UPDATE_INSTANCE_STATE)
          );
          await this.db.storeChanges({
            changes: diffs,
            schema: this.store.schema,
            sessionId: this.sessionId,
            sessionStateSnapshot: this.$sessionStateSnapshot.get()
          });
        }
        this.didLastWriteError = false;
      } catch (e) {
        this.shouldDoFullDBWrite = true;
        this.didLastWriteError = true;
        console.error("failed to store changes in indexed db", e);
        showCantWriteToIndexDbAlert();
        if (typeof window !== "undefined") {
          window.location.reload();
        }
      }
      this.isPersisting = false;
      this.debug("doPersist end");
      this.schedulePersist();
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useRefState.mjs
  var import_react40 = __toESM(require_react(), 1);
  function useRefState(initialValue) {
    const ref = (0, import_react40.useRef)(initialValue);
    const [state, setState] = (0, import_react40.useState)(initialValue);
    if (state !== ref.current) {
      setState(ref.current);
    }
    const update = (0, import_react40.useCallback)((value) => {
      if (typeof value === "function") {
        ref.current = value(ref.current);
      } else {
        ref.current = value;
      }
      setState(ref.current);
    }, []);
    return [state, update];
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useLocalStore.mjs
  function useLocalStore(options) {
    const [state, setState] = useRefState({ status: "loading" });
    options = useShallowObjectIdentity(options);
    (0, import_react41.useEffect)(() => {
      const { persistenceKey, sessionId, ...rest } = options;
      if (!persistenceKey) {
        setState({
          status: "not-synced",
          store: createTLStore(rest)
        });
        return;
      }
      setState({ status: "loading" });
      const objectURLCache = new WeakCache();
      const assets = {
        upload: async (asset, file) => {
          await client.db.storeAsset(asset.id, file);
          return asset.id;
        },
        resolve: async (asset) => {
          if (!asset.props.src) return null;
          if (asset.props.src.startsWith("asset:")) {
            return await objectURLCache.get(asset, async () => {
              const blob = await client.db.getAsset(asset.id);
              if (!blob) return null;
              return URL.createObjectURL(blob);
            });
          }
          return asset.props.src;
        },
        ...rest.assets
      };
      const store = createTLStore({ ...rest, assets });
      let isClosed = false;
      const client = new TLLocalSyncClient(store, {
        sessionId,
        persistenceKey,
        onLoad() {
          if (isClosed) return;
          setState({ store, status: "synced-local" });
        },
        onLoadError(err) {
          if (isClosed) return;
          setState({ status: "error", error: err });
        }
      });
      return () => {
        isClosed = true;
        client.close();
      };
    }, [options, setState]);
    return state;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useZoomCss.mjs
  var React10 = __toESM(require_react(), 1);
  function useZoomCss() {
    const editor = useEditor();
    const container = useContainer();
    React10.useEffect(() => {
      const setScale = (s) => container.style.setProperty("--tl-zoom", s.toString());
      const setScaleDebounced = debounce(setScale, 100);
      const scheduler = new EffectScheduler("useZoomCss", () => {
        const numShapes = editor.getCurrentPageShapeIds().size;
        if (numShapes < 300) {
          setScale(editor.getZoomLevel());
        } else {
          setScaleDebounced(editor.getZoomLevel());
        }
      });
      scheduler.attach();
      scheduler.execute();
      return () => {
        scheduler.detach();
        setScaleDebounced.cancel();
      };
    }, [editor, container]);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/license/LicenseProvider.mjs
  var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
  var import_react42 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/utils/licensing.mjs
  function str2ab(str) {
    const buf = new ArrayBuffer(str.length);
    const bufView = new Uint8Array(buf);
    for (let i = 0, strLen = str.length; i < strLen; i++) {
      bufView[i] = str.charCodeAt(i);
    }
    return buf;
  }
  function importPublicKey(pemContents) {
    const binaryDerString = atob(pemContents);
    const binaryDer = str2ab(binaryDerString);
    return crypto.subtle.importKey(
      "spki",
      new Uint8Array(binaryDer),
      {
        name: "ECDSA",
        namedCurve: "P-256"
      },
      true,
      ["verify"]
    );
  }

  // node_modules/@tldraw/editor/dist-esm/lib/license/LicenseManager.mjs
  var GRACE_PERIOD_DAYS = 5;
  var FLAGS = {
    ANNUAL_LICENSE: 1,
    PERPETUAL_LICENSE: 2,
    INTERNAL_LICENSE: 4,
    WITH_WATERMARK: 8
  };
  var HIGHEST_FLAG = Math.max(...Object.values(FLAGS));
  var PROPERTIES = {
    ID: 0,
    HOSTS: 1,
    FLAGS: 2,
    EXPIRY_DATE: 3
  };
  var NUMBER_OF_KNOWN_PROPERTIES = Object.keys(PROPERTIES).length;
  var LICENSE_EMAIL = "sales@tldraw.com";
  var WATERMARK_TRACK_SRC = `${getDefaultCdnBaseUrl()}/watermarks/watermark-track.svg`;
  var LicenseManager = class {
    publicKey = "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEHJh0uUfxHtCGyerXmmatE368Hd9rI6LH9oPDQihnaCryRFWEVeOvf9U/SPbyxX74LFyJs5tYeAHq5Nc0Ax25LQ";
    isDevelopment;
    isTest;
    isCryptoAvailable;
    state = atom(
      "license state",
      "pending"
    );
    verbose = true;
    constructor(licenseKey, testPublicKey, testEnvironment) {
      this.isTest = false;
      this.isDevelopment = this.getIsDevelopment(testEnvironment);
      this.publicKey = testPublicKey || this.publicKey;
      this.isCryptoAvailable = !!crypto.subtle;
      this.getLicenseFromKey(licenseKey).then((result) => {
        const isUnlicensed = isEditorUnlicensed(result);
        if (!this.isDevelopment && isUnlicensed) {
          fetch(WATERMARK_TRACK_SRC);
        }
        if (isUnlicensed) {
          this.state.set("unlicensed");
        } else if (result.isLicensedWithWatermark) {
          this.state.set("licensed-with-watermark");
        } else {
          this.state.set("licensed");
        }
      });
    }
    getIsDevelopment(testEnvironment) {
      if (testEnvironment === "development") return true;
      if (testEnvironment === "production") return false;
      return window.location.protocol !== "https:";
    }
    async extractLicenseKey(licenseKey) {
      const [data, signature] = licenseKey.split(".");
      const [prefix, encodedData] = data.split("/");
      if (!prefix.startsWith("tldraw-")) {
        throw new Error(`Unsupported prefix '${prefix}'`);
      }
      const publicCryptoKey = await importPublicKey(this.publicKey);
      let isVerified;
      try {
        isVerified = await crypto.subtle.verify(
          {
            name: "ECDSA",
            hash: { name: "SHA-256" }
          },
          publicCryptoKey,
          new Uint8Array(str2ab(atob(signature))),
          new Uint8Array(str2ab(atob(encodedData)))
        );
      } catch (e) {
        console.error(e);
        throw new Error("Could not perform signature validation");
      }
      if (!isVerified) {
        throw new Error("Invalid signature");
      }
      let decodedData;
      try {
        decodedData = JSON.parse(atob(encodedData));
      } catch {
        throw new Error("Could not parse object");
      }
      if (decodedData.length > NUMBER_OF_KNOWN_PROPERTIES) {
        this.outputMessages([
          "License key contains some unknown properties.",
          "You may want to update tldraw packages to a newer version to get access to new functionality."
        ]);
      }
      return {
        id: decodedData[PROPERTIES.ID],
        hosts: decodedData[PROPERTIES.HOSTS],
        flags: decodedData[PROPERTIES.FLAGS],
        expiryDate: decodedData[PROPERTIES.EXPIRY_DATE]
      };
    }
    async getLicenseFromKey(licenseKey) {
      if (!licenseKey) {
        if (!this.isDevelopment) {
          this.outputNoLicenseKeyProvided();
        }
        return { isLicenseParseable: false, reason: "no-key-provided" };
      }
      if (this.isDevelopment && !this.isCryptoAvailable) {
        if (this.verbose) {
          console.log(
            "tldraw: you seem to be in a development environment that does not support crypto. License not verified."
          );
          console.log("You should check that this works in production separately.");
        }
        return { isLicenseParseable: false, reason: "has-key-development-mode" };
      }
      let cleanedLicenseKey = licenseKey.replace(/[\u200B-\u200D\uFEFF]/g, "");
      cleanedLicenseKey = cleanedLicenseKey.replace(/\r?\n|\r/g, "");
      try {
        const licenseInfo = await this.extractLicenseKey(cleanedLicenseKey);
        const expiryDate = new Date(licenseInfo.expiryDate);
        const isAnnualLicense = this.isFlagEnabled(licenseInfo.flags, FLAGS.ANNUAL_LICENSE);
        const isPerpetualLicense = this.isFlagEnabled(licenseInfo.flags, FLAGS.PERPETUAL_LICENSE);
        const result = {
          license: licenseInfo,
          isLicenseParseable: true,
          isDevelopment: this.isDevelopment,
          isDomainValid: this.isDomainValid(licenseInfo),
          expiryDate,
          isAnnualLicense,
          isAnnualLicenseExpired: isAnnualLicense && this.isAnnualLicenseExpired(expiryDate),
          isPerpetualLicense,
          isPerpetualLicenseExpired: isPerpetualLicense && this.isPerpetualLicenseExpired(expiryDate),
          isInternalLicense: this.isFlagEnabled(licenseInfo.flags, FLAGS.INTERNAL_LICENSE),
          isLicensedWithWatermark: this.isFlagEnabled(licenseInfo.flags, FLAGS.WITH_WATERMARK)
        };
        this.outputLicenseInfoIfNeeded(result);
        return result;
      } catch (e) {
        this.outputInvalidLicenseKey(e.message);
        return { isLicenseParseable: false, reason: "invalid-license-key" };
      }
    }
    isDomainValid(licenseInfo) {
      const currentHostname = window.location.hostname.toLowerCase();
      return licenseInfo.hosts.some((host) => {
        const normalizedHost = host.toLowerCase().trim();
        if (normalizedHost === currentHostname || `www.${normalizedHost}` === currentHostname || normalizedHost === `www.${currentHostname}`) {
          return true;
        }
        if (host === "*") {
          return true;
        }
        if (host.includes("*")) {
          const globToRegex = new RegExp(host.replace(/\*/g, ".*?"));
          return globToRegex.test(currentHostname) || globToRegex.test(`www.${currentHostname}`);
        }
        return false;
      });
    }
    getExpirationDateWithoutGracePeriod(expiryDate) {
      return new Date(expiryDate.getFullYear(), expiryDate.getMonth(), expiryDate.getDate());
    }
    getExpirationDateWithGracePeriod(expiryDate) {
      return new Date(
        expiryDate.getFullYear(),
        expiryDate.getMonth(),
        expiryDate.getDate() + GRACE_PERIOD_DAYS + 1
        // Add 1 day to include the expiration day
      );
    }
    isAnnualLicenseExpired(expiryDate) {
      const expiration = this.getExpirationDateWithGracePeriod(expiryDate);
      const isExpired = /* @__PURE__ */ new Date() >= expiration;
      if (!isExpired && /* @__PURE__ */ new Date() >= this.getExpirationDateWithoutGracePeriod(expiryDate)) {
        this.outputMessages([
          "tldraw license is about to expire, you are in a grace period.",
          `Please reach out to ${LICENSE_EMAIL} if you would like to renew your license.`
        ]);
      }
      return isExpired;
    }
    isPerpetualLicenseExpired(expiryDate) {
      const expiration = this.getExpirationDateWithGracePeriod(expiryDate);
      const dates = {
        major: new Date(publishDates.major),
        minor: new Date(publishDates.minor)
      };
      return dates.major >= expiration || dates.minor >= expiration;
    }
    isFlagEnabled(flags, flag) {
      return (flags & flag) === flag;
    }
    outputNoLicenseKeyProvided() {
    }
    outputInvalidLicenseKey(msg2) {
      this.outputMessages(["Invalid tldraw license key", `Reason: ${msg2}`]);
    }
    outputLicenseInfoIfNeeded(result) {
      if (result.isAnnualLicenseExpired) {
        this.outputMessages([
          "Your tldraw license has expired!",
          `Please reach out to ${LICENSE_EMAIL} to renew.`
        ]);
      }
      if (!result.isDomainValid && !result.isDevelopment) {
        this.outputMessages([
          "This tldraw license key is not valid for this domain!",
          `Please reach out to ${LICENSE_EMAIL} if you would like to use tldraw on other domains.`
        ]);
      }
      if (result.license.flags >= HIGHEST_FLAG * 2) {
        this.outputMessages([
          "This tldraw license contains some unknown flags.",
          "You may want to update tldraw packages to a newer version to get access to new functionality."
        ]);
      }
    }
    outputMessages(messages) {
      if (this.isTest) return;
      if (this.verbose) {
        this.outputDelimiter();
        for (const message of messages) {
          console.log(
            `%c${message}`,
            `color: white; background: crimson; padding: 2px; border-radius: 3px;`
          );
        }
        this.outputDelimiter();
      }
    }
    outputDelimiter() {
      console.log(
        "%c-------------------------------------------------------------------",
        `color: white; background: crimson; padding: 2px; border-radius: 3px;`
      );
    }
    static className = "tl-watermark_SEE-LICENSE";
  };
  function isEditorUnlicensed(result) {
    if (!result.isLicenseParseable) return true;
    if (!result.isDomainValid && !result.isDevelopment) return true;
    if (result.isPerpetualLicenseExpired || result.isAnnualLicenseExpired) {
      if (result.isInternalLicense) {
        throw new Error("License: Internal license expired.");
      }
      return true;
    }
    return false;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/license/LicenseProvider.mjs
  var LicenseContext = (0, import_react42.createContext)({});
  var useLicenseContext = () => (0, import_react42.useContext)(LicenseContext);
  function LicenseProvider({
    licenseKey,
    children
  }) {
    const [licenseManager] = (0, import_react42.useState)(() => new LicenseManager(licenseKey));
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(LicenseContext.Provider, { value: licenseManager, children });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/license/Watermark.mjs
  var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
  var import_react44 = __toESM(require_react(), 1);

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/usePassThroughWheelEvents.mjs
  var import_react43 = __toESM(require_react(), 1);
  function usePassThroughWheelEvents(ref) {
    if (!ref) throw Error("usePassThroughWheelEvents must be passed a ref");
    const container = useContainer();
    (0, import_react43.useEffect)(() => {
      function onWheel(e) {
        if (e.isSpecialRedispatchedEvent) return;
        preventDefault(e);
        const cvs = container.querySelector(".tl-canvas");
        if (!cvs) return;
        const newEvent = new WheelEvent("wheel", e);
        newEvent.isSpecialRedispatchedEvent = true;
        cvs.dispatchEvent(newEvent);
      }
      const elm = ref.current;
      if (!elm) return;
      elm.addEventListener("wheel", onWheel, { passive: false });
      return () => {
        elm.removeEventListener("wheel", onWheel);
      };
    }, [container, ref]);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/watermarks.mjs
  var watermarkDesktopSvg = '<svg xmlns="http://www.w3.org/2000/svg" width="3001" height="1000" fill="none"><path fill="#000" d="M590.656 300.449c0 49.706-40.294 90-90 90-49.705 0-90-40.294-90-90 0-49.705 40.295-90 90-90 49.706 0 90 40.295 90 90M569.431 719.011c-15.247 32.821-56.006 91.589-98.338 91.438-32.004-.115-38.642-30.904-17.414-50.856 17.381-16.337 28.246-48.075 31.995-72.719.415-2.728-1.556-5.197-4.272-5.679-39.666-7.04-70.746-40.877-70.746-83.417 0-48.23 38.983-87.329 87.07-87.329 39.936 0 70.172 22.237 83.369 52.397 18.839 43.055 7.117 115.733-11.664 156.165M2613.29 385.681V239.319c0-11.363 9.22-20.569 20.59-20.569h8.26c11.37 0 20.59 9.206 20.59 20.569v36.911c0 8.629 7 15.625 15.63 15.625h35.25c8.63 0 15.63-6.996 15.63-15.625v-36.911c0-11.363 9.22-20.569 20.59-20.569h8.17c11.37 0 20.59 9.206 20.59 20.569v146.362c0 11.363-9.22 20.569-20.59 20.569h-8.17c-11.37 0-20.59-9.206-20.59-20.569v-36.999c0-8.63-7-15.625-15.63-15.625h-35.25c-8.63 0-15.63 6.995-15.63 15.625v36.999c0 11.363-9.22 20.569-20.59 20.569h-8.26c-11.37 0-20.59-9.206-20.59-20.569M2391.97 239.319v146.362c0 11.348-9.16 20.569-20.49 20.569h-8.2c-11.33 0-20.49-9.221-20.49-20.569V239.319c0-11.348 9.16-20.569 20.49-20.569h8.2c11.33 0 20.49 9.221 20.49 20.569M2098.23 391.43l-42.69-146.361c-3.85-13.171 6.06-26.319 19.79-26.319h10.6c9.59 0 17.93 6.611 20.08 15.952l17.01 73.045c1.48 6.348 10.47 6.478 12.14.176l19.47-73.838c2.38-9.04 10.57-15.335 19.93-15.335h12.1c9.37 0 17.56 6.3 19.94 15.346l19.49 74.067c1.66 6.305 10.65 6.178 12.13-.171l17.09-73.294c2.15-9.339 10.49-15.948 20.08-15.948h10.53c13.72 0 23.63 13.141 19.79 26.31l-42.63 146.361c-2.56 8.789-10.63 14.829-19.79 14.829h-15.68c-9.12 0-17.16-5.98-19.76-14.709l-21.17-71.059c-1.77-5.948-10.19-5.957-11.97-.012l-21.33 71.071c-2.6 8.729-10.64 14.709-19.76 14.709h-15.59c-9.17 0-17.23-6.035-19.8-14.82M2443.23 218.75h118.59c11.38 0 20.62 9.195 20.62 20.557s-9.24 20.556-20.62 20.556h-24.79c-5.53 0-10 4.477-10 10v115.818c0 11.368-9.25 20.569-20.63 20.569h-7.65c-11.39 0-20.63-9.201-20.63-20.569V269.863c0-5.523-4.48-10-10-10h-24.89c-11.37 0-20.61-9.195-20.61-20.556s9.24-20.557 20.61-20.557M1174.15 218.75h24.64c8.35 0 15.88 5.042 19.04 12.764l34.61 83.942c2.13 5.161 9.44 5.155 11.56-.01l34.43-83.932a20.58 20.58 0 0 1 19.04-12.764h24.64c11.37 0 20.58 9.208 20.58 20.569v146.362c0 11.361-9.21 20.569-20.58 20.569h-7.09c-11.36 0-20.58-9.208-20.58-20.569l-.12-50.645c-.01-6.888-9.53-8.688-12.06-2.283l-23.46 59.332a20.57 20.57 0 0 1-19.14 13.009h-3.03a20.57 20.57 0 0 1-19.15-13.046l-23.47-59.68c-2.52-6.416-12.05-4.623-12.06 2.271l-.13 51.042c0 11.361-9.21 20.569-20.57 20.569h-7.1c-11.36 0-20.57-9.208-20.57-20.569V239.319c0-11.361 9.21-20.569 20.57-20.569"/><path fill="#000" fill-rule="evenodd" d="m1449.94 391.836 6.12-19.392a6.255 6.255 0 0 1 5.96-4.369l50.22-.061a6.24 6.24 0 0 1 5.96 4.348l6.23 19.486c2.71 8.581 10.71 14.402 19.74 14.402h9.34c14.13 0 24.15-13.791 19.61-27.151l-49.74-146.361c-2.85-8.37-10.74-13.988-19.61-13.988h-33.16c-8.87 0-16.77 5.618-19.61 13.988l-49.74 146.361c-4.54 13.36 5.48 27.151 19.61 27.151h9.32c9.04 0 17.04-5.827 19.75-14.414m31.1-98.858c1.85-5.807 10.08-5.796 11.91.016l8.83 27.916c1.28 4.028-1.73 8.134-5.96 8.134h-17.74c-4.23 0-7.24-4.119-5.95-8.151zM1681.81 406.25c18.91 0 35.39-3.686 49.36-11.168 13.97-7.544 24.73-18.394 32.24-32.489 7.56-14.105 11.29-30.866 11.29-50.182 0-19.256-3.73-35.957-11.29-50.004-7.57-14.094-18.35-24.912-32.32-32.397-13.91-7.545-30.4-11.26-49.37-11.26h-49.5c-11.38 0-20.63 9.201-20.63 20.569v146.362c0 11.368 9.25 20.569 20.63 20.569zm23.13-47.701c-6.62 3.215-14.85 4.886-24.79 4.886-10.49 0-19-8.507-19-19v-64.34c0-10.149 8.23-18.376 18.38-18.376 10.18 0 18.56 1.703 25.23 4.974 6.59 3.149 11.63 8.315 15.08 15.633 3.45 7.269 5.28 17.268 5.28 30.162 0 12.891-1.82 22.951-5.28 30.347-3.39 7.319-8.36 12.509-14.9 15.714" clip-rule="evenodd"/><path fill="#000" d="M1804.21 385.681V239.319c0-11.361 9.21-20.569 20.58-20.569h91.28c11.36 0 20.57 9.202 20.57 20.557s-9.21 20.556-20.57 20.556h-54.64a7.807 7.807 0 0 0-7.81 7.813v16.366a7.806 7.806 0 0 0 7.81 7.812h48.13c11.37 0 20.58 9.246 20.58 20.602s-9.21 20.601-20.58 20.601h-48.13a7.806 7.806 0 0 0-7.81 7.812v16.455a7.807 7.807 0 0 0 7.81 7.813h54.64c11.36 0 20.57 9.202 20.57 20.556s-9.21 20.557-20.57 20.557h-91.28c-11.37 0-20.58-9.208-20.58-20.569"/><path fill="#000" fill-rule="evenodd" d="M2875.5 68.75h-2750c-31.066 0-56.25 25.184-56.25 56.25v750c0 31.066 25.184 56.25 56.25 56.25h2750c31.07 0 56.25-25.184 56.25-56.25V125c0-31.066-25.18-56.25-56.25-56.25M125.5 0C56.464 0 .5 55.964.5 125v750c0 69.036 55.965 125 125 125h2750c69.04 0 125-55.964 125-125V125c0-69.036-55.96-125-125-125z" clip-rule="evenodd"/><path fill="#000" d="M2476.06 804.813c-10.54 0-19.82-6.947-22.81-17.068L2390.79 575.7c-4.49-15.248 6.92-30.534 22.8-30.534h27.75c11.1 0 20.72 7.686 23.18 18.52L2489 671.402c2.07 9.093 14.93 9.321 17.32.308l28.83-108.844c2.76-10.435 12.19-17.7 22.98-17.7h25.17c10.8 0 20.25 7.293 22.99 17.755l28.27 107.739c2.36 9.001 15.18 8.829 17.3-.232l25.01-106.888c2.51-10.763 12.1-18.374 23.14-18.374h27.87c15.88 0 27.29 15.286 22.8 30.534l-62.46 212.045a23.78 23.78 0 0 1-22.81 17.068h-32.12c-10.39 0-19.58-6.763-22.69-16.696l-32.08-102.694c-2.62-8.397-14.51-8.331-17.04.095l-30.74 102.346c-3.02 10.061-12.27 16.949-22.76 16.949zM1742.44 804.813h-75.81c-13.09 0-23.71-10.656-23.71-23.801V568.967c0-13.145 10.62-23.801 23.71-23.801h74.8c26.6 0 49.59 5.198 68.95 15.594 19.45 10.312 34.44 25.187 44.96 44.627 10.61 19.355 15.91 42.556 15.91 69.602q0 40.57-15.78 69.73c-10.53 19.355-25.43 34.231-44.71 44.627-19.28 10.311-42.05 15.467-68.32 15.467m-29.3-83.642c0 13.145 10.61 23.801 23.71 23.801h3.06c12.8 0 23.7-2.07 32.71-6.212 9.09-4.141 16-11.283 20.71-21.426q7.2-15.213 7.2-42.345 0-27.13-7.32-42.344c-4.8-10.143-11.87-17.285-21.22-21.426-9.26-4.142-20.63-6.212-34.1-6.212h-1.04c-13.1 0-23.71 10.656-23.71 23.801zM1460.86 804.813c-13.12 0-23.76-10.656-23.76-23.801V568.967c0-13.145 10.64-23.801 23.76-23.801h22.84c13.13 0 23.76 10.656 23.76 23.801v155.247c0 13.145 10.64 23.801 23.76 23.801h57.27c13.12 0 23.76 10.656 23.76 23.801v9.196c0 13.145-10.64 23.801-23.76 23.801zM1204.45 601.964c-13.13 0-23.77-10.656-23.77-23.801v-9.196c0-13.145 10.64-23.801 23.77-23.801h177.89c13.13 0 23.78 10.656 23.78 23.801v9.196c0 13.145-10.65 23.801-23.78 23.801h-39.38c-8.21 0-14.86 6.66-14.86 14.875v164.173c0 13.145-10.64 23.801-23.78 23.801h-21.85c-13.13 0-23.78-10.656-23.78-23.801V616.839c0-8.215-6.65-14.875-14.86-14.875z"/><path fill="#000" fill-rule="evenodd" d="M2223.05 787.891c-3.02 10.047-12.27 16.922-22.74 16.922h-25.43c-16.19 0-27.64-15.862-22.57-31.261l69.88-212.045c3.21-9.753 12.31-16.341 22.56-16.341h61.84c10.25 0 19.35 6.588 22.56 16.341l69.87 212.045c5.08 15.399-6.37 31.261-22.56 31.261h-25.43c-10.48 0-19.72-6.875-22.74-16.922l-6.7-22.2a14.84 14.84 0 0 0-14.21-10.576h-63.42c-6.55 0-12.32 4.296-14.22 10.576zm76.13-96.945-14.13-48.436c-2.46-8.451-14.36-8.602-17.04-.217l-15.46 48.436c-1.84 5.759 2.45 11.645 8.48 11.645h29.6c5.94 0 10.22-5.715 8.55-11.428" clip-rule="evenodd"/><path fill="#000" d="M1939.6 804.813c-13.13 0-23.77-10.656-23.77-23.801V568.967c0-13.145 10.64-23.801 23.77-23.801h88.13c19.24 0 36.08 3.508 50.51 10.523s25.65 17.115 33.67 30.3q12.03 19.779 12.03 47.416c0 18.595-4.14 34.273-12.41 47.036-7.64 11.913-18.18 21.101-31.63 27.564-16.98 8.159-36 11.104-54.7 11.104h-43.07c-76.56 0 4.08-135.84 4.08-84.706v7.996c0 12.117 9.81 21.941 21.91 21.941 8.12 0 16.3-.345 24.04-3.043 5.91-2.113 10.43-5.451 13.55-10.015 3.2-4.565 4.81-10.523 4.81-17.877 0-7.437-1.61-13.481-4.81-18.129-3.12-4.733-7.64-8.199-13.55-10.396-7.05-2.766-14.67-3.423-22.18-3.423-13.13 0-23.77 10.656-23.77 23.801v47.71c0 11.825 11.14 16.003 19.91 20.752 12.31 6.671 7.58 25.389-6.42 25.389-7.45 0-13.49 6.048-13.49 13.508v48.395c0 13.145-10.63 23.801-23.76 23.801zm134.89-106.758 5.41 9.95 33.51 61.622c8.62 15.86-2.84 35.186-20.87 35.186h-22.27c-8.74 0-16.77-4.798-20.92-12.496l-35.05-65.04a15.52 15.52 0 0 0-13.66-8.168c-42.24 0 40.62-82.154 73.85-21.054M931.652 0h68.748v1000h-68.748z"/></svg>';
  var watermarkMobileSvg = '<svg xmlns="http://www.w3.org/2000/svg" width="400" height="1601" fill="none"><path fill="#000" d="M72 1319.8c0-10.73 7.071-20.18 17.372-23.22l215.823-63.62c15.519-4.57 31.078 7.05 31.078 23.22v28.26c0 11.31-7.824 21.1-18.85 23.61l-109.636 24.94c-9.254 2.1-9.487 15.2-.313 17.63l110.784 29.37a24.21 24.21 0 0 1 18.015 23.4v25.64c0 11-7.423 20.62-18.071 23.41l-109.659 28.79c-9.162 2.41-8.986 15.47.236 17.63l108.792 25.46c10.955 2.56 18.702 12.33 18.702 23.57v28.39c0 16.17-15.559 27.79-31.078 23.22l-215.823-63.62c-10.3-3.04-17.372-12.49-17.372-23.22v-32.72c0-10.59 6.883-19.95 16.994-23.11l104.523-32.67c8.547-2.67 8.479-14.79-.096-17.36l-104.17-31.3C79.01 1372.42 72 1363 72 1352.31zM72 572.638V495.43c0-13.336 10.846-24.147 24.225-24.147h215.823c13.379 0 24.225 10.811 24.225 24.147v76.179q0 40.645-15.872 70.228-15.743 29.712-45.422 45.79-29.55 16.206-70.843 16.206-41.292 0-70.971-16.078-29.55-16.077-45.422-45.532Q72 612.767 72 572.638m85.132-29.84c-13.379 0-24.225 10.81-24.225 24.146v3.122q0 19.55 6.323 33.313 6.323 13.89 21.807 21.094 15.485 7.332 43.099 7.331t43.1-7.46q15.484-7.33 21.807-21.608 6.323-14.15 6.323-34.728v-1.064c0-13.336-10.846-24.146-24.225-24.146zM72 285.858c0-13.363 10.846-24.197 24.225-24.197h215.823c13.379 0 24.225 10.834 24.225 24.197v23.27c0 13.364-10.846 24.197-24.225 24.197H154.035c-13.379 0-24.225 10.834-24.225 24.197v58.328c0 13.364-10.846 24.197-24.225 24.197h-9.36C82.845 440.047 72 429.214 72 415.85zM278.463 24.72c0-13.374 10.846-24.216 24.225-24.216h9.36c13.379 0 24.225 10.842 24.225 24.216v181.174c0 13.374-10.846 24.216-24.225 24.216h-9.36c-13.379 0-24.225-10.842-24.225-24.216v-40.108c0-8.359-6.779-15.135-15.141-15.135H96.225c-13.38 0-24.225-10.842-24.225-24.216v-22.256c0-13.374 10.846-24.216 24.225-24.216h167.097c8.362 0 15.141-6.776 15.141-15.135z"/><path fill="#000" fill-rule="evenodd" d="M89.224 1062.13C78.997 1059.04 72 1049.63 72 1038.96v-25.9c0-16.486 16.145-28.147 31.818-22.979l215.823 71.169a24.19 24.19 0 0 1 16.632 22.98v62.97c0 10.45-6.706 19.71-16.632 22.98l-215.823 71.17C88.145 1246.51 72 1234.86 72 1218.37v-25.9c0-10.67 6.997-20.08 17.224-23.17l22.595-6.81a15.13 15.13 0 0 0 10.765-14.48v-64.59a15.13 15.13 0 0 0-10.765-14.48zm98.672 77.53 49.299-14.39c8.601-2.51 8.755-14.62.22-17.35l-49.299-15.75c-5.861-1.88-11.852 2.49-11.852 8.64v30.14c0 6.05 5.817 10.41 11.632 8.71" clip-rule="evenodd"/><path fill="#000" d="M72 773.439c0-13.367 10.846-24.203 24.225-24.203h215.823c13.379 0 24.225 10.836 24.225 24.203v89.762q0 29.395-10.711 51.439-10.71 22.046-30.84 34.293t-48.261 12.248q-28.388 0-47.873-12.635-18.187-11.672-28.056-32.218c-8.303-17.289-11.301-36.661-11.301-55.705v-43.867c0-77.976 138.26 4.16 86.215 4.16h-8.138c-12.334 0-22.332 9.989-22.332 22.311 0 8.269.351 16.6 3.097 24.487q3.225 9.024 10.194 13.794 6.968 4.899 18.194 4.899 11.356 0 18.453-4.899 7.226-4.77 10.581-13.794c2.815-7.188 3.484-14.944 3.484-22.596 0-13.366-10.846-24.202-24.225-24.202h-48.56c-12.036 0-16.288 11.345-21.122 20.272-6.79 12.539-25.841 7.72-25.841-6.536 0-7.586-6.156-13.736-13.749-13.736H96.225C82.845 820.916 72 810.08 72 796.714zm108.66 137.378-10.128 5.511-62.72 34.131C91.67 959.243 72 947.569 72 929.205V906.52a24.2 24.2 0 0 1 12.719-21.299l66.199-35.696a15.82 15.82 0 0 0 8.313-13.921c0-43.012 83.618 41.371 21.429 75.213"/></svg>';

  // node_modules/@tldraw/editor/dist-esm/lib/license/useLicenseManagerState.mjs
  function useLicenseManagerState(licenseManager) {
    return useValue("watermarkState", () => licenseManager.state.get(), [licenseManager]);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/license/Watermark.mjs
  var WATERMARK_DESKTOP_LOCAL_SRC = `data:image/svg+xml;utf8,${encodeURIComponent(watermarkDesktopSvg)}`;
  var WATERMARK_MOBILE_LOCAL_SRC = `data:image/svg+xml;utf8,${encodeURIComponent(watermarkMobileSvg)}`;
  var Watermark = (0, import_react44.memo)(function Watermark2() {
    const licenseManager = useLicenseContext();
    const editor = useEditor();
    const isMobile = useValue("is mobile", () => editor.getViewportScreenBounds().width < 700, [
      editor
    ]);
    const licenseManagerState = useLicenseManagerState(licenseManager);
    if (!["licensed-with-watermark", "unlicensed"].includes(licenseManagerState)) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(import_jsx_runtime35.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(LicenseStyles, {}),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(WatermarkInner, { src: isMobile ? WATERMARK_MOBILE_LOCAL_SRC : WATERMARK_DESKTOP_LOCAL_SRC })
    ] });
  });
  var WatermarkInner = (0, import_react44.memo)(function WatermarkInner2({ src }) {
    const editor = useEditor();
    const isDebugMode = useValue("debug mode", () => editor.getInstanceState().isDebugMode, [editor]);
    const isMobile = useValue("is mobile", () => editor.getViewportScreenBounds().width < 700, [
      editor
    ]);
    const events = useCanvasEvents();
    const ref = (0, import_react44.useRef)(null);
    usePassThroughWheelEvents(ref);
    const maskCss = `url('${src}') center 100% / 100% no-repeat`;
    const url = "https://tldraw.dev";
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
      "div",
      {
        ref,
        className: LicenseManager.className,
        "data-debug": isDebugMode,
        "data-mobile": isMobile,
        draggable: false,
        ...events,
        children: tlenv.isWebview ? /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
          "a",
          {
            draggable: false,
            role: "button",
            onPointerDown: (e) => {
              stopEventPropagation(e);
              preventDefault(e);
            },
            onClick: () => runtime.openWindow(url, "_blank"),
            style: { mask: maskCss, WebkitMask: maskCss }
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
          "a",
          {
            href: url,
            target: "_blank",
            rel: "noreferrer",
            draggable: false,
            onPointerDown: (e) => {
              stopEventPropagation(e);
            },
            style: { mask: maskCss, WebkitMask: maskCss }
          }
        )
      }
    );
  });
  var LicenseStyles = (0, import_react44.memo)(function LicenseStyles2() {
    const className = LicenseManager.className;
    const CSS2 = `/* ------------------- SEE LICENSE -------------------
The tldraw watermark is part of tldraw's license. It is shown for unlicensed
or "licensed-with-watermark" users. By using this library, you agree to
preserve the watermark's behavior, keeping it visible, unobscured, and
available to user-interaction.

To remove the watermark, please purchase a license at tldraw.dev.
*/

	.${className} {
		position: absolute;
		bottom: var(--space-2);
		right: var(--space-2);
		width: 96px;
		height: 32px;
		display: flex;
		align-items: center;
		justify-content: center;
		z-index: var(--layer-watermark) !important;
		background-color: color-mix(in srgb, var(--color-background) 62%, transparent);
		opacity: 1;
		border-radius: 5px;
		pointer-events: all;
		padding: 2px;
		box-sizing: content-box;
	}

	.${className} > a {
		position: absolute;
		width: 96px;
		height: 32px;
		pointer-events: all;
		cursor: inherit;
		color: var(--color-text);
		opacity: .38;
		background-color: currentColor;
	}

	.${className}[data-debug='true'] {
		bottom: 46px;
	}

	.${className}[data-mobile='true'] {
		border-radius: 4px 0px 0px 4px;
		right: -2px;
		width: 8px;
		height: 48px;
	}

	.${className}[data-mobile='true'] > a {
		width: 8px;
		height: 32px;
	}

	@media (hover: hover) {
		.${className} > a {
			pointer-events: none;
		}

		.${className}:hover {
			background-color: var(--color-background);
			transition: background-color 0.2s ease-in-out;
			transition-delay: 0.32s;
		}

		.${className}:hover > a {
			animation: delayed_link 0.2s forwards ease-in-out;
			animation-delay: 0.32s;
		}
	}

	@keyframes delayed_link {
		0% {
			cursor: inherit;
			opacity: .38;
			pointer-events: none;
		}
		100% {
			cursor: pointer;
			opacity: 1;
			pointer-events: all;
		}
	}`;
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("style", { children: CSS2 });
  });

  // node_modules/@tldraw/editor/dist-esm/lib/TldrawEditor.mjs
  var EMPTY_SHAPE_UTILS_ARRAY = [];
  var EMPTY_BINDING_UTILS_ARRAY = [];
  var EMPTY_TOOLS_ARRAY = [];
  var TL_CONTAINER_CLASS = "tl-container";
  var TldrawEditor = (0, import_react45.memo)(function TldrawEditor2({
    store,
    components,
    className,
    user: _user,
    options: _options,
    ...rest
  }) {
    const [container, setContainer] = (0, import_react45.useState)(null);
    const user = (0, import_react45.useMemo)(() => _user ?? createTLUser(), [_user]);
    const ErrorFallback = components?.ErrorFallback === void 0 ? DefaultErrorFallback : components?.ErrorFallback;
    const withDefaults = {
      ...rest,
      shapeUtils: rest.shapeUtils ?? EMPTY_SHAPE_UTILS_ARRAY,
      bindingUtils: rest.bindingUtils ?? EMPTY_BINDING_UTILS_ARRAY,
      tools: rest.tools ?? EMPTY_TOOLS_ARRAY,
      components,
      options: useShallowObjectIdentity(_options)
    };
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      "div",
      {
        ref: setContainer,
        "data-tldraw": version,
        draggable: false,
        className: (0, import_classnames11.default)(`${TL_CONTAINER_CLASS} tl-theme__light`, className),
        onPointerDown: stopEventPropagation,
        tabIndex: -1,
        children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
          OptionalErrorBoundary,
          {
            fallback: ErrorFallback,
            onError: (error) => annotateError(error, { tags: { origin: "react.tldraw-before-app" } }),
            children: container && /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(LicenseProvider, { licenseKey: rest.licenseKey, children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(ContainerProvider, { container, children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(EditorComponentsProvider, { overrides: components, children: store ? store instanceof Store ? (
              // Store is ready to go, whether externally synced or not
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(TldrawEditorWithReadyStore, { ...withDefaults, store, user })
            ) : (
              // Store is a synced store, so handle syncing stages internally
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(TldrawEditorWithLoadingStore, { ...withDefaults, store, user })
            ) : (
              // We have no store (it's undefined) so create one and possibly sync it
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(TldrawEditorWithOwnStore, { ...withDefaults, store, user })
            ) }) }) })
          }
        )
      }
    );
  });
  function TldrawEditorWithOwnStore(props) {
    const {
      defaultName,
      snapshot,
      initialData,
      shapeUtils,
      bindingUtils,
      persistenceKey,
      sessionId,
      user,
      assets,
      migrations
    } = props;
    const syncedStore = useLocalStore({
      shapeUtils,
      bindingUtils,
      initialData,
      persistenceKey,
      sessionId,
      defaultName,
      snapshot,
      assets,
      migrations
    });
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(TldrawEditorWithLoadingStore, { ...props, store: syncedStore, user });
  }
  var TldrawEditorWithLoadingStore = (0, import_react45.memo)(function TldrawEditorBeforeLoading({
    store,
    user,
    ...rest
  }) {
    const container = useContainer();
    (0, import_react45.useLayoutEffect)(() => {
      if (user.userPreferences.get().colorScheme === "dark") {
        container.classList.remove("tl-theme__light");
        container.classList.add("tl-theme__dark");
      }
    }, [container, user]);
    const { LoadingScreen: LoadingScreen2 } = useEditorComponents();
    switch (store.status) {
      case "error": {
        throw store.error;
      }
      case "loading": {
        return LoadingScreen2 ? /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(LoadingScreen2, {}) : null;
      }
      case "not-synced": {
        break;
      }
      case "synced-local": {
        break;
      }
      case "synced-remote": {
        break;
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(TldrawEditorWithReadyStore, { ...rest, store: store.store, user });
  });
  var noAutoFocus = () => document.location.search.includes("tldraw_preserve_focus");
  function TldrawEditorWithReadyStore({
    onMount,
    children,
    store,
    tools,
    shapeUtils,
    bindingUtils,
    user,
    initialState: initialState2,
    autoFocus = true,
    inferDarkMode,
    cameraOptions,
    options,
    licenseKey,
    deepLinks: _deepLinks,
    isShapeHidden
  }) {
    const { ErrorFallback } = useEditorComponents();
    const container = useContainer();
    const [editor, setEditor] = useRefState(null);
    const canvasRef = (0, import_react45.useRef)(null);
    const deepLinks = useShallowObjectIdentity(_deepLinks === true ? {} : _deepLinks);
    const editorOptionsRef = (0, import_react45.useRef)({
      // for these, it's because they're only used when the editor first mounts:
      autoFocus: autoFocus && !noAutoFocus(),
      inferDarkMode,
      initialState: initialState2,
      // for these, it's because we keep them up to date in a separate effect:
      cameraOptions,
      deepLinks
    });
    (0, import_react45.useLayoutEffect)(() => {
      editorOptionsRef.current = {
        autoFocus: autoFocus && !noAutoFocus(),
        inferDarkMode,
        initialState: initialState2,
        cameraOptions,
        deepLinks
      };
    }, [autoFocus, inferDarkMode, initialState2, cameraOptions, deepLinks]);
    (0, import_react45.useLayoutEffect)(
      () => {
        const { autoFocus: autoFocus2, inferDarkMode: inferDarkMode2, initialState: initialState22, cameraOptions: cameraOptions2, deepLinks: deepLinks2 } = editorOptionsRef.current;
        const editor2 = new Editor({
          store,
          shapeUtils,
          bindingUtils,
          tools,
          getContainer: () => container,
          user,
          initialState: initialState22,
          // we should check for some kind of query parameter that turns off autofocus
          autoFocus: autoFocus2,
          inferDarkMode: inferDarkMode2,
          cameraOptions: cameraOptions2,
          options,
          licenseKey,
          isShapeHidden
        });
        editor2.updateViewportScreenBounds(canvasRef.current ?? container);
        if (deepLinks2) {
          if (!deepLinks2?.getUrl) {
            editor2.navigateToDeepLink(deepLinks2);
          } else {
            editor2.navigateToDeepLink({ ...deepLinks2, url: deepLinks2.getUrl(editor2) });
          }
        }
        setEditor(editor2);
        return () => {
          editor2.dispose();
        };
      },
      // if any of these change, we need to recreate the editor.
      [
        bindingUtils,
        container,
        options,
        shapeUtils,
        store,
        tools,
        user,
        setEditor,
        licenseKey,
        isShapeHidden
      ]
    );
    (0, import_react45.useLayoutEffect)(() => {
      if (!editor) return;
      if (deepLinks) {
        return editor.registerDeepLinkListener(deepLinks);
      }
    }, [editor, deepLinks]);
    (0, import_react45.useLayoutEffect)(() => {
      if (editor && cameraOptions) {
        editor.setCameraOptions(cameraOptions);
      }
    }, [editor, cameraOptions]);
    const crashingError = (0, import_react45.useSyncExternalStore)(
      (0, import_react45.useCallback)(
        (onStoreChange) => {
          if (editor) {
            editor.on("crash", onStoreChange);
            return () => editor.off("crash", onStoreChange);
          }
          return () => {
          };
        },
        [editor]
      ),
      () => editor?.getCrashingError() ?? null
    );
    (0, import_react45.useEffect)(
      function handleFocusOnPointerDownForPreserveFocusMode() {
        if (!editor) return;
        function handleFocusOnPointerDown() {
          if (!editor) return;
          editor.focus();
        }
        function handleBlurOnPointerDown() {
          if (!editor) return;
          editor.blur();
        }
        if (autoFocus && noAutoFocus()) {
          editor.getContainer().addEventListener("pointerdown", handleFocusOnPointerDown);
          document.body.addEventListener("pointerdown", handleBlurOnPointerDown);
          return () => {
            editor.getContainer()?.removeEventListener("pointerdown", handleFocusOnPointerDown);
            document.body.removeEventListener("pointerdown", handleBlurOnPointerDown);
          };
        }
      },
      [editor, autoFocus]
    );
    const { Canvas } = useEditorComponents();
    if (!editor) {
      return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("div", { className: "tl-canvas", ref: canvasRef });
    }
    return (
      // the top-level tldraw component also renders an error boundary almost
      // identical to this one. the reason we have two is because this one has
      // access to `App`, which means that here we can enrich errors with data
      // from app for reporting, and also still attempt to render the user's
      // document in the event of an error to reassure them that their work is
      // not lost.
      /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(OptionalErrorBoundary, {
        fallback: ErrorFallback,
        onError: (error) => editor.annotateError(error, { origin: "react.tldraw", willCrashApp: true }),
        children: crashingError ? /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(Crash, { crashingError }) : /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(EditorProvider, { editor, children: /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(Layout, { onMount, children: [
          children ?? (Canvas ? /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(Canvas, {}, editor.contextId) : null),
          /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(Watermark, {})
        ] }) })
      })
    );
  }
  function Layout({ children, onMount }) {
    useZoomCss();
    useCursor();
    useDarkMode();
    useForceUpdate();
    useOnMount((editor) => {
      const teardownStore = editor.store.props.onMount(editor);
      const teardownCallback = onMount?.(editor);
      return () => {
        teardownStore?.();
        teardownCallback?.();
      };
    });
    return children;
  }
  function Crash({ crashingError }) {
    throw crashingError;
  }
  function LoadingScreen({ children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("div", { className: "tl-loading", children });
  }
  function ErrorScreen({ children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("div", { className: "tl-loading", children });
  }
  function useOnMount(onMount) {
    const editor = useEditor();
    const onMountEvent = useEvent((editor2) => {
      let teardown = void 0;
      editor2.run(
        () => {
          teardown = onMount?.(editor2);
          editor2.emit("mount");
        },
        { history: "ignore" }
      );
      window.tldrawReady = true;
      return teardown;
    });
    import_react45.default.useLayoutEffect(() => {
      if (editor) return onMountEvent?.(editor);
    }, [editor, onMountEvent]);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/components/HTMLContainer.mjs
  var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
  var import_classnames12 = __toESM(require_classnames(), 1);
  function HTMLContainer({ children, className = "", ...rest }) {
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { ...rest, className: (0, import_classnames12.default)("tl-html-container", className), children });
  }

  // node_modules/@tldraw/editor/dist-esm/lib/editor/bindings/BindingUtil.mjs
  var BindingUtil = class {
    constructor(editor) {
      this.editor = editor;
    }
    static props;
    static migrations;
    /**
     * The type of the binding util, which should match the binding's type.
     *
     * @public
     */
    static type;
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/shared/resizeBox.mjs
  function resizeBox(shape, info, opts = {}) {
    const { newPoint, handle, scaleX, scaleY } = info;
    const { minWidth = 1, maxWidth: maxWidth2 = Infinity, minHeight = 1, maxHeight: maxHeight2 = Infinity } = opts;
    let w = shape.props.w * scaleX;
    let h = shape.props.h * scaleY;
    const offset4 = new Vec(0, 0);
    if (w > 0) {
      if (w < minWidth) {
        switch (handle) {
          case "top_left":
          case "left":
          case "bottom_left": {
            offset4.x = w - minWidth;
            break;
          }
          case "top":
          case "bottom": {
            offset4.x = (w - minWidth) / 2;
            break;
          }
          default: {
            offset4.x = 0;
          }
        }
        w = minWidth;
      }
    } else {
      offset4.x = w;
      w = -w;
      if (w < minWidth) {
        switch (handle) {
          case "top_left":
          case "left":
          case "bottom_left": {
            offset4.x = -w;
            break;
          }
          default: {
            offset4.x = -minWidth;
          }
        }
        w = minWidth;
      }
    }
    if (h > 0) {
      if (h < minHeight) {
        switch (handle) {
          case "top_left":
          case "top":
          case "top_right": {
            offset4.y = h - minHeight;
            break;
          }
          case "right":
          case "left": {
            offset4.y = (h - minHeight) / 2;
            break;
          }
          default: {
            offset4.y = 0;
          }
        }
        h = minHeight;
      }
    } else {
      offset4.y = h;
      h = -h;
      if (h < minHeight) {
        switch (handle) {
          case "top_left":
          case "top":
          case "top_right": {
            offset4.y = -h;
            break;
          }
          default: {
            offset4.y = -minHeight;
          }
        }
        h = minHeight;
      }
    }
    const { x, y } = offset4.rot(shape.rotation).add(newPoint);
    return {
      ...shape,
      x,
      y,
      props: {
        w: Math.min(maxWidth2, w),
        h: Math.min(maxHeight2, h)
      }
    };
  }

  // node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/BaseBoxShapeUtil.mjs
  var BaseBoxShapeUtil = class extends ShapeUtil {
    getGeometry(shape) {
      return new Rectangle2d({
        width: shape.props.w,
        height: shape.props.h,
        isFilled: true
      });
    }
    onResize(shape, info) {
      return resizeBox(shape, info);
    }
    getHandleSnapGeometry(shape) {
      return {
        points: this.getGeometry(shape).bounds.cornersAndCenter
      };
    }
    getInterpolatedProps(startShape, endShape, t2) {
      return {
        ...endShape.props,
        w: lerp(startShape.props.w, endShape.props.w, t2),
        h: lerp(startShape.props.h, endShape.props.h, t2)
      };
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/tools/BaseBoxShapeTool/children/Idle.mjs
  var Idle = class extends StateNode {
    static id = "idle";
    onPointerDown(info) {
      this.parent.transition("pointing", info);
    }
    onEnter() {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    }
    onCancel() {
      this.editor.setCurrentTool("select");
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/editor/tools/BaseBoxShapeTool/children/Pointing.mjs
  var Pointing = class extends StateNode {
    static id = "pointing";
    onPointerMove(info) {
      if (this.editor.inputs.isDragging) {
        const { originPagePoint } = this.editor.inputs;
        const shapeType = this.parent.shapeType;
        const id = createShapeId();
        const creatingMarkId = this.editor.markHistoryStoppingPoint(`creating_box:${id}`);
        const newPoint = maybeSnapToGrid(originPagePoint, this.editor);
        this.editor.createShapes([
          {
            id,
            type: shapeType,
            x: newPoint.x,
            y: newPoint.y,
            props: {
              w: 1,
              h: 1
            }
          }
        ]).select(id);
        const parent = this.parent;
        this.editor.setCurrentTool(
          "select.resizing",
          {
            ...info,
            target: "selection",
            handle: "bottom_right",
            isCreating: true,
            creatingMarkId,
            creationCursorOffset: { x: 1, y: 1 },
            onInteractionEnd: this.parent.id,
            onCreate: parent.onCreate ? (shape) => parent.onCreate?.(shape) : void 0
          }
          /** satisfies ResizingInfo, defined in main tldraw package 😧 */
        );
      }
    }
    onPointerUp() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.complete();
    }
    onInterrupt() {
      this.cancel();
    }
    complete() {
      const { originPagePoint } = this.editor.inputs;
      const shapeType = this.parent.shapeType;
      const id = createShapeId();
      this.editor.markHistoryStoppingPoint(`creating_box:${id}`);
      this.editor.createShapes([
        {
          id,
          type: shapeType,
          x: originPagePoint.x,
          y: originPagePoint.y
        }
      ]);
      const shape = this.editor.getShape(id);
      if (!shape) {
        this.cancel();
        return;
      }
      let { w, h } = shape.props;
      const delta = new Vec(w / 2, h / 2);
      const parentTransform = this.editor.getShapeParentTransform(shape);
      if (parentTransform) delta.rot(-parentTransform.rotation());
      let scale = 1;
      if (this.editor.user.getIsDynamicResizeMode()) {
        scale = 1 / this.editor.getZoomLevel();
        w *= scale;
        h *= scale;
        delta.mul(scale);
      }
      const next = structuredClone(shape);
      const newPoint = maybeSnapToGrid(new Vec(shape.x - delta.x, shape.y - delta.y), this.editor);
      next.x = newPoint.x;
      next.y = newPoint.y;
      next.props.w = w;
      next.props.h = h;
      if ("scale" in shape.props) {
        ;
        next.props.scale = scale;
      }
      this.editor.updateShape(next);
      this.editor.setSelectedShapes([id]);
      if (this.editor.getInstanceState().isToolLocked) {
        this.parent.transition("idle");
      } else {
        this.editor.setCurrentTool("select.idle");
      }
    }
    cancel() {
      this.parent.transition("idle");
    }
  };
  function maybeSnapToGrid(point, editor) {
    const isGridMode = editor.getInstanceState().isGridMode;
    const gridSize = editor.getDocumentSettings().gridSize;
    if (isGridMode) return point.clone().snapToGrid(gridSize);
    return point.clone();
  }

  // node_modules/@tldraw/editor/dist-esm/lib/editor/tools/BaseBoxShapeTool/BaseBoxShapeTool.mjs
  var BaseBoxShapeTool = class extends StateNode {
    static id = "box";
    static initial = "idle";
    static children() {
      return [Idle, Pointing];
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useGlobalMenuIsOpen.mjs
  var import_react46 = __toESM(require_react(), 1);
  function useGlobalMenuIsOpen(id, onChange, onEvent) {
    const rIsOpen = (0, import_react46.useRef)(false);
    const onOpenChange = (0, import_react46.useCallback)(
      (isOpen2) => {
        rIsOpen.current = isOpen2;
        if (isOpen2) {
          tlmenus.addOpenMenu(id);
        } else {
          tlmenus.deleteOpenMenu(id);
        }
        onChange?.(isOpen2);
      },
      [id, onChange]
    );
    const isOpen = useValue("is menu open", () => tlmenus.getOpenMenus().includes(id), [id]);
    (0, import_react46.useEffect)(() => {
      if (rIsOpen.current) {
        onEvent?.("open-menu");
        tlmenus.addOpenMenu(id);
      }
      return () => {
        if (rIsOpen.current) {
          tlmenus.deleteOpenMenu(id);
          tlmenus.getOpenMenus().forEach((menuId) => {
            if (menuId.startsWith(id)) {
              onEvent?.("close-menu");
              tlmenus.deleteOpenMenu(menuId);
            }
          });
          rIsOpen.current = false;
        }
      };
    }, [id, onEvent]);
    return [isOpen, onOpenChange];
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useIsEditing.mjs
  function useIsEditing(shapeId) {
    const editor = useEditor();
    return useValue("isEditing", () => editor.getEditingShapeId() === shapeId, [editor, shapeId]);
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useSelectionEvents.mjs
  var import_react47 = __toESM(require_react(), 1);
  function useSelectionEvents(handle) {
    const editor = useEditor();
    const events = (0, import_react47.useMemo)(
      function selectionEvents() {
        const onPointerDown = (e) => {
          if (e.isKilled) return;
          if (e.button === RIGHT_MOUSE_BUTTON) {
            editor.dispatch({
              type: "pointer",
              target: "selection",
              handle,
              name: "right_click",
              ...getPointerInfo(e)
            });
            return;
          }
          if (e.button !== 0) return;
          const elm = loopToHtmlElement(e.currentTarget);
          function releaseCapture() {
            elm.removeEventListener("pointerup", releaseCapture);
            releasePointerCapture(elm, e);
          }
          setPointerCapture(elm, e);
          elm.addEventListener("pointerup", releaseCapture);
          editor.dispatch({
            name: "pointer_down",
            type: "pointer",
            target: "selection",
            handle,
            ...getPointerInfo(e)
          });
          stopEventPropagation(e);
        };
        let lastX, lastY;
        function onPointerMove(e) {
          if (e.isKilled) return;
          if (e.button !== 0) return;
          if (e.clientX === lastX && e.clientY === lastY) return;
          lastX = e.clientX;
          lastY = e.clientY;
          editor.dispatch({
            name: "pointer_move",
            type: "pointer",
            target: "selection",
            handle,
            ...getPointerInfo(e)
          });
        }
        const onPointerUp = (e) => {
          if (e.isKilled) return;
          if (e.button !== 0) return;
          editor.dispatch({
            name: "pointer_up",
            type: "pointer",
            target: "selection",
            handle,
            ...getPointerInfo(e)
          });
        };
        return {
          onPointerDown,
          onPointerMove,
          onPointerUp
        };
      },
      [editor, handle]
    );
    return events;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/hooks/useTLStore.mjs
  var import_react48 = __toESM(require_react(), 1);
  function useTLStore(opts) {
    const [current, setCurrent] = (0, import_react48.useState)(() => ({ store: createTLStore(opts), opts }));
    if (!areObjectsShallowEqual(current.opts, opts)) {
      const next = { store: createTLStore(opts), opts };
      setCurrent(next);
      return next.store;
    }
    return current.store;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/geometry-constants.mjs
  var SPACING = 20;
  var MIN_COUNT = 8;
  function getVerticesCountForLength(length, spacing = SPACING) {
    return Math.max(MIN_COUNT, Math.ceil(length / spacing));
  }

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Arc2d.mjs
  var Arc2d = class extends Geometry2d {
    _center;
    radius;
    start;
    end;
    largeArcFlag;
    sweepFlag;
    measure;
    angleStart;
    angleEnd;
    constructor(config) {
      super({ ...config, isFilled: false, isClosed: false });
      const { center, sweepFlag, largeArcFlag, start, end } = config;
      if (start.equals(end)) throw Error(`Arc must have different start and end points.`);
      this.angleStart = Vec.Angle(center, start);
      this.angleEnd = Vec.Angle(center, end);
      this.radius = Vec.Dist(center, start);
      this.measure = getArcMeasure(this.angleStart, this.angleEnd, sweepFlag, largeArcFlag);
      this.start = start;
      this.end = end;
      this.sweepFlag = sweepFlag;
      this.largeArcFlag = largeArcFlag;
      this._center = center;
    }
    nearestPoint(point) {
      const { _center, measure, radius, angleEnd, angleStart, start: A, end: B } = this;
      const t2 = getPointInArcT(measure, angleStart, angleEnd, _center.angle(point));
      if (t2 <= 0) return A;
      if (t2 >= 1) return B;
      const P = _center.clone().add(point.clone().sub(_center).uni().mul(radius));
      let nearest;
      let dist = Infinity;
      let d;
      for (const p of [A, B, P]) {
        d = Vec.Dist2(point, p);
        if (d < dist) {
          nearest = p;
          dist = d;
        }
      }
      if (!nearest) throw Error("nearest point not found");
      return nearest;
    }
    hitTestLineSegment(A, B) {
      const { _center, radius, measure, angleStart, angleEnd } = this;
      const intersection = intersectLineSegmentCircle(A, B, _center, radius);
      if (intersection === null) return false;
      return intersection.some((p) => {
        const result = getPointInArcT(measure, angleStart, angleEnd, _center.angle(p));
        return result >= 0 && result <= 1;
      });
    }
    getVertices() {
      const { _center, measure, length, radius, angleStart } = this;
      const vertices = [];
      for (let i = 0, n = getVerticesCountForLength(Math.abs(length)); i < n + 1; i++) {
        const t2 = i / n * measure;
        const angle = angleStart + t2;
        vertices.push(getPointOnCircle(_center, radius, angle));
      }
      return vertices;
    }
    getSvgPathData(first = true) {
      const { start, end, radius, largeArcFlag, sweepFlag } = this;
      return `${first ? `M${start.toFixed()}` : ``} A${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${end.toFixed()}`;
    }
    getLength() {
      return this.measure * this.radius;
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Circle2d.mjs
  var Circle2d = class extends Geometry2d {
    constructor(config) {
      super({ isClosed: true, ...config });
      this.config = config;
      const { x = 0, y = 0, radius } = config;
      this.x = x;
      this.y = y;
      this._center = new Vec(radius + x, radius + y);
      this.radius = radius;
    }
    _center;
    radius;
    x;
    y;
    getBounds() {
      return new Box(this.x, this.y, this.radius * 2, this.radius * 2);
    }
    getVertices() {
      const { _center, radius } = this;
      const perimeter = PI2 * radius;
      const vertices = [];
      for (let i = 0, n = getVerticesCountForLength(perimeter); i < n; i++) {
        const angle = i / n * PI2;
        vertices.push(getPointOnCircle(_center, radius, angle));
      }
      return vertices;
    }
    nearestPoint(point) {
      const { _center, radius } = this;
      if (_center.equals(point)) return Vec.AddXY(_center, radius, 0);
      return _center.clone().add(point.clone().sub(_center).uni().mul(radius));
    }
    hitTestLineSegment(A, B, distance = 0) {
      const { _center, radius } = this;
      return intersectLineSegmentCircle(A, B, _center, radius + distance) !== null;
    }
    getSvgPathData() {
      const { _center, radius } = this;
      return `M${_center.x + radius},${_center.y} a${radius},${radius} 0 1,0 ${radius * 2},0a${radius},${radius} 0 1,0 -${radius * 2},0`;
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/CubicBezier2d.mjs
  var CubicBezier2d = class _CubicBezier2d extends Polyline2d {
    a;
    b;
    c;
    d;
    constructor(config) {
      const { start: a, cp1: b, cp2: c, end: d } = config;
      super({ ...config, points: [a, d] });
      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
    }
    getVertices() {
      const vertices = [];
      const { a, b, c, d } = this;
      for (let i = 0, n = 10; i <= n; i++) {
        const t2 = i / n;
        vertices.push(
          new Vec(
            (1 - t2) * (1 - t2) * (1 - t2) * a.x + 3 * ((1 - t2) * (1 - t2)) * t2 * b.x + 3 * (1 - t2) * (t2 * t2) * c.x + t2 * t2 * t2 * d.x,
            (1 - t2) * (1 - t2) * (1 - t2) * a.y + 3 * ((1 - t2) * (1 - t2)) * t2 * b.y + 3 * (1 - t2) * (t2 * t2) * c.y + t2 * t2 * t2 * d.y
          )
        );
      }
      return vertices;
    }
    midPoint() {
      return _CubicBezier2d.GetAtT(this, 0.5);
    }
    nearestPoint(A) {
      let nearest;
      let dist = Infinity;
      let d;
      let p;
      for (const edge of this.segments) {
        p = edge.nearestPoint(A);
        d = Vec.Dist2(p, A);
        if (d < dist) {
          nearest = p;
          dist = d;
        }
      }
      if (!nearest) throw Error("nearest point not found");
      return nearest;
    }
    getSvgPathData(first = true) {
      const { a, b, c, d } = this;
      return `${first ? `M ${a.toFixed()} ` : ``} C${b.toFixed()} ${c.toFixed()} ${d.toFixed()}`;
    }
    static GetAtT(segment, t2) {
      const { a, b, c, d } = segment;
      return new Vec(
        (1 - t2) * (1 - t2) * (1 - t2) * a.x + 3 * ((1 - t2) * (1 - t2)) * t2 * b.x + 3 * (1 - t2) * (t2 * t2) * c.x + t2 * t2 * t2 * d.x,
        (1 - t2) * (1 - t2) * (1 - t2) * a.y + 3 * ((1 - t2) * (1 - t2)) * t2 * b.y + 3 * (1 - t2) * (t2 * t2) * c.y + t2 * t2 * t2 * d.y
      );
    }
    getLength(precision = 32) {
      let n1, p1 = this.a, length = 0;
      for (let i = 1; i <= precision; i++) {
        n1 = _CubicBezier2d.GetAtT(this, i / precision);
        length += Vec.Dist(p1, n1);
        p1 = n1;
      }
      return length;
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/CubicSpline2d.mjs
  var CubicSpline2d = class extends Geometry2d {
    points;
    constructor(config) {
      super({ ...config, isClosed: false, isFilled: false });
      const { points } = config;
      this.points = points;
    }
    _segments;
    // eslint-disable-next-line no-restricted-syntax
    get segments() {
      if (!this._segments) {
        this._segments = [];
        const { points } = this;
        const len = points.length;
        const last3 = len - 2;
        const k = 1.25;
        for (let i = 0; i < len - 1; i++) {
          const p0 = i === 0 ? points[0] : points[i - 1];
          const p1 = points[i];
          const p2 = points[i + 1];
          const p3 = i === last3 ? p2 : points[i + 2];
          const start = p1, cp1 = i === 0 ? p0 : new Vec(p1.x + (p2.x - p0.x) / 6 * k, p1.y + (p2.y - p0.y) / 6 * k), cp2 = i === last3 ? p2 : new Vec(p2.x - (p3.x - p1.x) / 6 * k, p2.y - (p3.y - p1.y) / 6 * k), end = p2;
          this._segments.push(new CubicBezier2d({ start, cp1, cp2, end }));
        }
      }
      return this._segments;
    }
    getLength() {
      return this.segments.reduce((acc, segment) => acc + segment.length, 0);
    }
    getVertices() {
      const vertices = this.segments.reduce((acc, segment) => {
        return acc.concat(segment.vertices);
      }, []);
      vertices.push(this.points[this.points.length - 1]);
      return vertices;
    }
    nearestPoint(A) {
      let nearest;
      let dist = Infinity;
      let d;
      let p;
      for (const segment of this.segments) {
        p = segment.nearestPoint(A);
        d = Vec.Dist2(p, A);
        if (d < dist) {
          nearest = p;
          dist = d;
        }
      }
      if (!nearest) throw Error("nearest point not found");
      return nearest;
    }
    hitTestLineSegment(A, B) {
      return this.segments.some((segment) => segment.hitTestLineSegment(A, B));
    }
    getSvgPathData() {
      let d = this.segments.reduce((d2, segment, i) => {
        return d2 + segment.getSvgPathData(i === 0);
      }, "");
      if (this.isClosed) {
        d += "Z";
      }
      return d;
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Ellipse2d.mjs
  var Ellipse2d = class extends Geometry2d {
    constructor(config) {
      super({ ...config, isClosed: true });
      this.config = config;
      const { width, height } = config;
      this.w = width;
      this.h = height;
    }
    w;
    h;
    _edges;
    // eslint-disable-next-line no-restricted-syntax
    get edges() {
      if (!this._edges) {
        const { vertices } = this;
        this._edges = [];
        for (let i = 0, n = vertices.length; i < n; i++) {
          const start = vertices[i];
          const end = vertices[(i + 1) % n];
          this._edges.push(new Edge2d({ start, end }));
        }
      }
      return this._edges;
    }
    getVertices() {
      const w = Math.max(1, this.w);
      const h = Math.max(1, this.h);
      const cx = w / 2;
      const cy = h / 2;
      const q = Math.pow(cx - cy, 2) / Math.pow(cx + cy, 2);
      const p = PI * (cx + cy) * (1 + 3 * q / (10 + Math.sqrt(4 - 3 * q)));
      const len = getVerticesCountForLength(p);
      const step = PI2 / len;
      const a = Math.cos(step);
      const b = Math.sin(step);
      let sin = 0;
      let cos = 1;
      let ts = 0;
      let tc = 1;
      const vertices = Array(len);
      for (let i = 0; i < len; i++) {
        vertices[i] = new Vec(cx + cx * cos, cy + cy * sin);
        ts = b * cos + a * sin;
        tc = a * cos - b * sin;
        sin = ts;
        cos = tc;
      }
      return vertices;
    }
    nearestPoint(A) {
      let nearest;
      let dist = Infinity;
      let d;
      let p;
      for (const edge of this.edges) {
        p = edge.nearestPoint(A);
        d = Vec.Dist2(p, A);
        if (d < dist) {
          nearest = p;
          dist = d;
        }
      }
      if (!nearest) throw Error("nearest point not found");
      return nearest;
    }
    hitTestLineSegment(A, B) {
      return this.edges.some((edge) => edge.hitTestLineSegment(A, B));
    }
    getBounds() {
      return new Box(0, 0, this.w, this.h);
    }
    getLength() {
      const { w, h } = this;
      const cx = w / 2;
      const cy = h / 2;
      const rx = Math.max(0, cx);
      const ry = Math.max(0, cy);
      return perimeterOfEllipse(rx, ry);
    }
    getSvgPathData(first = false) {
      const { w, h } = this;
      const cx = w / 2;
      const cy = h / 2;
      const rx = Math.max(0, cx);
      const ry = Math.max(0, cy);
      return `${first ? `M${cx - rx},${cy}` : ``} a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`;
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Stadium2d.mjs
  var Stadium2d = class extends Geometry2d {
    constructor(config) {
      super({ ...config, isClosed: true });
      this.config = config;
      const { width: w, height: h } = config;
      this.w = w;
      this.h = h;
      if (h > w) {
        const r = w / 2;
        this.a = new Arc2d({
          start: new Vec(0, r),
          end: new Vec(w, r),
          center: new Vec(w / 2, r),
          sweepFlag: 1,
          largeArcFlag: 1
        });
        this.b = new Edge2d({ start: new Vec(w, r), end: new Vec(w, h - r) });
        this.c = new Arc2d({
          start: new Vec(w, h - r),
          end: new Vec(0, h - r),
          center: new Vec(w / 2, h - r),
          sweepFlag: 1,
          largeArcFlag: 1
        });
        this.d = new Edge2d({ start: new Vec(0, h - r), end: new Vec(0, r) });
      } else {
        const r = h / 2;
        this.a = new Arc2d({
          start: new Vec(r, h),
          end: new Vec(r, 0),
          center: new Vec(r, r),
          sweepFlag: 1,
          largeArcFlag: 1
        });
        this.b = new Edge2d({ start: new Vec(r, 0), end: new Vec(w - r, 0) });
        this.c = new Arc2d({
          start: new Vec(w - r, 0),
          end: new Vec(w - r, h),
          center: new Vec(w - r, r),
          sweepFlag: 1,
          largeArcFlag: 1
        });
        this.d = new Edge2d({ start: new Vec(w - r, h), end: new Vec(r, h) });
      }
    }
    w;
    h;
    a;
    b;
    c;
    d;
    nearestPoint(A) {
      let nearest;
      let dist = Infinity;
      let _d;
      let p;
      const { a, b, c, d } = this;
      for (const part of [a, b, c, d]) {
        p = part.nearestPoint(A);
        _d = Vec.Dist2(p, A);
        if (_d < dist) {
          nearest = p;
          dist = _d;
        }
      }
      if (!nearest) throw Error("nearest point not found");
      return nearest;
    }
    hitTestLineSegment(A, B) {
      const { a, b, c, d } = this;
      return [a, b, c, d].some((edge) => edge.hitTestLineSegment(A, B));
    }
    getVertices() {
      const { a, b, c, d } = this;
      return [a, b, c, d].reduce((a2, p) => {
        a2.push(...p.vertices);
        return a2;
      }, []);
    }
    getBounds() {
      return new Box(0, 0, this.w, this.h);
    }
    getLength() {
      const { h, w } = this;
      if (h > w) return (PI * (w / 2) + (h - w)) * 2;
      else return (PI * (h / 2) + (w - h)) * 2;
    }
    getSvgPathData() {
      const { a, b, c, d } = this;
      return [a, b, c, d].map((p, i) => p.getSvgPathData(i === 0)).join(" ") + " Z";
    }
  };

  // node_modules/@tldraw/editor/dist-esm/lib/utils/sync/hardReset.mjs
  async function hardReset({ shouldReload = true } = {}) {
    clearSessionStorage();
    for (const instance of LocalIndexedDb.connectedInstances) {
      await instance.close();
    }
    await Promise.all(getAllIndexDbNames().map((db) => deleteDB(db)));
    clearLocalStorage();
    if (shouldReload) {
      window.location.reload();
    }
  }
  if (typeof window !== "undefined") {
    if (true) {
      ;
      window.hardReset = hardReset;
    }
    ;
    window.__tldraw__hardReset = hardReset;
  }

  // node_modules/@tldraw/editor/dist-esm/lib/utils/window-open.mjs
  function openWindow(url, target = "_blank") {
    runtime.openWindow(url, target);
  }

  // node_modules/@tldraw/editor/dist-esm/index.mjs
  registerTldrawLibraryVersion(
    "@tldraw/editor",
    "3.7.2",
    "esm"
  );

  // node_modules/tldraw/dist-esm/lib/shapes/shared/usePrefersReducedMotion.mjs
  var import_react49 = __toESM(require_react(), 1);
  function usePrefersReducedMotion() {
    const [prefersReducedMotion, setPrefersReducedMotion] = (0, import_react49.useState)(false);
    (0, import_react49.useEffect)(() => {
      if (typeof window === "undefined" || !("matchMedia" in window)) return;
      const mql = window.matchMedia("(prefers-reduced-motion: reduce)");
      const handler = () => {
        setPrefersReducedMotion(mql.matches);
      };
      handler();
      mql.addEventListener("change", handler);
      return () => mql.removeEventListener("change", handler);
    }, []);
    return prefersReducedMotion;
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/ColorSchemeMenu.mjs
  var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/context/events.mjs
  var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
  var React12 = __toESM(require_react(), 1);
  var defaultEventHandler = () => void 0;
  var EventsContext = React12.createContext(null);
  function TldrawUiEventsProvider({ onEvent, children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(EventsContext.Provider, { value: onEvent ?? defaultEventHandler, children });
  }
  function useUiEvents() {
    const eventHandler2 = React12.useContext(EventsContext);
    return eventHandler2 ?? defaultEventHandler;
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuCheckboxItem.mjs
  var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);

  // node_modules/@radix-ui/react-context-menu/dist/index.mjs
  var React42 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/primitive/dist/index.mjs
  function composeEventHandlers(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
    return function handleEvent(event) {
      originalEventHandler?.(event);
      if (checkForDefaultPrevented === false || !event.defaultPrevented) {
        return ourEventHandler?.(event);
      }
    };
  }

  // node_modules/@radix-ui/react-context/dist/index.mjs
  var React13 = __toESM(require_react(), 1);
  var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
  function createContext22(rootComponentName, defaultContext) {
    const Context2 = React13.createContext(defaultContext);
    const Provider = (props) => {
      const { children, ...context } = props;
      const value = React13.useMemo(() => context, Object.values(context));
      return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Context2.Provider, { value, children });
    };
    Provider.displayName = rootComponentName + "Provider";
    function useContext22(consumerName) {
      const context = React13.useContext(Context2);
      if (context) return context;
      if (defaultContext !== void 0) return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    return [Provider, useContext22];
  }
  function createContextScope(scopeName, createContextScopeDeps = []) {
    let defaultContexts = [];
    function createContext32(rootComponentName, defaultContext) {
      const BaseContext = React13.createContext(defaultContext);
      const index2 = defaultContexts.length;
      defaultContexts = [...defaultContexts, defaultContext];
      const Provider = (props) => {
        const { scope, children, ...context } = props;
        const Context2 = scope?.[scopeName]?.[index2] || BaseContext;
        const value = React13.useMemo(() => context, Object.values(context));
        return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Context2.Provider, { value, children });
      };
      Provider.displayName = rootComponentName + "Provider";
      function useContext22(consumerName, scope) {
        const Context2 = scope?.[scopeName]?.[index2] || BaseContext;
        const context = React13.useContext(Context2);
        if (context) return context;
        if (defaultContext !== void 0) return defaultContext;
        throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
      }
      return [Provider, useContext22];
    }
    const createScope = () => {
      const scopeContexts = defaultContexts.map((defaultContext) => {
        return React13.createContext(defaultContext);
      });
      return function useScope(scope) {
        const contexts = scope?.[scopeName] || scopeContexts;
        return React13.useMemo(
          () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),
          [scope, contexts]
        );
      };
    };
    createScope.scopeName = scopeName;
    return [createContext32, composeContextScopes(createScope, ...createContextScopeDeps)];
  }
  function composeContextScopes(...scopes) {
    const baseScope = scopes[0];
    if (scopes.length === 1) return baseScope;
    const createScope = () => {
      const scopeHooks = scopes.map((createScope2) => ({
        useScope: createScope2(),
        scopeName: createScope2.scopeName
      }));
      return function useComposedScopes(overrideScopes) {
        const nextScopes = scopeHooks.reduce((nextScopes2, { useScope, scopeName }) => {
          const scopeProps = useScope(overrideScopes);
          const currentScope = scopeProps[`__scope${scopeName}`];
          return { ...nextScopes2, ...currentScope };
        }, {});
        return React13.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);
      };
    };
    createScope.scopeName = baseScope.scopeName;
    return createScope;
  }

  // node_modules/@radix-ui/react-primitive/dist/index.mjs
  var React16 = __toESM(require_react(), 1);
  var ReactDOM = __toESM(require_react_dom(), 1);

  // node_modules/@radix-ui/react-slot/dist/index.mjs
  var React15 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-compose-refs/dist/index.mjs
  var React14 = __toESM(require_react(), 1);
  function setRef(ref, value) {
    if (typeof ref === "function") {
      return ref(value);
    } else if (ref !== null && ref !== void 0) {
      ref.current = value;
    }
  }
  function composeRefs(...refs) {
    return (node) => {
      let hasCleanup = false;
      const cleanups = refs.map((ref) => {
        const cleanup = setRef(ref, node);
        if (!hasCleanup && typeof cleanup == "function") {
          hasCleanup = true;
        }
        return cleanup;
      });
      if (hasCleanup) {
        return () => {
          for (let i = 0; i < cleanups.length; i++) {
            const cleanup = cleanups[i];
            if (typeof cleanup == "function") {
              cleanup();
            } else {
              setRef(refs[i], null);
            }
          }
        };
      }
    };
  }
  function useComposedRefs(...refs) {
    return React14.useCallback(composeRefs(...refs), refs);
  }

  // node_modules/@radix-ui/react-slot/dist/index.mjs
  var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
  var Slot = React15.forwardRef((props, forwardedRef) => {
    const { children, ...slotProps } = props;
    const childrenArray = React15.Children.toArray(children);
    const slottable = childrenArray.find(isSlottable);
    if (slottable) {
      const newElement = slottable.props.children;
      const newChildren = childrenArray.map((child) => {
        if (child === slottable) {
          if (React15.Children.count(newElement) > 1) return React15.Children.only(null);
          return React15.isValidElement(newElement) ? newElement.props.children : null;
        } else {
          return child;
        }
      });
      return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(SlotClone, { ...slotProps, ref: forwardedRef, children: React15.isValidElement(newElement) ? React15.cloneElement(newElement, void 0, newChildren) : null });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(SlotClone, { ...slotProps, ref: forwardedRef, children });
  });
  Slot.displayName = "Slot";
  var SlotClone = React15.forwardRef((props, forwardedRef) => {
    const { children, ...slotProps } = props;
    if (React15.isValidElement(children)) {
      const childrenRef = getElementRef(children);
      return React15.cloneElement(children, {
        ...mergeProps(slotProps, children.props),
        // @ts-ignore
        ref: forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef
      });
    }
    return React15.Children.count(children) > 1 ? React15.Children.only(null) : null;
  });
  SlotClone.displayName = "SlotClone";
  var Slottable = ({ children }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(import_jsx_runtime40.Fragment, { children });
  };
  function isSlottable(child) {
    return React15.isValidElement(child) && child.type === Slottable;
  }
  function mergeProps(slotProps, childProps) {
    const overrideProps = { ...childProps };
    for (const propName in childProps) {
      const slotPropValue = slotProps[propName];
      const childPropValue = childProps[propName];
      const isHandler = /^on[A-Z]/.test(propName);
      if (isHandler) {
        if (slotPropValue && childPropValue) {
          overrideProps[propName] = (...args) => {
            childPropValue(...args);
            slotPropValue(...args);
          };
        } else if (slotPropValue) {
          overrideProps[propName] = slotPropValue;
        }
      } else if (propName === "style") {
        overrideProps[propName] = { ...slotPropValue, ...childPropValue };
      } else if (propName === "className") {
        overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(" ");
      }
    }
    return { ...slotProps, ...overrideProps };
  }
  function getElementRef(element) {
    let getter = Object.getOwnPropertyDescriptor(element.props, "ref")?.get;
    let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.ref;
    }
    getter = Object.getOwnPropertyDescriptor(element, "ref")?.get;
    mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.props.ref;
    }
    return element.props.ref || element.ref;
  }

  // node_modules/@radix-ui/react-primitive/dist/index.mjs
  var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
  var NODES = [
    "a",
    "button",
    "div",
    "form",
    "h2",
    "h3",
    "img",
    "input",
    "label",
    "li",
    "nav",
    "ol",
    "p",
    "span",
    "svg",
    "ul"
  ];
  var Primitive = NODES.reduce((primitive, node) => {
    const Node2 = React16.forwardRef((props, forwardedRef) => {
      const { asChild, ...primitiveProps } = props;
      const Comp = asChild ? Slot : node;
      if (typeof window !== "undefined") {
        window[Symbol.for("radix-ui")] = true;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Comp, { ...primitiveProps, ref: forwardedRef });
    });
    Node2.displayName = `Primitive.${node}`;
    return { ...primitive, [node]: Node2 };
  }, {});
  function dispatchDiscreteCustomEvent(target, event) {
    if (target) ReactDOM.flushSync(() => target.dispatchEvent(event));
  }

  // node_modules/@radix-ui/react-menu/dist/index.mjs
  var React41 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-collection/dist/index.mjs
  var import_react50 = __toESM(require_react(), 1);
  var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
  function createCollection(name) {
    const PROVIDER_NAME2 = name + "CollectionProvider";
    const [createCollectionContext, createCollectionScope5] = createContextScope(PROVIDER_NAME2);
    const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(
      PROVIDER_NAME2,
      { collectionRef: { current: null }, itemMap: /* @__PURE__ */ new Map() }
    );
    const CollectionProvider = (props) => {
      const { scope, children } = props;
      const ref = import_react50.default.useRef(null);
      const itemMap = import_react50.default.useRef(/* @__PURE__ */ new Map()).current;
      return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(CollectionProviderImpl, { scope, itemMap, collectionRef: ref, children });
    };
    CollectionProvider.displayName = PROVIDER_NAME2;
    const COLLECTION_SLOT_NAME = name + "CollectionSlot";
    const CollectionSlot = import_react50.default.forwardRef(
      (props, forwardedRef) => {
        const { scope, children } = props;
        const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
        const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);
        return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(Slot, { ref: composedRefs, children });
      }
    );
    CollectionSlot.displayName = COLLECTION_SLOT_NAME;
    const ITEM_SLOT_NAME = name + "CollectionItemSlot";
    const ITEM_DATA_ATTR = "data-radix-collection-item";
    const CollectionItemSlot = import_react50.default.forwardRef(
      (props, forwardedRef) => {
        const { scope, children, ...itemData } = props;
        const ref = import_react50.default.useRef(null);
        const composedRefs = useComposedRefs(forwardedRef, ref);
        const context = useCollectionContext(ITEM_SLOT_NAME, scope);
        import_react50.default.useEffect(() => {
          context.itemMap.set(ref, { ref, ...itemData });
          return () => void context.itemMap.delete(ref);
        });
        return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(Slot, { ...{ [ITEM_DATA_ATTR]: "" }, ref: composedRefs, children });
      }
    );
    CollectionItemSlot.displayName = ITEM_SLOT_NAME;
    function useCollection5(scope) {
      const context = useCollectionContext(name + "CollectionConsumer", scope);
      const getItems = import_react50.default.useCallback(() => {
        const collectionNode = context.collectionRef.current;
        if (!collectionNode) return [];
        const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
        const items = Array.from(context.itemMap.values());
        const orderedItems = items.sort(
          (a, b) => orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current)
        );
        return orderedItems;
      }, [context.collectionRef, context.itemMap]);
      return getItems;
    }
    return [
      { Provider: CollectionProvider, Slot: CollectionSlot, ItemSlot: CollectionItemSlot },
      useCollection5,
      createCollectionScope5
    ];
  }

  // node_modules/@radix-ui/react-direction/dist/index.mjs
  var React18 = __toESM(require_react(), 1);
  var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
  var DirectionContext = React18.createContext(void 0);
  function useDirection(localDir) {
    const globalDir = React18.useContext(DirectionContext);
    return localDir || globalDir || "ltr";
  }

  // node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
  var React21 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs
  var React19 = __toESM(require_react(), 1);
  function useCallbackRef(callback) {
    const callbackRef = React19.useRef(callback);
    React19.useEffect(() => {
      callbackRef.current = callback;
    });
    return React19.useMemo(() => (...args) => callbackRef.current?.(...args), []);
  }

  // node_modules/@radix-ui/react-use-escape-keydown/dist/index.mjs
  var React20 = __toESM(require_react(), 1);
  function useEscapeKeydown(onEscapeKeyDownProp, ownerDocument = globalThis?.document) {
    const onEscapeKeyDown = useCallbackRef(onEscapeKeyDownProp);
    React20.useEffect(() => {
      const handleKeyDown = (event) => {
        if (event.key === "Escape") {
          onEscapeKeyDown(event);
        }
      };
      ownerDocument.addEventListener("keydown", handleKeyDown, { capture: true });
      return () => ownerDocument.removeEventListener("keydown", handleKeyDown, { capture: true });
    }, [onEscapeKeyDown, ownerDocument]);
  }

  // node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
  var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
  var DISMISSABLE_LAYER_NAME = "DismissableLayer";
  var CONTEXT_UPDATE = "dismissableLayer.update";
  var POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
  var FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
  var originalBodyPointerEvents;
  var DismissableLayerContext = React21.createContext({
    layers: /* @__PURE__ */ new Set(),
    layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
    branches: /* @__PURE__ */ new Set()
  });
  var DismissableLayer = React21.forwardRef(
    (props, forwardedRef) => {
      const {
        disableOutsidePointerEvents = false,
        onEscapeKeyDown,
        onPointerDownOutside,
        onFocusOutside,
        onInteractOutside,
        onDismiss,
        ...layerProps
      } = props;
      const context = React21.useContext(DismissableLayerContext);
      const [node, setNode] = React21.useState(null);
      const ownerDocument = node?.ownerDocument ?? globalThis?.document;
      const [, force] = React21.useState({});
      const composedRefs = useComposedRefs(forwardedRef, (node2) => setNode(node2));
      const layers = Array.from(context.layers);
      const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1);
      const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
      const index2 = node ? layers.indexOf(node) : -1;
      const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
      const isPointerEventsEnabled = index2 >= highestLayerWithOutsidePointerEventsDisabledIndex;
      const pointerDownOutside = usePointerDownOutside((event) => {
        const target = event.target;
        const isPointerDownOnBranch = [...context.branches].some((branch) => branch.contains(target));
        if (!isPointerEventsEnabled || isPointerDownOnBranch) return;
        onPointerDownOutside?.(event);
        onInteractOutside?.(event);
        if (!event.defaultPrevented) onDismiss?.();
      }, ownerDocument);
      const focusOutside = useFocusOutside((event) => {
        const target = event.target;
        const isFocusInBranch = [...context.branches].some((branch) => branch.contains(target));
        if (isFocusInBranch) return;
        onFocusOutside?.(event);
        onInteractOutside?.(event);
        if (!event.defaultPrevented) onDismiss?.();
      }, ownerDocument);
      useEscapeKeydown((event) => {
        const isHighestLayer = index2 === context.layers.size - 1;
        if (!isHighestLayer) return;
        onEscapeKeyDown?.(event);
        if (!event.defaultPrevented && onDismiss) {
          event.preventDefault();
          onDismiss();
        }
      }, ownerDocument);
      React21.useEffect(() => {
        if (!node) return;
        if (disableOutsidePointerEvents) {
          if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
            originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;
            ownerDocument.body.style.pointerEvents = "none";
          }
          context.layersWithOutsidePointerEventsDisabled.add(node);
        }
        context.layers.add(node);
        dispatchUpdate();
        return () => {
          if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1) {
            ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;
          }
        };
      }, [node, ownerDocument, disableOutsidePointerEvents, context]);
      React21.useEffect(() => {
        return () => {
          if (!node) return;
          context.layers.delete(node);
          context.layersWithOutsidePointerEventsDisabled.delete(node);
          dispatchUpdate();
        };
      }, [node, context]);
      React21.useEffect(() => {
        const handleUpdate = () => force({});
        document.addEventListener(CONTEXT_UPDATE, handleUpdate);
        return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
        Primitive.div,
        {
          ...layerProps,
          ref: composedRefs,
          style: {
            pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
            ...props.style
          },
          onFocusCapture: composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture),
          onBlurCapture: composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture),
          onPointerDownCapture: composeEventHandlers(
            props.onPointerDownCapture,
            pointerDownOutside.onPointerDownCapture
          )
        }
      );
    }
  );
  DismissableLayer.displayName = DISMISSABLE_LAYER_NAME;
  var BRANCH_NAME = "DismissableLayerBranch";
  var DismissableLayerBranch = React21.forwardRef((props, forwardedRef) => {
    const context = React21.useContext(DismissableLayerContext);
    const ref = React21.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    React21.useEffect(() => {
      const node = ref.current;
      if (node) {
        context.branches.add(node);
        return () => {
          context.branches.delete(node);
        };
      }
    }, [context.branches]);
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(Primitive.div, { ...props, ref: composedRefs });
  });
  DismissableLayerBranch.displayName = BRANCH_NAME;
  function usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis?.document) {
    const handlePointerDownOutside = useCallbackRef(onPointerDownOutside);
    const isPointerInsideReactTreeRef = React21.useRef(false);
    const handleClickRef = React21.useRef(() => {
    });
    React21.useEffect(() => {
      const handlePointerDown = (event) => {
        if (event.target && !isPointerInsideReactTreeRef.current) {
          let handleAndDispatchPointerDownOutsideEvent2 = function() {
            handleAndDispatchCustomEvent(
              POINTER_DOWN_OUTSIDE,
              handlePointerDownOutside,
              eventDetail,
              { discrete: true }
            );
          };
          var handleAndDispatchPointerDownOutsideEvent = handleAndDispatchPointerDownOutsideEvent2;
          const eventDetail = { originalEvent: event };
          if (event.pointerType === "touch") {
            ownerDocument.removeEventListener("click", handleClickRef.current);
            handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;
            ownerDocument.addEventListener("click", handleClickRef.current, { once: true });
          } else {
            handleAndDispatchPointerDownOutsideEvent2();
          }
        } else {
          ownerDocument.removeEventListener("click", handleClickRef.current);
        }
        isPointerInsideReactTreeRef.current = false;
      };
      const timerId = window.setTimeout(() => {
        ownerDocument.addEventListener("pointerdown", handlePointerDown);
      }, 0);
      return () => {
        window.clearTimeout(timerId);
        ownerDocument.removeEventListener("pointerdown", handlePointerDown);
        ownerDocument.removeEventListener("click", handleClickRef.current);
      };
    }, [ownerDocument, handlePointerDownOutside]);
    return {
      // ensures we check React component tree (not just DOM tree)
      onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
    };
  }
  function useFocusOutside(onFocusOutside, ownerDocument = globalThis?.document) {
    const handleFocusOutside = useCallbackRef(onFocusOutside);
    const isFocusInsideReactTreeRef = React21.useRef(false);
    React21.useEffect(() => {
      const handleFocus = (event) => {
        if (event.target && !isFocusInsideReactTreeRef.current) {
          const eventDetail = { originalEvent: event };
          handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
            discrete: false
          });
        }
      };
      ownerDocument.addEventListener("focusin", handleFocus);
      return () => ownerDocument.removeEventListener("focusin", handleFocus);
    }, [ownerDocument, handleFocusOutside]);
    return {
      onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
      onBlurCapture: () => isFocusInsideReactTreeRef.current = false
    };
  }
  function dispatchUpdate() {
    const event = new CustomEvent(CONTEXT_UPDATE);
    document.dispatchEvent(event);
  }
  function handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
    const target = detail.originalEvent.target;
    const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });
    if (handler) target.addEventListener(name, handler, { once: true });
    if (discrete) {
      dispatchDiscreteCustomEvent(target, event);
    } else {
      target.dispatchEvent(event);
    }
  }
  var Root = DismissableLayer;
  var Branch = DismissableLayerBranch;

  // node_modules/@radix-ui/react-focus-guards/dist/index.mjs
  var React22 = __toESM(require_react(), 1);
  var count = 0;
  function useFocusGuards() {
    React22.useEffect(() => {
      const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
      document.body.insertAdjacentElement("afterbegin", edgeGuards[0] ?? createFocusGuard());
      document.body.insertAdjacentElement("beforeend", edgeGuards[1] ?? createFocusGuard());
      count++;
      return () => {
        if (count === 1) {
          document.querySelectorAll("[data-radix-focus-guard]").forEach((node) => node.remove());
        }
        count--;
      };
    }, []);
  }
  function createFocusGuard() {
    const element = document.createElement("span");
    element.setAttribute("data-radix-focus-guard", "");
    element.tabIndex = 0;
    element.style.outline = "none";
    element.style.opacity = "0";
    element.style.position = "fixed";
    element.style.pointerEvents = "none";
    return element;
  }

  // node_modules/@radix-ui/react-focus-scope/dist/index.mjs
  var React23 = __toESM(require_react(), 1);
  var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
  var AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
  var AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
  var EVENT_OPTIONS = { bubbles: false, cancelable: true };
  var FOCUS_SCOPE_NAME = "FocusScope";
  var FocusScope = React23.forwardRef((props, forwardedRef) => {
    const {
      loop = false,
      trapped = false,
      onMountAutoFocus: onMountAutoFocusProp,
      onUnmountAutoFocus: onUnmountAutoFocusProp,
      ...scopeProps
    } = props;
    const [container, setContainer] = React23.useState(null);
    const onMountAutoFocus = useCallbackRef(onMountAutoFocusProp);
    const onUnmountAutoFocus = useCallbackRef(onUnmountAutoFocusProp);
    const lastFocusedElementRef = React23.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setContainer(node));
    const focusScope = React23.useRef({
      paused: false,
      pause() {
        this.paused = true;
      },
      resume() {
        this.paused = false;
      }
    }).current;
    React23.useEffect(() => {
      if (trapped) {
        let handleFocusIn2 = function(event) {
          if (focusScope.paused || !container) return;
          const target = event.target;
          if (container.contains(target)) {
            lastFocusedElementRef.current = target;
          } else {
            focus(lastFocusedElementRef.current, { select: true });
          }
        }, handleFocusOut2 = function(event) {
          if (focusScope.paused || !container) return;
          const relatedTarget = event.relatedTarget;
          if (relatedTarget === null) return;
          if (!container.contains(relatedTarget)) {
            focus(lastFocusedElementRef.current, { select: true });
          }
        }, handleMutations2 = function(mutations) {
          const focusedElement = document.activeElement;
          if (focusedElement !== document.body) return;
          for (const mutation of mutations) {
            if (mutation.removedNodes.length > 0) focus(container);
          }
        };
        var handleFocusIn = handleFocusIn2, handleFocusOut = handleFocusOut2, handleMutations = handleMutations2;
        document.addEventListener("focusin", handleFocusIn2);
        document.addEventListener("focusout", handleFocusOut2);
        const mutationObserver = new MutationObserver(handleMutations2);
        if (container) mutationObserver.observe(container, { childList: true, subtree: true });
        return () => {
          document.removeEventListener("focusin", handleFocusIn2);
          document.removeEventListener("focusout", handleFocusOut2);
          mutationObserver.disconnect();
        };
      }
    }, [trapped, container, focusScope.paused]);
    React23.useEffect(() => {
      if (container) {
        focusScopesStack.add(focusScope);
        const previouslyFocusedElement = document.activeElement;
        const hasFocusedCandidate = container.contains(previouslyFocusedElement);
        if (!hasFocusedCandidate) {
          const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS);
          container.addEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
          container.dispatchEvent(mountEvent);
          if (!mountEvent.defaultPrevented) {
            focusFirst(removeLinks(getTabbableCandidates(container)), { select: true });
            if (document.activeElement === previouslyFocusedElement) {
              focus(container);
            }
          }
        }
        return () => {
          container.removeEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
          setTimeout(() => {
            const unmountEvent = new CustomEvent(AUTOFOCUS_ON_UNMOUNT, EVENT_OPTIONS);
            container.addEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
            container.dispatchEvent(unmountEvent);
            if (!unmountEvent.defaultPrevented) {
              focus(previouslyFocusedElement ?? document.body, { select: true });
            }
            container.removeEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
            focusScopesStack.remove(focusScope);
          }, 0);
        };
      }
    }, [container, onMountAutoFocus, onUnmountAutoFocus, focusScope]);
    const handleKeyDown = React23.useCallback(
      (event) => {
        if (!loop && !trapped) return;
        if (focusScope.paused) return;
        const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
        const focusedElement = document.activeElement;
        if (isTabKey && focusedElement) {
          const container2 = event.currentTarget;
          const [first, last3] = getTabbableEdges(container2);
          const hasTabbableElementsInside = first && last3;
          if (!hasTabbableElementsInside) {
            if (focusedElement === container2) event.preventDefault();
          } else {
            if (!event.shiftKey && focusedElement === last3) {
              event.preventDefault();
              if (loop) focus(first, { select: true });
            } else if (event.shiftKey && focusedElement === first) {
              event.preventDefault();
              if (loop) focus(last3, { select: true });
            }
          }
        }
      },
      [loop, trapped, focusScope.paused]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Primitive.div, { tabIndex: -1, ...scopeProps, ref: composedRefs, onKeyDown: handleKeyDown });
  });
  FocusScope.displayName = FOCUS_SCOPE_NAME;
  function focusFirst(candidates, { select = false } = {}) {
    const previouslyFocusedElement = document.activeElement;
    for (const candidate of candidates) {
      focus(candidate, { select });
      if (document.activeElement !== previouslyFocusedElement) return;
    }
  }
  function getTabbableEdges(container) {
    const candidates = getTabbableCandidates(container);
    const first = findVisible(candidates, container);
    const last3 = findVisible(candidates.reverse(), container);
    return [first, last3];
  }
  function getTabbableCandidates(container) {
    const nodes = [];
    const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
      acceptNode: (node) => {
        const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
        if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;
        return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }
    });
    while (walker.nextNode()) nodes.push(walker.currentNode);
    return nodes;
  }
  function findVisible(elements, container) {
    for (const element of elements) {
      if (!isHidden(element, { upTo: container })) return element;
    }
  }
  function isHidden(node, { upTo }) {
    if (getComputedStyle(node).visibility === "hidden") return true;
    while (node) {
      if (upTo !== void 0 && node === upTo) return false;
      if (getComputedStyle(node).display === "none") return true;
      node = node.parentElement;
    }
    return false;
  }
  function isSelectableInput(element) {
    return element instanceof HTMLInputElement && "select" in element;
  }
  function focus(element, { select = false } = {}) {
    if (element && element.focus) {
      const previouslyFocusedElement = document.activeElement;
      element.focus({ preventScroll: true });
      if (element !== previouslyFocusedElement && isSelectableInput(element) && select)
        element.select();
    }
  }
  var focusScopesStack = createFocusScopesStack();
  function createFocusScopesStack() {
    let stack2 = [];
    return {
      add(focusScope) {
        const activeFocusScope = stack2[0];
        if (focusScope !== activeFocusScope) {
          activeFocusScope?.pause();
        }
        stack2 = arrayRemove(stack2, focusScope);
        stack2.unshift(focusScope);
      },
      remove(focusScope) {
        stack2 = arrayRemove(stack2, focusScope);
        stack2[0]?.resume();
      }
    };
  }
  function arrayRemove(array2, item) {
    const updatedArray = [...array2];
    const index2 = updatedArray.indexOf(item);
    if (index2 !== -1) {
      updatedArray.splice(index2, 1);
    }
    return updatedArray;
  }
  function removeLinks(items) {
    return items.filter((item) => item.tagName !== "A");
  }

  // node_modules/@radix-ui/react-id/dist/index.mjs
  var React25 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs
  var React24 = __toESM(require_react(), 1);
  var useLayoutEffect22 = Boolean(globalThis?.document) ? React24.useLayoutEffect : () => {
  };

  // node_modules/@radix-ui/react-id/dist/index.mjs
  var useReactId = React25["useId".toString()] || (() => void 0);
  var count2 = 0;
  function useId2(deterministicId) {
    const [id, setId] = React25.useState(useReactId());
    useLayoutEffect22(() => {
      if (!deterministicId) setId((reactId) => reactId ?? String(count2++));
    }, [deterministicId]);
    return deterministicId || (id ? `radix-${id}` : "");
  }

  // node_modules/@radix-ui/react-popper/dist/index.mjs
  var React29 = __toESM(require_react(), 1);

  // node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
  var sides = ["top", "right", "bottom", "left"];
  var min = Math.min;
  var max = Math.max;
  var round2 = Math.round;
  var floor = Math.floor;
  var createCoords = (v) => ({
    x: v,
    y: v
  });
  var oppositeSideMap = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  var oppositeAlignmentMap = {
    start: "end",
    end: "start"
  };
  function clamp3(start, value, end) {
    return max(start, min(value, end));
  }
  function evaluate(value, param) {
    return typeof value === "function" ? value(param) : value;
  }
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  function getOppositeAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  function getAxisLength(axis) {
    return axis === "y" ? "height" : "width";
  }
  function getSideAxis(placement) {
    return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
  }
  function getAlignmentAxis(placement) {
    return getOppositeAxis(getSideAxis(placement));
  }
  function getAlignmentSides(placement, rects, rtl) {
    if (rtl === void 0) {
      rtl = false;
    }
    const alignment = getAlignment(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const length = getAxisLength(alignmentAxis);
    let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
    if (rects.reference[length] > rects.floating[length]) {
      mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
    }
    return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
  }
  function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
  }
  function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
  }
  function getSideList(side, isStart, rtl) {
    const lr = ["left", "right"];
    const rl = ["right", "left"];
    const tb = ["top", "bottom"];
    const bt = ["bottom", "top"];
    switch (side) {
      case "top":
      case "bottom":
        if (rtl) return isStart ? rl : lr;
        return isStart ? lr : rl;
      case "left":
      case "right":
        return isStart ? tb : bt;
      default:
        return [];
    }
  }
  function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
    const alignment = getAlignment(placement);
    let list = getSideList(getSide(placement), direction === "start", rtl);
    if (alignment) {
      list = list.map((side) => side + "-" + alignment);
      if (flipAlignment) {
        list = list.concat(list.map(getOppositeAlignmentPlacement));
      }
    }
    return list;
  }
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
  }
  function expandPaddingObject(padding) {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...padding
    };
  }
  function getPaddingObject(padding) {
    return typeof padding !== "number" ? expandPaddingObject(padding) : {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    };
  }
  function rectToClientRect(rect) {
    const {
      x,
      y,
      width,
      height
    } = rect;
    return {
      width,
      height,
      top: y,
      left: x,
      right: x + width,
      bottom: y + height,
      x,
      y
    };
  }

  // node_modules/@floating-ui/core/dist/floating-ui.core.mjs
  function computeCoordsFromPlacement(_ref, placement, rtl) {
    let {
      reference,
      floating
    } = _ref;
    const sideAxis = getSideAxis(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const alignLength = getAxisLength(alignmentAxis);
    const side = getSide(placement);
    const isVertical = sideAxis === "y";
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case "right":
        coords = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference.x,
          y: reference.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case "end":
        coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  var computePosition = async (reference, floating, config) => {
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware = [],
      platform: platform2
    } = config;
    const validMiddleware = middleware.filter(Boolean);
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
    let rects = await platform2.getElementRects({
      reference,
      floating,
      strategy
    });
    let {
      x,
      y
    } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i = 0; i < validMiddleware.length; i++) {
      const {
        name,
        fn
      } = validMiddleware[i];
      const {
        x: nextX,
        y: nextY,
        data,
        reset
      } = await fn({
        x,
        y,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform: platform2,
        elements: {
          reference,
          floating
        }
      });
      x = nextX != null ? nextX : x;
      y = nextY != null ? nextY : y;
      middlewareData = {
        ...middlewareData,
        [name]: {
          ...middlewareData[name],
          ...data
        }
      };
      if (reset && resetCount <= 50) {
        resetCount++;
        if (typeof reset === "object") {
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (reset.rects) {
            rects = reset.rects === true ? await platform2.getElementRects({
              reference,
              floating,
              strategy
            }) : reset.rects;
          }
          ({
            x,
            y
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i = -1;
      }
    }
    return {
      x,
      y,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  };
  async function detectOverflow(state, options) {
    var _await$platform$isEle;
    if (options === void 0) {
      options = {};
    }
    const {
      x,
      y,
      platform: platform2,
      rects,
      elements,
      strategy
    } = state;
    const {
      boundary = "clippingAncestors",
      rootBoundary = "viewport",
      elementContext = "floating",
      altBoundary = false,
      padding = 0
    } = evaluate(options, state);
    const paddingObject = getPaddingObject(padding);
    const altContext = elementContext === "floating" ? "reference" : "floating";
    const element = elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
      element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
      boundary,
      rootBoundary,
      strategy
    }));
    const rect = elementContext === "floating" ? {
      x,
      y,
      width: rects.floating.width,
      height: rects.floating.height
    } : rects.reference;
    const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
    const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
      x: 1,
      y: 1
    } : {
      x: 1,
      y: 1
    };
    const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
      elements,
      rect,
      offsetParent,
      strategy
    }) : rect);
    return {
      top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
      bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
      left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
      right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
    };
  }
  var arrow = (options) => ({
    name: "arrow",
    options,
    async fn(state) {
      const {
        x,
        y,
        placement,
        rects,
        platform: platform2,
        elements,
        middlewareData
      } = state;
      const {
        element,
        padding = 0
      } = evaluate(options, state) || {};
      if (element == null) {
        return {};
      }
      const paddingObject = getPaddingObject(padding);
      const coords = {
        x,
        y
      };
      const axis = getAlignmentAxis(placement);
      const length = getAxisLength(axis);
      const arrowDimensions = await platform2.getDimensions(element);
      const isYAxis = axis === "y";
      const minProp = isYAxis ? "top" : "left";
      const maxProp = isYAxis ? "bottom" : "right";
      const clientProp = isYAxis ? "clientHeight" : "clientWidth";
      const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
      const startDiff = coords[axis] - rects.reference[axis];
      const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
      let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
      if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
        clientSize = elements.floating[clientProp] || rects.floating[length];
      }
      const centerToReference = endDiff / 2 - startDiff / 2;
      const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
      const minPadding = min(paddingObject[minProp], largestPossiblePadding);
      const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
      const min$1 = minPadding;
      const max2 = clientSize - arrowDimensions[length] - maxPadding;
      const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
      const offset4 = clamp3(min$1, center, max2);
      const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset4 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
      const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
      return {
        [axis]: coords[axis] + alignmentOffset,
        data: {
          [axis]: offset4,
          centerOffset: center - offset4 - alignmentOffset,
          ...shouldAddOffset && {
            alignmentOffset
          }
        },
        reset: shouldAddOffset
      };
    }
  });
  var flip = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "flip",
      options,
      async fn(state) {
        var _middlewareData$arrow, _middlewareData$flip;
        const {
          placement,
          middlewareData,
          rects,
          initialPlacement,
          platform: platform2,
          elements
        } = state;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true,
          fallbackPlacements: specifiedFallbackPlacements,
          fallbackStrategy = "bestFit",
          fallbackAxisSideDirection = "none",
          flipAlignment = true,
          ...detectOverflowOptions
        } = evaluate(options, state);
        if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        const side = getSide(placement);
        const initialSideAxis = getSideAxis(initialPlacement);
        const isBasePlacement = getSide(initialPlacement) === initialPlacement;
        const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
        const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
        if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
        }
        const placements2 = [initialPlacement, ...fallbackPlacements];
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const overflows = [];
        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
        if (checkMainAxis) {
          overflows.push(overflow[side]);
        }
        if (checkCrossAxis) {
          const sides2 = getAlignmentSides(placement, rects, rtl);
          overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
        }
        overflowsData = [...overflowsData, {
          placement,
          overflows
        }];
        if (!overflows.every((side2) => side2 <= 0)) {
          var _middlewareData$flip2, _overflowsData$filter;
          const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
          const nextPlacement = placements2[nextIndex];
          if (nextPlacement) {
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
          let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
          if (!resetPlacement) {
            switch (fallbackStrategy) {
              case "bestFit": {
                var _overflowsData$filter2;
                const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                  if (hasFallbackAxisSideDirection) {
                    const currentSideAxis = getSideAxis(d.placement);
                    return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                    // reading directions favoring greater width.
                    currentSideAxis === "y";
                  }
                  return true;
                }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
                if (placement2) {
                  resetPlacement = placement2;
                }
                break;
              }
              case "initialPlacement":
                resetPlacement = initialPlacement;
                break;
            }
          }
          if (placement !== resetPlacement) {
            return {
              reset: {
                placement: resetPlacement
              }
            };
          }
        }
        return {};
      }
    };
  };
  function getSideOffsets(overflow, rect) {
    return {
      top: overflow.top - rect.height,
      right: overflow.right - rect.width,
      bottom: overflow.bottom - rect.height,
      left: overflow.left - rect.width
    };
  }
  function isAnySideFullyClipped(overflow) {
    return sides.some((side) => overflow[side] >= 0);
  }
  var hide = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "hide",
      options,
      async fn(state) {
        const {
          rects
        } = state;
        const {
          strategy = "referenceHidden",
          ...detectOverflowOptions
        } = evaluate(options, state);
        switch (strategy) {
          case "referenceHidden": {
            const overflow = await detectOverflow(state, {
              ...detectOverflowOptions,
              elementContext: "reference"
            });
            const offsets = getSideOffsets(overflow, rects.reference);
            return {
              data: {
                referenceHiddenOffsets: offsets,
                referenceHidden: isAnySideFullyClipped(offsets)
              }
            };
          }
          case "escaped": {
            const overflow = await detectOverflow(state, {
              ...detectOverflowOptions,
              altBoundary: true
            });
            const offsets = getSideOffsets(overflow, rects.floating);
            return {
              data: {
                escapedOffsets: offsets,
                escaped: isAnySideFullyClipped(offsets)
              }
            };
          }
          default: {
            return {};
          }
        }
      }
    };
  };
  async function convertValueToCoords(state, options) {
    const {
      placement,
      platform: platform2,
      elements
    } = state;
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
    const side = getSide(placement);
    const alignment = getAlignment(placement);
    const isVertical = getSideAxis(placement) === "y";
    const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
    const crossAxisMulti = rtl && isVertical ? -1 : 1;
    const rawValue = evaluate(options, state);
    let {
      mainAxis,
      crossAxis,
      alignmentAxis
    } = typeof rawValue === "number" ? {
      mainAxis: rawValue,
      crossAxis: 0,
      alignmentAxis: null
    } : {
      mainAxis: rawValue.mainAxis || 0,
      crossAxis: rawValue.crossAxis || 0,
      alignmentAxis: rawValue.alignmentAxis
    };
    if (alignment && typeof alignmentAxis === "number") {
      crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
    }
    return isVertical ? {
      x: crossAxis * crossAxisMulti,
      y: mainAxis * mainAxisMulti
    } : {
      x: mainAxis * mainAxisMulti,
      y: crossAxis * crossAxisMulti
    };
  }
  var offset = function(options) {
    if (options === void 0) {
      options = 0;
    }
    return {
      name: "offset",
      options,
      async fn(state) {
        var _middlewareData$offse, _middlewareData$arrow;
        const {
          x,
          y,
          placement,
          middlewareData
        } = state;
        const diffCoords = await convertValueToCoords(state, options);
        if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        return {
          x: x + diffCoords.x,
          y: y + diffCoords.y,
          data: {
            ...diffCoords,
            placement
          }
        };
      }
    };
  };
  var shift = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "shift",
      options,
      async fn(state) {
        const {
          x,
          y,
          placement
        } = state;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = false,
          limiter = {
            fn: (_ref) => {
              let {
                x: x2,
                y: y2
              } = _ref;
              return {
                x: x2,
                y: y2
              };
            }
          },
          ...detectOverflowOptions
        } = evaluate(options, state);
        const coords = {
          x,
          y
        };
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const crossAxis = getSideAxis(getSide(placement));
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        if (checkMainAxis) {
          const minSide = mainAxis === "y" ? "top" : "left";
          const maxSide = mainAxis === "y" ? "bottom" : "right";
          const min3 = mainAxisCoord + overflow[minSide];
          const max2 = mainAxisCoord - overflow[maxSide];
          mainAxisCoord = clamp3(min3, mainAxisCoord, max2);
        }
        if (checkCrossAxis) {
          const minSide = crossAxis === "y" ? "top" : "left";
          const maxSide = crossAxis === "y" ? "bottom" : "right";
          const min3 = crossAxisCoord + overflow[minSide];
          const max2 = crossAxisCoord - overflow[maxSide];
          crossAxisCoord = clamp3(min3, crossAxisCoord, max2);
        }
        const limitedCoords = limiter.fn({
          ...state,
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        });
        return {
          ...limitedCoords,
          data: {
            x: limitedCoords.x - x,
            y: limitedCoords.y - y,
            enabled: {
              [mainAxis]: checkMainAxis,
              [crossAxis]: checkCrossAxis
            }
          }
        };
      }
    };
  };
  var limitShift = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      options,
      fn(state) {
        const {
          x,
          y,
          placement,
          rects,
          middlewareData
        } = state;
        const {
          offset: offset4 = 0,
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true
        } = evaluate(options, state);
        const coords = {
          x,
          y
        };
        const crossAxis = getSideAxis(placement);
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        const rawOffset = evaluate(offset4, state);
        const computedOffset = typeof rawOffset === "number" ? {
          mainAxis: rawOffset,
          crossAxis: 0
        } : {
          mainAxis: 0,
          crossAxis: 0,
          ...rawOffset
        };
        if (checkMainAxis) {
          const len = mainAxis === "y" ? "height" : "width";
          const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
          const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
          if (mainAxisCoord < limitMin) {
            mainAxisCoord = limitMin;
          } else if (mainAxisCoord > limitMax) {
            mainAxisCoord = limitMax;
          }
        }
        if (checkCrossAxis) {
          var _middlewareData$offse, _middlewareData$offse2;
          const len = mainAxis === "y" ? "width" : "height";
          const isOriginSide = ["top", "left"].includes(getSide(placement));
          const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
          const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
          if (crossAxisCoord < limitMin) {
            crossAxisCoord = limitMin;
          } else if (crossAxisCoord > limitMax) {
            crossAxisCoord = limitMax;
          }
        }
        return {
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        };
      }
    };
  };
  var size = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "size",
      options,
      async fn(state) {
        var _state$middlewareData, _state$middlewareData2;
        const {
          placement,
          rects,
          platform: platform2,
          elements
        } = state;
        const {
          apply = () => {
          },
          ...detectOverflowOptions
        } = evaluate(options, state);
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const side = getSide(placement);
        const alignment = getAlignment(placement);
        const isYAxis = getSideAxis(placement) === "y";
        const {
          width,
          height
        } = rects.floating;
        let heightSide;
        let widthSide;
        if (side === "top" || side === "bottom") {
          heightSide = side;
          widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
        } else {
          widthSide = side;
          heightSide = alignment === "end" ? "top" : "bottom";
        }
        const maximumClippingHeight = height - overflow.top - overflow.bottom;
        const maximumClippingWidth = width - overflow.left - overflow.right;
        const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
        const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
        const noShift = !state.middlewareData.shift;
        let availableHeight = overflowAvailableHeight;
        let availableWidth = overflowAvailableWidth;
        if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
          availableWidth = maximumClippingWidth;
        }
        if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
          availableHeight = maximumClippingHeight;
        }
        if (noShift && !alignment) {
          const xMin = max(overflow.left, 0);
          const xMax = max(overflow.right, 0);
          const yMin = max(overflow.top, 0);
          const yMax = max(overflow.bottom, 0);
          if (isYAxis) {
            availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
          } else {
            availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
          }
        }
        await apply({
          ...state,
          availableWidth,
          availableHeight
        });
        const nextDimensions = await platform2.getDimensions(elements.floating);
        if (width !== nextDimensions.width || height !== nextDimensions.height) {
          return {
            reset: {
              rects: true
            }
          };
        }
        return {};
      }
    };
  };

  // node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
  function hasWindow() {
    return typeof window !== "undefined";
  }
  function getNodeName(node) {
    if (isNode(node)) {
      return (node.nodeName || "").toLowerCase();
    }
    return "#document";
  }
  function getWindow2(node) {
    var _node$ownerDocument;
    return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }
  function getDocumentElement(node) {
    var _ref;
    return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
  }
  function isNode(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Node || value instanceof getWindow2(value).Node;
  }
  function isElement2(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Element || value instanceof getWindow2(value).Element;
  }
  function isHTMLElement(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof HTMLElement || value instanceof getWindow2(value).HTMLElement;
  }
  function isShadowRoot2(value) {
    if (!hasWindow() || typeof ShadowRoot === "undefined") {
      return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow2(value).ShadowRoot;
  }
  function isOverflowElement(element) {
    const {
      overflow,
      overflowX,
      overflowY,
      display
    } = getComputedStyle3(element);
    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
  }
  function isTableElement(element) {
    return ["table", "td", "th"].includes(getNodeName(element));
  }
  function isTopLayer(element) {
    return [":popover-open", ":modal"].some((selector) => {
      try {
        return element.matches(selector);
      } catch (e) {
        return false;
      }
    });
  }
  function isContainingBlock(elementOrCss) {
    const webkit = isWebKit();
    const css = isElement2(elementOrCss) ? getComputedStyle3(elementOrCss) : elementOrCss;
    return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
  }
  function getContainingBlock(element) {
    let currentNode = getParentNode(element);
    while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else if (isTopLayer(currentNode)) {
        return null;
      }
      currentNode = getParentNode(currentNode);
    }
    return null;
  }
  function isWebKit() {
    if (typeof CSS === "undefined" || !CSS.supports) return false;
    return CSS.supports("-webkit-backdrop-filter", "none");
  }
  function isLastTraversableNode(node) {
    return ["html", "body", "#document"].includes(getNodeName(node));
  }
  function getComputedStyle3(element) {
    return getWindow2(element).getComputedStyle(element);
  }
  function getNodeScroll(element) {
    if (isElement2(element)) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    return {
      scrollLeft: element.scrollX,
      scrollTop: element.scrollY
    };
  }
  function getParentNode(node) {
    if (getNodeName(node) === "html") {
      return node;
    }
    const result = (
      // Step into the shadow DOM of the parent of a slotted node.
      node.assignedSlot || // DOM Element detected.
      node.parentNode || // ShadowRoot detected.
      isShadowRoot2(node) && node.host || // Fallback.
      getDocumentElement(node)
    );
    return isShadowRoot2(result) ? result.host : result;
  }
  function getNearestOverflowAncestor(node) {
    const parentNode = getParentNode(node);
    if (isLastTraversableNode(parentNode)) {
      return node.ownerDocument ? node.ownerDocument.body : node.body;
    }
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }
  function getOverflowAncestors(node, list, traverseIframes) {
    var _node$ownerDocument2;
    if (list === void 0) {
      list = [];
    }
    if (traverseIframes === void 0) {
      traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor(node);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win = getWindow2(scrollableAncestor);
    if (isBody) {
      const frameElement = getFrameElement(win);
      return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
  }
  function getFrameElement(win) {
    return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
  }

  // node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
  function getCssDimensions(element) {
    const css = getComputedStyle3(element);
    let width = parseFloat(css.width) || 0;
    let height = parseFloat(css.height) || 0;
    const hasOffset = isHTMLElement(element);
    const offsetWidth = hasOffset ? element.offsetWidth : width;
    const offsetHeight = hasOffset ? element.offsetHeight : height;
    const shouldFallback = round2(width) !== offsetWidth || round2(height) !== offsetHeight;
    if (shouldFallback) {
      width = offsetWidth;
      height = offsetHeight;
    }
    return {
      width,
      height,
      $: shouldFallback
    };
  }
  function unwrapElement(element) {
    return !isElement2(element) ? element.contextElement : element;
  }
  function getScale(element) {
    const domElement = unwrapElement(element);
    if (!isHTMLElement(domElement)) {
      return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const {
      width,
      height,
      $
    } = getCssDimensions(domElement);
    let x = ($ ? round2(rect.width) : rect.width) / width;
    let y = ($ ? round2(rect.height) : rect.height) / height;
    if (!x || !Number.isFinite(x)) {
      x = 1;
    }
    if (!y || !Number.isFinite(y)) {
      y = 1;
    }
    return {
      x,
      y
    };
  }
  var noOffsets = /* @__PURE__ */ createCoords(0);
  function getVisualOffsets(element) {
    const win = getWindow2(element);
    if (!isWebKit() || !win.visualViewport) {
      return noOffsets;
    }
    return {
      x: win.visualViewport.offsetLeft,
      y: win.visualViewport.offsetTop
    };
  }
  function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow2(element)) {
      return false;
    }
    return isFixed;
  }
  function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    const domElement = unwrapElement(element);
    let scale = createCoords(1);
    if (includeScale) {
      if (offsetParent) {
        if (isElement2(offsetParent)) {
          scale = getScale(offsetParent);
        }
      } else {
        scale = getScale(element);
      }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x = (clientRect.left + visualOffsets.x) / scale.x;
    let y = (clientRect.top + visualOffsets.y) / scale.y;
    let width = clientRect.width / scale.x;
    let height = clientRect.height / scale.y;
    if (domElement) {
      const win = getWindow2(domElement);
      const offsetWin = offsetParent && isElement2(offsetParent) ? getWindow2(offsetParent) : offsetParent;
      let currentWin = win;
      let currentIFrame = getFrameElement(currentWin);
      while (currentIFrame && offsetParent && offsetWin !== currentWin) {
        const iframeScale = getScale(currentIFrame);
        const iframeRect = currentIFrame.getBoundingClientRect();
        const css = getComputedStyle3(currentIFrame);
        const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
        const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
        x *= iframeScale.x;
        y *= iframeScale.y;
        width *= iframeScale.x;
        height *= iframeScale.y;
        x += left;
        y += top;
        currentWin = getWindow2(currentIFrame);
        currentIFrame = getFrameElement(currentWin);
      }
    }
    return rectToClientRect({
      width,
      height,
      x,
      y
    });
  }
  function getWindowScrollBarX(element, rect) {
    const leftScroll = getNodeScroll(element).scrollLeft;
    if (!rect) {
      return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
    }
    return rect.left + leftScroll;
  }
  function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
    if (ignoreScrollbarX === void 0) {
      ignoreScrollbarX = false;
    }
    const htmlRect = documentElement.getBoundingClientRect();
    const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
      // RTL <body> scrollbar.
      getWindowScrollBarX(documentElement, htmlRect)
    ));
    const y = htmlRect.top + scroll.scrollTop;
    return {
      x,
      y
    };
  }
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let {
      elements,
      rect,
      offsetParent,
      strategy
    } = _ref;
    const isFixed = strategy === "fixed";
    const documentElement = getDocumentElement(offsetParent);
    const topLayer = elements ? isTopLayer(elements.floating) : false;
    if (offsetParent === documentElement || topLayer && isFixed) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale = createCoords(1);
    const offsets = createCoords(0);
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent);
        scale = getScale(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
    return {
      width: rect.width * scale.x,
      height: rect.height * scale.y,
      x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
      y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
    };
  }
  function getClientRects(element) {
    return Array.from(element.getClientRects());
  }
  function getDocumentRect(element) {
    const html = getDocumentElement(element);
    const scroll = getNodeScroll(element);
    const body = element.ownerDocument.body;
    const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
    const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
    let x = -scroll.scrollLeft + getWindowScrollBarX(element);
    const y = -scroll.scrollTop;
    if (getComputedStyle3(body).direction === "rtl") {
      x += max(html.clientWidth, body.clientWidth) - width;
    }
    return {
      width,
      height,
      x,
      y
    };
  }
  function getViewportRect(element, strategy) {
    const win = getWindow2(element);
    const html = getDocumentElement(element);
    const visualViewport = win.visualViewport;
    let width = html.clientWidth;
    let height = html.clientHeight;
    let x = 0;
    let y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const visualViewportBased = isWebKit();
      if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x,
      y
    };
  }
  function getInnerBoundingClientRect(element, strategy) {
    const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
    const top = clientRect.top + element.clientTop;
    const left = clientRect.left + element.clientLeft;
    const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
    const width = element.clientWidth * scale.x;
    const height = element.clientHeight * scale.y;
    const x = left * scale.x;
    const y = top * scale.y;
    return {
      width,
      height,
      x,
      y
    };
  }
  function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === "viewport") {
      rect = getViewportRect(element, strategy);
    } else if (clippingAncestor === "document") {
      rect = getDocumentRect(getDocumentElement(element));
    } else if (isElement2(clippingAncestor)) {
      rect = getInnerBoundingClientRect(clippingAncestor, strategy);
    } else {
      const visualOffsets = getVisualOffsets(element);
      rect = {
        x: clippingAncestor.x - visualOffsets.x,
        y: clippingAncestor.y - visualOffsets.y,
        width: clippingAncestor.width,
        height: clippingAncestor.height
      };
    }
    return rectToClientRect(rect);
  }
  function hasFixedPositionAncestor(element, stopNode) {
    const parentNode = getParentNode(element);
    if (parentNode === stopNode || !isElement2(parentNode) || isLastTraversableNode(parentNode)) {
      return false;
    }
    return getComputedStyle3(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
  }
  function getClippingElementAncestors(element, cache) {
    const cachedResult = cache.get(element);
    if (cachedResult) {
      return cachedResult;
    }
    let result = getOverflowAncestors(element, [], false).filter((el) => isElement2(el) && getNodeName(el) !== "body");
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle3(element).position === "fixed";
    let currentNode = elementIsFixed ? getParentNode(element) : element;
    while (isElement2(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle3(currentNode);
      const currentNodeIsContaining = isContainingBlock(currentNode);
      if (!currentNodeIsContaining && computedStyle.position === "fixed") {
        currentContainingBlockComputedStyle = null;
      }
      const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
      if (shouldDropCurrentNode) {
        result = result.filter((ancestor) => ancestor !== currentNode);
      } else {
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode(currentNode);
    }
    cache.set(element, result);
    return result;
  }
  function getClippingRect(_ref) {
    let {
      element,
      boundary,
      rootBoundary,
      strategy
    } = _ref;
    const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  function getDimensions(element) {
    const {
      width,
      height
    } = getCssDimensions(element);
    return {
      width,
      height
    };
  }
  function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const isFixed = strategy === "fixed";
    const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isOffsetParentAnElement) {
        const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
    const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
    const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
    return {
      x,
      y,
      width: rect.width,
      height: rect.height
    };
  }
  function isStaticPositioned(element) {
    return getComputedStyle3(element).position === "static";
  }
  function getTrueOffsetParent(element, polyfill) {
    if (!isHTMLElement(element) || getComputedStyle3(element).position === "fixed") {
      return null;
    }
    if (polyfill) {
      return polyfill(element);
    }
    let rawOffsetParent = element.offsetParent;
    if (getDocumentElement(element) === rawOffsetParent) {
      rawOffsetParent = rawOffsetParent.ownerDocument.body;
    }
    return rawOffsetParent;
  }
  function getOffsetParent(element, polyfill) {
    const win = getWindow2(element);
    if (isTopLayer(element)) {
      return win;
    }
    if (!isHTMLElement(element)) {
      let svgOffsetParent = getParentNode(element);
      while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
        if (isElement2(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
          return svgOffsetParent;
        }
        svgOffsetParent = getParentNode(svgOffsetParent);
      }
      return win;
    }
    let offsetParent = getTrueOffsetParent(element, polyfill);
    while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
      offsetParent = getTrueOffsetParent(offsetParent, polyfill);
    }
    if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
      return win;
    }
    return offsetParent || getContainingBlock(element) || win;
  }
  var getElementRects = async function(data) {
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    const floatingDimensions = await getDimensionsFn(data.floating);
    return {
      reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
      floating: {
        x: 0,
        y: 0,
        width: floatingDimensions.width,
        height: floatingDimensions.height
      }
    };
  };
  function isRTL(element) {
    return getComputedStyle3(element).direction === "rtl";
  }
  var platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement: isElement2,
    isRTL
  };
  function rectsAreEqual(a, b) {
    return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;
  }
  function observeMove(element, onMove) {
    let io = null;
    let timeoutId;
    const root = getDocumentElement(element);
    function cleanup() {
      var _io;
      clearTimeout(timeoutId);
      (_io = io) == null || _io.disconnect();
      io = null;
    }
    function refresh(skip, threshold) {
      if (skip === void 0) {
        skip = false;
      }
      if (threshold === void 0) {
        threshold = 1;
      }
      cleanup();
      const elementRectForRootMargin = element.getBoundingClientRect();
      const {
        left,
        top,
        width,
        height
      } = elementRectForRootMargin;
      if (!skip) {
        onMove();
      }
      if (!width || !height) {
        return;
      }
      const insetTop = floor(top);
      const insetRight = floor(root.clientWidth - (left + width));
      const insetBottom = floor(root.clientHeight - (top + height));
      const insetLeft = floor(left);
      const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
      const options = {
        rootMargin,
        threshold: max(0, min(1, threshold)) || 1
      };
      let isFirstUpdate = true;
      function handleObserve(entries) {
        const ratio = entries[0].intersectionRatio;
        if (ratio !== threshold) {
          if (!isFirstUpdate) {
            return refresh();
          }
          if (!ratio) {
            timeoutId = setTimeout(() => {
              refresh(false, 1e-7);
            }, 1e3);
          } else {
            refresh(false, ratio);
          }
        }
        if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
          refresh();
        }
        isFirstUpdate = false;
      }
      try {
        io = new IntersectionObserver(handleObserve, {
          ...options,
          // Handle <iframe>s
          root: root.ownerDocument
        });
      } catch (e) {
        io = new IntersectionObserver(handleObserve, options);
      }
      io.observe(element);
    }
    refresh(true);
    return cleanup;
  }
  function autoUpdate(reference, floating, update, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      ancestorScroll = true,
      ancestorResize = true,
      elementResize = typeof ResizeObserver === "function",
      layoutShift = typeof IntersectionObserver === "function",
      animationFrame = false
    } = options;
    const referenceEl = unwrapElement(reference);
    const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.addEventListener("scroll", update, {
        passive: true
      });
      ancestorResize && ancestor.addEventListener("resize", update);
    });
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
    let reobserveFrame = -1;
    let resizeObserver = null;
    if (elementResize) {
      resizeObserver = new ResizeObserver((_ref) => {
        let [firstEntry] = _ref;
        if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
          resizeObserver.unobserve(floating);
          cancelAnimationFrame(reobserveFrame);
          reobserveFrame = requestAnimationFrame(() => {
            var _resizeObserver;
            (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
          });
        }
        update();
      });
      if (referenceEl && !animationFrame) {
        resizeObserver.observe(referenceEl);
      }
      resizeObserver.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
    if (animationFrame) {
      frameLoop();
    }
    function frameLoop() {
      const nextRefRect = getBoundingClientRect(reference);
      if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
        update();
      }
      prevRefRect = nextRefRect;
      frameId = requestAnimationFrame(frameLoop);
    }
    update();
    return () => {
      var _resizeObserver2;
      ancestors.forEach((ancestor) => {
        ancestorScroll && ancestor.removeEventListener("scroll", update);
        ancestorResize && ancestor.removeEventListener("resize", update);
      });
      cleanupIo == null || cleanupIo();
      (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
      resizeObserver = null;
      if (animationFrame) {
        cancelAnimationFrame(frameId);
      }
    };
  }
  var offset2 = offset;
  var shift2 = shift;
  var flip2 = flip;
  var size2 = size;
  var hide2 = hide;
  var arrow2 = arrow;
  var limitShift2 = limitShift;
  var computePosition2 = (reference, floating, options) => {
    const cache = /* @__PURE__ */ new Map();
    const mergedOptions = {
      platform,
      ...options
    };
    const platformWithCache = {
      ...mergedOptions.platform,
      _c: cache
    };
    return computePosition(reference, floating, {
      ...mergedOptions,
      platform: platformWithCache
    });
  };

  // node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
  var React26 = __toESM(require_react(), 1);
  var import_react51 = __toESM(require_react(), 1);
  var ReactDOM2 = __toESM(require_react_dom(), 1);
  var index = typeof document !== "undefined" ? import_react51.useLayoutEffect : import_react51.useEffect;
  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }
    if (typeof a !== typeof b) {
      return false;
    }
    if (typeof a === "function" && a.toString() === b.toString()) {
      return true;
    }
    let length;
    let i;
    let keys;
    if (a && b && typeof a === "object") {
      if (Array.isArray(a)) {
        length = a.length;
        if (length !== b.length) return false;
        for (i = length; i-- !== 0; ) {
          if (!deepEqual(a[i], b[i])) {
            return false;
          }
        }
        return true;
      }
      keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length) {
        return false;
      }
      for (i = length; i-- !== 0; ) {
        if (!{}.hasOwnProperty.call(b, keys[i])) {
          return false;
        }
      }
      for (i = length; i-- !== 0; ) {
        const key = keys[i];
        if (key === "_owner" && a.$$typeof) {
          continue;
        }
        if (!deepEqual(a[key], b[key])) {
          return false;
        }
      }
      return true;
    }
    return a !== a && b !== b;
  }
  function getDPR(element) {
    if (typeof window === "undefined") {
      return 1;
    }
    const win = element.ownerDocument.defaultView || window;
    return win.devicePixelRatio || 1;
  }
  function roundByDPR(element, value) {
    const dpr = getDPR(element);
    return Math.round(value * dpr) / dpr;
  }
  function useLatestRef(value) {
    const ref = React26.useRef(value);
    index(() => {
      ref.current = value;
    });
    return ref;
  }
  function useFloating(options) {
    if (options === void 0) {
      options = {};
    }
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware = [],
      platform: platform2,
      elements: {
        reference: externalReference,
        floating: externalFloating
      } = {},
      transform = true,
      whileElementsMounted,
      open
    } = options;
    const [data, setData] = React26.useState({
      x: 0,
      y: 0,
      strategy,
      placement,
      middlewareData: {},
      isPositioned: false
    });
    const [latestMiddleware, setLatestMiddleware] = React26.useState(middleware);
    if (!deepEqual(latestMiddleware, middleware)) {
      setLatestMiddleware(middleware);
    }
    const [_reference, _setReference] = React26.useState(null);
    const [_floating, _setFloating] = React26.useState(null);
    const setReference = React26.useCallback((node) => {
      if (node !== referenceRef.current) {
        referenceRef.current = node;
        _setReference(node);
      }
    }, []);
    const setFloating = React26.useCallback((node) => {
      if (node !== floatingRef.current) {
        floatingRef.current = node;
        _setFloating(node);
      }
    }, []);
    const referenceEl = externalReference || _reference;
    const floatingEl = externalFloating || _floating;
    const referenceRef = React26.useRef(null);
    const floatingRef = React26.useRef(null);
    const dataRef = React26.useRef(data);
    const hasWhileElementsMounted = whileElementsMounted != null;
    const whileElementsMountedRef = useLatestRef(whileElementsMounted);
    const platformRef = useLatestRef(platform2);
    const openRef = useLatestRef(open);
    const update = React26.useCallback(() => {
      if (!referenceRef.current || !floatingRef.current) {
        return;
      }
      const config = {
        placement,
        strategy,
        middleware: latestMiddleware
      };
      if (platformRef.current) {
        config.platform = platformRef.current;
      }
      computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
        const fullData = {
          ...data2,
          // The floating element's position may be recomputed while it's closed
          // but still mounted (such as when transitioning out). To ensure
          // `isPositioned` will be `false` initially on the next open, avoid
          // setting it to `true` when `open === false` (must be specified).
          isPositioned: openRef.current !== false
        };
        if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
          dataRef.current = fullData;
          ReactDOM2.flushSync(() => {
            setData(fullData);
          });
        }
      });
    }, [latestMiddleware, placement, strategy, platformRef, openRef]);
    index(() => {
      if (open === false && dataRef.current.isPositioned) {
        dataRef.current.isPositioned = false;
        setData((data2) => ({
          ...data2,
          isPositioned: false
        }));
      }
    }, [open]);
    const isMountedRef = React26.useRef(false);
    index(() => {
      isMountedRef.current = true;
      return () => {
        isMountedRef.current = false;
      };
    }, []);
    index(() => {
      if (referenceEl) referenceRef.current = referenceEl;
      if (floatingEl) floatingRef.current = floatingEl;
      if (referenceEl && floatingEl) {
        if (whileElementsMountedRef.current) {
          return whileElementsMountedRef.current(referenceEl, floatingEl, update);
        }
        update();
      }
    }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
    const refs = React26.useMemo(() => ({
      reference: referenceRef,
      floating: floatingRef,
      setReference,
      setFloating
    }), [setReference, setFloating]);
    const elements = React26.useMemo(() => ({
      reference: referenceEl,
      floating: floatingEl
    }), [referenceEl, floatingEl]);
    const floatingStyles = React26.useMemo(() => {
      const initialStyles = {
        position: strategy,
        left: 0,
        top: 0
      };
      if (!elements.floating) {
        return initialStyles;
      }
      const x = roundByDPR(elements.floating, data.x);
      const y = roundByDPR(elements.floating, data.y);
      if (transform) {
        return {
          ...initialStyles,
          transform: "translate(" + x + "px, " + y + "px)",
          ...getDPR(elements.floating) >= 1.5 && {
            willChange: "transform"
          }
        };
      }
      return {
        position: strategy,
        left: x,
        top: y
      };
    }, [strategy, transform, elements.floating, data.x, data.y]);
    return React26.useMemo(() => ({
      ...data,
      update,
      refs,
      elements,
      floatingStyles
    }), [data, update, refs, elements, floatingStyles]);
  }
  var arrow$1 = (options) => {
    function isRef(value) {
      return {}.hasOwnProperty.call(value, "current");
    }
    return {
      name: "arrow",
      options,
      fn(state) {
        const {
          element,
          padding
        } = typeof options === "function" ? options(state) : options;
        if (element && isRef(element)) {
          if (element.current != null) {
            return arrow2({
              element: element.current,
              padding
            }).fn(state);
          }
          return {};
        }
        if (element) {
          return arrow2({
            element,
            padding
          }).fn(state);
        }
        return {};
      }
    };
  };
  var offset3 = (options, deps) => ({
    ...offset2(options),
    options: [options, deps]
  });
  var shift3 = (options, deps) => ({
    ...shift2(options),
    options: [options, deps]
  });
  var limitShift3 = (options, deps) => ({
    ...limitShift2(options),
    options: [options, deps]
  });
  var flip3 = (options, deps) => ({
    ...flip2(options),
    options: [options, deps]
  });
  var size3 = (options, deps) => ({
    ...size2(options),
    options: [options, deps]
  });
  var hide3 = (options, deps) => ({
    ...hide2(options),
    options: [options, deps]
  });
  var arrow3 = (options, deps) => ({
    ...arrow$1(options),
    options: [options, deps]
  });

  // node_modules/@radix-ui/react-arrow/dist/index.mjs
  var React27 = __toESM(require_react(), 1);
  var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
  var NAME = "Arrow";
  var Arrow = React27.forwardRef((props, forwardedRef) => {
    const { children, width = 10, height = 5, ...arrowProps } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
      Primitive.svg,
      {
        ...arrowProps,
        ref: forwardedRef,
        width,
        height,
        viewBox: "0 0 30 10",
        preserveAspectRatio: "none",
        children: props.asChild ? children : /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("polygon", { points: "0,0 30,0 15,10" })
      }
    );
  });
  Arrow.displayName = NAME;
  var Root2 = Arrow;

  // node_modules/@radix-ui/react-use-size/dist/index.mjs
  var React28 = __toESM(require_react(), 1);
  function useSize(element) {
    const [size4, setSize] = React28.useState(void 0);
    useLayoutEffect22(() => {
      if (element) {
        setSize({ width: element.offsetWidth, height: element.offsetHeight });
        const resizeObserver = new ResizeObserver((entries) => {
          if (!Array.isArray(entries)) {
            return;
          }
          if (!entries.length) {
            return;
          }
          const entry2 = entries[0];
          let width;
          let height;
          if ("borderBoxSize" in entry2) {
            const borderSizeEntry = entry2["borderBoxSize"];
            const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
            width = borderSize["inlineSize"];
            height = borderSize["blockSize"];
          } else {
            width = element.offsetWidth;
            height = element.offsetHeight;
          }
          setSize({ width, height });
        });
        resizeObserver.observe(element, { box: "border-box" });
        return () => resizeObserver.unobserve(element);
      } else {
        setSize(void 0);
      }
    }, [element]);
    return size4;
  }

  // node_modules/@radix-ui/react-popper/dist/index.mjs
  var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
  var POPPER_NAME = "Popper";
  var [createPopperContext, createPopperScope] = createContextScope(POPPER_NAME);
  var [PopperProvider, usePopperContext] = createPopperContext(POPPER_NAME);
  var Popper = (props) => {
    const { __scopePopper, children } = props;
    const [anchor, setAnchor] = React29.useState(null);
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(PopperProvider, { scope: __scopePopper, anchor, onAnchorChange: setAnchor, children });
  };
  Popper.displayName = POPPER_NAME;
  var ANCHOR_NAME = "PopperAnchor";
  var PopperAnchor = React29.forwardRef(
    (props, forwardedRef) => {
      const { __scopePopper, virtualRef, ...anchorProps } = props;
      const context = usePopperContext(ANCHOR_NAME, __scopePopper);
      const ref = React29.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref);
      React29.useEffect(() => {
        context.onAnchorChange(virtualRef?.current || ref.current);
      });
      return virtualRef ? null : /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Primitive.div, { ...anchorProps, ref: composedRefs });
    }
  );
  PopperAnchor.displayName = ANCHOR_NAME;
  var CONTENT_NAME = "PopperContent";
  var [PopperContentProvider, useContentContext] = createPopperContext(CONTENT_NAME);
  var PopperContent = React29.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopePopper,
        side = "bottom",
        sideOffset = 0,
        align = "center",
        alignOffset = 0,
        arrowPadding = 0,
        avoidCollisions = true,
        collisionBoundary = [],
        collisionPadding: collisionPaddingProp = 0,
        sticky = "partial",
        hideWhenDetached = false,
        updatePositionStrategy = "optimized",
        onPlaced,
        ...contentProps
      } = props;
      const context = usePopperContext(CONTENT_NAME, __scopePopper);
      const [content, setContent] = React29.useState(null);
      const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));
      const [arrow4, setArrow] = React29.useState(null);
      const arrowSize = useSize(arrow4);
      const arrowWidth = arrowSize?.width ?? 0;
      const arrowHeight = arrowSize?.height ?? 0;
      const desiredPlacement = side + (align !== "center" ? "-" + align : "");
      const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : { top: 0, right: 0, bottom: 0, left: 0, ...collisionPaddingProp };
      const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [collisionBoundary];
      const hasExplicitBoundaries = boundary.length > 0;
      const detectOverflowOptions = {
        padding: collisionPadding,
        boundary: boundary.filter(isNotNull),
        // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries
        altBoundary: hasExplicitBoundaries
      };
      const { refs, floatingStyles, placement, isPositioned, middlewareData } = useFloating({
        // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues
        strategy: "fixed",
        placement: desiredPlacement,
        whileElementsMounted: (...args) => {
          const cleanup = autoUpdate(...args, {
            animationFrame: updatePositionStrategy === "always"
          });
          return cleanup;
        },
        elements: {
          reference: context.anchor
        },
        middleware: [
          offset3({ mainAxis: sideOffset + arrowHeight, alignmentAxis: alignOffset }),
          avoidCollisions && shift3({
            mainAxis: true,
            crossAxis: false,
            limiter: sticky === "partial" ? limitShift3() : void 0,
            ...detectOverflowOptions
          }),
          avoidCollisions && flip3({ ...detectOverflowOptions }),
          size3({
            ...detectOverflowOptions,
            apply: ({ elements, rects, availableWidth, availableHeight }) => {
              const { width: anchorWidth, height: anchorHeight } = rects.reference;
              const contentStyle = elements.floating.style;
              contentStyle.setProperty("--radix-popper-available-width", `${availableWidth}px`);
              contentStyle.setProperty("--radix-popper-available-height", `${availableHeight}px`);
              contentStyle.setProperty("--radix-popper-anchor-width", `${anchorWidth}px`);
              contentStyle.setProperty("--radix-popper-anchor-height", `${anchorHeight}px`);
            }
          }),
          arrow4 && arrow3({ element: arrow4, padding: arrowPadding }),
          transformOrigin({ arrowWidth, arrowHeight }),
          hideWhenDetached && hide3({ strategy: "referenceHidden", ...detectOverflowOptions })
        ]
      });
      const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);
      const handlePlaced = useCallbackRef(onPlaced);
      useLayoutEffect22(() => {
        if (isPositioned) {
          handlePlaced?.();
        }
      }, [isPositioned, handlePlaced]);
      const arrowX = middlewareData.arrow?.x;
      const arrowY = middlewareData.arrow?.y;
      const cannotCenterArrow = middlewareData.arrow?.centerOffset !== 0;
      const [contentZIndex, setContentZIndex] = React29.useState();
      useLayoutEffect22(() => {
        if (content) setContentZIndex(window.getComputedStyle(content).zIndex);
      }, [content]);
      return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
        "div",
        {
          ref: refs.setFloating,
          "data-radix-popper-content-wrapper": "",
          style: {
            ...floatingStyles,
            transform: isPositioned ? floatingStyles.transform : "translate(0, -200%)",
            // keep off the page when measuring
            minWidth: "max-content",
            zIndex: contentZIndex,
            ["--radix-popper-transform-origin"]: [
              middlewareData.transformOrigin?.x,
              middlewareData.transformOrigin?.y
            ].join(" "),
            // hide the content if using the hide middleware and should be hidden
            // set visibility to hidden and disable pointer events so the UI behaves
            // as if the PopperContent isn't there at all
            ...middlewareData.hide?.referenceHidden && {
              visibility: "hidden",
              pointerEvents: "none"
            }
          },
          dir: props.dir,
          children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
            PopperContentProvider,
            {
              scope: __scopePopper,
              placedSide,
              onArrowChange: setArrow,
              arrowX,
              arrowY,
              shouldHideArrow: cannotCenterArrow,
              children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
                Primitive.div,
                {
                  "data-side": placedSide,
                  "data-align": placedAlign,
                  ...contentProps,
                  ref: composedRefs,
                  style: {
                    ...contentProps.style,
                    // if the PopperContent hasn't been placed yet (not all measurements done)
                    // we prevent animations so that users's animation don't kick in too early referring wrong sides
                    animation: !isPositioned ? "none" : void 0
                  }
                }
              )
            }
          )
        }
      );
    }
  );
  PopperContent.displayName = CONTENT_NAME;
  var ARROW_NAME = "PopperArrow";
  var OPPOSITE_SIDE = {
    top: "bottom",
    right: "left",
    bottom: "top",
    left: "right"
  };
  var PopperArrow = React29.forwardRef(function PopperArrow2(props, forwardedRef) {
    const { __scopePopper, ...arrowProps } = props;
    const contentContext = useContentContext(ARROW_NAME, __scopePopper);
    const baseSide = OPPOSITE_SIDE[contentContext.placedSide];
    return (
      // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)
      // doesn't report size as we'd expect on SVG elements.
      // it reports their bounding box which is effectively the largest path inside the SVG.
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
        "span",
        {
          ref: contentContext.onArrowChange,
          style: {
            position: "absolute",
            left: contentContext.arrowX,
            top: contentContext.arrowY,
            [baseSide]: 0,
            transformOrigin: {
              top: "",
              right: "0 0",
              bottom: "center 0",
              left: "100% 0"
            }[contentContext.placedSide],
            transform: {
              top: "translateY(100%)",
              right: "translateY(50%) rotate(90deg) translateX(-50%)",
              bottom: `rotate(180deg)`,
              left: "translateY(50%) rotate(-90deg) translateX(50%)"
            }[contentContext.placedSide],
            visibility: contentContext.shouldHideArrow ? "hidden" : void 0
          },
          children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
            Root2,
            {
              ...arrowProps,
              ref: forwardedRef,
              style: {
                ...arrowProps.style,
                // ensures the element can be measured correctly (mostly for if SVG)
                display: "block"
              }
            }
          )
        }
      )
    );
  });
  PopperArrow.displayName = ARROW_NAME;
  function isNotNull(value) {
    return value !== null;
  }
  var transformOrigin = (options) => ({
    name: "transformOrigin",
    options,
    fn(data) {
      const { placement, rects, middlewareData } = data;
      const cannotCenterArrow = middlewareData.arrow?.centerOffset !== 0;
      const isArrowHidden = cannotCenterArrow;
      const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
      const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
      const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);
      const noArrowAlign = { start: "0%", center: "50%", end: "100%" }[placedAlign];
      const arrowXCenter = (middlewareData.arrow?.x ?? 0) + arrowWidth / 2;
      const arrowYCenter = (middlewareData.arrow?.y ?? 0) + arrowHeight / 2;
      let x = "";
      let y = "";
      if (placedSide === "bottom") {
        x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
        y = `${-arrowHeight}px`;
      } else if (placedSide === "top") {
        x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
        y = `${rects.floating.height + arrowHeight}px`;
      } else if (placedSide === "right") {
        x = `${-arrowHeight}px`;
        y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
      } else if (placedSide === "left") {
        x = `${rects.floating.width + arrowHeight}px`;
        y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
      }
      return { data: { x, y } };
    }
  });
  function getSideAndAlignFromPlacement(placement) {
    const [side, align = "center"] = placement.split("-");
    return [side, align];
  }
  var Root22 = Popper;
  var Anchor = PopperAnchor;
  var Content = PopperContent;
  var Arrow2 = PopperArrow;

  // node_modules/@radix-ui/react-portal/dist/index.mjs
  var React30 = __toESM(require_react(), 1);
  var import_react_dom4 = __toESM(require_react_dom(), 1);
  var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
  var PORTAL_NAME = "Portal";
  var Portal = React30.forwardRef((props, forwardedRef) => {
    const { container: containerProp, ...portalProps } = props;
    const [mounted, setMounted] = React30.useState(false);
    useLayoutEffect22(() => setMounted(true), []);
    const container = containerProp || mounted && globalThis?.document?.body;
    return container ? import_react_dom4.default.createPortal(/* @__PURE__ */ (0, import_jsx_runtime48.jsx)(Primitive.div, { ...portalProps, ref: forwardedRef }), container) : null;
  });
  Portal.displayName = PORTAL_NAME;

  // node_modules/@radix-ui/react-presence/dist/index.mjs
  var React210 = __toESM(require_react(), 1);
  var React31 = __toESM(require_react(), 1);
  function useStateMachine(initialState2, machine) {
    return React31.useReducer((state, event) => {
      const nextState = machine[state][event];
      return nextState ?? state;
    }, initialState2);
  }
  var Presence = (props) => {
    const { present, children } = props;
    const presence = usePresence2(present);
    const child = typeof children === "function" ? children({ present: presence.isPresent }) : React210.Children.only(children);
    const ref = useComposedRefs(presence.ref, getElementRef2(child));
    const forceMount = typeof children === "function";
    return forceMount || presence.isPresent ? React210.cloneElement(child, { ref }) : null;
  };
  Presence.displayName = "Presence";
  function usePresence2(present) {
    const [node, setNode] = React210.useState();
    const stylesRef = React210.useRef({});
    const prevPresentRef = React210.useRef(present);
    const prevAnimationNameRef = React210.useRef("none");
    const initialState2 = present ? "mounted" : "unmounted";
    const [state, send] = useStateMachine(initialState2, {
      mounted: {
        UNMOUNT: "unmounted",
        ANIMATION_OUT: "unmountSuspended"
      },
      unmountSuspended: {
        MOUNT: "mounted",
        ANIMATION_END: "unmounted"
      },
      unmounted: {
        MOUNT: "mounted"
      }
    });
    React210.useEffect(() => {
      const currentAnimationName = getAnimationName(stylesRef.current);
      prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
    }, [state]);
    useLayoutEffect22(() => {
      const styles = stylesRef.current;
      const wasPresent = prevPresentRef.current;
      const hasPresentChanged = wasPresent !== present;
      if (hasPresentChanged) {
        const prevAnimationName = prevAnimationNameRef.current;
        const currentAnimationName = getAnimationName(styles);
        if (present) {
          send("MOUNT");
        } else if (currentAnimationName === "none" || styles?.display === "none") {
          send("UNMOUNT");
        } else {
          const isAnimating = prevAnimationName !== currentAnimationName;
          if (wasPresent && isAnimating) {
            send("ANIMATION_OUT");
          } else {
            send("UNMOUNT");
          }
        }
        prevPresentRef.current = present;
      }
    }, [present, send]);
    useLayoutEffect22(() => {
      if (node) {
        let timeoutId;
        const ownerWindow = node.ownerDocument.defaultView ?? window;
        const handleAnimationEnd = (event) => {
          const currentAnimationName = getAnimationName(stylesRef.current);
          const isCurrentAnimation = currentAnimationName.includes(event.animationName);
          if (event.target === node && isCurrentAnimation) {
            send("ANIMATION_END");
            if (!prevPresentRef.current) {
              const currentFillMode = node.style.animationFillMode;
              node.style.animationFillMode = "forwards";
              timeoutId = ownerWindow.setTimeout(() => {
                if (node.style.animationFillMode === "forwards") {
                  node.style.animationFillMode = currentFillMode;
                }
              });
            }
          }
        };
        const handleAnimationStart = (event) => {
          if (event.target === node) {
            prevAnimationNameRef.current = getAnimationName(stylesRef.current);
          }
        };
        node.addEventListener("animationstart", handleAnimationStart);
        node.addEventListener("animationcancel", handleAnimationEnd);
        node.addEventListener("animationend", handleAnimationEnd);
        return () => {
          ownerWindow.clearTimeout(timeoutId);
          node.removeEventListener("animationstart", handleAnimationStart);
          node.removeEventListener("animationcancel", handleAnimationEnd);
          node.removeEventListener("animationend", handleAnimationEnd);
        };
      } else {
        send("ANIMATION_END");
      }
    }, [node, send]);
    return {
      isPresent: ["mounted", "unmountSuspended"].includes(state),
      ref: React210.useCallback((node2) => {
        if (node2) stylesRef.current = getComputedStyle(node2);
        setNode(node2);
      }, [])
    };
  }
  function getAnimationName(styles) {
    return styles?.animationName || "none";
  }
  function getElementRef2(element) {
    let getter = Object.getOwnPropertyDescriptor(element.props, "ref")?.get;
    let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.ref;
    }
    getter = Object.getOwnPropertyDescriptor(element, "ref")?.get;
    mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.props.ref;
    }
    return element.props.ref || element.ref;
  }

  // node_modules/@radix-ui/react-roving-focus/dist/index.mjs
  var React33 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs
  var React32 = __toESM(require_react(), 1);
  function useControllableState({
    prop,
    defaultProp,
    onChange = () => {
    }
  }) {
    const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });
    const isControlled = prop !== void 0;
    const value = isControlled ? prop : uncontrolledProp;
    const handleChange = useCallbackRef(onChange);
    const setValue = React32.useCallback(
      (nextValue) => {
        if (isControlled) {
          const setter = nextValue;
          const value2 = typeof nextValue === "function" ? setter(prop) : nextValue;
          if (value2 !== prop) handleChange(value2);
        } else {
          setUncontrolledProp(nextValue);
        }
      },
      [isControlled, prop, setUncontrolledProp, handleChange]
    );
    return [value, setValue];
  }
  function useUncontrolledState({
    defaultProp,
    onChange
  }) {
    const uncontrolledState = React32.useState(defaultProp);
    const [value] = uncontrolledState;
    const prevValueRef = React32.useRef(value);
    const handleChange = useCallbackRef(onChange);
    React32.useEffect(() => {
      if (prevValueRef.current !== value) {
        handleChange(value);
        prevValueRef.current = value;
      }
    }, [value, prevValueRef, handleChange]);
    return uncontrolledState;
  }

  // node_modules/@radix-ui/react-roving-focus/dist/index.mjs
  var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
  var ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
  var EVENT_OPTIONS2 = { bubbles: false, cancelable: true };
  var GROUP_NAME = "RovingFocusGroup";
  var [Collection, useCollection, createCollectionScope] = createCollection(GROUP_NAME);
  var [createRovingFocusGroupContext, createRovingFocusGroupScope] = createContextScope(
    GROUP_NAME,
    [createCollectionScope]
  );
  var [RovingFocusProvider, useRovingFocusContext] = createRovingFocusGroupContext(GROUP_NAME);
  var RovingFocusGroup = React33.forwardRef(
    (props, forwardedRef) => {
      return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Collection.Provider, { scope: props.__scopeRovingFocusGroup, children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Collection.Slot, { scope: props.__scopeRovingFocusGroup, children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(RovingFocusGroupImpl, { ...props, ref: forwardedRef }) }) });
    }
  );
  RovingFocusGroup.displayName = GROUP_NAME;
  var RovingFocusGroupImpl = React33.forwardRef((props, forwardedRef) => {
    const {
      __scopeRovingFocusGroup,
      orientation,
      loop = false,
      dir,
      currentTabStopId: currentTabStopIdProp,
      defaultCurrentTabStopId,
      onCurrentTabStopIdChange,
      onEntryFocus,
      preventScrollOnEntryFocus = false,
      ...groupProps
    } = props;
    const ref = React33.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const direction = useDirection(dir);
    const [currentTabStopId = null, setCurrentTabStopId] = useControllableState({
      prop: currentTabStopIdProp,
      defaultProp: defaultCurrentTabStopId,
      onChange: onCurrentTabStopIdChange
    });
    const [isTabbingBackOut, setIsTabbingBackOut] = React33.useState(false);
    const handleEntryFocus = useCallbackRef(onEntryFocus);
    const getItems = useCollection(__scopeRovingFocusGroup);
    const isClickFocusRef = React33.useRef(false);
    const [focusableItemsCount, setFocusableItemsCount] = React33.useState(0);
    React33.useEffect(() => {
      const node = ref.current;
      if (node) {
        node.addEventListener(ENTRY_FOCUS, handleEntryFocus);
        return () => node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);
      }
    }, [handleEntryFocus]);
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
      RovingFocusProvider,
      {
        scope: __scopeRovingFocusGroup,
        orientation,
        dir: direction,
        loop,
        currentTabStopId,
        onItemFocus: React33.useCallback(
          (tabStopId) => setCurrentTabStopId(tabStopId),
          [setCurrentTabStopId]
        ),
        onItemShiftTab: React33.useCallback(() => setIsTabbingBackOut(true), []),
        onFocusableItemAdd: React33.useCallback(
          () => setFocusableItemsCount((prevCount) => prevCount + 1),
          []
        ),
        onFocusableItemRemove: React33.useCallback(
          () => setFocusableItemsCount((prevCount) => prevCount - 1),
          []
        ),
        children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
          Primitive.div,
          {
            tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
            "data-orientation": orientation,
            ...groupProps,
            ref: composedRefs,
            style: { outline: "none", ...props.style },
            onMouseDown: composeEventHandlers(props.onMouseDown, () => {
              isClickFocusRef.current = true;
            }),
            onFocus: composeEventHandlers(props.onFocus, (event) => {
              const isKeyboardFocus = !isClickFocusRef.current;
              if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
                const entryFocusEvent = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS2);
                event.currentTarget.dispatchEvent(entryFocusEvent);
                if (!entryFocusEvent.defaultPrevented) {
                  const items = getItems().filter((item) => item.focusable);
                  const activeItem = items.find((item) => item.active);
                  const currentItem = items.find((item) => item.id === currentTabStopId);
                  const candidateItems = [activeItem, currentItem, ...items].filter(
                    Boolean
                  );
                  const candidateNodes = candidateItems.map((item) => item.ref.current);
                  focusFirst2(candidateNodes, preventScrollOnEntryFocus);
                }
              }
              isClickFocusRef.current = false;
            }),
            onBlur: composeEventHandlers(props.onBlur, () => setIsTabbingBackOut(false))
          }
        )
      }
    );
  });
  var ITEM_NAME = "RovingFocusGroupItem";
  var RovingFocusGroupItem = React33.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeRovingFocusGroup,
        focusable = true,
        active = false,
        tabStopId,
        ...itemProps
      } = props;
      const autoId = useId2();
      const id = tabStopId || autoId;
      const context = useRovingFocusContext(ITEM_NAME, __scopeRovingFocusGroup);
      const isCurrentTabStop = context.currentTabStopId === id;
      const getItems = useCollection(__scopeRovingFocusGroup);
      const { onFocusableItemAdd, onFocusableItemRemove } = context;
      React33.useEffect(() => {
        if (focusable) {
          onFocusableItemAdd();
          return () => onFocusableItemRemove();
        }
      }, [focusable, onFocusableItemAdd, onFocusableItemRemove]);
      return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
        Collection.ItemSlot,
        {
          scope: __scopeRovingFocusGroup,
          id,
          focusable,
          active,
          children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
            Primitive.span,
            {
              tabIndex: isCurrentTabStop ? 0 : -1,
              "data-orientation": context.orientation,
              ...itemProps,
              ref: forwardedRef,
              onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
                if (!focusable) event.preventDefault();
                else context.onItemFocus(id);
              }),
              onFocus: composeEventHandlers(props.onFocus, () => context.onItemFocus(id)),
              onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
                if (event.key === "Tab" && event.shiftKey) {
                  context.onItemShiftTab();
                  return;
                }
                if (event.target !== event.currentTarget) return;
                const focusIntent = getFocusIntent(event, context.orientation, context.dir);
                if (focusIntent !== void 0) {
                  if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) return;
                  event.preventDefault();
                  const items = getItems().filter((item) => item.focusable);
                  let candidateNodes = items.map((item) => item.ref.current);
                  if (focusIntent === "last") candidateNodes.reverse();
                  else if (focusIntent === "prev" || focusIntent === "next") {
                    if (focusIntent === "prev") candidateNodes.reverse();
                    const currentIndex = candidateNodes.indexOf(event.currentTarget);
                    candidateNodes = context.loop ? wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
                  }
                  setTimeout(() => focusFirst2(candidateNodes));
                }
              })
            }
          )
        }
      );
    }
  );
  RovingFocusGroupItem.displayName = ITEM_NAME;
  var MAP_KEY_TO_FOCUS_INTENT = {
    ArrowLeft: "prev",
    ArrowUp: "prev",
    ArrowRight: "next",
    ArrowDown: "next",
    PageUp: "first",
    Home: "first",
    PageDown: "last",
    End: "last"
  };
  function getDirectionAwareKey(key, dir) {
    if (dir !== "rtl") return key;
    return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
  }
  function getFocusIntent(event, orientation, dir) {
    const key = getDirectionAwareKey(event.key, dir);
    if (orientation === "vertical" && ["ArrowLeft", "ArrowRight"].includes(key)) return void 0;
    if (orientation === "horizontal" && ["ArrowUp", "ArrowDown"].includes(key)) return void 0;
    return MAP_KEY_TO_FOCUS_INTENT[key];
  }
  function focusFirst2(candidates, preventScroll = false) {
    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
    for (const candidate of candidates) {
      if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
      candidate.focus({ preventScroll });
      if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
    }
  }
  function wrapArray(array2, startIndex) {
    return array2.map((_, index2) => array2[(startIndex + index2) % array2.length]);
  }
  var Root3 = RovingFocusGroup;
  var Item = RovingFocusGroupItem;

  // node_modules/aria-hidden/dist/es2015/index.js
  var getDefaultParent = function(originalTarget) {
    if (typeof document === "undefined") {
      return null;
    }
    var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
    return sampleTarget.ownerDocument.body;
  };
  var counterMap = /* @__PURE__ */ new WeakMap();
  var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
  var markerMap = {};
  var lockCount = 0;
  var unwrapHost = function(node) {
    return node && (node.host || unwrapHost(node.parentNode));
  };
  var correctTargets = function(parent, targets) {
    return targets.map(function(target) {
      if (parent.contains(target)) {
        return target;
      }
      var correctedTarget = unwrapHost(target);
      if (correctedTarget && parent.contains(correctedTarget)) {
        return correctedTarget;
      }
      console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
      return null;
    }).filter(function(x) {
      return Boolean(x);
    });
  };
  var applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
    var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
    if (!markerMap[markerName]) {
      markerMap[markerName] = /* @__PURE__ */ new WeakMap();
    }
    var markerCounter = markerMap[markerName];
    var hiddenNodes = [];
    var elementsToKeep = /* @__PURE__ */ new Set();
    var elementsToStop = new Set(targets);
    var keep = function(el) {
      if (!el || elementsToKeep.has(el)) {
        return;
      }
      elementsToKeep.add(el);
      keep(el.parentNode);
    };
    targets.forEach(keep);
    var deep = function(parent) {
      if (!parent || elementsToStop.has(parent)) {
        return;
      }
      Array.prototype.forEach.call(parent.children, function(node) {
        if (elementsToKeep.has(node)) {
          deep(node);
        } else {
          try {
            var attr = node.getAttribute(controlAttribute);
            var alreadyHidden = attr !== null && attr !== "false";
            var counterValue = (counterMap.get(node) || 0) + 1;
            var markerValue = (markerCounter.get(node) || 0) + 1;
            counterMap.set(node, counterValue);
            markerCounter.set(node, markerValue);
            hiddenNodes.push(node);
            if (counterValue === 1 && alreadyHidden) {
              uncontrolledNodes.set(node, true);
            }
            if (markerValue === 1) {
              node.setAttribute(markerName, "true");
            }
            if (!alreadyHidden) {
              node.setAttribute(controlAttribute, "true");
            }
          } catch (e) {
            console.error("aria-hidden: cannot operate on ", node, e);
          }
        }
      });
    };
    deep(parentNode);
    elementsToKeep.clear();
    lockCount++;
    return function() {
      hiddenNodes.forEach(function(node) {
        var counterValue = counterMap.get(node) - 1;
        var markerValue = markerCounter.get(node) - 1;
        counterMap.set(node, counterValue);
        markerCounter.set(node, markerValue);
        if (!counterValue) {
          if (!uncontrolledNodes.has(node)) {
            node.removeAttribute(controlAttribute);
          }
          uncontrolledNodes.delete(node);
        }
        if (!markerValue) {
          node.removeAttribute(markerName);
        }
      });
      lockCount--;
      if (!lockCount) {
        counterMap = /* @__PURE__ */ new WeakMap();
        counterMap = /* @__PURE__ */ new WeakMap();
        uncontrolledNodes = /* @__PURE__ */ new WeakMap();
        markerMap = {};
      }
    };
  };
  var hideOthers = function(originalTarget, parentNode, markerName) {
    if (markerName === void 0) {
      markerName = "data-aria-hidden";
    }
    var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
    var activeParentNode = parentNode || getDefaultParent(originalTarget);
    if (!activeParentNode) {
      return function() {
        return null;
      };
    }
    targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
    return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
  };

  // node_modules/tslib/tslib.es6.mjs
  var __assign = function() {
    __assign = Object.assign || function __assign2(t2) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t2[p] = s[p];
      }
      return t2;
    };
    return __assign.apply(this, arguments);
  };
  function __rest(s, e) {
    var t2 = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t2[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t2[p[i]] = s[p[i]];
      }
    return t2;
  }
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  }

  // node_modules/react-remove-scroll/dist/es2015/Combination.js
  var React40 = __toESM(require_react());

  // node_modules/react-remove-scroll/dist/es2015/UI.js
  var React36 = __toESM(require_react());

  // node_modules/react-remove-scroll-bar/dist/es2015/constants.js
  var zeroRightClassName = "right-scroll-bar-position";
  var fullWidthClassName = "width-before-scroll-bar";
  var noScrollbarsClassName = "with-scroll-bars-hidden";
  var removedBarSizeVariable = "--removed-body-scroll-bar-size";

  // node_modules/use-callback-ref/dist/es2015/assignRef.js
  function assignRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
    return ref;
  }

  // node_modules/use-callback-ref/dist/es2015/useRef.js
  var import_react52 = __toESM(require_react());
  function useCallbackRef2(initialValue, callback) {
    var ref = (0, import_react52.useState)(function() {
      return {
        // value
        value: initialValue,
        // last callback
        callback,
        // "memoized" public interface
        facade: {
          get current() {
            return ref.value;
          },
          set current(value) {
            var last3 = ref.value;
            if (last3 !== value) {
              ref.value = value;
              ref.callback(value, last3);
            }
          }
        }
      };
    })[0];
    ref.callback = callback;
    return ref.facade;
  }

  // node_modules/use-callback-ref/dist/es2015/useMergeRef.js
  var React34 = __toESM(require_react());
  var useIsomorphicLayoutEffect = typeof window !== "undefined" ? React34.useLayoutEffect : React34.useEffect;
  var currentValues = /* @__PURE__ */ new WeakMap();
  function useMergeRefs(refs, defaultValue) {
    var callbackRef = useCallbackRef2(defaultValue || null, function(newValue) {
      return refs.forEach(function(ref) {
        return assignRef(ref, newValue);
      });
    });
    useIsomorphicLayoutEffect(function() {
      var oldValue = currentValues.get(callbackRef);
      if (oldValue) {
        var prevRefs_1 = new Set(oldValue);
        var nextRefs_1 = new Set(refs);
        var current_1 = callbackRef.current;
        prevRefs_1.forEach(function(ref) {
          if (!nextRefs_1.has(ref)) {
            assignRef(ref, null);
          }
        });
        nextRefs_1.forEach(function(ref) {
          if (!prevRefs_1.has(ref)) {
            assignRef(ref, current_1);
          }
        });
      }
      currentValues.set(callbackRef, refs);
    }, [refs]);
    return callbackRef;
  }

  // node_modules/use-sidecar/dist/es2015/medium.js
  function ItoI(a) {
    return a;
  }
  function innerCreateMedium(defaults2, middleware) {
    if (middleware === void 0) {
      middleware = ItoI;
    }
    var buffer = [];
    var assigned = false;
    var medium = {
      read: function() {
        if (assigned) {
          throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
        }
        if (buffer.length) {
          return buffer[buffer.length - 1];
        }
        return defaults2;
      },
      useMedium: function(data) {
        var item = middleware(data, assigned);
        buffer.push(item);
        return function() {
          buffer = buffer.filter(function(x) {
            return x !== item;
          });
        };
      },
      assignSyncMedium: function(cb) {
        assigned = true;
        while (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb);
        }
        buffer = {
          push: function(x) {
            return cb(x);
          },
          filter: function() {
            return buffer;
          }
        };
      },
      assignMedium: function(cb) {
        assigned = true;
        var pendingQueue = [];
        if (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb);
          pendingQueue = buffer;
        }
        var executeQueue = function() {
          var cbs2 = pendingQueue;
          pendingQueue = [];
          cbs2.forEach(cb);
        };
        var cycle = function() {
          return Promise.resolve().then(executeQueue);
        };
        cycle();
        buffer = {
          push: function(x) {
            pendingQueue.push(x);
            cycle();
          },
          filter: function(filter2) {
            pendingQueue = pendingQueue.filter(filter2);
            return buffer;
          }
        };
      }
    };
    return medium;
  }
  function createSidecarMedium(options) {
    if (options === void 0) {
      options = {};
    }
    var medium = innerCreateMedium(null);
    medium.options = __assign({ async: true, ssr: false }, options);
    return medium;
  }

  // node_modules/use-sidecar/dist/es2015/exports.js
  var React35 = __toESM(require_react());
  var SideCar = function(_a3) {
    var sideCar = _a3.sideCar, rest = __rest(_a3, ["sideCar"]);
    if (!sideCar) {
      throw new Error("Sidecar: please provide `sideCar` property to import the right car");
    }
    var Target = sideCar.read();
    if (!Target) {
      throw new Error("Sidecar medium not found");
    }
    return React35.createElement(Target, __assign({}, rest));
  };
  SideCar.isSideCarExport = true;
  function exportSidecar(medium, exported) {
    medium.useMedium(exported);
    return SideCar;
  }

  // node_modules/react-remove-scroll/dist/es2015/medium.js
  var effectCar = createSidecarMedium();

  // node_modules/react-remove-scroll/dist/es2015/UI.js
  var nothing = function() {
    return;
  };
  var RemoveScroll = React36.forwardRef(function(props, parentRef) {
    var ref = React36.useRef(null);
    var _a3 = React36.useState({
      onScrollCapture: nothing,
      onWheelCapture: nothing,
      onTouchMoveCapture: nothing
    }), callbacks = _a3[0], setCallbacks = _a3[1];
    var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? "div" : _b, gapMode = props.gapMode, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]);
    var SideCar2 = sideCar;
    var containerRef = useMergeRefs([ref, parentRef]);
    var containerProps = __assign(__assign({}, rest), callbacks);
    return React36.createElement(
      React36.Fragment,
      null,
      enabled && React36.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode }),
      forwardProps ? React36.cloneElement(React36.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : React36.createElement(Container, __assign({}, containerProps, { className, ref: containerRef }), children)
    );
  });
  RemoveScroll.defaultProps = {
    enabled: true,
    removeScrollBar: true,
    inert: false
  };
  RemoveScroll.classNames = {
    fullWidth: fullWidthClassName,
    zeroRight: zeroRightClassName
  };

  // node_modules/react-remove-scroll/dist/es2015/SideEffect.js
  var React39 = __toESM(require_react());

  // node_modules/react-remove-scroll-bar/dist/es2015/component.js
  var React38 = __toESM(require_react());

  // node_modules/react-style-singleton/dist/es2015/hook.js
  var React37 = __toESM(require_react());

  // node_modules/get-nonce/dist/es2015/index.js
  var currentNonce;
  var getNonce = function() {
    if (currentNonce) {
      return currentNonce;
    }
    if (typeof __webpack_nonce__ !== "undefined") {
      return __webpack_nonce__;
    }
    return void 0;
  };

  // node_modules/react-style-singleton/dist/es2015/singleton.js
  function makeStyleTag() {
    if (!document)
      return null;
    var tag = document.createElement("style");
    tag.type = "text/css";
    var nonce = getNonce();
    if (nonce) {
      tag.setAttribute("nonce", nonce);
    }
    return tag;
  }
  function injectStyles(tag, css) {
    if (tag.styleSheet) {
      tag.styleSheet.cssText = css;
    } else {
      tag.appendChild(document.createTextNode(css));
    }
  }
  function insertStyleTag(tag) {
    var head = document.head || document.getElementsByTagName("head")[0];
    head.appendChild(tag);
  }
  var stylesheetSingleton = function() {
    var counter = 0;
    var stylesheet = null;
    return {
      add: function(style) {
        if (counter == 0) {
          if (stylesheet = makeStyleTag()) {
            injectStyles(stylesheet, style);
            insertStyleTag(stylesheet);
          }
        }
        counter++;
      },
      remove: function() {
        counter--;
        if (!counter && stylesheet) {
          stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
          stylesheet = null;
        }
      }
    };
  };

  // node_modules/react-style-singleton/dist/es2015/hook.js
  var styleHookSingleton = function() {
    var sheet = stylesheetSingleton();
    return function(styles, isDynamic) {
      React37.useEffect(function() {
        sheet.add(styles);
        return function() {
          sheet.remove();
        };
      }, [styles && isDynamic]);
    };
  };

  // node_modules/react-style-singleton/dist/es2015/component.js
  var styleSingleton = function() {
    var useStyle = styleHookSingleton();
    var Sheet = function(_a3) {
      var styles = _a3.styles, dynamic = _a3.dynamic;
      useStyle(styles, dynamic);
      return null;
    };
    return Sheet;
  };

  // node_modules/react-remove-scroll-bar/dist/es2015/utils.js
  var zeroGap = {
    left: 0,
    top: 0,
    right: 0,
    gap: 0
  };
  var parse2 = function(x) {
    return parseInt(x || "", 10) || 0;
  };
  var getOffset = function(gapMode) {
    var cs = window.getComputedStyle(document.body);
    var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
    var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
    var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
    return [parse2(left), parse2(top), parse2(right)];
  };
  var getGapWidth = function(gapMode) {
    if (gapMode === void 0) {
      gapMode = "margin";
    }
    if (typeof window === "undefined") {
      return zeroGap;
    }
    var offsets = getOffset(gapMode);
    var documentWidth = document.documentElement.clientWidth;
    var windowWidth = window.innerWidth;
    return {
      left: offsets[0],
      top: offsets[1],
      right: offsets[2],
      gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
    };
  };

  // node_modules/react-remove-scroll-bar/dist/es2015/component.js
  var Style = styleSingleton();
  var lockAttribute = "data-scroll-locked";
  var getStyles = function(_a3, allowRelative, gapMode, important) {
    var left = _a3.left, top = _a3.top, right = _a3.right, gap = _a3.gap;
    if (gapMode === void 0) {
      gapMode = "margin";
    }
    return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body[").concat(lockAttribute, "] {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
      allowRelative && "position: relative ".concat(important, ";"),
      gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
      gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
    ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body[").concat(lockAttribute, "] {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
  };
  var getCurrentUseCounter = function() {
    var counter = parseInt(document.body.getAttribute(lockAttribute) || "0", 10);
    return isFinite(counter) ? counter : 0;
  };
  var useLockAttribute = function() {
    React38.useEffect(function() {
      document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());
      return function() {
        var newCounter = getCurrentUseCounter() - 1;
        if (newCounter <= 0) {
          document.body.removeAttribute(lockAttribute);
        } else {
          document.body.setAttribute(lockAttribute, newCounter.toString());
        }
      };
    }, []);
  };
  var RemoveScrollBar = function(_a3) {
    var noRelative = _a3.noRelative, noImportant = _a3.noImportant, _b = _a3.gapMode, gapMode = _b === void 0 ? "margin" : _b;
    useLockAttribute();
    var gap = React38.useMemo(function() {
      return getGapWidth(gapMode);
    }, [gapMode]);
    return React38.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
  };

  // node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
  var passiveSupported = false;
  if (typeof window !== "undefined") {
    try {
      options = Object.defineProperty({}, "passive", {
        get: function() {
          passiveSupported = true;
          return true;
        }
      });
      window.addEventListener("test", options, options);
      window.removeEventListener("test", options, options);
    } catch (err) {
      passiveSupported = false;
    }
  }
  var options;
  var nonPassive = passiveSupported ? { passive: false } : false;

  // node_modules/react-remove-scroll/dist/es2015/handleScroll.js
  var alwaysContainsScroll = function(node) {
    return node.tagName === "TEXTAREA";
  };
  var elementCanBeScrolled = function(node, overflow) {
    if (!(node instanceof Element)) {
      return false;
    }
    var styles = window.getComputedStyle(node);
    return (
      // not-not-scrollable
      styles[overflow] !== "hidden" && // contains scroll inside self
      !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === "visible")
    );
  };
  var elementCouldBeVScrolled = function(node) {
    return elementCanBeScrolled(node, "overflowY");
  };
  var elementCouldBeHScrolled = function(node) {
    return elementCanBeScrolled(node, "overflowX");
  };
  var locationCouldBeScrolled = function(axis, node) {
    var ownerDocument = node.ownerDocument;
    var current = node;
    do {
      if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
        current = current.host;
      }
      var isScrollable = elementCouldBeScrolled(axis, current);
      if (isScrollable) {
        var _a3 = getScrollVariables(axis, current), scrollHeight = _a3[1], clientHeight = _a3[2];
        if (scrollHeight > clientHeight) {
          return true;
        }
      }
      current = current.parentNode;
    } while (current && current !== ownerDocument.body);
    return false;
  };
  var getVScrollVariables = function(_a3) {
    var scrollTop = _a3.scrollTop, scrollHeight = _a3.scrollHeight, clientHeight = _a3.clientHeight;
    return [
      scrollTop,
      scrollHeight,
      clientHeight
    ];
  };
  var getHScrollVariables = function(_a3) {
    var scrollLeft = _a3.scrollLeft, scrollWidth = _a3.scrollWidth, clientWidth = _a3.clientWidth;
    return [
      scrollLeft,
      scrollWidth,
      clientWidth
    ];
  };
  var elementCouldBeScrolled = function(axis, node) {
    return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
  };
  var getScrollVariables = function(axis, node) {
    return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
  };
  var getDirectionFactor = function(axis, direction) {
    return axis === "h" && direction === "rtl" ? -1 : 1;
  };
  var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
    var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
    var delta = directionFactor * sourceDelta;
    var target = event.target;
    var targetInLock = endTarget.contains(target);
    var shouldCancelScroll = false;
    var isDeltaPositive = delta > 0;
    var availableScroll = 0;
    var availableScrollTop = 0;
    do {
      var _a3 = getScrollVariables(axis, target), position = _a3[0], scroll_1 = _a3[1], capacity = _a3[2];
      var elementScroll = scroll_1 - capacity - directionFactor * position;
      if (position || elementScroll) {
        if (elementCouldBeScrolled(axis, target)) {
          availableScroll += elementScroll;
          availableScrollTop += position;
        }
      }
      if (target instanceof ShadowRoot) {
        target = target.host;
      } else {
        target = target.parentNode;
      }
    } while (
      // portaled content
      !targetInLock && target !== document.body || // self content
      targetInLock && (endTarget.contains(target) || endTarget === target)
    );
    if (isDeltaPositive && (noOverscroll && Math.abs(availableScroll) < 1 || !noOverscroll && delta > availableScroll)) {
      shouldCancelScroll = true;
    } else if (!isDeltaPositive && (noOverscroll && Math.abs(availableScrollTop) < 1 || !noOverscroll && -delta > availableScrollTop)) {
      shouldCancelScroll = true;
    }
    return shouldCancelScroll;
  };

  // node_modules/react-remove-scroll/dist/es2015/SideEffect.js
  var getTouchXY = function(event) {
    return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
  };
  var getDeltaXY = function(event) {
    return [event.deltaX, event.deltaY];
  };
  var extractRef = function(ref) {
    return ref && "current" in ref ? ref.current : ref;
  };
  var deltaCompare = function(x, y) {
    return x[0] === y[0] && x[1] === y[1];
  };
  var generateStyle = function(id) {
    return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
  };
  var idCounter2 = 0;
  var lockStack = [];
  function RemoveScrollSideCar(props) {
    var shouldPreventQueue = React39.useRef([]);
    var touchStartRef = React39.useRef([0, 0]);
    var activeAxis = React39.useRef();
    var id = React39.useState(idCounter2++)[0];
    var Style2 = React39.useState(styleSingleton)[0];
    var lastProps = React39.useRef(props);
    React39.useEffect(function() {
      lastProps.current = props;
    }, [props]);
    React39.useEffect(function() {
      if (props.inert) {
        document.body.classList.add("block-interactivity-".concat(id));
        var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
        allow_1.forEach(function(el) {
          return el.classList.add("allow-interactivity-".concat(id));
        });
        return function() {
          document.body.classList.remove("block-interactivity-".concat(id));
          allow_1.forEach(function(el) {
            return el.classList.remove("allow-interactivity-".concat(id));
          });
        };
      }
      return;
    }, [props.inert, props.lockRef.current, props.shards]);
    var shouldCancelEvent = React39.useCallback(function(event, parent) {
      if ("touches" in event && event.touches.length === 2 || event.type === "wheel" && event.ctrlKey) {
        return !lastProps.current.allowPinchZoom;
      }
      var touch = getTouchXY(event);
      var touchStart = touchStartRef.current;
      var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
      var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
      var currentAxis;
      var target = event.target;
      var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
      if ("touches" in event && moveDirection === "h" && target.type === "range") {
        return false;
      }
      var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
      if (!canBeScrolledInMainDirection) {
        return true;
      }
      if (canBeScrolledInMainDirection) {
        currentAxis = moveDirection;
      } else {
        currentAxis = moveDirection === "v" ? "h" : "v";
        canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
      }
      if (!canBeScrolledInMainDirection) {
        return false;
      }
      if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
        activeAxis.current = currentAxis;
      }
      if (!currentAxis) {
        return true;
      }
      var cancelingAxis = activeAxis.current || currentAxis;
      return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
    }, []);
    var shouldPrevent = React39.useCallback(function(_event) {
      var event = _event;
      if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
        return;
      }
      var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
      var sourceEvent = shouldPreventQueue.current.filter(function(e) {
        return e.name === event.type && (e.target === event.target || event.target === e.shadowParent) && deltaCompare(e.delta, delta);
      })[0];
      if (sourceEvent && sourceEvent.should) {
        if (event.cancelable) {
          event.preventDefault();
        }
        return;
      }
      if (!sourceEvent) {
        var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
          return node.contains(event.target);
        });
        var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
        if (shouldStop) {
          if (event.cancelable) {
            event.preventDefault();
          }
        }
      }
    }, []);
    var shouldCancel = React39.useCallback(function(name, delta, target, should) {
      var event = { name, delta, target, should, shadowParent: getOutermostShadowParent(target) };
      shouldPreventQueue.current.push(event);
      setTimeout(function() {
        shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
          return e !== event;
        });
      }, 1);
    }, []);
    var scrollTouchStart = React39.useCallback(function(event) {
      touchStartRef.current = getTouchXY(event);
      activeAxis.current = void 0;
    }, []);
    var scrollWheel = React39.useCallback(function(event) {
      shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    var scrollTouchMove = React39.useCallback(function(event) {
      shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    React39.useEffect(function() {
      lockStack.push(Style2);
      props.setCallbacks({
        onScrollCapture: scrollWheel,
        onWheelCapture: scrollWheel,
        onTouchMoveCapture: scrollTouchMove
      });
      document.addEventListener("wheel", shouldPrevent, nonPassive);
      document.addEventListener("touchmove", shouldPrevent, nonPassive);
      document.addEventListener("touchstart", scrollTouchStart, nonPassive);
      return function() {
        lockStack = lockStack.filter(function(inst3) {
          return inst3 !== Style2;
        });
        document.removeEventListener("wheel", shouldPrevent, nonPassive);
        document.removeEventListener("touchmove", shouldPrevent, nonPassive);
        document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
      };
    }, []);
    var removeScrollBar = props.removeScrollBar, inert = props.inert;
    return React39.createElement(
      React39.Fragment,
      null,
      inert ? React39.createElement(Style2, { styles: generateStyle(id) }) : null,
      removeScrollBar ? React39.createElement(RemoveScrollBar, { gapMode: props.gapMode }) : null
    );
  }
  function getOutermostShadowParent(node) {
    var shadowParent = null;
    while (node !== null) {
      if (node instanceof ShadowRoot) {
        shadowParent = node.host;
        node = node.host;
      }
      node = node.parentNode;
    }
    return shadowParent;
  }

  // node_modules/react-remove-scroll/dist/es2015/sidecar.js
  var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

  // node_modules/react-remove-scroll/dist/es2015/Combination.js
  var ReactRemoveScroll = React40.forwardRef(function(props, ref) {
    return React40.createElement(RemoveScroll, __assign({}, props, { ref, sideCar: sidecar_default }));
  });
  ReactRemoveScroll.classNames = RemoveScroll.classNames;
  var Combination_default = ReactRemoveScroll;

  // node_modules/@radix-ui/react-menu/dist/index.mjs
  var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
  var SELECTION_KEYS = ["Enter", " "];
  var FIRST_KEYS = ["ArrowDown", "PageUp", "Home"];
  var LAST_KEYS = ["ArrowUp", "PageDown", "End"];
  var FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS];
  var SUB_OPEN_KEYS = {
    ltr: [...SELECTION_KEYS, "ArrowRight"],
    rtl: [...SELECTION_KEYS, "ArrowLeft"]
  };
  var SUB_CLOSE_KEYS = {
    ltr: ["ArrowLeft"],
    rtl: ["ArrowRight"]
  };
  var MENU_NAME = "Menu";
  var [Collection2, useCollection2, createCollectionScope2] = createCollection(MENU_NAME);
  var [createMenuContext, createMenuScope] = createContextScope(MENU_NAME, [
    createCollectionScope2,
    createPopperScope,
    createRovingFocusGroupScope
  ]);
  var usePopperScope = createPopperScope();
  var useRovingFocusGroupScope = createRovingFocusGroupScope();
  var [MenuProvider, useMenuContext] = createMenuContext(MENU_NAME);
  var [MenuRootProvider, useMenuRootContext] = createMenuContext(MENU_NAME);
  var Menu = (props) => {
    const { __scopeMenu, open = false, children, dir, onOpenChange, modal = true } = props;
    const popperScope = usePopperScope(__scopeMenu);
    const [content, setContent] = React41.useState(null);
    const isUsingKeyboardRef = React41.useRef(false);
    const handleOpenChange = useCallbackRef(onOpenChange);
    const direction = useDirection(dir);
    React41.useEffect(() => {
      const handleKeyDown = () => {
        isUsingKeyboardRef.current = true;
        document.addEventListener("pointerdown", handlePointer, { capture: true, once: true });
        document.addEventListener("pointermove", handlePointer, { capture: true, once: true });
      };
      const handlePointer = () => isUsingKeyboardRef.current = false;
      document.addEventListener("keydown", handleKeyDown, { capture: true });
      return () => {
        document.removeEventListener("keydown", handleKeyDown, { capture: true });
        document.removeEventListener("pointerdown", handlePointer, { capture: true });
        document.removeEventListener("pointermove", handlePointer, { capture: true });
      };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Root22, { ...popperScope, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
      MenuProvider,
      {
        scope: __scopeMenu,
        open,
        onOpenChange: handleOpenChange,
        content,
        onContentChange: setContent,
        children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
          MenuRootProvider,
          {
            scope: __scopeMenu,
            onClose: React41.useCallback(() => handleOpenChange(false), [handleOpenChange]),
            isUsingKeyboardRef,
            dir: direction,
            modal,
            children
          }
        )
      }
    ) });
  };
  Menu.displayName = MENU_NAME;
  var ANCHOR_NAME2 = "MenuAnchor";
  var MenuAnchor = React41.forwardRef(
    (props, forwardedRef) => {
      const { __scopeMenu, ...anchorProps } = props;
      const popperScope = usePopperScope(__scopeMenu);
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Anchor, { ...popperScope, ...anchorProps, ref: forwardedRef });
    }
  );
  MenuAnchor.displayName = ANCHOR_NAME2;
  var PORTAL_NAME2 = "MenuPortal";
  var [PortalProvider, usePortalContext] = createMenuContext(PORTAL_NAME2, {
    forceMount: void 0
  });
  var MenuPortal = (props) => {
    const { __scopeMenu, forceMount, children, container } = props;
    const context = useMenuContext(PORTAL_NAME2, __scopeMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(PortalProvider, { scope: __scopeMenu, forceMount, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Portal, { asChild: true, container, children }) }) });
  };
  MenuPortal.displayName = PORTAL_NAME2;
  var CONTENT_NAME2 = "MenuContent";
  var [MenuContentProvider, useMenuContentContext] = createMenuContext(CONTENT_NAME2);
  var MenuContent = React41.forwardRef(
    (props, forwardedRef) => {
      const portalContext = usePortalContext(CONTENT_NAME2, props.__scopeMenu);
      const { forceMount = portalContext.forceMount, ...contentProps } = props;
      const context = useMenuContext(CONTENT_NAME2, props.__scopeMenu);
      const rootContext = useMenuRootContext(CONTENT_NAME2, props.__scopeMenu);
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Collection2.Provider, { scope: props.__scopeMenu, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Collection2.Slot, { scope: props.__scopeMenu, children: rootContext.modal ? /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(MenuRootContentModal, { ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(MenuRootContentNonModal, { ...contentProps, ref: forwardedRef }) }) }) });
    }
  );
  var MenuRootContentModal = React41.forwardRef(
    (props, forwardedRef) => {
      const context = useMenuContext(CONTENT_NAME2, props.__scopeMenu);
      const ref = React41.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref);
      React41.useEffect(() => {
        const content = ref.current;
        if (content) return hideOthers(content);
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        MenuContentImpl,
        {
          ...props,
          ref: composedRefs,
          trapFocus: context.open,
          disableOutsidePointerEvents: context.open,
          disableOutsideScroll: true,
          onFocusOutside: composeEventHandlers(
            props.onFocusOutside,
            (event) => event.preventDefault(),
            { checkForDefaultPrevented: false }
          ),
          onDismiss: () => context.onOpenChange(false)
        }
      );
    }
  );
  var MenuRootContentNonModal = React41.forwardRef((props, forwardedRef) => {
    const context = useMenuContext(CONTENT_NAME2, props.__scopeMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
      MenuContentImpl,
      {
        ...props,
        ref: forwardedRef,
        trapFocus: false,
        disableOutsidePointerEvents: false,
        disableOutsideScroll: false,
        onDismiss: () => context.onOpenChange(false)
      }
    );
  });
  var MenuContentImpl = React41.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeMenu,
        loop = false,
        trapFocus,
        onOpenAutoFocus,
        onCloseAutoFocus,
        disableOutsidePointerEvents,
        onEntryFocus,
        onEscapeKeyDown,
        onPointerDownOutside,
        onFocusOutside,
        onInteractOutside,
        onDismiss,
        disableOutsideScroll,
        ...contentProps
      } = props;
      const context = useMenuContext(CONTENT_NAME2, __scopeMenu);
      const rootContext = useMenuRootContext(CONTENT_NAME2, __scopeMenu);
      const popperScope = usePopperScope(__scopeMenu);
      const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);
      const getItems = useCollection2(__scopeMenu);
      const [currentItemId, setCurrentItemId] = React41.useState(null);
      const contentRef = React41.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, contentRef, context.onContentChange);
      const timerRef = React41.useRef(0);
      const searchRef = React41.useRef("");
      const pointerGraceTimerRef = React41.useRef(0);
      const pointerGraceIntentRef = React41.useRef(null);
      const pointerDirRef = React41.useRef("right");
      const lastPointerXRef = React41.useRef(0);
      const ScrollLockWrapper = disableOutsideScroll ? Combination_default : React41.Fragment;
      const scrollLockWrapperProps = disableOutsideScroll ? { as: Slot, allowPinchZoom: true } : void 0;
      const handleTypeaheadSearch = (key) => {
        const search = searchRef.current + key;
        const items = getItems().filter((item) => !item.disabled);
        const currentItem = document.activeElement;
        const currentMatch = items.find((item) => item.ref.current === currentItem)?.textValue;
        const values = items.map((item) => item.textValue);
        const nextMatch = getNextMatch(values, search, currentMatch);
        const newItem = items.find((item) => item.textValue === nextMatch)?.ref.current;
        (function updateSearch(value) {
          searchRef.current = value;
          window.clearTimeout(timerRef.current);
          if (value !== "") timerRef.current = window.setTimeout(() => updateSearch(""), 1e3);
        })(search);
        if (newItem) {
          setTimeout(() => newItem.focus());
        }
      };
      React41.useEffect(() => {
        return () => window.clearTimeout(timerRef.current);
      }, []);
      useFocusGuards();
      const isPointerMovingToSubmenu = React41.useCallback((event) => {
        const isMovingTowards = pointerDirRef.current === pointerGraceIntentRef.current?.side;
        return isMovingTowards && isPointerInGraceArea(event, pointerGraceIntentRef.current?.area);
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        MenuContentProvider,
        {
          scope: __scopeMenu,
          searchRef,
          onItemEnter: React41.useCallback(
            (event) => {
              if (isPointerMovingToSubmenu(event)) event.preventDefault();
            },
            [isPointerMovingToSubmenu]
          ),
          onItemLeave: React41.useCallback(
            (event) => {
              if (isPointerMovingToSubmenu(event)) return;
              contentRef.current?.focus();
              setCurrentItemId(null);
            },
            [isPointerMovingToSubmenu]
          ),
          onTriggerLeave: React41.useCallback(
            (event) => {
              if (isPointerMovingToSubmenu(event)) event.preventDefault();
            },
            [isPointerMovingToSubmenu]
          ),
          pointerGraceTimerRef,
          onPointerGraceIntentChange: React41.useCallback((intent) => {
            pointerGraceIntentRef.current = intent;
          }, []),
          children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ScrollLockWrapper, { ...scrollLockWrapperProps, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
            FocusScope,
            {
              asChild: true,
              trapped: trapFocus,
              onMountAutoFocus: composeEventHandlers(onOpenAutoFocus, (event) => {
                event.preventDefault();
                contentRef.current?.focus({ preventScroll: true });
              }),
              onUnmountAutoFocus: onCloseAutoFocus,
              children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
                DismissableLayer,
                {
                  asChild: true,
                  disableOutsidePointerEvents,
                  onEscapeKeyDown,
                  onPointerDownOutside,
                  onFocusOutside,
                  onInteractOutside,
                  onDismiss,
                  children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
                    Root3,
                    {
                      asChild: true,
                      ...rovingFocusGroupScope,
                      dir: rootContext.dir,
                      orientation: "vertical",
                      loop,
                      currentTabStopId: currentItemId,
                      onCurrentTabStopIdChange: setCurrentItemId,
                      onEntryFocus: composeEventHandlers(onEntryFocus, (event) => {
                        if (!rootContext.isUsingKeyboardRef.current) event.preventDefault();
                      }),
                      preventScrollOnEntryFocus: true,
                      children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
                        Content,
                        {
                          role: "menu",
                          "aria-orientation": "vertical",
                          "data-state": getOpenState(context.open),
                          "data-radix-menu-content": "",
                          dir: rootContext.dir,
                          ...popperScope,
                          ...contentProps,
                          ref: composedRefs,
                          style: { outline: "none", ...contentProps.style },
                          onKeyDown: composeEventHandlers(contentProps.onKeyDown, (event) => {
                            const target = event.target;
                            const isKeyDownInside = target.closest("[data-radix-menu-content]") === event.currentTarget;
                            const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
                            const isCharacterKey = event.key.length === 1;
                            if (isKeyDownInside) {
                              if (event.key === "Tab") event.preventDefault();
                              if (!isModifierKey && isCharacterKey) handleTypeaheadSearch(event.key);
                            }
                            const content = contentRef.current;
                            if (event.target !== content) return;
                            if (!FIRST_LAST_KEYS.includes(event.key)) return;
                            event.preventDefault();
                            const items = getItems().filter((item) => !item.disabled);
                            const candidateNodes = items.map((item) => item.ref.current);
                            if (LAST_KEYS.includes(event.key)) candidateNodes.reverse();
                            focusFirst3(candidateNodes);
                          }),
                          onBlur: composeEventHandlers(props.onBlur, (event) => {
                            if (!event.currentTarget.contains(event.target)) {
                              window.clearTimeout(timerRef.current);
                              searchRef.current = "";
                            }
                          }),
                          onPointerMove: composeEventHandlers(
                            props.onPointerMove,
                            whenMouse((event) => {
                              const target = event.target;
                              const pointerXHasChanged = lastPointerXRef.current !== event.clientX;
                              if (event.currentTarget.contains(target) && pointerXHasChanged) {
                                const newDir = event.clientX > lastPointerXRef.current ? "right" : "left";
                                pointerDirRef.current = newDir;
                                lastPointerXRef.current = event.clientX;
                              }
                            })
                          )
                        }
                      )
                    }
                  )
                }
              )
            }
          ) })
        }
      );
    }
  );
  MenuContent.displayName = CONTENT_NAME2;
  var GROUP_NAME2 = "MenuGroup";
  var MenuGroup = React41.forwardRef(
    (props, forwardedRef) => {
      const { __scopeMenu, ...groupProps } = props;
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Primitive.div, { role: "group", ...groupProps, ref: forwardedRef });
    }
  );
  MenuGroup.displayName = GROUP_NAME2;
  var LABEL_NAME = "MenuLabel";
  var MenuLabel = React41.forwardRef(
    (props, forwardedRef) => {
      const { __scopeMenu, ...labelProps } = props;
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Primitive.div, { ...labelProps, ref: forwardedRef });
    }
  );
  MenuLabel.displayName = LABEL_NAME;
  var ITEM_NAME2 = "MenuItem";
  var ITEM_SELECT = "menu.itemSelect";
  var MenuItem = React41.forwardRef(
    (props, forwardedRef) => {
      const { disabled = false, onSelect, ...itemProps } = props;
      const ref = React41.useRef(null);
      const rootContext = useMenuRootContext(ITEM_NAME2, props.__scopeMenu);
      const contentContext = useMenuContentContext(ITEM_NAME2, props.__scopeMenu);
      const composedRefs = useComposedRefs(forwardedRef, ref);
      const isPointerDownRef = React41.useRef(false);
      const handleSelect = () => {
        const menuItem = ref.current;
        if (!disabled && menuItem) {
          const itemSelectEvent = new CustomEvent(ITEM_SELECT, { bubbles: true, cancelable: true });
          menuItem.addEventListener(ITEM_SELECT, (event) => onSelect?.(event), { once: true });
          dispatchDiscreteCustomEvent(menuItem, itemSelectEvent);
          if (itemSelectEvent.defaultPrevented) {
            isPointerDownRef.current = false;
          } else {
            rootContext.onClose();
          }
        }
      };
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        MenuItemImpl,
        {
          ...itemProps,
          ref: composedRefs,
          disabled,
          onClick: composeEventHandlers(props.onClick, handleSelect),
          onPointerDown: (event) => {
            props.onPointerDown?.(event);
            isPointerDownRef.current = true;
          },
          onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
            if (!isPointerDownRef.current) event.currentTarget?.click();
          }),
          onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
            const isTypingAhead = contentContext.searchRef.current !== "";
            if (disabled || isTypingAhead && event.key === " ") return;
            if (SELECTION_KEYS.includes(event.key)) {
              event.currentTarget.click();
              event.preventDefault();
            }
          })
        }
      );
    }
  );
  MenuItem.displayName = ITEM_NAME2;
  var MenuItemImpl = React41.forwardRef(
    (props, forwardedRef) => {
      const { __scopeMenu, disabled = false, textValue, ...itemProps } = props;
      const contentContext = useMenuContentContext(ITEM_NAME2, __scopeMenu);
      const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);
      const ref = React41.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref);
      const [isFocused, setIsFocused] = React41.useState(false);
      const [textContent, setTextContent] = React41.useState("");
      React41.useEffect(() => {
        const menuItem = ref.current;
        if (menuItem) {
          setTextContent((menuItem.textContent ?? "").trim());
        }
      }, [itemProps.children]);
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        Collection2.ItemSlot,
        {
          scope: __scopeMenu,
          disabled,
          textValue: textValue ?? textContent,
          children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Item, { asChild: true, ...rovingFocusGroupScope, focusable: !disabled, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
            Primitive.div,
            {
              role: "menuitem",
              "data-highlighted": isFocused ? "" : void 0,
              "aria-disabled": disabled || void 0,
              "data-disabled": disabled ? "" : void 0,
              ...itemProps,
              ref: composedRefs,
              onPointerMove: composeEventHandlers(
                props.onPointerMove,
                whenMouse((event) => {
                  if (disabled) {
                    contentContext.onItemLeave(event);
                  } else {
                    contentContext.onItemEnter(event);
                    if (!event.defaultPrevented) {
                      const item = event.currentTarget;
                      item.focus({ preventScroll: true });
                    }
                  }
                })
              ),
              onPointerLeave: composeEventHandlers(
                props.onPointerLeave,
                whenMouse((event) => contentContext.onItemLeave(event))
              ),
              onFocus: composeEventHandlers(props.onFocus, () => setIsFocused(true)),
              onBlur: composeEventHandlers(props.onBlur, () => setIsFocused(false))
            }
          ) })
        }
      );
    }
  );
  var CHECKBOX_ITEM_NAME = "MenuCheckboxItem";
  var MenuCheckboxItem = React41.forwardRef(
    (props, forwardedRef) => {
      const { checked = false, onCheckedChange, ...checkboxItemProps } = props;
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ItemIndicatorProvider, { scope: props.__scopeMenu, checked, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        MenuItem,
        {
          role: "menuitemcheckbox",
          "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
          ...checkboxItemProps,
          ref: forwardedRef,
          "data-state": getCheckedState(checked),
          onSelect: composeEventHandlers(
            checkboxItemProps.onSelect,
            () => onCheckedChange?.(isIndeterminate(checked) ? true : !checked),
            { checkForDefaultPrevented: false }
          )
        }
      ) });
    }
  );
  MenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;
  var RADIO_GROUP_NAME = "MenuRadioGroup";
  var [RadioGroupProvider, useRadioGroupContext] = createMenuContext(
    RADIO_GROUP_NAME,
    { value: void 0, onValueChange: () => {
    } }
  );
  var MenuRadioGroup = React41.forwardRef(
    (props, forwardedRef) => {
      const { value, onValueChange, ...groupProps } = props;
      const handleValueChange = useCallbackRef(onValueChange);
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(RadioGroupProvider, { scope: props.__scopeMenu, value, onValueChange: handleValueChange, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(MenuGroup, { ...groupProps, ref: forwardedRef }) });
    }
  );
  MenuRadioGroup.displayName = RADIO_GROUP_NAME;
  var RADIO_ITEM_NAME = "MenuRadioItem";
  var MenuRadioItem = React41.forwardRef(
    (props, forwardedRef) => {
      const { value, ...radioItemProps } = props;
      const context = useRadioGroupContext(RADIO_ITEM_NAME, props.__scopeMenu);
      const checked = value === context.value;
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ItemIndicatorProvider, { scope: props.__scopeMenu, checked, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        MenuItem,
        {
          role: "menuitemradio",
          "aria-checked": checked,
          ...radioItemProps,
          ref: forwardedRef,
          "data-state": getCheckedState(checked),
          onSelect: composeEventHandlers(
            radioItemProps.onSelect,
            () => context.onValueChange?.(value),
            { checkForDefaultPrevented: false }
          )
        }
      ) });
    }
  );
  MenuRadioItem.displayName = RADIO_ITEM_NAME;
  var ITEM_INDICATOR_NAME = "MenuItemIndicator";
  var [ItemIndicatorProvider, useItemIndicatorContext] = createMenuContext(
    ITEM_INDICATOR_NAME,
    { checked: false }
  );
  var MenuItemIndicator = React41.forwardRef(
    (props, forwardedRef) => {
      const { __scopeMenu, forceMount, ...itemIndicatorProps } = props;
      const indicatorContext = useItemIndicatorContext(ITEM_INDICATOR_NAME, __scopeMenu);
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        Presence,
        {
          present: forceMount || isIndeterminate(indicatorContext.checked) || indicatorContext.checked === true,
          children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
            Primitive.span,
            {
              ...itemIndicatorProps,
              ref: forwardedRef,
              "data-state": getCheckedState(indicatorContext.checked)
            }
          )
        }
      );
    }
  );
  MenuItemIndicator.displayName = ITEM_INDICATOR_NAME;
  var SEPARATOR_NAME = "MenuSeparator";
  var MenuSeparator = React41.forwardRef(
    (props, forwardedRef) => {
      const { __scopeMenu, ...separatorProps } = props;
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        Primitive.div,
        {
          role: "separator",
          "aria-orientation": "horizontal",
          ...separatorProps,
          ref: forwardedRef
        }
      );
    }
  );
  MenuSeparator.displayName = SEPARATOR_NAME;
  var ARROW_NAME2 = "MenuArrow";
  var MenuArrow = React41.forwardRef(
    (props, forwardedRef) => {
      const { __scopeMenu, ...arrowProps } = props;
      const popperScope = usePopperScope(__scopeMenu);
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Arrow2, { ...popperScope, ...arrowProps, ref: forwardedRef });
    }
  );
  MenuArrow.displayName = ARROW_NAME2;
  var SUB_NAME = "MenuSub";
  var [MenuSubProvider, useMenuSubContext] = createMenuContext(SUB_NAME);
  var MenuSub = (props) => {
    const { __scopeMenu, children, open = false, onOpenChange } = props;
    const parentMenuContext = useMenuContext(SUB_NAME, __scopeMenu);
    const popperScope = usePopperScope(__scopeMenu);
    const [trigger2, setTrigger] = React41.useState(null);
    const [content, setContent] = React41.useState(null);
    const handleOpenChange = useCallbackRef(onOpenChange);
    React41.useEffect(() => {
      if (parentMenuContext.open === false) handleOpenChange(false);
      return () => handleOpenChange(false);
    }, [parentMenuContext.open, handleOpenChange]);
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Root22, { ...popperScope, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
      MenuProvider,
      {
        scope: __scopeMenu,
        open,
        onOpenChange: handleOpenChange,
        content,
        onContentChange: setContent,
        children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
          MenuSubProvider,
          {
            scope: __scopeMenu,
            contentId: useId2(),
            triggerId: useId2(),
            trigger: trigger2,
            onTriggerChange: setTrigger,
            children
          }
        )
      }
    ) });
  };
  MenuSub.displayName = SUB_NAME;
  var SUB_TRIGGER_NAME = "MenuSubTrigger";
  var MenuSubTrigger = React41.forwardRef(
    (props, forwardedRef) => {
      const context = useMenuContext(SUB_TRIGGER_NAME, props.__scopeMenu);
      const rootContext = useMenuRootContext(SUB_TRIGGER_NAME, props.__scopeMenu);
      const subContext = useMenuSubContext(SUB_TRIGGER_NAME, props.__scopeMenu);
      const contentContext = useMenuContentContext(SUB_TRIGGER_NAME, props.__scopeMenu);
      const openTimerRef = React41.useRef(null);
      const { pointerGraceTimerRef, onPointerGraceIntentChange } = contentContext;
      const scope = { __scopeMenu: props.__scopeMenu };
      const clearOpenTimer = React41.useCallback(() => {
        if (openTimerRef.current) window.clearTimeout(openTimerRef.current);
        openTimerRef.current = null;
      }, []);
      React41.useEffect(() => clearOpenTimer, [clearOpenTimer]);
      React41.useEffect(() => {
        const pointerGraceTimer = pointerGraceTimerRef.current;
        return () => {
          window.clearTimeout(pointerGraceTimer);
          onPointerGraceIntentChange(null);
        };
      }, [pointerGraceTimerRef, onPointerGraceIntentChange]);
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(MenuAnchor, { asChild: true, ...scope, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        MenuItemImpl,
        {
          id: subContext.triggerId,
          "aria-haspopup": "menu",
          "aria-expanded": context.open,
          "aria-controls": subContext.contentId,
          "data-state": getOpenState(context.open),
          ...props,
          ref: composeRefs(forwardedRef, subContext.onTriggerChange),
          onClick: (event) => {
            props.onClick?.(event);
            if (props.disabled || event.defaultPrevented) return;
            event.currentTarget.focus();
            if (!context.open) context.onOpenChange(true);
          },
          onPointerMove: composeEventHandlers(
            props.onPointerMove,
            whenMouse((event) => {
              contentContext.onItemEnter(event);
              if (event.defaultPrevented) return;
              if (!props.disabled && !context.open && !openTimerRef.current) {
                contentContext.onPointerGraceIntentChange(null);
                openTimerRef.current = window.setTimeout(() => {
                  context.onOpenChange(true);
                  clearOpenTimer();
                }, 100);
              }
            })
          ),
          onPointerLeave: composeEventHandlers(
            props.onPointerLeave,
            whenMouse((event) => {
              clearOpenTimer();
              const contentRect = context.content?.getBoundingClientRect();
              if (contentRect) {
                const side = context.content?.dataset.side;
                const rightSide = side === "right";
                const bleed = rightSide ? -5 : 5;
                const contentNearEdge = contentRect[rightSide ? "left" : "right"];
                const contentFarEdge = contentRect[rightSide ? "right" : "left"];
                contentContext.onPointerGraceIntentChange({
                  area: [
                    // Apply a bleed on clientX to ensure that our exit point is
                    // consistently within polygon bounds
                    { x: event.clientX + bleed, y: event.clientY },
                    { x: contentNearEdge, y: contentRect.top },
                    { x: contentFarEdge, y: contentRect.top },
                    { x: contentFarEdge, y: contentRect.bottom },
                    { x: contentNearEdge, y: contentRect.bottom }
                  ],
                  side
                });
                window.clearTimeout(pointerGraceTimerRef.current);
                pointerGraceTimerRef.current = window.setTimeout(
                  () => contentContext.onPointerGraceIntentChange(null),
                  300
                );
              } else {
                contentContext.onTriggerLeave(event);
                if (event.defaultPrevented) return;
                contentContext.onPointerGraceIntentChange(null);
              }
            })
          ),
          onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
            const isTypingAhead = contentContext.searchRef.current !== "";
            if (props.disabled || isTypingAhead && event.key === " ") return;
            if (SUB_OPEN_KEYS[rootContext.dir].includes(event.key)) {
              context.onOpenChange(true);
              context.content?.focus();
              event.preventDefault();
            }
          })
        }
      ) });
    }
  );
  MenuSubTrigger.displayName = SUB_TRIGGER_NAME;
  var SUB_CONTENT_NAME = "MenuSubContent";
  var MenuSubContent = React41.forwardRef(
    (props, forwardedRef) => {
      const portalContext = usePortalContext(CONTENT_NAME2, props.__scopeMenu);
      const { forceMount = portalContext.forceMount, ...subContentProps } = props;
      const context = useMenuContext(CONTENT_NAME2, props.__scopeMenu);
      const rootContext = useMenuRootContext(CONTENT_NAME2, props.__scopeMenu);
      const subContext = useMenuSubContext(SUB_CONTENT_NAME, props.__scopeMenu);
      const ref = React41.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref);
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Collection2.Provider, { scope: props.__scopeMenu, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Collection2.Slot, { scope: props.__scopeMenu, children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        MenuContentImpl,
        {
          id: subContext.contentId,
          "aria-labelledby": subContext.triggerId,
          ...subContentProps,
          ref: composedRefs,
          align: "start",
          side: rootContext.dir === "rtl" ? "left" : "right",
          disableOutsidePointerEvents: false,
          disableOutsideScroll: false,
          trapFocus: false,
          onOpenAutoFocus: (event) => {
            if (rootContext.isUsingKeyboardRef.current) ref.current?.focus();
            event.preventDefault();
          },
          onCloseAutoFocus: (event) => event.preventDefault(),
          onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) => {
            if (event.target !== subContext.trigger) context.onOpenChange(false);
          }),
          onEscapeKeyDown: composeEventHandlers(props.onEscapeKeyDown, (event) => {
            rootContext.onClose();
            event.preventDefault();
          }),
          onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
            const isKeyDownInside = event.currentTarget.contains(event.target);
            const isCloseKey = SUB_CLOSE_KEYS[rootContext.dir].includes(event.key);
            if (isKeyDownInside && isCloseKey) {
              context.onOpenChange(false);
              subContext.trigger?.focus();
              event.preventDefault();
            }
          })
        }
      ) }) }) });
    }
  );
  MenuSubContent.displayName = SUB_CONTENT_NAME;
  function getOpenState(open) {
    return open ? "open" : "closed";
  }
  function isIndeterminate(checked) {
    return checked === "indeterminate";
  }
  function getCheckedState(checked) {
    return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
  }
  function focusFirst3(candidates) {
    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
    for (const candidate of candidates) {
      if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
      candidate.focus();
      if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
    }
  }
  function wrapArray2(array2, startIndex) {
    return array2.map((_, index2) => array2[(startIndex + index2) % array2.length]);
  }
  function getNextMatch(values, search, currentMatch) {
    const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);
    const normalizedSearch = isRepeated ? search[0] : search;
    const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;
    let wrappedValues = wrapArray2(values, Math.max(currentMatchIndex, 0));
    const excludeCurrentMatch = normalizedSearch.length === 1;
    if (excludeCurrentMatch) wrappedValues = wrappedValues.filter((v) => v !== currentMatch);
    const nextMatch = wrappedValues.find(
      (value) => value.toLowerCase().startsWith(normalizedSearch.toLowerCase())
    );
    return nextMatch !== currentMatch ? nextMatch : void 0;
  }
  function isPointInPolygon(point, polygon) {
    const { x, y } = point;
    let inside = false;
    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
      const xi = polygon[i].x;
      const yi = polygon[i].y;
      const xj = polygon[j].x;
      const yj = polygon[j].y;
      const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
      if (intersect) inside = !inside;
    }
    return inside;
  }
  function isPointerInGraceArea(event, area) {
    if (!area) return false;
    const cursorPos = { x: event.clientX, y: event.clientY };
    return isPointInPolygon(cursorPos, area);
  }
  function whenMouse(handler) {
    return (event) => event.pointerType === "mouse" ? handler(event) : void 0;
  }
  var Root32 = Menu;
  var Anchor2 = MenuAnchor;
  var Portal2 = MenuPortal;
  var Content2 = MenuContent;
  var Group = MenuGroup;
  var Label = MenuLabel;
  var Item2 = MenuItem;
  var CheckboxItem = MenuCheckboxItem;
  var RadioGroup = MenuRadioGroup;
  var RadioItem = MenuRadioItem;
  var ItemIndicator = MenuItemIndicator;
  var Separator = MenuSeparator;
  var Arrow22 = MenuArrow;
  var Sub = MenuSub;
  var SubTrigger = MenuSubTrigger;
  var SubContent = MenuSubContent;

  // node_modules/@radix-ui/react-context-menu/dist/index.mjs
  var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
  var CONTEXT_MENU_NAME = "ContextMenu";
  var [createContextMenuContext, createContextMenuScope] = createContextScope(CONTEXT_MENU_NAME, [
    createMenuScope
  ]);
  var useMenuScope = createMenuScope();
  var [ContextMenuProvider, useContextMenuContext] = createContextMenuContext(CONTEXT_MENU_NAME);
  var ContextMenu = (props) => {
    const { __scopeContextMenu, children, onOpenChange, dir, modal = true } = props;
    const [open, setOpen] = React42.useState(false);
    const menuScope = useMenuScope(__scopeContextMenu);
    const handleOpenChangeProp = useCallbackRef(onOpenChange);
    const handleOpenChange = React42.useCallback(
      (open2) => {
        setOpen(open2);
        handleOpenChangeProp(open2);
      },
      [handleOpenChangeProp]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
      ContextMenuProvider,
      {
        scope: __scopeContextMenu,
        open,
        onOpenChange: handleOpenChange,
        modal,
        children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
          Root32,
          {
            ...menuScope,
            dir,
            open,
            onOpenChange: handleOpenChange,
            modal,
            children
          }
        )
      }
    );
  };
  ContextMenu.displayName = CONTEXT_MENU_NAME;
  var TRIGGER_NAME = "ContextMenuTrigger";
  var ContextMenuTrigger = React42.forwardRef(
    (props, forwardedRef) => {
      const { __scopeContextMenu, disabled = false, ...triggerProps } = props;
      const context = useContextMenuContext(TRIGGER_NAME, __scopeContextMenu);
      const menuScope = useMenuScope(__scopeContextMenu);
      const pointRef = React42.useRef({ x: 0, y: 0 });
      const virtualRef = React42.useRef({
        getBoundingClientRect: () => DOMRect.fromRect({ width: 0, height: 0, ...pointRef.current })
      });
      const longPressTimerRef = React42.useRef(0);
      const clearLongPress = React42.useCallback(
        () => window.clearTimeout(longPressTimerRef.current),
        []
      );
      const handleOpen = (event) => {
        pointRef.current = { x: event.clientX, y: event.clientY };
        context.onOpenChange(true);
      };
      React42.useEffect(() => clearLongPress, [clearLongPress]);
      React42.useEffect(() => void (disabled && clearLongPress()), [disabled, clearLongPress]);
      return /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(import_jsx_runtime51.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Anchor2, { ...menuScope, virtualRef }),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
          Primitive.span,
          {
            "data-state": context.open ? "open" : "closed",
            "data-disabled": disabled ? "" : void 0,
            ...triggerProps,
            ref: forwardedRef,
            style: { WebkitTouchCallout: "none", ...props.style },
            onContextMenu: disabled ? props.onContextMenu : composeEventHandlers(props.onContextMenu, (event) => {
              clearLongPress();
              handleOpen(event);
              event.preventDefault();
            }),
            onPointerDown: disabled ? props.onPointerDown : composeEventHandlers(
              props.onPointerDown,
              whenTouchOrPen((event) => {
                clearLongPress();
                longPressTimerRef.current = window.setTimeout(() => handleOpen(event), 700);
              })
            ),
            onPointerMove: disabled ? props.onPointerMove : composeEventHandlers(props.onPointerMove, whenTouchOrPen(clearLongPress)),
            onPointerCancel: disabled ? props.onPointerCancel : composeEventHandlers(props.onPointerCancel, whenTouchOrPen(clearLongPress)),
            onPointerUp: disabled ? props.onPointerUp : composeEventHandlers(props.onPointerUp, whenTouchOrPen(clearLongPress))
          }
        )
      ] });
    }
  );
  ContextMenuTrigger.displayName = TRIGGER_NAME;
  var PORTAL_NAME3 = "ContextMenuPortal";
  var ContextMenuPortal = (props) => {
    const { __scopeContextMenu, ...portalProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Portal2, { ...menuScope, ...portalProps });
  };
  ContextMenuPortal.displayName = PORTAL_NAME3;
  var CONTENT_NAME3 = "ContextMenuContent";
  var ContextMenuContent = React42.forwardRef(
    (props, forwardedRef) => {
      const { __scopeContextMenu, ...contentProps } = props;
      const context = useContextMenuContext(CONTENT_NAME3, __scopeContextMenu);
      const menuScope = useMenuScope(__scopeContextMenu);
      const hasInteractedOutsideRef = React42.useRef(false);
      return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
        Content2,
        {
          ...menuScope,
          ...contentProps,
          ref: forwardedRef,
          side: "right",
          sideOffset: 2,
          align: "start",
          onCloseAutoFocus: (event) => {
            props.onCloseAutoFocus?.(event);
            if (!event.defaultPrevented && hasInteractedOutsideRef.current) {
              event.preventDefault();
            }
            hasInteractedOutsideRef.current = false;
          },
          onInteractOutside: (event) => {
            props.onInteractOutside?.(event);
            if (!event.defaultPrevented && !context.modal) hasInteractedOutsideRef.current = true;
          },
          style: {
            ...props.style,
            // re-namespace exposed content custom properties
            ...{
              "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
              "--radix-context-menu-content-available-width": "var(--radix-popper-available-width)",
              "--radix-context-menu-content-available-height": "var(--radix-popper-available-height)",
              "--radix-context-menu-trigger-width": "var(--radix-popper-anchor-width)",
              "--radix-context-menu-trigger-height": "var(--radix-popper-anchor-height)"
            }
          }
        }
      );
    }
  );
  ContextMenuContent.displayName = CONTENT_NAME3;
  var GROUP_NAME3 = "ContextMenuGroup";
  var ContextMenuGroup = React42.forwardRef(
    (props, forwardedRef) => {
      const { __scopeContextMenu, ...groupProps } = props;
      const menuScope = useMenuScope(__scopeContextMenu);
      return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Group, { ...menuScope, ...groupProps, ref: forwardedRef });
    }
  );
  ContextMenuGroup.displayName = GROUP_NAME3;
  var LABEL_NAME2 = "ContextMenuLabel";
  var ContextMenuLabel = React42.forwardRef(
    (props, forwardedRef) => {
      const { __scopeContextMenu, ...labelProps } = props;
      const menuScope = useMenuScope(__scopeContextMenu);
      return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Label, { ...menuScope, ...labelProps, ref: forwardedRef });
    }
  );
  ContextMenuLabel.displayName = LABEL_NAME2;
  var ITEM_NAME3 = "ContextMenuItem";
  var ContextMenuItem = React42.forwardRef(
    (props, forwardedRef) => {
      const { __scopeContextMenu, ...itemProps } = props;
      const menuScope = useMenuScope(__scopeContextMenu);
      return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Item2, { ...menuScope, ...itemProps, ref: forwardedRef });
    }
  );
  ContextMenuItem.displayName = ITEM_NAME3;
  var CHECKBOX_ITEM_NAME2 = "ContextMenuCheckboxItem";
  var ContextMenuCheckboxItem = React42.forwardRef((props, forwardedRef) => {
    const { __scopeContextMenu, ...checkboxItemProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(CheckboxItem, { ...menuScope, ...checkboxItemProps, ref: forwardedRef });
  });
  ContextMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME2;
  var RADIO_GROUP_NAME2 = "ContextMenuRadioGroup";
  var ContextMenuRadioGroup = React42.forwardRef((props, forwardedRef) => {
    const { __scopeContextMenu, ...radioGroupProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(RadioGroup, { ...menuScope, ...radioGroupProps, ref: forwardedRef });
  });
  ContextMenuRadioGroup.displayName = RADIO_GROUP_NAME2;
  var RADIO_ITEM_NAME2 = "ContextMenuRadioItem";
  var ContextMenuRadioItem = React42.forwardRef((props, forwardedRef) => {
    const { __scopeContextMenu, ...radioItemProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(RadioItem, { ...menuScope, ...radioItemProps, ref: forwardedRef });
  });
  ContextMenuRadioItem.displayName = RADIO_ITEM_NAME2;
  var INDICATOR_NAME = "ContextMenuItemIndicator";
  var ContextMenuItemIndicator = React42.forwardRef((props, forwardedRef) => {
    const { __scopeContextMenu, ...itemIndicatorProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(ItemIndicator, { ...menuScope, ...itemIndicatorProps, ref: forwardedRef });
  });
  ContextMenuItemIndicator.displayName = INDICATOR_NAME;
  var SEPARATOR_NAME2 = "ContextMenuSeparator";
  var ContextMenuSeparator = React42.forwardRef((props, forwardedRef) => {
    const { __scopeContextMenu, ...separatorProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Separator, { ...menuScope, ...separatorProps, ref: forwardedRef });
  });
  ContextMenuSeparator.displayName = SEPARATOR_NAME2;
  var ARROW_NAME3 = "ContextMenuArrow";
  var ContextMenuArrow = React42.forwardRef(
    (props, forwardedRef) => {
      const { __scopeContextMenu, ...arrowProps } = props;
      const menuScope = useMenuScope(__scopeContextMenu);
      return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Arrow22, { ...menuScope, ...arrowProps, ref: forwardedRef });
    }
  );
  ContextMenuArrow.displayName = ARROW_NAME3;
  var SUB_NAME2 = "ContextMenuSub";
  var ContextMenuSub = (props) => {
    const { __scopeContextMenu, children, onOpenChange, open: openProp, defaultOpen } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    const [open, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Sub, { ...menuScope, open, onOpenChange: setOpen, children });
  };
  ContextMenuSub.displayName = SUB_NAME2;
  var SUB_TRIGGER_NAME2 = "ContextMenuSubTrigger";
  var ContextMenuSubTrigger = React42.forwardRef((props, forwardedRef) => {
    const { __scopeContextMenu, ...triggerItemProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(SubTrigger, { ...menuScope, ...triggerItemProps, ref: forwardedRef });
  });
  ContextMenuSubTrigger.displayName = SUB_TRIGGER_NAME2;
  var SUB_CONTENT_NAME2 = "ContextMenuSubContent";
  var ContextMenuSubContent = React42.forwardRef((props, forwardedRef) => {
    const { __scopeContextMenu, ...subContentProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
      SubContent,
      {
        ...menuScope,
        ...subContentProps,
        ref: forwardedRef,
        style: {
          ...props.style,
          // re-namespace exposed content custom properties
          ...{
            "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-context-menu-content-available-width": "var(--radix-popper-available-width)",
            "--radix-context-menu-content-available-height": "var(--radix-popper-available-height)",
            "--radix-context-menu-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-context-menu-trigger-height": "var(--radix-popper-anchor-height)"
          }
        }
      }
    );
  });
  ContextMenuSubContent.displayName = SUB_CONTENT_NAME2;
  function whenTouchOrPen(handler) {
    return (event) => event.pointerType !== "mouse" ? handler(event) : void 0;
  }
  var Root23 = ContextMenu;
  var Trigger = ContextMenuTrigger;
  var Portal22 = ContextMenuPortal;
  var Content22 = ContextMenuContent;
  var CheckboxItem2 = ContextMenuCheckboxItem;

  // node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs
  var React43 = __toESM(require_react(), 1);
  var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
  var DROPDOWN_MENU_NAME = "DropdownMenu";
  var [createDropdownMenuContext, createDropdownMenuScope] = createContextScope(
    DROPDOWN_MENU_NAME,
    [createMenuScope]
  );
  var useMenuScope2 = createMenuScope();
  var [DropdownMenuProvider, useDropdownMenuContext] = createDropdownMenuContext(DROPDOWN_MENU_NAME);
  var DropdownMenu = (props) => {
    const {
      __scopeDropdownMenu,
      children,
      dir,
      open: openProp,
      defaultOpen,
      onOpenChange,
      modal = true
    } = props;
    const menuScope = useMenuScope2(__scopeDropdownMenu);
    const triggerRef = React43.useRef(null);
    const [open = false, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
      DropdownMenuProvider,
      {
        scope: __scopeDropdownMenu,
        triggerId: useId2(),
        triggerRef,
        contentId: useId2(),
        open,
        onOpenChange: setOpen,
        onOpenToggle: React43.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
        modal,
        children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Root32, { ...menuScope, open, onOpenChange: setOpen, dir, modal, children })
      }
    );
  };
  DropdownMenu.displayName = DROPDOWN_MENU_NAME;
  var TRIGGER_NAME2 = "DropdownMenuTrigger";
  var DropdownMenuTrigger = React43.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDropdownMenu, disabled = false, ...triggerProps } = props;
      const context = useDropdownMenuContext(TRIGGER_NAME2, __scopeDropdownMenu);
      const menuScope = useMenuScope2(__scopeDropdownMenu);
      return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Anchor2, { asChild: true, ...menuScope, children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
        Primitive.button,
        {
          type: "button",
          id: context.triggerId,
          "aria-haspopup": "menu",
          "aria-expanded": context.open,
          "aria-controls": context.open ? context.contentId : void 0,
          "data-state": context.open ? "open" : "closed",
          "data-disabled": disabled ? "" : void 0,
          disabled,
          ...triggerProps,
          ref: composeRefs(forwardedRef, context.triggerRef),
          onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
            if (!disabled && event.button === 0 && event.ctrlKey === false) {
              context.onOpenToggle();
              if (!context.open) event.preventDefault();
            }
          }),
          onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
            if (disabled) return;
            if (["Enter", " "].includes(event.key)) context.onOpenToggle();
            if (event.key === "ArrowDown") context.onOpenChange(true);
            if (["Enter", " ", "ArrowDown"].includes(event.key)) event.preventDefault();
          })
        }
      ) });
    }
  );
  DropdownMenuTrigger.displayName = TRIGGER_NAME2;
  var PORTAL_NAME4 = "DropdownMenuPortal";
  var DropdownMenuPortal = (props) => {
    const { __scopeDropdownMenu, ...portalProps } = props;
    const menuScope = useMenuScope2(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Portal2, { ...menuScope, ...portalProps });
  };
  DropdownMenuPortal.displayName = PORTAL_NAME4;
  var CONTENT_NAME4 = "DropdownMenuContent";
  var DropdownMenuContent = React43.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDropdownMenu, ...contentProps } = props;
      const context = useDropdownMenuContext(CONTENT_NAME4, __scopeDropdownMenu);
      const menuScope = useMenuScope2(__scopeDropdownMenu);
      const hasInteractedOutsideRef = React43.useRef(false);
      return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
        Content2,
        {
          id: context.contentId,
          "aria-labelledby": context.triggerId,
          ...menuScope,
          ...contentProps,
          ref: forwardedRef,
          onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();
            hasInteractedOutsideRef.current = false;
            event.preventDefault();
          }),
          onInteractOutside: composeEventHandlers(props.onInteractOutside, (event) => {
            const originalEvent = event.detail.originalEvent;
            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
            if (!context.modal || isRightClick) hasInteractedOutsideRef.current = true;
          }),
          style: {
            ...props.style,
            // re-namespace exposed content custom properties
            ...{
              "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
              "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
              "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
              "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
              "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
            }
          }
        }
      );
    }
  );
  DropdownMenuContent.displayName = CONTENT_NAME4;
  var GROUP_NAME4 = "DropdownMenuGroup";
  var DropdownMenuGroup = React43.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDropdownMenu, ...groupProps } = props;
      const menuScope = useMenuScope2(__scopeDropdownMenu);
      return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Group, { ...menuScope, ...groupProps, ref: forwardedRef });
    }
  );
  DropdownMenuGroup.displayName = GROUP_NAME4;
  var LABEL_NAME3 = "DropdownMenuLabel";
  var DropdownMenuLabel = React43.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDropdownMenu, ...labelProps } = props;
      const menuScope = useMenuScope2(__scopeDropdownMenu);
      return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Label, { ...menuScope, ...labelProps, ref: forwardedRef });
    }
  );
  DropdownMenuLabel.displayName = LABEL_NAME3;
  var ITEM_NAME4 = "DropdownMenuItem";
  var DropdownMenuItem = React43.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDropdownMenu, ...itemProps } = props;
      const menuScope = useMenuScope2(__scopeDropdownMenu);
      return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Item2, { ...menuScope, ...itemProps, ref: forwardedRef });
    }
  );
  DropdownMenuItem.displayName = ITEM_NAME4;
  var CHECKBOX_ITEM_NAME3 = "DropdownMenuCheckboxItem";
  var DropdownMenuCheckboxItem = React43.forwardRef((props, forwardedRef) => {
    const { __scopeDropdownMenu, ...checkboxItemProps } = props;
    const menuScope = useMenuScope2(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(CheckboxItem, { ...menuScope, ...checkboxItemProps, ref: forwardedRef });
  });
  DropdownMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME3;
  var RADIO_GROUP_NAME3 = "DropdownMenuRadioGroup";
  var DropdownMenuRadioGroup = React43.forwardRef((props, forwardedRef) => {
    const { __scopeDropdownMenu, ...radioGroupProps } = props;
    const menuScope = useMenuScope2(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(RadioGroup, { ...menuScope, ...radioGroupProps, ref: forwardedRef });
  });
  DropdownMenuRadioGroup.displayName = RADIO_GROUP_NAME3;
  var RADIO_ITEM_NAME3 = "DropdownMenuRadioItem";
  var DropdownMenuRadioItem = React43.forwardRef((props, forwardedRef) => {
    const { __scopeDropdownMenu, ...radioItemProps } = props;
    const menuScope = useMenuScope2(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(RadioItem, { ...menuScope, ...radioItemProps, ref: forwardedRef });
  });
  DropdownMenuRadioItem.displayName = RADIO_ITEM_NAME3;
  var INDICATOR_NAME2 = "DropdownMenuItemIndicator";
  var DropdownMenuItemIndicator = React43.forwardRef((props, forwardedRef) => {
    const { __scopeDropdownMenu, ...itemIndicatorProps } = props;
    const menuScope = useMenuScope2(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(ItemIndicator, { ...menuScope, ...itemIndicatorProps, ref: forwardedRef });
  });
  DropdownMenuItemIndicator.displayName = INDICATOR_NAME2;
  var SEPARATOR_NAME3 = "DropdownMenuSeparator";
  var DropdownMenuSeparator = React43.forwardRef((props, forwardedRef) => {
    const { __scopeDropdownMenu, ...separatorProps } = props;
    const menuScope = useMenuScope2(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Separator, { ...menuScope, ...separatorProps, ref: forwardedRef });
  });
  DropdownMenuSeparator.displayName = SEPARATOR_NAME3;
  var ARROW_NAME4 = "DropdownMenuArrow";
  var DropdownMenuArrow = React43.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDropdownMenu, ...arrowProps } = props;
      const menuScope = useMenuScope2(__scopeDropdownMenu);
      return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Arrow22, { ...menuScope, ...arrowProps, ref: forwardedRef });
    }
  );
  DropdownMenuArrow.displayName = ARROW_NAME4;
  var DropdownMenuSub = (props) => {
    const { __scopeDropdownMenu, children, open: openProp, onOpenChange, defaultOpen } = props;
    const menuScope = useMenuScope2(__scopeDropdownMenu);
    const [open = false, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Sub, { ...menuScope, open, onOpenChange: setOpen, children });
  };
  var SUB_TRIGGER_NAME3 = "DropdownMenuSubTrigger";
  var DropdownMenuSubTrigger = React43.forwardRef((props, forwardedRef) => {
    const { __scopeDropdownMenu, ...subTriggerProps } = props;
    const menuScope = useMenuScope2(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(SubTrigger, { ...menuScope, ...subTriggerProps, ref: forwardedRef });
  });
  DropdownMenuSubTrigger.displayName = SUB_TRIGGER_NAME3;
  var SUB_CONTENT_NAME3 = "DropdownMenuSubContent";
  var DropdownMenuSubContent = React43.forwardRef((props, forwardedRef) => {
    const { __scopeDropdownMenu, ...subContentProps } = props;
    const menuScope = useMenuScope2(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
      SubContent,
      {
        ...menuScope,
        ...subContentProps,
        ref: forwardedRef,
        style: {
          ...props.style,
          // re-namespace exposed content custom properties
          ...{
            "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
            "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
            "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
          }
        }
      }
    );
  });
  DropdownMenuSubContent.displayName = SUB_CONTENT_NAME3;
  var Root24 = DropdownMenu;
  var Trigger2 = DropdownMenuTrigger;
  var Portal23 = DropdownMenuPortal;
  var Content23 = DropdownMenuContent;
  var Group2 = DropdownMenuGroup;
  var Item22 = DropdownMenuItem;
  var CheckboxItem22 = DropdownMenuCheckboxItem;
  var Sub2 = DropdownMenuSub;
  var SubTrigger2 = DropdownMenuSubTrigger;
  var SubContent2 = DropdownMenuSubContent;

  // node_modules/tldraw/dist-esm/lib/ui/context/actions.mjs
  var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
  var React52 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/selectHelpers.mjs
  function kickoutOccludedShapes(editor, shapeIds) {
    const parentsToCheck = /* @__PURE__ */ new Set();
    for (const id of shapeIds) {
      const shape = editor.getShape(id);
      if (!shape) continue;
      if (editor.getShapeUtil(shape).onDragShapesOut) {
        parentsToCheck.add(shape);
      }
      const parent = editor.getShape(shape.parentId);
      if (!parent) continue;
      if (editor.getShapeUtil(parent).onDragShapesOut) {
        parentsToCheck.add(parent);
      }
    }
    const parentsWithKickedOutChildren = /* @__PURE__ */ new Map();
    for (const parent of parentsToCheck) {
      const occludedChildren = getOccludedChildren(editor, parent);
      if (occludedChildren.length) {
        parentsWithKickedOutChildren.set(parent, occludedChildren);
      }
    }
    for (const [parent, kickedOutChildrenIds] of parentsWithKickedOutChildren) {
      const shapeUtil = editor.getShapeUtil(parent);
      const kickedOutChildren = compact(kickedOutChildrenIds.map((id) => editor.getShape(id)));
      shapeUtil.onDragShapesOut?.(parent, kickedOutChildren);
    }
  }
  function getOccludedChildren(editor, parent) {
    const childIds = editor.getSortedChildIdsForParent(parent.id);
    if (childIds.length === 0) return [];
    const parentPageBounds = editor.getShapePageBounds(parent);
    if (!parentPageBounds) return [];
    let parentGeometry;
    let parentPageTransform;
    let parentPageCorners;
    const results = [];
    for (const childId of childIds) {
      const shapePageBounds = editor.getShapePageBounds(childId);
      if (!shapePageBounds) {
        continue;
      }
      if (!parentPageBounds.includes(shapePageBounds)) {
        results.push(childId);
        continue;
      }
      parentGeometry ??= editor.getShapeGeometry(parent);
      parentPageTransform ??= editor.getShapePageTransform(parent);
      parentPageCorners ??= parentPageTransform.applyToPoints(parentGeometry.vertices);
      const parentCornersInShapeSpace = editor.getShapePageTransform(childId).clone().invert().applyToPoints(parentPageCorners);
      const { vertices, isClosed } = editor.getShapeGeometry(childId);
      if (vertices.some((v) => pointInPolygon(v, parentCornersInShapeSpace))) {
        continue;
      }
      if (isClosed) {
        if (polygonsIntersect(parentCornersInShapeSpace, vertices)) {
          continue;
        }
      } else if (polygonIntersectsPolyline(parentCornersInShapeSpace, vertices)) {
        continue;
      }
      results.push(childId);
    }
    return results;
  }
  function startEditingShapeWithLabel(editor, shape, selectAll = false) {
    editor.select(shape);
    editor.setEditingShape(shape);
    editor.setCurrentTool("select.editing_shape", {
      target: "shape",
      shape
    });
    if (selectAll) {
      editor.emit("select-all-text", { shapeId: shape.id });
    }
  }

  // node_modules/tldraw/dist-esm/lib/utils/frames/frames.mjs
  function removeFrame(editor, ids) {
    const frames = compact(
      ids.map((id) => editor.getShape(id)).filter((f) => f && editor.isShapeOfType(f, "frame"))
    );
    if (!frames.length) return;
    const allChildren = [];
    editor.run(() => {
      frames.map((frame2) => {
        const children = editor.getSortedChildIdsForParent(frame2.id);
        if (children.length) {
          editor.reparentShapes(children, frame2.parentId, frame2.index);
          allChildren.push(...children);
        }
      });
      editor.setSelectedShapes(allChildren);
      editor.deleteShapes(ids);
    });
  }
  var DEFAULT_FRAME_PADDING = 50;
  function fitFrameToContent(editor, id, opts = {}) {
    const frame2 = editor.getShape(id);
    if (!frame2) return;
    const childIds = editor.getSortedChildIdsForParent(frame2.id);
    const children = compact(childIds.map((id2) => editor.getShape(id2)));
    if (!children.length) return;
    const bounds = Box.FromPoints(
      children.flatMap((shape) => {
        const geometry = editor.getShapeGeometry(shape.id);
        return editor.getShapeLocalTransform(shape).applyToPoints(geometry.vertices);
      })
    );
    const { padding = DEFAULT_FRAME_PADDING } = opts;
    const w = bounds.w + 2 * padding;
    const h = bounds.h + 2 * padding;
    const dx = padding - bounds.minX;
    const dy = padding - bounds.minY;
    if (dx === 0 && dy === 0 && frame2.props.w === w && frame2.props.h === h) return;
    const diff = new Vec(dx, dy).rot(frame2.rotation);
    editor.run(() => {
      const changes = childIds.map((child) => {
        const shape = editor.getShape(child);
        return {
          id: shape.id,
          type: shape.type,
          x: shape.x + dx,
          y: shape.y + dy
        };
      });
      changes.push({
        id: frame2.id,
        type: frame2.type,
        x: frame2.x - diff.x,
        y: frame2.y - diff.y,
        props: {
          w,
          h
        }
      });
      editor.updateShapes(changes);
    });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/EditLinkDialog.mjs
  var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
  var import_react55 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useTranslation/useTranslation.mjs
  var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
  var React44 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/context/asset-urls.mjs
  var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
  var import_react53 = __toESM(require_react(), 1);
  var AssetUrlsContext = (0, import_react53.createContext)(null);
  function AssetUrlsProvider({
    assetUrls,
    children
  }) {
    (0, import_react53.useEffect)(() => {
      for (const src of Object.values(assetUrls.icons)) {
        const image = Image();
        image.src = src;
        image.decode();
      }
      for (const src of Object.values(assetUrls.embedIcons)) {
        const image = Image();
        image.src = src;
        image.decode();
      }
    }, [assetUrls]);
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(AssetUrlsContext.Provider, { value: assetUrls, children });
  }
  function useAssetUrls() {
    const assetUrls = (0, import_react53.useContext)(AssetUrlsContext);
    if (!assetUrls) {
      throw new Error("useAssetUrls must be used within an AssetUrlsProvider");
    }
    return assetUrls;
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useTranslation/defaultTranslation.mjs
  var DEFAULT_TRANSLATION = {
    "action.convert-to-bookmark": "Convert to Bookmark",
    "action.convert-to-embed": "Convert to Embed",
    "action.open-embed-link": "Open link",
    "action.align-bottom": "Align bottom",
    "action.align-center-horizontal": "Align horizontally",
    "action.align-center-vertical": "Align vertically",
    "action.align-center-horizontal.short": "Align H",
    "action.align-center-vertical.short": "Align V",
    "action.align-left": "Align left",
    "action.align-right": "Align right",
    "action.align-top": "Align top",
    "action.back-to-content": "Back to content",
    "action.bring-forward": "Bring forward",
    "action.bring-to-front": "Bring to front",
    "action.copy-as-json.short": "JSON",
    "action.copy-as-json": "Copy as JSON",
    "action.copy-as-png.short": "PNG",
    "action.copy-as-png": "Copy as PNG",
    "action.copy-as-svg.short": "SVG",
    "action.copy-as-svg": "Copy as SVG",
    "action.copy": "Copy",
    "action.cut": "Cut",
    "action.delete": "Delete",
    "action.unlock-all": "Unlock all",
    "action.distribute-horizontal": "Distribute horizontally",
    "action.distribute-vertical": "Distribute vertically",
    "action.distribute-horizontal.short": "Distribute H",
    "action.distribute-vertical.short": "Distribute V",
    "action.duplicate": "Duplicate",
    "action.edit-link": "Edit link",
    "action.exit-pen-mode": "Exit pen mode",
    "action.export-as-json.short": "JSON",
    "action.export-as-json": "Export as JSON",
    "action.export-as-png.short": "PNG",
    "action.export-as-png": "Export as PNG",
    "action.export-as-svg.short": "SVG",
    "action.export-as-svg": "Export as SVG",
    "action.export-all-as-json.short": "JSON",
    "action.export-all-as-json": "Export as JSON",
    "action.export-all-as-png.short": "PNG",
    "action.export-all-as-png": "Export as PNG",
    "action.export-all-as-svg.short": "SVG",
    "action.export-all-as-svg": "Export as SVG",
    "action.fit-frame-to-content": "Fit to content",
    "action.flip-horizontal": "Flip horizontally",
    "action.flip-vertical": "Flip vertically",
    "action.flip-horizontal.short": "Flip H",
    "action.flip-vertical.short": "Flip V",
    "action.fork-project": "Fork this project",
    "action.fork-project-on-tldraw": "Fork project on tldraw",
    "action.group": "Group",
    "action.insert-embed": "Insert embed",
    "action.insert-media": "Upload media",
    "action.leave-shared-project": "Leave shared project",
    "action.new-project": "New project",
    "action.new-shared-project": "New shared project",
    "action.open-cursor-chat": "Cursor chat",
    "action.open-file": "Open file",
    "action.pack": "Pack",
    "action.paste": "Paste",
    "action.paste-error-title": "Pasting failed",
    "action.paste-error-description": "Could not paste due to missing clipboard permissions. Please enable the permissions and try again.",
    "action.print": "Print",
    "action.redo": "Redo",
    "action.remove-frame": "Remove frame",
    "action.rename": "Rename",
    "action.rotate-ccw": "Rotate counterclockwise",
    "action.rotate-cw": "Rotate clockwise",
    "action.save-copy": "Save a copy",
    "action.select-all": "Select all",
    "action.select-none": "Select none",
    "action.send-backward": "Send backward",
    "action.send-to-back": "Send to back",
    "action.share-project": "Share this project",
    "action.stack-horizontal": "Stack horizontally",
    "action.stack-vertical": "Stack vertically",
    "action.stack-horizontal.short": "Stack H",
    "action.stack-vertical.short": "Stack V",
    "action.stop-following": "Stop following",
    "action.stretch-horizontal": "Stretch horizontally",
    "action.stretch-vertical": "Stretch vertically",
    "action.stretch-horizontal.short": "Stretch H",
    "action.stretch-vertical.short": "Stretch V",
    "action.toggle-auto-size": "Toggle auto size",
    "action.toggle-dark-mode.menu": "Dark mode",
    "action.toggle-dark-mode": "Toggle dark mode",
    "action.toggle-paste-at-cursor.menu": "Paste at cursor",
    "action.toggle-paste-at-cursor": "Toggle paste at cursor",
    "action.toggle-wrap-mode.menu": "Select on wrap",
    "action.toggle-wrap-mode": "Toggle Select on wrap",
    "action.toggle-reduce-motion.menu": "Reduce motion",
    "action.toggle-reduce-motion": "Toggle reduce motion",
    "action.toggle-edge-scrolling.menu": "Edge scrolling",
    "action.toggle-edge-scrolling": "Toggle edge scrolling",
    "action.toggle-debug-mode.menu": "Debug mode",
    "action.toggle-debug-mode": "Toggle debug mode",
    "action.toggle-focus-mode.menu": "Focus mode",
    "action.toggle-focus-mode": "Toggle focus mode",
    "action.toggle-dynamic-size-mode.menu": "Dynamic size",
    "action.toggle-dynamic-size-mode": "Toggle dynamic size",
    "action.toggle-grid.menu": "Show grid",
    "action.toggle-grid": "Toggle grid",
    "action.toggle-lock": "Toggle locked",
    "action.flatten-to-image": "Flatten",
    "action.toggle-snap-mode.menu": "Always snap",
    "action.toggle-snap-mode": "Toggle always snap",
    "action.toggle-tool-lock.menu": "Tool lock",
    "action.toggle-tool-lock": "Toggle tool lock",
    "action.toggle-transparent.context-menu": "Transparent",
    "action.toggle-transparent.menu": "Transparent",
    "action.toggle-transparent": "Toggle transparent background",
    "action.undo": "Undo",
    "action.ungroup": "Ungroup",
    "action.zoom-in": "Zoom in",
    "action.zoom-out": "Zoom out",
    "action.zoom-to-100": "Zoom to 100%",
    "action.zoom-to-fit": "Zoom to fit",
    "action.zoom-to-selection": "Zoom to selection",
    "assets.files.size-too-big": "File size is too big",
    "assets.files.type-not-allowed": "File type is not allowed",
    "assets.files.upload-failed": "Upload failed",
    "assets.url.failed": "Couldn't load URL preview",
    "theme.dark": "Dark",
    "theme.light": "Light",
    "theme.system": "System",
    "color-style.white": "White",
    "color-style.black": "Black",
    "color-style.blue": "Blue",
    "color-style.green": "Green",
    "color-style.grey": "Grey",
    "color-style.light-blue": "Light blue",
    "color-style.light-green": "Light green",
    "color-style.light-red": "Light red",
    "color-style.light-violet": "Light violet",
    "color-style.orange": "Orange",
    "color-style.red": "Red",
    "color-style.violet": "Violet",
    "color-style.yellow": "Yellow",
    "fill-style.none": "None",
    "document.default-name": "Untitled",
    "fill-style.semi": "Semi",
    "fill-style.solid": "Solid",
    "fill-style.pattern": "Pattern",
    "fill-style.fill": "Fill",
    "dash-style.dashed": "Dashed",
    "dash-style.dotted": "Dotted",
    "dash-style.draw": "Draw",
    "dash-style.solid": "Solid",
    "size-style.s": "Small",
    "size-style.m": "Medium",
    "size-style.l": "Large",
    "size-style.xl": "Extra large",
    "opacity-style.0.1": "10%",
    "opacity-style.0.25": "25%",
    "opacity-style.0.5": "50%",
    "opacity-style.0.75": "75%",
    "opacity-style.1": "100%",
    "font-style.draw": "Draw",
    "font-style.sans": "Sans",
    "font-style.serif": "Serif",
    "font-style.mono": "Mono",
    "align-style.start": "Start",
    "align-style.middle": "Middle",
    "align-style.end": "End",
    "align-style.justify": "Justify",
    "verticalAlign-style.start": "Top",
    "verticalAlign-style.middle": "Middle",
    "verticalAlign-style.end": "Bottom",
    "geo-style.arrow-down": "Arrow down",
    "geo-style.arrow-left": "Arrow left",
    "geo-style.arrow-right": "Arrow right",
    "geo-style.arrow-up": "Arrow up",
    "geo-style.diamond": "Diamond",
    "geo-style.ellipse": "Ellipse",
    "geo-style.hexagon": "Hexagon",
    "geo-style.octagon": "Octagon",
    "geo-style.oval": "Oval",
    "geo-style.cloud": "Cloud",
    "geo-style.pentagon": "Pentagon",
    "geo-style.rectangle": "Rectangle",
    "geo-style.rhombus-2": "Rhombus 2",
    "geo-style.rhombus": "Rhombus",
    "geo-style.star": "Star",
    "geo-style.trapezoid": "Trapezoid",
    "geo-style.triangle": "Triangle",
    "geo-style.x-box": "X box",
    "geo-style.check-box": "Check box",
    "arrowheadStart-style.none": "None",
    "arrowheadStart-style.arrow": "Arrow",
    "arrowheadStart-style.bar": "Bar",
    "arrowheadStart-style.diamond": "Diamond",
    "arrowheadStart-style.dot": "Dot",
    "arrowheadStart-style.inverted": "Inverted",
    "arrowheadStart-style.pipe": "Pipe",
    "arrowheadStart-style.square": "Square",
    "arrowheadStart-style.triangle": "Triangle",
    "arrowheadEnd-style.none": "None",
    "arrowheadEnd-style.arrow": "Arrow",
    "arrowheadEnd-style.bar": "Bar",
    "arrowheadEnd-style.diamond": "Diamond",
    "arrowheadEnd-style.dot": "Dot",
    "arrowheadEnd-style.inverted": "Inverted",
    "arrowheadEnd-style.pipe": "Pipe",
    "arrowheadEnd-style.square": "Square",
    "arrowheadEnd-style.triangle": "Triangle",
    "spline-style.line": "Line",
    "spline-style.cubic": "Cubic",
    "tool.select": "Select",
    "tool.hand": "Hand",
    "tool.draw": "Draw",
    "tool.eraser": "Eraser",
    "tool.arrow-down": "Arrow down",
    "tool.arrow-left": "Arrow left",
    "tool.arrow-right": "Arrow right",
    "tool.arrow-up": "Arrow up",
    "tool.arrow": "Arrow",
    "tool.cloud": "Cloud",
    "tool.diamond": "Diamond",
    "tool.ellipse": "Ellipse",
    "tool.hexagon": "Hexagon",
    "tool.highlight": "Highlight",
    "tool.line": "Line",
    "tool.octagon": "Octagon",
    "tool.oval": "Oval",
    "tool.pentagon": "Pentagon",
    "tool.rectangle": "Rectangle",
    "tool.rhombus": "Rhombus",
    "tool.star": "Star",
    "tool.trapezoid": "Trapezoid",
    "tool.triangle": "Triangle",
    "tool.x-box": "X box",
    "tool.check-box": "Check box",
    "tool.asset": "Asset",
    "tool.frame": "Frame",
    "tool.note": "Note",
    "tool.laser": "Laser",
    "tool.embed": "Embed",
    "tool.text": "Text",
    "tool.pointer-down": "Pointer down",
    "menu.title": "Menu",
    "menu.theme": "Theme",
    "menu.copy-as": "Copy as",
    "menu.edit": "Edit",
    "menu.export-as": "Export as",
    "menu.file": "File",
    "menu.language": "Language",
    "menu.preferences": "Preferences",
    "menu.help": "Help",
    "menu.view": "View",
    "context-menu.edit": "Edit",
    "context-menu.arrange": "Arrange",
    "context-menu.copy-as": "Copy as",
    "context-menu.export-as": "Export as",
    "context-menu.export-all-as": "Export",
    "context-menu.move-to-page": "Move to page",
    "context-menu.reorder": "Reorder",
    "page-menu.title": "Pages",
    "page-menu.create-new-page": "Create new page",
    "page-menu.max-page-count-reached": "Max pages reached",
    "page-menu.new-page-initial-name": "Page 1",
    "page-menu.edit-start": "Edit",
    "page-menu.edit-done": "Done",
    "page-menu.go-to-page": "Go to page",
    "page-menu.submenu.rename": "Rename",
    "page-menu.submenu.duplicate-page": "Duplicate",
    "page-menu.submenu.title": "Menu",
    "page-menu.submenu.move-down": "Move down",
    "page-menu.submenu.move-up": "Move up",
    "page-menu.submenu.delete": "Delete",
    "share-menu.title": "Share",
    "share-menu.save-note": "Download this project to your computer as a .tldr file.",
    "share-menu.fork-note": "Create a new shared project based on this snapshot.",
    "share-menu.share-project": "Share this project",
    "share-menu.default-project-name": "Shared Project",
    "share-menu.copy-link": "Copy editor link",
    "share-menu.readonly-link": "Read-only",
    "share-menu.create-snapshot-link": "Copy snapshot link",
    "share-menu.snapshot-link-note": "Capture and share this project as a read-only snapshot link.",
    "share-menu.copy-readonly-link": "Copy viewer link",
    "share-menu.offline-note": "Create a new shared project based on your current project.",
    "share-menu.copy-link-note": "Anyone with the link will be able to view and edit this project.",
    "share-menu.copy-readonly-link-note": "Anyone with the link will be able to access this project.",
    "share-menu.project-too-large": "Sorry, this project can't be shared because it's too large. We're working on it!",
    "share-menu.upload-failed": "Sorry, we couldn't upload your project at the moment. Please try again or let us know if the problem persists.",
    "share-menu.creating-project": "Creating the new project\u2026",
    "share-menu.copied": "Copied link",
    "document-name-menu.copy-link": "Copy link",
    "status.offline": "Offline",
    "status.online": "Online",
    "people-menu.title": "People",
    "people-menu.change-name": "Change name",
    "people-menu.change-color": "Change color",
    "people-menu.follow": "Following",
    "people-menu.following": "Following",
    "people-menu.leading": "Following You",
    "people-menu.user": "(You)",
    "people-menu.invite": "Invite others",
    "help-menu.import-tldr-file": "Import file...",
    "help-menu.title": "Help and resources",
    "help-menu.about": "About tldraw",
    "help-menu.docs": "Documentation & API",
    "help-menu.discord": "Discord",
    "help-menu.github": "GitHub",
    "help-menu.keyboard-shortcuts": "Keyboard shortcuts",
    "help-menu.twitter": "Twitter",
    "help-menu.terms": "Terms of service",
    "help-menu.privacy": "Privacy policy",
    "actions-menu.title": "Actions",
    "edit-link-dialog.title": "Edit link",
    "edit-link-dialog.invalid-url": "A link must be a valid URL.",
    "edit-link-dialog.detail": "Links will open in a new tab.",
    "edit-link-dialog.url": "URL",
    "edit-link-dialog.clear": "Clear",
    "edit-link-dialog.save": "Continue",
    "edit-link-dialog.cancel": "Cancel",
    "embed-dialog.title": "Insert embed",
    "embed-dialog.back": "Back",
    "embed-dialog.create": "Create",
    "embed-dialog.cancel": "Cancel",
    "embed-dialog.url": "URL",
    "embed-dialog.instruction": "Paste in the site's URL to create the embed.",
    "embed-dialog.invalid-url": "We could not create an embed from that URL.",
    "edit-pages-dialog.move-down": "Move down",
    "edit-pages-dialog.move-up": "Move up",
    "shortcuts-dialog.title": "Keyboard shortcuts",
    "shortcuts-dialog.edit": "Edit",
    "shortcuts-dialog.file": "File",
    "shortcuts-dialog.preferences": "Preferences",
    "shortcuts-dialog.tools": "Tools",
    "shortcuts-dialog.transform": "Transform",
    "shortcuts-dialog.view": "View",
    "shortcuts-dialog.collaboration": "Collaboration",
    "home-project-dialog.title": "Home project",
    "home-project-dialog.description": "This is your local home project. It's just for you!",
    "rename-project-dialog.title": "Rename project",
    "rename-project-dialog.cancel": "Cancel",
    "rename-project-dialog.rename": "Rename",
    "home-project-dialog.ok": "Ok",
    "style-panel.title": "Styles",
    "style-panel.align": "Align",
    "style-panel.label-align": "Label align",
    "style-panel.vertical-align": "Vertical align",
    "style-panel.position": "Position",
    "style-panel.arrowheads": "Arrows",
    "style-panel.arrowhead-start": "Start",
    "style-panel.arrowhead-end": "End",
    "style-panel.color": "Color",
    "style-panel.dash": "Dash",
    "style-panel.fill": "Fill",
    "style-panel.font": "Font",
    "style-panel.geo": "Shape",
    "style-panel.mixed": "Mixed",
    "style-panel.opacity": "Opacity",
    "style-panel.size": "Size",
    "style-panel.spline": "Spline",
    "tool-panel.drawing": "Drawing",
    "tool-panel.shapes": "Shapes",
    "tool-panel.more": "More",
    "debug-panel.more": "More",
    "navigation-zone.toggle-minimap": "Toggle minimap",
    "navigation-zone.zoom": "Zoom",
    "focus-mode.toggle-focus-mode": "Toggle focus mode",
    "toast.close": "Close",
    "file-system.file-open-error.title": "Could not open file",
    "file-system.file-open-error.not-a-tldraw-file": "The file you tried to open doesn't look like a tldraw file.",
    "file-system.file-open-error.file-format-version-too-new": "The file you tried to open is from a newer version of tldraw. Please reload the page and try again.",
    "file-system.file-open-error.generic-corrupted-file": "The file you tried to open is corrupted.",
    "file-system.confirm-open.title": "Overwrite current project?",
    "file-system.confirm-open.description": "Opening a file will replace your current project and any unsaved changes will be lost. Are you sure you want to continue?",
    "file-system.confirm-open.cancel": "Cancel",
    "file-system.confirm-open.open": "Open file",
    "file-system.confirm-open.dont-show-again": "Don't ask again",
    "file-system.confirm-clear.title": "Clear current project?",
    "file-system.confirm-clear.description": "Creating a new project will clear your current project and any unsaved changes will be lost. Are you sure you want to continue?",
    "file-system.confirm-clear.cancel": "Cancel",
    "file-system.confirm-clear.continue": "Continue",
    "file-system.confirm-clear.dont-show-again": "Don't ask again",
    "file-system.shared-document-file-open-error.title": "Could not open file",
    "file-system.shared-document-file-open-error.description": "Opening files from shared projects is not supported.",
    "sharing.confirm-leave.title": "Leave current project?",
    "sharing.confirm-leave.description": "Are you sure you want to leave this shared project? You can return to it by navigating to its URL.",
    "sharing.confirm-leave.cancel": "Cancel",
    "sharing.confirm-leave.leave": "Leave",
    "sharing.confirm-leave.dont-show-again": "Don't ask again",
    "toast.error.export-fail.title": "Failed export",
    "toast.error.export-fail.desc": "Failed to export image",
    "toast.error.copy-fail.title": "Failed copy",
    "toast.error.copy-fail.desc": "Failed to copy image",
    "context.pages.new-page": "New page",
    "vscode.file-open.desc": "We've updated this document to work with the current version of tldraw. If you'd like to keep the original version (which will work on old.tldraw.com), click below to create a backup.",
    "vscode.file-open.open": "Continue",
    "vscode.file-open.backup": "Backup",
    "vscode.file-open.backup-saved": "Backup saved",
    "vscode.file-open.backup-failed": "Backup failed: this is not a .tldr file.",
    "vscode.file-open.dont-show-again": "Don't ask again",
    "cursor-chat.type-to-chat": "Type to chat..."
  };

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useTranslation/translations.mjs
  var RTL_LANGUAGES = /* @__PURE__ */ new Set(["ar", "fa", "he", "ur", "ku"]);
  var EN_TRANSLATION = {
    locale: "en",
    label: "English",
    messages: DEFAULT_TRANSLATION,
    dir: "ltr"
  };
  async function fetchTranslation(locale, assetUrls) {
    const mainRes = await fetch(assetUrls.translations.en);
    if (!mainRes.ok) {
      console.warn(`No main translations found.`);
      return EN_TRANSLATION;
    }
    if (locale === "en") {
      return EN_TRANSLATION;
    }
    const language = LANGUAGES.find((t2) => t2.locale === locale);
    if (!language) {
      console.warn(`No translation found for locale ${locale}`);
      return EN_TRANSLATION;
    }
    const res = await fetch(assetUrls.translations[language.locale]);
    const messages = await res.json();
    if (!messages) {
      console.warn(`No messages found for locale ${locale}`);
      return EN_TRANSLATION;
    }
    const missing = [];
    for (const key in EN_TRANSLATION.messages) {
      if (!messages[key]) {
        missing.push(key);
      }
    }
    if (missing.length > 0 && true) {
      console.warn(`Language ${locale}: missing messages for keys:
${missing.join("\n")}`);
    }
    return {
      locale,
      label: language.label,
      dir: RTL_LANGUAGES.has(language.locale) ? "rtl" : "ltr",
      messages: { ...EN_TRANSLATION.messages, ...messages }
    };
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useTranslation/useTranslation.mjs
  var TranslationsContext = React44.createContext(null);
  function useCurrentTranslation() {
    const translations = React44.useContext(TranslationsContext);
    if (!translations) {
      throw new Error("useCurrentTranslation must be used inside of <TldrawUiContextProvider />");
    }
    return translations;
  }
  function TldrawUiTranslationProvider({
    overrides,
    locale,
    children
  }) {
    const getAssetUrl = useAssetUrls();
    const [currentTranslation, setCurrentTranslation] = React44.useState(() => {
      if (overrides && overrides["en"]) {
        return {
          locale: "en",
          label: "English",
          dir: "ltr",
          messages: { ...DEFAULT_TRANSLATION, ...overrides["en"] }
        };
      }
      return {
        locale: "en",
        label: "English",
        dir: "ltr",
        messages: DEFAULT_TRANSLATION
      };
    });
    React44.useEffect(() => {
      let isCancelled = false;
      async function loadTranslation() {
        const translation = await fetchTranslation(locale, getAssetUrl);
        if (translation && !isCancelled) {
          if (overrides && overrides[locale]) {
            setCurrentTranslation({
              ...translation,
              messages: { ...translation.messages, ...overrides[locale] }
            });
          } else {
            setCurrentTranslation(translation);
          }
        }
      }
      loadTranslation();
      return () => {
        isCancelled = true;
      };
    }, [getAssetUrl, locale, overrides]);
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(TranslationsContext.Provider, { value: currentTranslation, children });
  }
  function useTranslation() {
    const translation = useCurrentTranslation();
    return React44.useCallback(
      function msg2(id) {
        return translation.messages[id] ?? id;
      },
      [translation]
    );
  }
  function untranslated(string2) {
    return string2;
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/Button/TldrawUiButton.mjs
  var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
  var import_classnames13 = __toESM(require_classnames(), 1);
  var React45 = __toESM(require_react(), 1);
  var TldrawUiButton = React45.forwardRef(
    function TldrawUiButton2({ children, type, ...props }, ref) {
      return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
        "button",
        {
          ref,
          type: "button",
          draggable: false,
          ...props,
          className: (0, import_classnames13.default)("tlui-button", `tlui-button__${type}`, props.className),
          children
        }
      );
    }
  );

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/Button/TldrawUiButtonLabel.mjs
  var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
  function TldrawUiButtonLabel({ children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { className: "tlui-button__label", children });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiDialog.mjs
  var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);

  // node_modules/@radix-ui/react-dialog/dist/index.mjs
  var React46 = __toESM(require_react(), 1);
  var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
  var DIALOG_NAME = "Dialog";
  var [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);
  var [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);
  var Dialog = (props) => {
    const {
      __scopeDialog,
      children,
      open: openProp,
      defaultOpen,
      onOpenChange,
      modal = true
    } = props;
    const triggerRef = React46.useRef(null);
    const contentRef = React46.useRef(null);
    const [open = false, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
      DialogProvider,
      {
        scope: __scopeDialog,
        triggerRef,
        contentRef,
        contentId: useId2(),
        titleId: useId2(),
        descriptionId: useId2(),
        open,
        onOpenChange: setOpen,
        onOpenToggle: React46.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
        modal,
        children
      }
    );
  };
  Dialog.displayName = DIALOG_NAME;
  var TRIGGER_NAME3 = "DialogTrigger";
  var DialogTrigger = React46.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDialog, ...triggerProps } = props;
      const context = useDialogContext(TRIGGER_NAME3, __scopeDialog);
      const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
      return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
        Primitive.button,
        {
          type: "button",
          "aria-haspopup": "dialog",
          "aria-expanded": context.open,
          "aria-controls": context.contentId,
          "data-state": getState(context.open),
          ...triggerProps,
          ref: composedTriggerRef,
          onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
        }
      );
    }
  );
  DialogTrigger.displayName = TRIGGER_NAME3;
  var PORTAL_NAME5 = "DialogPortal";
  var [PortalProvider2, usePortalContext2] = createDialogContext(PORTAL_NAME5, {
    forceMount: void 0
  });
  var DialogPortal = (props) => {
    const { __scopeDialog, forceMount, children, container } = props;
    const context = useDialogContext(PORTAL_NAME5, __scopeDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(PortalProvider2, { scope: __scopeDialog, forceMount, children: React46.Children.map(children, (child) => /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Portal, { asChild: true, container, children: child }) })) });
  };
  DialogPortal.displayName = PORTAL_NAME5;
  var OVERLAY_NAME = "DialogOverlay";
  var DialogOverlay = React46.forwardRef(
    (props, forwardedRef) => {
      const portalContext = usePortalContext2(OVERLAY_NAME, props.__scopeDialog);
      const { forceMount = portalContext.forceMount, ...overlayProps } = props;
      const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);
      return context.modal ? /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(DialogOverlayImpl, { ...overlayProps, ref: forwardedRef }) }) : null;
    }
  );
  DialogOverlay.displayName = OVERLAY_NAME;
  var DialogOverlayImpl = React46.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDialog, ...overlayProps } = props;
      const context = useDialogContext(OVERLAY_NAME, __scopeDialog);
      return (
        // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`
        // ie. when `Overlay` and `Content` are siblings
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Combination_default, { as: Slot, allowPinchZoom: true, shards: [context.contentRef], children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
          Primitive.div,
          {
            "data-state": getState(context.open),
            ...overlayProps,
            ref: forwardedRef,
            style: { pointerEvents: "auto", ...overlayProps.style }
          }
        ) })
      );
    }
  );
  var CONTENT_NAME5 = "DialogContent";
  var DialogContent = React46.forwardRef(
    (props, forwardedRef) => {
      const portalContext = usePortalContext2(CONTENT_NAME5, props.__scopeDialog);
      const { forceMount = portalContext.forceMount, ...contentProps } = props;
      const context = useDialogContext(CONTENT_NAME5, props.__scopeDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Presence, { present: forceMount || context.open, children: context.modal ? /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(DialogContentModal, { ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(DialogContentNonModal, { ...contentProps, ref: forwardedRef }) });
    }
  );
  DialogContent.displayName = CONTENT_NAME5;
  var DialogContentModal = React46.forwardRef(
    (props, forwardedRef) => {
      const context = useDialogContext(CONTENT_NAME5, props.__scopeDialog);
      const contentRef = React46.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);
      React46.useEffect(() => {
        const content = contentRef.current;
        if (content) return hideOthers(content);
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
        DialogContentImpl,
        {
          ...props,
          ref: composedRefs,
          trapFocus: context.open,
          disableOutsidePointerEvents: true,
          onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
            event.preventDefault();
            context.triggerRef.current?.focus();
          }),
          onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, (event) => {
            const originalEvent = event.detail.originalEvent;
            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
            if (isRightClick) event.preventDefault();
          }),
          onFocusOutside: composeEventHandlers(
            props.onFocusOutside,
            (event) => event.preventDefault()
          )
        }
      );
    }
  );
  var DialogContentNonModal = React46.forwardRef(
    (props, forwardedRef) => {
      const context = useDialogContext(CONTENT_NAME5, props.__scopeDialog);
      const hasInteractedOutsideRef = React46.useRef(false);
      const hasPointerDownOutsideRef = React46.useRef(false);
      return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
        DialogContentImpl,
        {
          ...props,
          ref: forwardedRef,
          trapFocus: false,
          disableOutsidePointerEvents: false,
          onCloseAutoFocus: (event) => {
            props.onCloseAutoFocus?.(event);
            if (!event.defaultPrevented) {
              if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();
              event.preventDefault();
            }
            hasInteractedOutsideRef.current = false;
            hasPointerDownOutsideRef.current = false;
          },
          onInteractOutside: (event) => {
            props.onInteractOutside?.(event);
            if (!event.defaultPrevented) {
              hasInteractedOutsideRef.current = true;
              if (event.detail.originalEvent.type === "pointerdown") {
                hasPointerDownOutsideRef.current = true;
              }
            }
            const target = event.target;
            const targetIsTrigger = context.triggerRef.current?.contains(target);
            if (targetIsTrigger) event.preventDefault();
            if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
              event.preventDefault();
            }
          }
        }
      );
    }
  );
  var DialogContentImpl = React46.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;
      const context = useDialogContext(CONTENT_NAME5, __scopeDialog);
      const contentRef = React46.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, contentRef);
      useFocusGuards();
      return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(import_jsx_runtime57.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
          FocusScope,
          {
            asChild: true,
            loop: true,
            trapped: trapFocus,
            onMountAutoFocus: onOpenAutoFocus,
            onUnmountAutoFocus: onCloseAutoFocus,
            children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
              DismissableLayer,
              {
                role: "dialog",
                id: context.contentId,
                "aria-describedby": context.descriptionId,
                "aria-labelledby": context.titleId,
                "data-state": getState(context.open),
                ...contentProps,
                ref: composedRefs,
                onDismiss: () => context.onOpenChange(false)
              }
            )
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(import_jsx_runtime57.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(TitleWarning, { titleId: context.titleId }),
          /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(DescriptionWarning, { contentRef, descriptionId: context.descriptionId })
        ] })
      ] });
    }
  );
  var TITLE_NAME = "DialogTitle";
  var DialogTitle = React46.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDialog, ...titleProps } = props;
      const context = useDialogContext(TITLE_NAME, __scopeDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Primitive.h2, { id: context.titleId, ...titleProps, ref: forwardedRef });
    }
  );
  DialogTitle.displayName = TITLE_NAME;
  var DESCRIPTION_NAME = "DialogDescription";
  var DialogDescription = React46.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDialog, ...descriptionProps } = props;
      const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Primitive.p, { id: context.descriptionId, ...descriptionProps, ref: forwardedRef });
    }
  );
  DialogDescription.displayName = DESCRIPTION_NAME;
  var CLOSE_NAME = "DialogClose";
  var DialogClose = React46.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDialog, ...closeProps } = props;
      const context = useDialogContext(CLOSE_NAME, __scopeDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
        Primitive.button,
        {
          type: "button",
          ...closeProps,
          ref: forwardedRef,
          onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))
        }
      );
    }
  );
  DialogClose.displayName = CLOSE_NAME;
  function getState(open) {
    return open ? "open" : "closed";
  }
  var TITLE_WARNING_NAME = "DialogTitleWarning";
  var [WarningProvider, useWarningContext] = createContext22(TITLE_WARNING_NAME, {
    contentName: CONTENT_NAME5,
    titleName: TITLE_NAME,
    docsSlug: "dialog"
  });
  var TitleWarning = ({ titleId }) => {
    const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);
    const MESSAGE = `\`${titleWarningContext.contentName}\` requires a \`${titleWarningContext.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${titleWarningContext.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;
    React46.useEffect(() => {
      if (titleId) {
        const hasTitle = document.getElementById(titleId);
        if (!hasTitle) console.error(MESSAGE);
      }
    }, [MESSAGE, titleId]);
    return null;
  };
  var DESCRIPTION_WARNING_NAME = "DialogDescriptionWarning";
  var DescriptionWarning = ({ contentRef, descriptionId }) => {
    const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);
    const MESSAGE = `Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${descriptionWarningContext.contentName}}.`;
    React46.useEffect(() => {
      const describedById = contentRef.current?.getAttribute("aria-describedby");
      if (descriptionId && describedById) {
        const hasDescription = document.getElementById(descriptionId);
        if (!hasDescription) console.warn(MESSAGE);
      }
    }, [MESSAGE, contentRef, descriptionId]);
    return null;
  };
  var Root4 = Dialog;
  var Portal3 = DialogPortal;
  var Overlay = DialogOverlay;
  var Content3 = DialogContent;

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiDialog.mjs
  var import_classnames15 = __toESM(require_classnames(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/Button/TldrawUiButtonIcon.mjs
  var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiIcon.mjs
  var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
  var import_classnames14 = __toESM(require_classnames(), 1);
  var import_react54 = __toESM(require_react(), 1);
  var TldrawUiIcon = (0, import_react54.memo)(function TldrawUiIcon2({
    small,
    invertIcon,
    icon,
    color,
    className,
    ...props
  }) {
    const assetUrls = useAssetUrls();
    const asset = assetUrls.icons[icon] ?? assetUrls.icons["question-mark-circle"];
    const ref = (0, import_react54.useRef)(null);
    (0, import_react54.useLayoutEffect)(() => {
      if (!asset) {
        console.error(`Icon not found: ${icon}. Add it to the assetUrls.icons object.`);
      }
      if (ref?.current) {
        ref.current.style.webkitMask = `url(${asset}) center 100% / 100% no-repeat`;
      }
    }, [ref, asset, icon]);
    if (icon === "none") {
      return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
        "div",
        {
          className: (0, import_classnames14.default)(
            "tlui-icon tlui-icon__placeholder",
            { "tlui-icon__small": small },
            className
          )
        }
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
      "div",
      {
        ...props,
        ref,
        className: (0, import_classnames14.default)("tlui-icon", { "tlui-icon__small": small }, className),
        style: {
          color,
          mask: `url(${asset}) center 100% / 100% no-repeat`,
          transform: invertIcon ? "scale(-1, 1)" : void 0
        }
      }
    );
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/Button/TldrawUiButtonIcon.mjs
  function TldrawUiButtonIcon({ icon, small, invertIcon }) {
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(TldrawUiIcon, { className: "tlui-button__icon", icon, small, invertIcon });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiDialog.mjs
  function TldrawUiDialogHeader({ className, children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: (0, import_classnames15.default)("tlui-dialog__header", className), children });
  }
  function TldrawUiDialogTitle({ className, children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(DialogTitle, { dir: "ltr", className: (0, import_classnames15.default)("tlui-dialog__header__title", className), children });
  }
  function TldrawUiDialogCloseButton() {
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: "tlui-dialog__header__close", children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(DialogClose, { "data-testid": "dialog.close", dir: "ltr", asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
      TldrawUiButton,
      {
        type: "icon",
        "aria-label": "Close",
        onTouchEnd: (e) => e.target.click(),
        children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(TldrawUiButtonIcon, { small: true, icon: "cross-2" })
      }
    ) }) });
  }
  function TldrawUiDialogBody({ className, children, style }) {
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: (0, import_classnames15.default)("tlui-dialog__body", className), style, children });
  }
  function TldrawUiDialogFooter({ className, children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("div", { className: (0, import_classnames15.default)("tlui-dialog__footer", className), children });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiInput.mjs
  var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
  var import_classnames16 = __toESM(require_classnames(), 1);
  var React47 = __toESM(require_react(), 1);
  var TldrawUiInput = React47.forwardRef(
    function TldrawUiInput2({
      className,
      label,
      icon,
      iconLeft,
      autoSelect = false,
      autoFocus = false,
      defaultValue,
      placeholder,
      onComplete,
      onValueChange,
      onCancel,
      onFocus,
      onBlur,
      shouldManuallyMaintainScrollPositionWhenFocused = false,
      children,
      value
    }, ref) {
      const editor = useMaybeEditor();
      const rInputRef = React47.useRef(null);
      React47.useImperativeHandle(ref, () => rInputRef.current);
      const msg2 = useTranslation();
      const rInitialValue = React47.useRef(defaultValue ?? "");
      const rCurrentValue = React47.useRef(defaultValue ?? "");
      const [isFocused, setIsFocused] = React47.useState(false);
      const handleFocus = React47.useCallback(
        (e) => {
          setIsFocused(true);
          const elm = e.currentTarget;
          rCurrentValue.current = elm.value;
          if (editor) {
            editor.timers.requestAnimationFrame(() => {
              if (autoSelect) {
                elm.select();
              }
            });
          } else {
            tltime.requestAnimationFrame("anon", () => {
              if (autoSelect) {
                elm.select();
              }
            });
          }
          onFocus?.();
        },
        [autoSelect, editor, onFocus]
      );
      const handleChange = React47.useCallback(
        (e) => {
          const value2 = e.currentTarget.value;
          rCurrentValue.current = value2;
          onValueChange?.(value2);
        },
        [onValueChange]
      );
      const handleKeyDownCapture = React47.useCallback(
        (e) => {
          switch (e.key) {
            case "Enter": {
              e.currentTarget.blur();
              stopEventPropagation(e);
              onComplete?.(e.currentTarget.value);
              break;
            }
            case "Escape": {
              e.currentTarget.value = rInitialValue.current;
              onCancel?.(e.currentTarget.value);
              e.currentTarget.blur();
              stopEventPropagation(e);
              break;
            }
          }
        },
        [onComplete, onCancel]
      );
      const handleBlur = React47.useCallback(
        (e) => {
          setIsFocused(false);
          const value2 = e.currentTarget.value;
          onBlur?.(value2);
        },
        [onBlur]
      );
      React47.useEffect(() => {
        if (!tlenv.isIos) return;
        const visualViewport = window.visualViewport;
        if (isFocused && shouldManuallyMaintainScrollPositionWhenFocused && visualViewport) {
          const onViewportChange = () => {
            rInputRef.current?.scrollIntoView({ block: "center" });
          };
          visualViewport.addEventListener("resize", onViewportChange);
          visualViewport.addEventListener("scroll", onViewportChange);
          if (editor) {
            editor.timers.requestAnimationFrame(() => {
              rInputRef.current?.scrollIntoView({ block: "center" });
            });
          } else {
            tltime.requestAnimationFrame("anon", () => {
              rInputRef.current?.scrollIntoView({ block: "center" });
            });
          }
          return () => {
            visualViewport.removeEventListener("resize", onViewportChange);
            visualViewport.removeEventListener("scroll", onViewportChange);
          };
        }
      }, [isFocused, editor, shouldManuallyMaintainScrollPositionWhenFocused]);
      return /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("div", { draggable: false, className: "tlui-input__wrapper", children: [
        children,
        label && /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("label", { children: msg2(label) }),
        iconLeft && /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(TldrawUiIcon, { icon: iconLeft, className: "tlui-icon-left", small: true }),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
          "input",
          {
            ref: rInputRef,
            className: (0, import_classnames16.default)("tlui-input", className),
            type: "text",
            defaultValue,
            onKeyDownCapture: handleKeyDownCapture,
            onChange: handleChange,
            onFocus: handleFocus,
            onBlur: handleBlur,
            autoFocus,
            placeholder,
            value
          }
        ),
        icon && /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(TldrawUiIcon, { icon, small: !!label })
      ] });
    }
  );

  // node_modules/tldraw/dist-esm/lib/ui/components/EditLinkDialog.mjs
  function validateUrl(url) {
    if (validation_exports.linkUrl.isValid(url)) {
      return { isValid: true, hasProtocol: true };
    }
    if (validation_exports.linkUrl.isValid("https://" + url)) {
      return { isValid: true, hasProtocol: false };
    }
    return { isValid: false, hasProtocol: false };
  }
  var EditLinkDialog = track(function EditLinkDialog2({ onClose }) {
    const editor = useEditor();
    const selectedShape = editor.getOnlySelectedShape();
    if (!(selectedShape && "url" in selectedShape.props && typeof selectedShape.props.url === "string")) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(EditLinkDialogInner, { onClose, selectedShape });
  });
  var EditLinkDialogInner = track(function EditLinkDialogInner2({
    onClose,
    selectedShape
  }) {
    const editor = useEditor();
    const msg2 = useTranslation();
    const rInput = (0, import_react55.useRef)(null);
    (0, import_react55.useEffect)(() => {
      editor.timers.requestAnimationFrame(() => rInput.current?.focus());
    }, [editor]);
    const rInitialValue = (0, import_react55.useRef)(selectedShape.props.url);
    const [urlInputState, setUrlInputState] = (0, import_react55.useState)(() => {
      const urlValidResult = validateUrl(selectedShape.props.url);
      const initialValue = urlValidResult.isValid === true ? urlValidResult.hasProtocol ? selectedShape.props.url : "https://" + selectedShape.props.url : "https://";
      return {
        actual: initialValue,
        safe: initialValue,
        valid: true
      };
    });
    const handleChange = (0, import_react55.useCallback)((rawValue) => {
      const fixedRawValue = rawValue.replace(/https?:\/\/(https?:\/\/)/, (_match, arg1) => {
        return arg1;
      });
      const urlValidResult = validateUrl(fixedRawValue);
      const safeValue = urlValidResult.isValid === true ? urlValidResult.hasProtocol ? fixedRawValue : "https://" + fixedRawValue : "https://";
      setUrlInputState({
        actual: fixedRawValue,
        safe: safeValue,
        valid: urlValidResult.isValid
      });
    }, []);
    const handleClear = (0, import_react55.useCallback)(() => {
      const onlySelectedShape = editor.getOnlySelectedShape();
      if (!onlySelectedShape) return;
      editor.updateShapes([
        { id: onlySelectedShape.id, type: onlySelectedShape.type, props: { url: "" } }
      ]);
      onClose();
    }, [editor, onClose]);
    const handleComplete = (0, import_react55.useCallback)(() => {
      const onlySelectedShape = editor.getOnlySelectedShape();
      if (!onlySelectedShape) return;
      if (onlySelectedShape && "url" in onlySelectedShape.props) {
        if (onlySelectedShape.props.url !== urlInputState.safe) {
          editor.updateShapes([
            {
              id: onlySelectedShape.id,
              type: onlySelectedShape.type,
              props: { url: urlInputState.safe }
            }
          ]);
        }
      }
      onClose();
    }, [editor, onClose, urlInputState]);
    const handleCancel = (0, import_react55.useCallback)(() => {
      onClose();
    }, [onClose]);
    if (!selectedShape) {
      onClose();
      return null;
    }
    const isRemoving = rInitialValue.current && !urlInputState.valid;
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(import_jsx_runtime62.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(TldrawUiDialogHeader, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(TldrawUiDialogTitle, { children: msg2("edit-link-dialog.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(TldrawUiDialogCloseButton, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(TldrawUiDialogBody, { children: /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { className: "tlui-edit-link-dialog", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
          TldrawUiInput,
          {
            ref: rInput,
            className: "tlui-edit-link-dialog__input",
            label: "edit-link-dialog.url",
            autoFocus: true,
            value: urlInputState.actual,
            onValueChange: handleChange,
            onComplete: handleComplete,
            onCancel: handleCancel
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", { children: urlInputState.valid ? msg2("edit-link-dialog.detail") : msg2("edit-link-dialog.invalid-url") })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(TldrawUiDialogFooter, { className: "tlui-dialog__footer__actions", children: [
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(TldrawUiButton, { type: "normal", onClick: handleCancel, onTouchEnd: handleCancel, children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(TldrawUiButtonLabel, { children: msg2("edit-link-dialog.cancel") }) }),
        isRemoving ? /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(TldrawUiButton, { type: "danger", onTouchEnd: handleClear, onClick: handleClear, children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(TldrawUiButtonLabel, { children: msg2("edit-link-dialog.clear") }) }) : /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
          TldrawUiButton,
          {
            type: "primary",
            disabled: !urlInputState.valid,
            onTouchEnd: handleComplete,
            onClick: handleComplete,
            children: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(TldrawUiButtonLabel, { children: msg2("edit-link-dialog.save") })
          }
        )
      ] })
    ] });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/EmbedDialog.mjs
  var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
  var import_react56 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/defaultEmbedDefinitions.mjs
  var TLDRAW_APP_RE2 = /(^\/r\/[^/]+\/?$)/;
  var DEFAULT_EMBED_DEFINITIONS = [
    {
      type: "tldraw",
      title: "tldraw",
      hostnames: ["beta.tldraw.com", "tldraw.com", "localhost:3000"],
      minWidth: 300,
      minHeight: 300,
      width: 720,
      height: 500,
      doesResize: true,
      overridePermissions: {
        "allow-top-navigation": true
      },
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(TLDRAW_APP_RE2)) {
          return url;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(TLDRAW_APP_RE2)) {
          return url;
        }
        return;
      }
    },
    {
      type: "figma",
      title: "Figma",
      hostnames: ["figma.com"],
      width: 720,
      height: 500,
      doesResize: true,
      toEmbedUrl: (url) => {
        if (!!url.match(
          // eslint-disable-next-line no-useless-escape
          /https:\/\/([\w\.-]+\.)?figma.com\/(file|proto)\/([0-9a-zA-Z]{22,128})(?:\/.*)?$/
        ) && !url.includes("figma.com/embed")) {
          return `https://www.figma.com/embed?embed_host=share&url=${url}`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/embed\/?$/)) {
          const outUrl = urlObj.searchParams.get("url");
          if (outUrl) {
            return outUrl;
          }
        }
        return;
      }
    },
    {
      type: "google_maps",
      title: "Google Maps",
      hostnames: ["google.*"],
      width: 720,
      height: 500,
      doesResize: true,
      overridePermissions: {
        "allow-presentation": true
      },
      toEmbedUrl: (url) => {
        if (url.includes("/maps/embed?")) {
          return url;
        } else if (url.includes("/maps/")) {
          const match = url.match(/@(.*?),(.*?),(.*?)z/);
          let result;
          if (match) {
            const [, lat, lng, z] = match;
            const host = new URL(url).host.replace("www.", "");
            result = `https://${host}/maps/embed/v1/view?key=${process.env.NEXT_PUBLIC_GC_API_KEY}&center=${lat},${lng}&zoom=${z}`;
          } else {
            result = "";
          }
          return result;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (!urlObj) return;
        const matches = urlObj.pathname.match(/^\/maps\/embed\/v1\/view\/?$/);
        if (matches && urlObj.searchParams.has("center") && urlObj.searchParams.get("zoom")) {
          const zoom = urlObj.searchParams.get("zoom");
          const [lat, lon] = urlObj.searchParams.get("center").split(",");
          return `https://www.google.com/maps/@${lat},${lon},${zoom}z`;
        }
        return;
      }
    },
    {
      type: "val_town",
      title: "Val Town",
      hostnames: ["val.town"],
      minWidth: 260,
      minHeight: 100,
      width: 720,
      height: 500,
      doesResize: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        const matches = urlObj && urlObj.pathname.match(/\/v\/(.+)\/?/);
        if (matches) {
          return `https://www.val.town/embed/${matches[1]}`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        const matches = urlObj && urlObj.pathname.match(/\/embed\/(.+)\/?/);
        if (matches) {
          return `https://www.val.town/v/${matches[1]}`;
        }
        return;
      }
    },
    {
      type: "codesandbox",
      title: "CodeSandbox",
      hostnames: ["codesandbox.io"],
      minWidth: 300,
      minHeight: 300,
      width: 720,
      height: 500,
      doesResize: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        const matches = urlObj && urlObj.pathname.match(/\/s\/([^/]+)\/?/);
        if (matches) {
          return `https://codesandbox.io/embed/${matches[1]}`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        const matches = urlObj && urlObj.pathname.match(/\/embed\/([^/]+)\/?/);
        if (matches) {
          return `https://codesandbox.io/s/${matches[1]}`;
        }
        return;
      }
    },
    {
      type: "codepen",
      title: "Codepen",
      hostnames: ["codepen.io"],
      minWidth: 300,
      minHeight: 300,
      width: 520,
      height: 400,
      doesResize: true,
      toEmbedUrl: (url) => {
        const CODEPEN_URL_REGEXP = /https:\/\/codepen.io\/([^/]+)\/pen\/([^/]+)/;
        const matches = url.match(CODEPEN_URL_REGEXP);
        if (matches) {
          const [_, user, id] = matches;
          return `https://codepen.io/${user}/embed/${id}`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const CODEPEN_EMBED_REGEXP = /https:\/\/codepen.io\/([^/]+)\/embed\/([^/]+)/;
        const matches = url.match(CODEPEN_EMBED_REGEXP);
        if (matches) {
          const [_, user, id] = matches;
          return `https://codepen.io/${user}/pen/${id}`;
        }
        return;
      }
    },
    {
      type: "scratch",
      title: "Scratch",
      hostnames: ["scratch.mit.edu"],
      width: 520,
      height: 400,
      doesResize: false,
      toEmbedUrl: (url) => {
        const SCRATCH_URL_REGEXP = /https?:\/\/scratch.mit.edu\/projects\/([^/]+)/;
        const matches = url.match(SCRATCH_URL_REGEXP);
        if (matches) {
          const [_, id] = matches;
          return `https://scratch.mit.edu/projects/embed/${id}`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const SCRATCH_EMBED_REGEXP = /https:\/\/scratch.mit.edu\/projects\/embed\/([^/]+)/;
        const matches = url.match(SCRATCH_EMBED_REGEXP);
        if (matches) {
          const [_, id] = matches;
          return `https://scratch.mit.edu/projects/${id}`;
        }
        return;
      }
    },
    {
      type: "youtube",
      title: "YouTube",
      hostnames: ["*.youtube.com", "youtube.com", "youtu.be"],
      width: 800,
      height: 450,
      doesResize: true,
      overridePermissions: {
        "allow-presentation": true,
        "allow-popups-to-escape-sandbox": true
      },
      isAspectRatioLocked: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (!urlObj) return;
        const hostname = urlObj.hostname.replace(/^www./, "");
        if (hostname === "youtu.be") {
          const videoId = urlObj.pathname.split("/").filter(Boolean)[0];
          return `https://www.youtube.com/embed/${videoId}`;
        } else if ((hostname === "youtube.com" || hostname === "m.youtube.com") && urlObj.pathname.match(/^\/watch/)) {
          const videoId = urlObj.searchParams.get("v");
          return `https://www.youtube.com/embed/${videoId}`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (!urlObj) return;
        const hostname = urlObj.hostname.replace(/^www./, "");
        if (hostname === "youtube.com") {
          const matches = urlObj.pathname.match(/^\/embed\/([^/]+)\/?/);
          if (matches) {
            return `https://www.youtube.com/watch?v=${matches[1]}`;
          }
        }
        return;
      }
    },
    {
      type: "google_calendar",
      title: "Google Calendar",
      hostnames: ["calendar.google.*"],
      width: 720,
      height: 500,
      minWidth: 460,
      minHeight: 360,
      doesResize: true,
      instructionLink: "https://support.google.com/calendar/answer/41207?hl=en",
      overridePermissions: {
        "allow-popups-to-escape-sandbox": true
      },
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        const cidQs = urlObj?.searchParams.get("cid");
        if (urlObj?.pathname.match(/\/calendar\/u\/0/) && cidQs) {
          urlObj.pathname = "/calendar/embed";
          const keys = Array.from(urlObj.searchParams.keys());
          for (const key of keys) {
            urlObj.searchParams.delete(key);
          }
          urlObj.searchParams.set("src", cidQs);
          return urlObj.href;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        const srcQs = urlObj?.searchParams.get("src");
        if (urlObj?.pathname.match(/\/calendar\/embed/) && srcQs) {
          urlObj.pathname = "/calendar/u/0";
          const keys = Array.from(urlObj.searchParams.keys());
          for (const key of keys) {
            urlObj.searchParams.delete(key);
          }
          urlObj.searchParams.set("cid", srcQs);
          return urlObj.href;
        }
        return;
      }
    },
    {
      type: "google_slides",
      title: "Google Slides",
      hostnames: ["docs.google.*"],
      width: 720,
      height: 500,
      minWidth: 460,
      minHeight: 360,
      doesResize: true,
      overridePermissions: {
        "allow-popups-to-escape-sandbox": true
      },
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj?.pathname.match(/^\/presentation/) && urlObj?.pathname.match(/\/pub\/?$/)) {
          urlObj.pathname = urlObj.pathname.replace(/\/pub$/, "/embed");
          const keys = Array.from(urlObj.searchParams.keys());
          for (const key of keys) {
            urlObj.searchParams.delete(key);
          }
          return urlObj.href;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj?.pathname.match(/^\/presentation/) && urlObj?.pathname.match(/\/embed\/?$/)) {
          urlObj.pathname = urlObj.pathname.replace(/\/embed$/, "/pub");
          const keys = Array.from(urlObj.searchParams.keys());
          for (const key of keys) {
            urlObj.searchParams.delete(key);
          }
          return urlObj.href;
        }
        return;
      }
    },
    {
      type: "github_gist",
      title: "GitHub Gist",
      hostnames: ["gist.github.com"],
      width: 720,
      height: 500,
      doesResize: true,
      // Security warning:
      // Gists allow adding .json extensions to the URL which return JSONP.
      // Furthermore, the JSONP can include callbacks that execute arbitrary JavaScript.
      // It _is_ sandboxed by the iframe but we still want to disable it nonetheless.
      // We restrict the id to only allow hexdecimal characters to prevent this.
      // Read more:
      //   https://github.com/bhaveshk90/Content-Security-Policy-CSP-Bypass-Techniques
      //   https://github.com/renniepak/CSPBypass
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/\/([^/]+)\/([0-9a-f]+)$/)) {
          if (!url.split("/").pop()) return;
          return url;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/\/([^/]+)\/([0-9a-f]+)$/)) {
          if (!url.split("/").pop()) return;
          return url;
        }
        return;
      }
    },
    {
      type: "replit",
      title: "Replit",
      hostnames: ["replit.com"],
      width: 720,
      height: 500,
      doesResize: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/\/@([^/]+)\/([^/]+)/)) {
          return `${url}?embed=true`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/\/@([^/]+)\/([^/]+)/) && urlObj.searchParams.has("embed")) {
          urlObj.searchParams.delete("embed");
          return urlObj.href;
        }
        return;
      }
    },
    {
      type: "felt",
      title: "Felt",
      hostnames: ["felt.com"],
      width: 720,
      height: 500,
      doesResize: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/map\//)) {
          return urlObj.origin + "/embed" + urlObj.pathname;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/embed\/map\//)) {
          urlObj.pathname = urlObj.pathname.replace(/^\/embed/, "");
          return urlObj.href;
        }
        return;
      }
    },
    {
      type: "spotify",
      title: "Spotify",
      hostnames: ["open.spotify.com"],
      width: 720,
      height: 500,
      minHeight: 500,
      overrideOutlineRadius: 12,
      doesResize: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/(artist|album)\//)) {
          return urlObj.origin + "/embed" + urlObj.pathname;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/embed\/(artist|album)\//)) {
          return urlObj.origin + urlObj.pathname.replace(/^\/embed/, "");
        }
        return;
      }
    },
    {
      type: "vimeo",
      title: "Vimeo",
      hostnames: ["vimeo.com", "player.vimeo.com"],
      width: 640,
      height: 360,
      doesResize: true,
      isAspectRatioLocked: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.hostname === "vimeo.com") {
          if (urlObj.pathname.match(/^\/[0-9]+/)) {
            return "https://player.vimeo.com/video/" + urlObj.pathname.split("/")[1] + "?title=0&byline=0";
          }
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.hostname === "player.vimeo.com") {
          const matches = urlObj.pathname.match(/^\/video\/([^/]+)\/?$/);
          if (matches) {
            return "https://vimeo.com/" + matches[1];
          }
        }
        return;
      }
    },
    {
      type: "excalidraw",
      title: "Excalidraw",
      hostnames: ["excalidraw.com"],
      width: 720,
      height: 500,
      doesResize: true,
      isAspectRatioLocked: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.hash.match(/#room=/)) {
          return url;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.hash.match(/#room=/)) {
          return url;
        }
        return;
      }
    },
    {
      type: "observable",
      title: "Observable",
      hostnames: ["observablehq.com"],
      width: 720,
      height: 500,
      doesResize: true,
      isAspectRatioLocked: false,
      backgroundColor: "#fff",
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/@([^/]+)\/([^/]+)\/?$/)) {
          return `${urlObj.origin}/embed${urlObj.pathname}?cell=*`;
        }
        if (urlObj && urlObj.pathname.match(/^\/d\/([^/]+)\/?$/)) {
          const pathName = urlObj.pathname.replace(/^\/d/, "");
          return `${urlObj.origin}/embed${pathName}?cell=*`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/embed\/@([^/]+)\/([^/]+)\/?$/)) {
          return `${urlObj.origin}${urlObj.pathname.replace("/embed", "")}#cell-*`;
        }
        if (urlObj && urlObj.pathname.match(/^\/embed\/([^/]+)\/?$/)) {
          return `${urlObj.origin}${urlObj.pathname.replace("/embed", "/d")}#cell-*`;
        }
        return;
      }
    },
    {
      type: "desmos",
      title: "Desmos",
      hostnames: ["desmos.com"],
      width: 700,
      height: 450,
      doesResize: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.hostname === "www.desmos.com" && urlObj.pathname.match(/^\/calculator\/([^/]+)\/?$/) && urlObj.search === "" && urlObj.hash === "") {
          return `${url}?embed`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.hostname === "www.desmos.com" && urlObj.pathname.match(/^\/calculator\/([^/]+)\/?$/) && urlObj.search === "?embed" && urlObj.hash === "") {
          return url.replace("?embed", "");
        }
        return;
      }
    }
  ];
  var embedShapePermissionDefaults = {
    // ========================================================================================
    // Disabled permissions
    // ========================================================================================
    // [MDN] Experimental: Allows for downloads to occur without a gesture from the user.
    // [REASON] Disabled because otherwise the <iframe/> can trick the user on behalf of us to perform an action.
    "allow-downloads-without-user-activation": false,
    // [MDN] Allows for downloads to occur with a gesture from the user.
    // [REASON] Disabled because otherwise the <iframe/> can trick the user on behalf of us to perform an action.
    "allow-downloads": false,
    // [MDN] Lets the resource open modal windows.
    // [REASON] The <iframe/> could 'window.prompt("Enter your tldraw password")'.
    "allow-modals": false,
    // [MDN] Lets the resource lock the screen orientation.
    // [REASON] Would interfere with the tldraw interface.
    "allow-orientation-lock": false,
    // [MDN] Lets the resource use the Pointer Lock API.
    // [REASON] Maybe we should allow this for games embeds (scratch/codepen/codesandbox).
    "allow-pointer-lock": false,
    // [MDN] Allows popups (such as window.open(), target="_blank", or showModalDialog()). If this keyword is not used, the popup will silently fail to open.
    // [REASON] We want to allow embeds to link back to their original sites (e.g. YouTube).
    "allow-popups": true,
    // [MDN] Lets the sandboxed document open new windows without those windows inheriting the sandboxing. For example, this can safely sandbox an advertisement without forcing the same restrictions upon the page the ad links to.
    // [REASON] We shouldn't allow popups as a embed could pretend to be us by opening a mocked version of tldraw. This is very unobvious when it is performed as an action within our app.
    "allow-popups-to-escape-sandbox": false,
    // [MDN] Lets the resource start a presentation session.
    // [REASON] Prevents embed from navigating away from tldraw and pretending to be us.
    "allow-presentation": false,
    // [MDN] Experimental: Lets the resource request access to the parent's storage capabilities with the Storage Access API.
    // [REASON] We don't want anyone else to access our storage.
    "allow-storage-access-by-user-activation": false,
    // [MDN] Lets the resource navigate the top-level browsing context (the one named _top).
    // [REASON] Prevents embed from navigating away from tldraw and pretending to be us.
    "allow-top-navigation": false,
    // [MDN] Lets the resource navigate the top-level browsing context, but only if initiated by a user gesture.
    // [REASON] Prevents embed from navigating away from tldraw and pretending to be us.
    "allow-top-navigation-by-user-activation": false,
    // ========================================================================================
    // Enabled permissions
    // ========================================================================================
    // [MDN] Lets the resource run scripts (but not create popup windows).
    "allow-scripts": true,
    // [MDN] If this token is not used, the resource is treated as being from a special origin that always fails the same-origin policy (potentially preventing access to data storage/cookies and some JavaScript APIs).
    "allow-same-origin": true,
    // [MDN] Allows the resource to submit forms. If this keyword is not used, form submission is blocked.
    "allow-forms": true
  };
  var DEFAULT_EMBED_DEFINITION_TYPES = DEFAULT_EMBED_DEFINITIONS.map(
    (def) => def.type
  );
  function isDefaultEmbedDefinitionType(type) {
    return DEFAULT_EMBED_DEFINITION_TYPES.includes(type);
  }
  function isCustomEmbedDefinition(def) {
    return "icon" in def;
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useGetEmbedDefinition.mjs
  function useGetEmbedShapeUtil() {
    const editor = useEditor();
    return editor.getShapeUtil("embed");
  }
  function useGetEmbedDefinition() {
    const embedUtil = useGetEmbedShapeUtil();
    return (url) => {
      return embedUtil ? embedUtil.getEmbedDefinition(url) : void 0;
    };
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useGetEmbedDefinitions.mjs
  function useGetEmbedDefinitions() {
    const embedUtil = useGetEmbedShapeUtil();
    return embedUtil ? embedUtil.getEmbedDefinitions() : [];
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/EmbedDialog.mjs
  var EmbedDialog = track(function EmbedDialog2({ onClose }) {
    const editor = useEditor();
    const msg2 = useTranslation();
    const assetUrls = useAssetUrls();
    const [embedDefinition, setEmbedDefinition] = (0, import_react56.useState)(null);
    const [url, setUrl] = (0, import_react56.useState)("");
    const [embedInfoForUrl, setEmbedInfoForUrl] = (0, import_react56.useState)(null);
    const [showError, setShowError] = (0, import_react56.useState)(false);
    const rShowErrorTimeout = (0, import_react56.useRef)(-1);
    const definitions = useGetEmbedDefinitions();
    const getEmbedDefinition = useGetEmbedDefinition();
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(import_jsx_runtime63.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(TldrawUiDialogHeader, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TldrawUiDialogTitle, { children: embedDefinition ? `${msg2("embed-dialog.title")} \u2014 ${embedDefinition.title}` : msg2("embed-dialog.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TldrawUiDialogCloseButton, {})
      ] }),
      embedDefinition ? /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(import_jsx_runtime63.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(TldrawUiDialogBody, { className: "tlui-embed-dialog__enter", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            TldrawUiInput,
            {
              className: "tlui-embed-dialog__input",
              label: "embed-dialog.url",
              placeholder: "https://example.com",
              autoFocus: true,
              onValueChange: (value) => {
                setUrl(value);
                const embedInfo = getEmbedDefinition(value);
                setEmbedInfoForUrl(
                  embedInfo && embedInfo.definition.type === embedDefinition.type ? embedInfo : null
                );
                setShowError(false);
                clearTimeout(rShowErrorTimeout.current);
                rShowErrorTimeout.current = editor.timers.setTimeout(
                  () => setShowError(!embedInfo),
                  320
                );
              }
            }
          ),
          url === "" ? /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { className: "tlui-embed-dialog__instruction", children: [
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("span", { children: msg2("embed-dialog.instruction") }),
            " ",
            embedDefinition.instructionLink && /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(
              "a",
              {
                target: "_blank",
                rel: "noopener noreferrer",
                href: embedDefinition.instructionLink,
                className: "tlui-embed-dialog__instruction__link",
                children: [
                  "Learn more.",
                  /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TldrawUiIcon, { icon: "external-link", small: true })
                ]
              }
            )
          ] }) : /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "tlui-embed-dialog__warning", children: showError ? msg2("embed-dialog.invalid-url") : "\xA0" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(TldrawUiDialogFooter, { className: "tlui-dialog__footer__actions", children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            TldrawUiButton,
            {
              type: "normal",
              onClick: () => {
                setEmbedDefinition(null);
                setEmbedInfoForUrl(null);
                setUrl("");
              },
              children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TldrawUiButtonLabel, { children: msg2("embed-dialog.back") })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { className: "tlui-embed__spacer" }),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TldrawUiButton, { type: "normal", onClick: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TldrawUiButtonLabel, { children: msg2("embed-dialog.cancel") }) }),
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            TldrawUiButton,
            {
              type: "primary",
              disabled: !embedInfoForUrl,
              onClick: () => {
                if (!embedInfoForUrl) return;
                editor.putExternalContent({
                  type: "embed",
                  url,
                  point: editor.getViewportPageBounds().center,
                  embed: embedInfoForUrl.definition
                });
                onClose();
              },
              children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TldrawUiButtonLabel, { children: msg2("embed-dialog.create") })
            }
          )
        ] })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_jsx_runtime63.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TldrawUiDialogBody, { className: "tlui-embed-dialog__list", children: definitions.map((def) => {
        const url2 = isDefaultEmbedDefinitionType(def.type) ? assetUrls.embedIcons[def.type] : isCustomEmbedDefinition(def) ? def.icon : void 0;
        return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(TldrawUiButton, { type: "menu", onClick: () => setEmbedDefinition(def), children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(TldrawUiButtonLabel, { children: untranslated(def.title) }),
          url2 && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            "div",
            {
              className: "tlui-embed-dialog__item__image",
              style: { backgroundImage: `url(${url2})` }
            }
          )
        ] }, def.type);
      }) }) })
    ] });
  });

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useFlatten.mjs
  var import_react57 = __toESM(require_react(), 1);
  async function flattenShapesToImages(editor, shapeIds, flattenImageBoundsExpand) {
    const shapes = compact(
      shapeIds.map((id) => {
        const shape = editor.getShape(id);
        if (!shape) return;
        const util = editor.getShapeUtil(shape.type);
        if (util.toSvg === void 0) return;
        return shape;
      })
    );
    if (shapes.length === 0) return;
    if (shapes.length === 1) {
      const shape = shapes[0];
      if (!shape) return;
      if (editor.isShapeOfType(shape, "image")) return;
    }
    const groups = [];
    if (flattenImageBoundsExpand !== void 0) {
      const expandedBounds = shapes.map((shape) => {
        return {
          shape,
          bounds: editor.getShapeMaskedPageBounds(shape).clone().expandBy(flattenImageBoundsExpand)
        };
      });
      for (let i = 0; i < expandedBounds.length; i++) {
        const item = expandedBounds[i];
        if (i === 0) {
          groups[0] = {
            shapes: [item.shape],
            bounds: item.bounds
          };
          continue;
        }
        let didLand = false;
        for (const group of groups) {
          if (group.bounds.includes(item.bounds)) {
            group.shapes.push(item.shape);
            group.bounds.expand(item.bounds);
            didLand = true;
            break;
          }
        }
        if (!didLand) {
          groups.push({
            shapes: [item.shape],
            bounds: item.bounds
          });
        }
      }
    } else {
      const bounds = Box.Common(shapes.map((shape) => editor.getShapeMaskedPageBounds(shape)));
      groups.push({
        shapes,
        bounds
      });
    }
    const padding = editor.options.flattenImageBoundsPadding;
    for (const group of groups) {
      if (flattenImageBoundsExpand !== void 0) {
        group.bounds.expandBy(-flattenImageBoundsExpand);
      }
      const svgResult = await editor.getSvgString(group.shapes, {
        padding
      });
      if (!svgResult?.svg) continue;
      const blob = new Blob([svgResult.svg], { type: "image/svg+xml" });
      const asset = await editor.getAssetForExternalContent({
        type: "file",
        file: new File([blob], "asset.svg", { type: "image/svg+xml" })
      });
      if (!asset) continue;
      group.asset = asset;
    }
    const createdShapeIds = [];
    transact(() => {
      for (const group of groups) {
        const { asset, bounds, shapes: shapes2 } = group;
        if (!asset) continue;
        const commonAncestorId = editor.findCommonAncestor(shapes2) ?? editor.getCurrentPageId();
        if (!commonAncestorId) continue;
        let index2 = "a1";
        for (const shape of shapes2) {
          if (shape.parentId === commonAncestorId) {
            if (shape.index > index2) {
              index2 = shape.index;
            }
            break;
          }
        }
        let x;
        let y;
        let rotation;
        if (isShapeId(commonAncestorId)) {
          const commonAncestor = editor.getShape(commonAncestorId);
          if (!commonAncestor) continue;
          const point = editor.getPointInShapeSpace(commonAncestor, {
            x: bounds.x,
            y: bounds.y
          });
          rotation = editor.getShapePageTransform(commonAncestorId).rotation();
          point.sub(new Vec(padding, padding).rot(-rotation));
          x = point.x;
          y = point.y;
        } else {
          x = bounds.x - padding;
          y = bounds.y - padding;
          rotation = 0;
        }
        editor.deleteShapes(shapes2);
        editor.createAssets([{ ...asset, id: asset.id }]);
        const shapeId = createShapeId();
        editor.createShape({
          id: shapeId,
          type: "image",
          index: index2,
          parentId: commonAncestorId,
          x,
          y,
          rotation: -rotation,
          props: {
            assetId: asset.id,
            w: bounds.w + padding * 2,
            h: bounds.h + padding * 2
          }
        });
        createdShapeIds.push(shapeId);
      }
    });
    return createdShapeIds;
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useIsMultiplayer.mjs
  function useShowCollaborationUi() {
    const editor = useMaybeEditor();
    return editor?.store.props.collaboration !== void 0;
  }
  function useCollaborationStatus() {
    const editor = useMaybeEditor();
    return useValue(
      "sync status",
      () => {
        if (!editor?.store.props.collaboration?.status) {
          return null;
        }
        return editor.store.props.collaboration.status.get();
      },
      [editor]
    );
  }

  // node_modules/tldraw/dist-esm/lib/ui/overrides.mjs
  var import_react66 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/constants.mjs
  var PORTRAIT_BREAKPOINTS = [0, 389, 436, 476, 580, 640, 840, 1023];
  var PORTRAIT_BREAKPOINT = /* @__PURE__ */ ((PORTRAIT_BREAKPOINT2) => {
    PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["ZERO"] = 0] = "ZERO";
    PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["MOBILE_XXS"] = 1] = "MOBILE_XXS";
    PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["MOBILE_XS"] = 2] = "MOBILE_XS";
    PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["MOBILE_SM"] = 3] = "MOBILE_SM";
    PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["MOBILE"] = 4] = "MOBILE";
    PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["TABLET_SM"] = 5] = "TABLET_SM";
    PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["TABLET"] = 6] = "TABLET";
    PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["DESKTOP"] = 7] = "DESKTOP";
    return PORTRAIT_BREAKPOINT2;
  })(PORTRAIT_BREAKPOINT || {});

  // node_modules/tldraw/dist-esm/lib/ui/context/breakpoints.mjs
  var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
  var import_react58 = __toESM(require_react(), 1);
  var BreakpointContext = import_react58.default.createContext(null);
  function BreakPointProvider({ forceMobile = false, children }) {
    const editor = useMaybeEditor();
    const breakpoint = useValue(
      "breakpoint",
      () => {
        const { width } = editor?.getViewportScreenBounds() ?? { width: window.innerWidth };
        const maxBreakpoint = forceMobile ? PORTRAIT_BREAKPOINT.MOBILE_SM : PORTRAIT_BREAKPOINTS.length - 1;
        for (let i = 0; i < maxBreakpoint; i++) {
          if (width > PORTRAIT_BREAKPOINTS[i] && width <= PORTRAIT_BREAKPOINTS[i + 1]) {
            return i;
          }
        }
        return maxBreakpoint;
      },
      [editor]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(BreakpointContext.Provider, { value: breakpoint, children });
  }
  function useBreakpoint() {
    const breakpoint = (0, import_react58.useContext)(BreakpointContext);
    if (breakpoint === null) {
      throw new Error("useBreakpoint must be used inside of the <BreakpointProvider /> component");
    }
    return breakpoint;
  }

  // node_modules/tldraw/dist-esm/lib/ui/context/dialogs.mjs
  var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
  var import_react59 = __toESM(require_react(), 1);
  var DialogsContext = (0, import_react59.createContext)(null);
  function TldrawUiDialogsProvider({ context, children }) {
    const trackEvent = useUiEvents();
    const dialogs = useAtom("dialogs", []);
    const content = (0, import_react59.useMemo)(() => {
      return {
        dialogs,
        addDialog(dialog) {
          const id = dialog.id ?? uniqueId();
          dialogs.update((d) => {
            return [...d.filter((m) => m.id !== dialog.id), { ...dialog, id }];
          });
          trackEvent("open-menu", { source: "dialog", id });
          tlmenus.addOpenMenu(id, context);
          return id;
        },
        removeDialog(id) {
          const dialog = dialogs.get().find((d) => d.id === id);
          if (dialog) {
            dialog.onClose?.();
            trackEvent("close-menu", { source: "dialog", id });
            tlmenus.deleteOpenMenu(id, context);
            dialogs.update((d) => d.filter((m) => m !== dialog));
          }
          return id;
        },
        clearDialogs() {
          const current = dialogs.get();
          if (current.length === 0) return;
          current.forEach((d) => {
            d.onClose?.();
            trackEvent("close-menu", { source: "dialog", id: d.id });
            tlmenus.deleteOpenMenu(d.id, context);
          });
          dialogs.set([]);
        }
      };
    }, [trackEvent, dialogs, context]);
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(DialogsContext.Provider, { value: content, children });
  }
  function useDialogs() {
    const ctx = (0, import_react59.useContext)(DialogsContext);
    if (!ctx) {
      throw new Error("useDialogs must be used within a DialogsProvider");
    }
    return ctx;
  }

  // node_modules/tldraw/dist-esm/lib/ui/context/toasts.mjs
  var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);

  // node_modules/@radix-ui/react-toast/dist/index.mjs
  var React50 = __toESM(require_react(), 1);
  var ReactDOM4 = __toESM(require_react_dom(), 1);

  // node_modules/@radix-ui/react-visually-hidden/dist/index.mjs
  var React49 = __toESM(require_react(), 1);
  var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
  var NAME2 = "VisuallyHidden";
  var VisuallyHidden = React49.forwardRef(
    (props, forwardedRef) => {
      return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
        Primitive.span,
        {
          ...props,
          ref: forwardedRef,
          style: {
            // See: https://github.com/twbs/bootstrap/blob/main/scss/mixins/_visually-hidden.scss
            position: "absolute",
            border: 0,
            width: 1,
            height: 1,
            padding: 0,
            margin: -1,
            overflow: "hidden",
            clip: "rect(0, 0, 0, 0)",
            whiteSpace: "nowrap",
            wordWrap: "normal",
            ...props.style
          }
        }
      );
    }
  );
  VisuallyHidden.displayName = NAME2;

  // node_modules/@radix-ui/react-toast/dist/index.mjs
  var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
  var PROVIDER_NAME = "ToastProvider";
  var [Collection3, useCollection3, createCollectionScope3] = createCollection("Toast");
  var [createToastContext, createToastScope] = createContextScope("Toast", [createCollectionScope3]);
  var [ToastProviderProvider, useToastProviderContext] = createToastContext(PROVIDER_NAME);
  var ToastProvider = (props) => {
    const {
      __scopeToast,
      label = "Notification",
      duration = 5e3,
      swipeDirection = "right",
      swipeThreshold = 50,
      children
    } = props;
    const [viewport, setViewport] = React50.useState(null);
    const [toastCount, setToastCount] = React50.useState(0);
    const isFocusedToastEscapeKeyDownRef = React50.useRef(false);
    const isClosePausedRef = React50.useRef(false);
    if (!label.trim()) {
      console.error(
        `Invalid prop \`label\` supplied to \`${PROVIDER_NAME}\`. Expected non-empty \`string\`.`
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Collection3.Provider, { scope: __scopeToast, children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
      ToastProviderProvider,
      {
        scope: __scopeToast,
        label,
        duration,
        swipeDirection,
        swipeThreshold,
        toastCount,
        viewport,
        onViewportChange: setViewport,
        onToastAdd: React50.useCallback(() => setToastCount((prevCount) => prevCount + 1), []),
        onToastRemove: React50.useCallback(() => setToastCount((prevCount) => prevCount - 1), []),
        isFocusedToastEscapeKeyDownRef,
        isClosePausedRef,
        children
      }
    ) });
  };
  ToastProvider.displayName = PROVIDER_NAME;
  var VIEWPORT_NAME = "ToastViewport";
  var VIEWPORT_DEFAULT_HOTKEY = ["F8"];
  var VIEWPORT_PAUSE = "toast.viewportPause";
  var VIEWPORT_RESUME = "toast.viewportResume";
  var ToastViewport = React50.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeToast,
        hotkey = VIEWPORT_DEFAULT_HOTKEY,
        label = "Notifications ({hotkey})",
        ...viewportProps
      } = props;
      const context = useToastProviderContext(VIEWPORT_NAME, __scopeToast);
      const getItems = useCollection3(__scopeToast);
      const wrapperRef = React50.useRef(null);
      const headFocusProxyRef = React50.useRef(null);
      const tailFocusProxyRef = React50.useRef(null);
      const ref = React50.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);
      const hotkeyLabel = hotkey.join("+").replace(/Key/g, "").replace(/Digit/g, "");
      const hasToasts = context.toastCount > 0;
      React50.useEffect(() => {
        const handleKeyDown = (event) => {
          const isHotkeyPressed = hotkey.length !== 0 && hotkey.every((key) => event[key] || event.code === key);
          if (isHotkeyPressed) ref.current?.focus();
        };
        document.addEventListener("keydown", handleKeyDown);
        return () => document.removeEventListener("keydown", handleKeyDown);
      }, [hotkey]);
      React50.useEffect(() => {
        const wrapper = wrapperRef.current;
        const viewport = ref.current;
        if (hasToasts && wrapper && viewport) {
          const handlePause = () => {
            if (!context.isClosePausedRef.current) {
              const pauseEvent = new CustomEvent(VIEWPORT_PAUSE);
              viewport.dispatchEvent(pauseEvent);
              context.isClosePausedRef.current = true;
            }
          };
          const handleResume = () => {
            if (context.isClosePausedRef.current) {
              const resumeEvent = new CustomEvent(VIEWPORT_RESUME);
              viewport.dispatchEvent(resumeEvent);
              context.isClosePausedRef.current = false;
            }
          };
          const handleFocusOutResume = (event) => {
            const isFocusMovingOutside = !wrapper.contains(event.relatedTarget);
            if (isFocusMovingOutside) handleResume();
          };
          const handlePointerLeaveResume = () => {
            const isFocusInside = wrapper.contains(document.activeElement);
            if (!isFocusInside) handleResume();
          };
          wrapper.addEventListener("focusin", handlePause);
          wrapper.addEventListener("focusout", handleFocusOutResume);
          wrapper.addEventListener("pointermove", handlePause);
          wrapper.addEventListener("pointerleave", handlePointerLeaveResume);
          window.addEventListener("blur", handlePause);
          window.addEventListener("focus", handleResume);
          return () => {
            wrapper.removeEventListener("focusin", handlePause);
            wrapper.removeEventListener("focusout", handleFocusOutResume);
            wrapper.removeEventListener("pointermove", handlePause);
            wrapper.removeEventListener("pointerleave", handlePointerLeaveResume);
            window.removeEventListener("blur", handlePause);
            window.removeEventListener("focus", handleResume);
          };
        }
      }, [hasToasts, context.isClosePausedRef]);
      const getSortedTabbableCandidates = React50.useCallback(
        ({ tabbingDirection }) => {
          const toastItems = getItems();
          const tabbableCandidates = toastItems.map((toastItem) => {
            const toastNode = toastItem.ref.current;
            const toastTabbableCandidates = [toastNode, ...getTabbableCandidates2(toastNode)];
            return tabbingDirection === "forwards" ? toastTabbableCandidates : toastTabbableCandidates.reverse();
          });
          return (tabbingDirection === "forwards" ? tabbableCandidates.reverse() : tabbableCandidates).flat();
        },
        [getItems]
      );
      React50.useEffect(() => {
        const viewport = ref.current;
        if (viewport) {
          const handleKeyDown = (event) => {
            const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;
            const isTabKey = event.key === "Tab" && !isMetaKey;
            if (isTabKey) {
              const focusedElement = document.activeElement;
              const isTabbingBackwards = event.shiftKey;
              const targetIsViewport = event.target === viewport;
              if (targetIsViewport && isTabbingBackwards) {
                headFocusProxyRef.current?.focus();
                return;
              }
              const tabbingDirection = isTabbingBackwards ? "backwards" : "forwards";
              const sortedCandidates = getSortedTabbableCandidates({ tabbingDirection });
              const index2 = sortedCandidates.findIndex((candidate) => candidate === focusedElement);
              if (focusFirst4(sortedCandidates.slice(index2 + 1))) {
                event.preventDefault();
              } else {
                isTabbingBackwards ? headFocusProxyRef.current?.focus() : tailFocusProxyRef.current?.focus();
              }
            }
          };
          viewport.addEventListener("keydown", handleKeyDown);
          return () => viewport.removeEventListener("keydown", handleKeyDown);
        }
      }, [getItems, getSortedTabbableCandidates]);
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)(
        Branch,
        {
          ref: wrapperRef,
          role: "region",
          "aria-label": label.replace("{hotkey}", hotkeyLabel),
          tabIndex: -1,
          style: { pointerEvents: hasToasts ? void 0 : "none" },
          children: [
            hasToasts && /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
              FocusProxy,
              {
                ref: headFocusProxyRef,
                onFocusFromOutsideViewport: () => {
                  const tabbableCandidates = getSortedTabbableCandidates({
                    tabbingDirection: "forwards"
                  });
                  focusFirst4(tabbableCandidates);
                }
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Collection3.Slot, { scope: __scopeToast, children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Primitive.ol, { tabIndex: -1, ...viewportProps, ref: composedRefs }) }),
            hasToasts && /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
              FocusProxy,
              {
                ref: tailFocusProxyRef,
                onFocusFromOutsideViewport: () => {
                  const tabbableCandidates = getSortedTabbableCandidates({
                    tabbingDirection: "backwards"
                  });
                  focusFirst4(tabbableCandidates);
                }
              }
            )
          ]
        }
      );
    }
  );
  ToastViewport.displayName = VIEWPORT_NAME;
  var FOCUS_PROXY_NAME = "ToastFocusProxy";
  var FocusProxy = React50.forwardRef(
    (props, forwardedRef) => {
      const { __scopeToast, onFocusFromOutsideViewport, ...proxyProps } = props;
      const context = useToastProviderContext(FOCUS_PROXY_NAME, __scopeToast);
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
        VisuallyHidden,
        {
          "aria-hidden": true,
          tabIndex: 0,
          ...proxyProps,
          ref: forwardedRef,
          style: { position: "fixed" },
          onFocus: (event) => {
            const prevFocusedElement = event.relatedTarget;
            const isFocusFromOutsideViewport = !context.viewport?.contains(prevFocusedElement);
            if (isFocusFromOutsideViewport) onFocusFromOutsideViewport();
          }
        }
      );
    }
  );
  FocusProxy.displayName = FOCUS_PROXY_NAME;
  var TOAST_NAME = "Toast";
  var TOAST_SWIPE_START = "toast.swipeStart";
  var TOAST_SWIPE_MOVE = "toast.swipeMove";
  var TOAST_SWIPE_CANCEL = "toast.swipeCancel";
  var TOAST_SWIPE_END = "toast.swipeEnd";
  var Toast = React50.forwardRef(
    (props, forwardedRef) => {
      const { forceMount, open: openProp, defaultOpen, onOpenChange, ...toastProps } = props;
      const [open = true, setOpen] = useControllableState({
        prop: openProp,
        defaultProp: defaultOpen,
        onChange: onOpenChange
      });
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Presence, { present: forceMount || open, children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
        ToastImpl,
        {
          open,
          ...toastProps,
          ref: forwardedRef,
          onClose: () => setOpen(false),
          onPause: useCallbackRef(props.onPause),
          onResume: useCallbackRef(props.onResume),
          onSwipeStart: composeEventHandlers(props.onSwipeStart, (event) => {
            event.currentTarget.setAttribute("data-swipe", "start");
          }),
          onSwipeMove: composeEventHandlers(props.onSwipeMove, (event) => {
            const { x, y } = event.detail.delta;
            event.currentTarget.setAttribute("data-swipe", "move");
            event.currentTarget.style.setProperty("--radix-toast-swipe-move-x", `${x}px`);
            event.currentTarget.style.setProperty("--radix-toast-swipe-move-y", `${y}px`);
          }),
          onSwipeCancel: composeEventHandlers(props.onSwipeCancel, (event) => {
            event.currentTarget.setAttribute("data-swipe", "cancel");
            event.currentTarget.style.removeProperty("--radix-toast-swipe-move-x");
            event.currentTarget.style.removeProperty("--radix-toast-swipe-move-y");
            event.currentTarget.style.removeProperty("--radix-toast-swipe-end-x");
            event.currentTarget.style.removeProperty("--radix-toast-swipe-end-y");
          }),
          onSwipeEnd: composeEventHandlers(props.onSwipeEnd, (event) => {
            const { x, y } = event.detail.delta;
            event.currentTarget.setAttribute("data-swipe", "end");
            event.currentTarget.style.removeProperty("--radix-toast-swipe-move-x");
            event.currentTarget.style.removeProperty("--radix-toast-swipe-move-y");
            event.currentTarget.style.setProperty("--radix-toast-swipe-end-x", `${x}px`);
            event.currentTarget.style.setProperty("--radix-toast-swipe-end-y", `${y}px`);
            setOpen(false);
          })
        }
      ) });
    }
  );
  Toast.displayName = TOAST_NAME;
  var [ToastInteractiveProvider, useToastInteractiveContext] = createToastContext(TOAST_NAME, {
    onClose() {
    }
  });
  var ToastImpl = React50.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeToast,
        type = "foreground",
        duration: durationProp,
        open,
        onClose,
        onEscapeKeyDown,
        onPause,
        onResume,
        onSwipeStart,
        onSwipeMove,
        onSwipeCancel,
        onSwipeEnd,
        ...toastProps
      } = props;
      const context = useToastProviderContext(TOAST_NAME, __scopeToast);
      const [node, setNode] = React50.useState(null);
      const composedRefs = useComposedRefs(forwardedRef, (node2) => setNode(node2));
      const pointerStartRef = React50.useRef(null);
      const swipeDeltaRef = React50.useRef(null);
      const duration = durationProp || context.duration;
      const closeTimerStartTimeRef = React50.useRef(0);
      const closeTimerRemainingTimeRef = React50.useRef(duration);
      const closeTimerRef = React50.useRef(0);
      const { onToastAdd, onToastRemove } = context;
      const handleClose = useCallbackRef(() => {
        const isFocusInToast = node?.contains(document.activeElement);
        if (isFocusInToast) context.viewport?.focus();
        onClose();
      });
      const startTimer = React50.useCallback(
        (duration2) => {
          if (!duration2 || duration2 === Infinity) return;
          window.clearTimeout(closeTimerRef.current);
          closeTimerStartTimeRef.current = (/* @__PURE__ */ new Date()).getTime();
          closeTimerRef.current = window.setTimeout(handleClose, duration2);
        },
        [handleClose]
      );
      React50.useEffect(() => {
        const viewport = context.viewport;
        if (viewport) {
          const handleResume = () => {
            startTimer(closeTimerRemainingTimeRef.current);
            onResume?.();
          };
          const handlePause = () => {
            const elapsedTime = (/* @__PURE__ */ new Date()).getTime() - closeTimerStartTimeRef.current;
            closeTimerRemainingTimeRef.current = closeTimerRemainingTimeRef.current - elapsedTime;
            window.clearTimeout(closeTimerRef.current);
            onPause?.();
          };
          viewport.addEventListener(VIEWPORT_PAUSE, handlePause);
          viewport.addEventListener(VIEWPORT_RESUME, handleResume);
          return () => {
            viewport.removeEventListener(VIEWPORT_PAUSE, handlePause);
            viewport.removeEventListener(VIEWPORT_RESUME, handleResume);
          };
        }
      }, [context.viewport, duration, onPause, onResume, startTimer]);
      React50.useEffect(() => {
        if (open && !context.isClosePausedRef.current) startTimer(duration);
      }, [open, duration, context.isClosePausedRef, startTimer]);
      React50.useEffect(() => {
        onToastAdd();
        return () => onToastRemove();
      }, [onToastAdd, onToastRemove]);
      const announceTextContent = React50.useMemo(() => {
        return node ? getAnnounceTextContent(node) : null;
      }, [node]);
      if (!context.viewport) return null;
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)(import_jsx_runtime67.Fragment, { children: [
        announceTextContent && /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
          ToastAnnounce,
          {
            __scopeToast,
            role: "status",
            "aria-live": type === "foreground" ? "assertive" : "polite",
            "aria-atomic": true,
            children: announceTextContent
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(ToastInteractiveProvider, { scope: __scopeToast, onClose: handleClose, children: ReactDOM4.createPortal(
          /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Collection3.ItemSlot, { scope: __scopeToast, children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
            Root,
            {
              asChild: true,
              onEscapeKeyDown: composeEventHandlers(onEscapeKeyDown, () => {
                if (!context.isFocusedToastEscapeKeyDownRef.current) handleClose();
                context.isFocusedToastEscapeKeyDownRef.current = false;
              }),
              children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
                Primitive.li,
                {
                  role: "status",
                  "aria-live": "off",
                  "aria-atomic": true,
                  tabIndex: 0,
                  "data-state": open ? "open" : "closed",
                  "data-swipe-direction": context.swipeDirection,
                  ...toastProps,
                  ref: composedRefs,
                  style: { userSelect: "none", touchAction: "none", ...props.style },
                  onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
                    if (event.key !== "Escape") return;
                    onEscapeKeyDown?.(event.nativeEvent);
                    if (!event.nativeEvent.defaultPrevented) {
                      context.isFocusedToastEscapeKeyDownRef.current = true;
                      handleClose();
                    }
                  }),
                  onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
                    if (event.button !== 0) return;
                    pointerStartRef.current = { x: event.clientX, y: event.clientY };
                  }),
                  onPointerMove: composeEventHandlers(props.onPointerMove, (event) => {
                    if (!pointerStartRef.current) return;
                    const x = event.clientX - pointerStartRef.current.x;
                    const y = event.clientY - pointerStartRef.current.y;
                    const hasSwipeMoveStarted = Boolean(swipeDeltaRef.current);
                    const isHorizontalSwipe = ["left", "right"].includes(context.swipeDirection);
                    const clamp5 = ["left", "up"].includes(context.swipeDirection) ? Math.min : Math.max;
                    const clampedX = isHorizontalSwipe ? clamp5(0, x) : 0;
                    const clampedY = !isHorizontalSwipe ? clamp5(0, y) : 0;
                    const moveStartBuffer = event.pointerType === "touch" ? 10 : 2;
                    const delta = { x: clampedX, y: clampedY };
                    const eventDetail = { originalEvent: event, delta };
                    if (hasSwipeMoveStarted) {
                      swipeDeltaRef.current = delta;
                      handleAndDispatchCustomEvent2(TOAST_SWIPE_MOVE, onSwipeMove, eventDetail, {
                        discrete: false
                      });
                    } else if (isDeltaInDirection(delta, context.swipeDirection, moveStartBuffer)) {
                      swipeDeltaRef.current = delta;
                      handleAndDispatchCustomEvent2(TOAST_SWIPE_START, onSwipeStart, eventDetail, {
                        discrete: false
                      });
                      event.target.setPointerCapture(event.pointerId);
                    } else if (Math.abs(x) > moveStartBuffer || Math.abs(y) > moveStartBuffer) {
                      pointerStartRef.current = null;
                    }
                  }),
                  onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
                    const delta = swipeDeltaRef.current;
                    const target = event.target;
                    if (target.hasPointerCapture(event.pointerId)) {
                      target.releasePointerCapture(event.pointerId);
                    }
                    swipeDeltaRef.current = null;
                    pointerStartRef.current = null;
                    if (delta) {
                      const toast = event.currentTarget;
                      const eventDetail = { originalEvent: event, delta };
                      if (isDeltaInDirection(delta, context.swipeDirection, context.swipeThreshold)) {
                        handleAndDispatchCustomEvent2(TOAST_SWIPE_END, onSwipeEnd, eventDetail, {
                          discrete: true
                        });
                      } else {
                        handleAndDispatchCustomEvent2(
                          TOAST_SWIPE_CANCEL,
                          onSwipeCancel,
                          eventDetail,
                          {
                            discrete: true
                          }
                        );
                      }
                      toast.addEventListener("click", (event2) => event2.preventDefault(), {
                        once: true
                      });
                    }
                  })
                }
              )
            }
          ) }),
          context.viewport
        ) })
      ] });
    }
  );
  var ToastAnnounce = (props) => {
    const { __scopeToast, children, ...announceProps } = props;
    const context = useToastProviderContext(TOAST_NAME, __scopeToast);
    const [renderAnnounceText, setRenderAnnounceText] = React50.useState(false);
    const [isAnnounced, setIsAnnounced] = React50.useState(false);
    useNextFrame(() => setRenderAnnounceText(true));
    React50.useEffect(() => {
      const timer = window.setTimeout(() => setIsAnnounced(true), 1e3);
      return () => window.clearTimeout(timer);
    }, []);
    return isAnnounced ? null : /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Portal, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(VisuallyHidden, { ...announceProps, children: renderAnnounceText && /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)(import_jsx_runtime67.Fragment, { children: [
      context.label,
      " ",
      children
    ] }) }) });
  };
  var TITLE_NAME2 = "ToastTitle";
  var ToastTitle = React50.forwardRef(
    (props, forwardedRef) => {
      const { __scopeToast, ...titleProps } = props;
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Primitive.div, { ...titleProps, ref: forwardedRef });
    }
  );
  ToastTitle.displayName = TITLE_NAME2;
  var DESCRIPTION_NAME2 = "ToastDescription";
  var ToastDescription = React50.forwardRef(
    (props, forwardedRef) => {
      const { __scopeToast, ...descriptionProps } = props;
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Primitive.div, { ...descriptionProps, ref: forwardedRef });
    }
  );
  ToastDescription.displayName = DESCRIPTION_NAME2;
  var ACTION_NAME = "ToastAction";
  var ToastAction = React50.forwardRef(
    (props, forwardedRef) => {
      const { altText, ...actionProps } = props;
      if (!altText.trim()) {
        console.error(
          `Invalid prop \`altText\` supplied to \`${ACTION_NAME}\`. Expected non-empty \`string\`.`
        );
        return null;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(ToastAnnounceExclude, { altText, asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(ToastClose, { ...actionProps, ref: forwardedRef }) });
    }
  );
  ToastAction.displayName = ACTION_NAME;
  var CLOSE_NAME2 = "ToastClose";
  var ToastClose = React50.forwardRef(
    (props, forwardedRef) => {
      const { __scopeToast, ...closeProps } = props;
      const interactiveContext = useToastInteractiveContext(CLOSE_NAME2, __scopeToast);
      return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(ToastAnnounceExclude, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
        Primitive.button,
        {
          type: "button",
          ...closeProps,
          ref: forwardedRef,
          onClick: composeEventHandlers(props.onClick, interactiveContext.onClose)
        }
      ) });
    }
  );
  ToastClose.displayName = CLOSE_NAME2;
  var ToastAnnounceExclude = React50.forwardRef((props, forwardedRef) => {
    const { __scopeToast, altText, ...announceExcludeProps } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
      Primitive.div,
      {
        "data-radix-toast-announce-exclude": "",
        "data-radix-toast-announce-alt": altText || void 0,
        ...announceExcludeProps,
        ref: forwardedRef
      }
    );
  });
  function getAnnounceTextContent(container) {
    const textContent = [];
    const childNodes = Array.from(container.childNodes);
    childNodes.forEach((node) => {
      if (node.nodeType === node.TEXT_NODE && node.textContent) textContent.push(node.textContent);
      if (isHTMLElement2(node)) {
        const isHidden2 = node.ariaHidden || node.hidden || node.style.display === "none";
        const isExcluded = node.dataset.radixToastAnnounceExclude === "";
        if (!isHidden2) {
          if (isExcluded) {
            const altText = node.dataset.radixToastAnnounceAlt;
            if (altText) textContent.push(altText);
          } else {
            textContent.push(...getAnnounceTextContent(node));
          }
        }
      }
    });
    return textContent;
  }
  function handleAndDispatchCustomEvent2(name, handler, detail, { discrete }) {
    const currentTarget = detail.originalEvent.currentTarget;
    const event = new CustomEvent(name, { bubbles: true, cancelable: true, detail });
    if (handler) currentTarget.addEventListener(name, handler, { once: true });
    if (discrete) {
      dispatchDiscreteCustomEvent(currentTarget, event);
    } else {
      currentTarget.dispatchEvent(event);
    }
  }
  var isDeltaInDirection = (delta, direction, threshold = 0) => {
    const deltaX = Math.abs(delta.x);
    const deltaY = Math.abs(delta.y);
    const isDeltaX = deltaX > deltaY;
    if (direction === "left" || direction === "right") {
      return isDeltaX && deltaX > threshold;
    } else {
      return !isDeltaX && deltaY > threshold;
    }
  };
  function useNextFrame(callback = () => {
  }) {
    const fn = useCallbackRef(callback);
    useLayoutEffect22(() => {
      let raf1 = 0;
      let raf2 = 0;
      raf1 = window.requestAnimationFrame(() => raf2 = window.requestAnimationFrame(fn));
      return () => {
        window.cancelAnimationFrame(raf1);
        window.cancelAnimationFrame(raf2);
      };
    }, [fn]);
  }
  function isHTMLElement2(node) {
    return node.nodeType === node.ELEMENT_NODE;
  }
  function getTabbableCandidates2(container) {
    const nodes = [];
    const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
      acceptNode: (node) => {
        const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
        if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;
        return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }
    });
    while (walker.nextNode()) nodes.push(walker.currentNode);
    return nodes;
  }
  function focusFirst4(candidates) {
    const previouslyFocusedElement = document.activeElement;
    return candidates.some((candidate) => {
      if (candidate === previouslyFocusedElement) return true;
      candidate.focus();
      return document.activeElement !== previouslyFocusedElement;
    });
  }
  var Root25 = Toast;
  var Title = ToastTitle;
  var Description = ToastDescription;
  var Action = ToastAction;
  var Close = ToastClose;

  // node_modules/tldraw/dist-esm/lib/ui/context/toasts.mjs
  var import_react60 = __toESM(require_react(), 1);
  var ToastsContext = (0, import_react60.createContext)(null);
  function TldrawUiToastsProvider({ children }) {
    const toasts = useAtom("toasts", []);
    const current = (0, import_react60.useMemo)(() => {
      return {
        toasts,
        addToast(toast) {
          const id = toast.id ?? uniqueId();
          toasts.update((d) => [...d.filter((m) => m.id !== toast.id), { ...toast, id }]);
          return id;
        },
        removeToast(id) {
          toasts.update((d) => d.filter((m) => m.id !== id));
          return id;
        },
        clearToasts() {
          toasts.set([]);
        }
      };
    }, [toasts]);
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(ToastProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(ToastsContext.Provider, { value: current, children }) });
  }
  function useToasts() {
    const ctx = (0, import_react60.useContext)(ToastsContext);
    if (!ctx) {
      throw new Error("useToasts must be used within a ToastsProvider");
    }
    return ctx;
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useClipboardEvents.mjs
  var import_lz_string = __toESM(require_lz_string(), 1);
  var import_react61 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/utils/clipboard.mjs
  var TLDRAW_CUSTOM_PNG_MIME_TYPE = "web image/vnd.tldraw+png";
  var additionalClipboardWriteTypes = {
    "image/png": TLDRAW_CUSTOM_PNG_MIME_TYPE
  };
  var canonicalClipboardReadTypes = {
    [TLDRAW_CUSTOM_PNG_MIME_TYPE]: "image/png"
  };
  function getAdditionalClipboardWriteType(mimeType) {
    return getOwnProperty(additionalClipboardWriteTypes, mimeType) ?? null;
  }
  function getCanonicalClipboardReadType(mimeType) {
    return getOwnProperty(canonicalClipboardReadTypes, mimeType) ?? mimeType;
  }
  function doesClipboardSupportType(mimeType) {
    return typeof ClipboardItem !== "undefined" && "supports" in ClipboardItem && ClipboardItem.supports(mimeType);
  }
  function clipboardWrite(types) {
    const entries = Object.entries(types);
    for (const [_, promise] of entries) promise.catch((err) => console.error(err));
    return navigator.clipboard.write([new ClipboardItem(types)]).catch((err) => {
      console.error(err);
      return Promise.all(
        entries.map(async ([type, promise]) => {
          return [type, await promise];
        })
      ).then((entries2) => {
        const resolvedTypes = objectMapFromEntries(entries2);
        return navigator.clipboard.write([new ClipboardItem(resolvedTypes)]);
      });
    });
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/clipboard/pasteExcalidrawContent.mjs
  async function pasteExcalidrawContent(editor, clipboard, point) {
    const { elements, files } = clipboard;
    const tldrawContent = {
      shapes: [],
      bindings: [],
      rootShapeIds: [],
      assets: [],
      schema: editor.store.schema.serialize()
    };
    const groupShapeIdToChildren = /* @__PURE__ */ new Map();
    const rotatedElements = /* @__PURE__ */ new Map();
    const currentPageId = editor.getCurrentPageId();
    const excElementIdsToTldrawShapeIds = /* @__PURE__ */ new Map();
    const rootShapeIds = [];
    const skipIds = /* @__PURE__ */ new Set();
    elements.forEach((element) => {
      excElementIdsToTldrawShapeIds.set(element.id, createShapeId());
      if (element.boundElements !== null) {
        for (const boundElement of element.boundElements) {
          if (boundElement.type === "text") {
            skipIds.add(boundElement.id);
          }
        }
      }
    });
    let index2 = ZERO_INDEX_KEY;
    for (const element of elements) {
      if (skipIds.has(element.id)) {
        continue;
      }
      const id = excElementIdsToTldrawShapeIds.get(element.id);
      const base = {
        id,
        typeName: "shape",
        parentId: currentPageId,
        index: index2,
        x: element.x,
        y: element.y,
        rotation: 0,
        isLocked: element.locked,
        opacity: getOpacity(element.opacity),
        meta: {}
      };
      if (element.angle !== 0) {
        rotatedElements.set(id, element.angle);
      }
      if (element.groupIds && element.groupIds.length > 0) {
        if (groupShapeIdToChildren.has(element.groupIds[0])) {
          groupShapeIdToChildren.get(element.groupIds[0])?.push(id);
        } else {
          groupShapeIdToChildren.set(element.groupIds[0], [id]);
        }
      } else {
        rootShapeIds.push(id);
      }
      switch (element.type) {
        case "rectangle":
        case "ellipse":
        case "diamond": {
          let text = "";
          let align = "middle";
          if (element.boundElements !== null) {
            for (const boundElement of element.boundElements) {
              if (boundElement.type === "text") {
                const labelElement = elements.find((elm) => elm.id === boundElement.id);
                if (labelElement) {
                  text = labelElement.text;
                  align = textAlignToAlignTypes[labelElement.textAlign];
                }
              }
            }
          }
          const colorToUse = element.backgroundColor === "transparent" ? element.strokeColor : element.backgroundColor;
          tldrawContent.shapes.push({
            ...base,
            type: "geo",
            props: {
              geo: element.type,
              url: element.link ?? "",
              w: element.width,
              h: element.height,
              size: strokeWidthsToSizes[element.strokeWidth] ?? "draw",
              color: colorsToColors[colorToUse] ?? "black",
              text,
              align,
              dash: getDash(element),
              fill: getFill(element)
            }
          });
          break;
        }
        case "freedraw": {
          tldrawContent.shapes.push({
            ...base,
            type: "draw",
            props: {
              dash: getDash(element),
              size: strokeWidthsToSizes[element.strokeWidth],
              color: colorsToColors[element.strokeColor] ?? "black",
              segments: [
                {
                  type: "free",
                  points: element.points.map(([x, y, z = 0.5]) => ({
                    x,
                    y,
                    z
                  }))
                }
              ]
            }
          });
          break;
        }
        case "line": {
          const points = element.points.slice();
          if (points.length < 2) {
            break;
          }
          const indices = getIndices(element.points.length);
          tldrawContent.shapes.push({
            ...base,
            type: "line",
            props: {
              dash: getDash(element),
              size: strokeWidthsToSizes[element.strokeWidth],
              color: colorsToColors[element.strokeColor] ?? "black",
              spline: element.roundness ? "cubic" : "line",
              points: {
                ...Object.fromEntries(
                  element.points.map(([x, y], i) => {
                    const index22 = indices[i];
                    return [index22, { id: index22, index: index22, x, y }];
                  })
                )
              }
            }
          });
          break;
        }
        case "arrow": {
          let text = "";
          if (element.boundElements !== null) {
            for (const boundElement of element.boundElements) {
              if (boundElement.type === "text") {
                const labelElement = elements.find((elm) => elm.id === boundElement.id);
                if (labelElement) {
                  text = labelElement.text;
                }
              }
            }
          }
          const start = element.points[0];
          const end = element.points[element.points.length - 1];
          const startTargetId = excElementIdsToTldrawShapeIds.get(element.startBinding?.elementId);
          const endTargetId = excElementIdsToTldrawShapeIds.get(element.endBinding?.elementId);
          tldrawContent.shapes.push({
            ...base,
            type: "arrow",
            props: {
              text,
              bend: getBend(element, start, end),
              dash: getDash(element),
              size: strokeWidthsToSizes[element.strokeWidth] ?? "m",
              color: colorsToColors[element.strokeColor] ?? "black",
              start: { x: start[0], y: start[1] },
              end: { x: end[0], y: end[1] },
              arrowheadEnd: arrowheadsToArrowheadTypes[element.endArrowhead] ?? "none",
              arrowheadStart: arrowheadsToArrowheadTypes[element.startArrowhead] ?? "none"
            }
          });
          if (startTargetId) {
            tldrawContent.bindings.push({
              id: createBindingId(),
              typeName: "binding",
              type: "arrow",
              fromId: id,
              toId: startTargetId,
              props: {
                terminal: "start",
                normalizedAnchor: { x: 0.5, y: 0.5 },
                isPrecise: false,
                isExact: false
              },
              meta: {}
            });
          }
          if (endTargetId) {
            tldrawContent.bindings.push({
              id: createBindingId(),
              typeName: "binding",
              type: "arrow",
              fromId: id,
              toId: endTargetId,
              props: {
                terminal: "end",
                normalizedAnchor: { x: 0.5, y: 0.5 },
                isPrecise: false,
                isExact: false
              },
              meta: {}
            });
          }
          break;
        }
        case "text": {
          const { size: size4, scale } = getFontSizeAndScale(element.fontSize);
          tldrawContent.shapes.push({
            ...base,
            type: "text",
            props: {
              size: size4,
              scale,
              font: fontFamilyToFontType[element.fontFamily] ?? "draw",
              color: colorsToColors[element.strokeColor] ?? "black",
              text: element.text,
              textAlign: textAlignToTextAlignTypes[element.textAlign]
            }
          });
          break;
        }
        case "image": {
          const file = files[element.fileId];
          if (!file) break;
          const assetId = AssetRecordType.createId();
          tldrawContent.assets.push({
            id: assetId,
            typeName: "asset",
            type: "image",
            props: {
              w: element.width,
              h: element.height,
              fileSize: file.size,
              name: element.id ?? "Untitled",
              isAnimated: false,
              mimeType: file.mimeType,
              src: file.dataURL
            },
            meta: {}
          });
          tldrawContent.shapes.push({
            ...base,
            type: "image",
            props: {
              w: element.width,
              h: element.height,
              assetId
            }
          });
        }
      }
      index2 = getIndexAbove(index2);
    }
    const p = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : void 0);
    editor.markHistoryStoppingPoint("paste");
    editor.putContentOntoCurrentPage(tldrawContent, {
      point: p,
      select: false,
      preserveIds: true
    });
    for (const groupedShapeIds of groupShapeIdToChildren.values()) {
      if (groupedShapeIds.length > 1) {
        editor.groupShapes(groupedShapeIds);
        const groupShape = editor.getShape(groupedShapeIds[0]);
        if (groupShape?.parentId && isShapeId(groupShape.parentId)) {
          rootShapeIds.push(groupShape.parentId);
        }
      }
    }
    for (const [id, angle] of rotatedElements) {
      editor.select(id);
      editor.rotateShapesBy([id], angle);
    }
    const rootShapes = compact(rootShapeIds.map((id) => editor.getShape(id)));
    const bounds = Box.Common(rootShapes.map((s) => editor.getShapePageBounds(s)));
    const viewPortCenter = editor.getViewportPageBounds().center;
    editor.updateShapes(
      rootShapes.map((s) => {
        const delta = {
          x: (s.x ?? 0) - (bounds.x + bounds.w / 2),
          y: (s.y ?? 0) - (bounds.y + bounds.h / 2)
        };
        return {
          id: s.id,
          type: s.type,
          x: viewPortCenter.x + delta.x,
          y: viewPortCenter.y + delta.y
        };
      })
    );
    editor.setSelectedShapes(rootShapeIds);
  }
  var getOpacity = (opacity) => {
    const t2 = opacity / 100;
    if (t2 < 0.2) {
      return 0.1;
    } else if (t2 < 0.4) {
      return 0.25;
    } else if (t2 < 0.6) {
      return 0.5;
    } else if (t2 < 0.8) {
      return 0.75;
    }
    return 1;
  };
  var strokeWidthsToSizes = {
    1: "s",
    2: "m",
    3: "l",
    4: "xl"
  };
  var fontSizesToSizes = {
    16: "s",
    20: "m",
    28: "l",
    36: "xl"
  };
  function getFontSizeAndScale(fontSize) {
    const size4 = fontSizesToSizes[fontSize];
    if (size4) {
      return { size: size4, scale: 1 };
    }
    if (fontSize < 16) {
      return { size: "s", scale: fontSize / 16 };
    }
    if (fontSize > 36) {
      return { size: "xl", scale: fontSize / 36 };
    }
    return { size: "m", scale: 1 };
  }
  var fontFamilyToFontType = {
    1: "draw",
    2: "sans",
    3: "mono"
  };
  var oc = {
    gray: ["#f8f9fa", "#e9ecef", "#ced4da", "#868e96", "#343a40"],
    red: ["#fff5f5", "#ffc9c9", "#ff8787", "#fa5252", "#e03131"],
    pink: ["#fff0f6", "#fcc2d7", "#f783ac", "#e64980", "#c2255c"],
    grape: ["#f8f0fc", "#eebefa", "#da77f2", "#be4bdb", "#9c36b5"],
    violet: ["#f3f0ff", "#d0bfff", "#9775fa", "#7950f2", "#6741d9"],
    indigo: ["#edf2ff", "#bac8ff", "#748ffc", "#4c6ef5", "#3b5bdb"],
    blue: ["#e7f5ff", "#a5d8ff", "#4dabf7", "#228be6", "#1971c2"],
    cyan: ["#e3fafc", "#99e9f2", "#3bc9db", "#15aabf", "#0c8599"],
    teal: ["#e6fcf5", "#96f2d7", "#38d9a9", "#12b886", "#099268"],
    green: ["#ebfbee", "#b2f2bb", "#69db7c", "#40c057", "#2f9e44"],
    lime: ["#f4fce3", "#d8f5a2", "#a9e34b", "#82c91e", "#66a80f"],
    yellow: ["#fff9db", "#ffec99", "#ffd43b", "#fab005", "#f08c00"],
    orange: ["#fff4e6", "#ffd8a8", "#ffa94d", "#fd7e14", "#e8590c"]
  };
  function mapExcalidrawColorToTldrawColors(excalidrawColor, light, dark) {
    const colors = [0, 1, 2, 3, 4].map((index2) => oc[excalidrawColor][index2]);
    return Object.fromEntries(colors.map((c, i) => [c, i < 3 ? light : dark]));
  }
  var colorsToColors = {
    ...mapExcalidrawColorToTldrawColors("gray", "grey", "black"),
    ...mapExcalidrawColorToTldrawColors("red", "light-red", "red"),
    ...mapExcalidrawColorToTldrawColors("pink", "light-red", "red"),
    ...mapExcalidrawColorToTldrawColors("grape", "light-violet", "violet"),
    ...mapExcalidrawColorToTldrawColors("blue", "light-blue", "blue"),
    ...mapExcalidrawColorToTldrawColors("cyan", "light-blue", "blue"),
    ...mapExcalidrawColorToTldrawColors("teal", "light-green", "green"),
    ...mapExcalidrawColorToTldrawColors("green", "light-green", "green"),
    ...mapExcalidrawColorToTldrawColors("yellow", "yellow", "orange"),
    ...mapExcalidrawColorToTldrawColors("orange", "yellow", "orange"),
    "#ffffff": "white",
    "#000000": "black"
  };
  var strokeStylesToStrokeTypes = {
    solid: "draw",
    dashed: "dashed",
    dotted: "dotted"
  };
  var fillStylesToFillType = {
    "cross-hatch": "pattern",
    hachure: "pattern",
    solid: "solid"
  };
  var textAlignToAlignTypes = {
    left: "start",
    center: "middle",
    right: "end"
  };
  var textAlignToTextAlignTypes = {
    left: "start",
    center: "middle",
    right: "end"
  };
  var arrowheadsToArrowheadTypes = {
    arrow: "arrow",
    dot: "dot",
    triangle: "triangle",
    bar: "pipe"
  };
  function getBend(element, startPoint, endPoint) {
    let bend = 0;
    if (element.points.length > 2) {
      const start = new Vec(startPoint[0], startPoint[1]);
      const end = new Vec(endPoint[0], endPoint[1]);
      const handle = new Vec(element.points[1][0], element.points[1][1]);
      const delta = Vec.Sub(end, start);
      const v = Vec.Per(delta);
      const med = Vec.Med(end, start);
      const A = Vec.Sub(med, v);
      const B = Vec.Add(med, v);
      const point = Vec.NearestPointOnLineSegment(A, B, handle, false);
      bend = Vec.Dist(point, med);
      if (Vec.Clockwise(point, end, med)) bend *= -1;
    }
    return bend;
  }
  var getDash = (element) => {
    let dash = strokeStylesToStrokeTypes[element.strokeStyle] ?? "draw";
    if (dash === "draw" && element.roughness === 0) {
      dash = "solid";
    }
    return dash;
  };
  var getFill = (element) => {
    if (element.backgroundColor === "transparent") {
      return "none";
    }
    return fillStylesToFillType[element.fillStyle] ?? "solid";
  };

  // node_modules/tldraw/dist-esm/lib/ui/hooks/clipboard/pasteFiles.mjs
  async function pasteFiles(editor, blobs, point, sources) {
    const files = blobs.map(
      (blob) => blob instanceof File ? blob : new File([blob], "tldrawFile", { type: blob.type })
    );
    editor.markHistoryStoppingPoint("paste");
    await editor.putExternalContent({
      type: "files",
      files,
      point,
      ignoreParent: false,
      sources
    });
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/clipboard/pasteTldrawContent.mjs
  function pasteTldrawContent(editor, clipboard, point) {
    const selectionBoundsBefore = editor.getSelectionPageBounds();
    editor.markHistoryStoppingPoint("paste");
    editor.putContentOntoCurrentPage(clipboard, {
      point,
      select: true
    });
    const selectedBoundsAfter = editor.getSelectionPageBounds();
    if (selectionBoundsBefore && selectedBoundsAfter && selectionBoundsBefore?.collides(selectedBoundsAfter)) {
      editor.updateInstanceState({ isChangingStyle: true });
      editor.timers.setTimeout(() => {
        editor.updateInstanceState({ isChangingStyle: false });
      }, 150);
    }
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/clipboard/pasteUrl.mjs
  async function pasteUrl(editor, url, point, sources) {
    editor.markHistoryStoppingPoint("paste");
    return await editor.putExternalContent({
      type: "url",
      point,
      url,
      sources
    });
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useClipboardEvents.mjs
  var expectedPasteFileMimeTypes = [
    TLDRAW_CUSTOM_PNG_MIME_TYPE,
    "image/png",
    "image/jpeg",
    "image/webp",
    "image/svg+xml"
  ];
  function stripHtml(html) {
    const doc = document.implementation.createHTMLDocument("");
    doc.documentElement.innerHTML = html.trim();
    return doc.body.textContent || doc.body.innerText || "";
  }
  var isValidHttpURL = (url) => {
    try {
      const u = new URL(url);
      return u.protocol === "http:" || u.protocol === "https:";
    } catch {
      return false;
    }
  };
  var getValidHttpURLList = (url) => {
    const urls = url.split(/[\n\s]/);
    for (const url2 of urls) {
      try {
        const u = new URL(url2);
        if (!(u.protocol === "http:" || u.protocol === "https:")) {
          return;
        }
      } catch {
        return;
      }
    }
    return uniq(urls);
  };
  var isSvgText = (text) => {
    return /^<svg/.test(text);
  };
  var INPUTS2 = ["input", "select", "textarea"];
  function areShortcutsDisabled2(editor) {
    const { activeElement } = document;
    return editor.menus.hasAnyOpenMenus() || activeElement && (activeElement.getAttribute("contenteditable") || INPUTS2.indexOf(activeElement.tagName.toLowerCase()) > -1);
  }
  var handleText = (editor, data, point, sources) => {
    const validUrlList = getValidHttpURLList(data);
    if (validUrlList) {
      for (const url of validUrlList) {
        pasteUrl(editor, url, point);
      }
    } else if (isValidHttpURL(data)) {
      pasteUrl(editor, data, point);
    } else if (isSvgText(data)) {
      editor.markHistoryStoppingPoint("paste");
      editor.putExternalContent({
        type: "svg-text",
        text: data,
        point,
        sources
      });
    } else {
      editor.markHistoryStoppingPoint("paste");
      editor.putExternalContent({
        type: "text",
        text: data,
        point,
        sources
      });
    }
  };
  var handlePasteFromEventClipboardData = async (editor, clipboardData, point) => {
    if (editor.getEditingShapeId() !== null) return;
    if (!clipboardData) {
      throw Error("No clipboard data");
    }
    const things = [];
    for (const item of Object.values(clipboardData.items)) {
      switch (item.kind) {
        case "file": {
          things.push({
            type: "file",
            source: new Promise((r) => r(item.getAsFile()))
          });
          break;
        }
        case "string": {
          if (item.type === "text/html") {
            things.push({
              type: "html",
              source: new Promise((r) => item.getAsString(r))
            });
          } else if (item.type === "text/plain") {
            things.push({
              type: "text",
              source: new Promise((r) => item.getAsString(r))
            });
          } else {
            things.push({ type: item.type, source: new Promise((r) => item.getAsString(r)) });
          }
          break;
        }
      }
    }
    handleClipboardThings(editor, things, point);
  };
  var handlePasteFromClipboardApi = async ({
    editor,
    clipboardItems,
    point,
    fallbackFiles
  }) => {
    const things = [];
    for (const item of clipboardItems) {
      for (const type of expectedPasteFileMimeTypes) {
        if (item.types.includes(type)) {
          const blobPromise = item.getType(type).then((blob) => FileHelpers.rewriteMimeType(blob, getCanonicalClipboardReadType(type)));
          things.push({
            type: "blob",
            source: blobPromise
          });
          break;
        }
      }
      if (item.types.includes("text/html")) {
        things.push({
          type: "html",
          source: (async () => {
            const blob = await item.getType("text/html");
            return await FileHelpers.blobToText(blob);
          })()
        });
      }
      if (item.types.includes("text/uri-list")) {
        things.push({
          type: "url",
          source: (async () => {
            const blob = await item.getType("text/uri-list");
            return await FileHelpers.blobToText(blob);
          })()
        });
      }
      if (item.types.includes("text/plain")) {
        things.push({
          type: "text",
          source: (async () => {
            const blob = await item.getType("text/plain");
            return await FileHelpers.blobToText(blob);
          })()
        });
      }
    }
    if (fallbackFiles && things.length === 1 && things[0].type === "text") {
      things.pop();
      things.push(
        ...fallbackFiles.map((f) => ({ type: "file", source: Promise.resolve(f) }))
      );
    }
    return await handleClipboardThings(editor, things, point);
  };
  async function handleClipboardThings(editor, things, point) {
    const files = things.filter(
      (t2) => (t2.type === "file" || t2.type === "blob") && t2.source !== null
    );
    if (files.length) {
      if (files.length > editor.options.maxFilesAtOnce) {
        throw Error("Too many files");
      }
      const fileBlobs = compact(await Promise.all(files.map((t2) => t2.source)));
      return await pasteFiles(editor, fileBlobs, point);
    }
    const results = await Promise.all(
      things.filter((t2) => t2.type !== "file").map(
        (t2) => new Promise((r) => {
          const thing = t2;
          if (thing.type === "file") {
            r({ type: "error", data: null, reason: "unexpected file" });
            return;
          }
          thing.source.then((text) => {
            const tldrawHtmlComment = text.match(/<div data-tldraw[^>]*>(.*)<\/div>/)?.[1];
            if (tldrawHtmlComment) {
              try {
                const jsonComment = import_lz_string.default.decompressFromBase64(tldrawHtmlComment);
                if (jsonComment === null) {
                  r({
                    type: "error",
                    data: jsonComment,
                    reason: `found tldraw data comment but could not parse base64`
                  });
                  return;
                } else {
                  const json = JSON.parse(jsonComment);
                  if (json.type !== "application/tldraw") {
                    r({
                      type: "error",
                      data: json,
                      reason: `found tldraw data comment but JSON was of a different type: ${json.type}`
                    });
                  }
                  if (typeof json.data === "string") {
                    r({
                      type: "error",
                      data: json,
                      reason: "found tldraw json but data was a string instead of a TLClipboardModel object"
                    });
                    return;
                  }
                  r({ type: "tldraw", data: json.data });
                  return;
                }
              } catch {
                r({
                  type: "error",
                  data: tldrawHtmlComment,
                  reason: "found tldraw json but data was a string instead of a TLClipboardModel object"
                });
                return;
              }
            } else {
              if (thing.type === "html") {
                r({ type: "text", data: text, subtype: "html" });
                return;
              }
              if (thing.type === "url") {
                r({ type: "text", data: text, subtype: "url" });
                return;
              }
              try {
                const json = JSON.parse(text);
                if (json.type === "excalidraw/clipboard") {
                  r({ type: "excalidraw", data: json });
                  return;
                } else {
                  r({ type: "text", data: text, subtype: "json" });
                  return;
                }
              } catch {
                r({ type: "text", data: text, subtype: "text" });
                return;
              }
            }
            r({ type: "error", data: text, reason: "unhandled case" });
          });
        })
      )
    );
    for (const result of results) {
      if (result.type === "tldraw") {
        pasteTldrawContent(editor, result.data, point);
        return;
      }
    }
    for (const result of results) {
      if (result.type === "excalidraw") {
        pasteExcalidrawContent(editor, result.data, point);
        return;
      }
    }
    for (const result of results) {
      if (result.type === "text" && result.subtype === "html") {
        const rootNode = new DOMParser().parseFromString(result.data, "text/html");
        const bodyNode = rootNode.querySelector("body");
        const isHtmlSingleLink = bodyNode && Array.from(bodyNode.children).filter((el) => el.nodeType === 1).length === 1 && bodyNode.firstElementChild && bodyNode.firstElementChild.tagName === "A" && bodyNode.firstElementChild.hasAttribute("href") && bodyNode.firstElementChild.getAttribute("href") !== "";
        if (isHtmlSingleLink) {
          const href = bodyNode.firstElementChild.getAttribute("href");
          handleText(editor, href, point, results);
          return;
        }
        if (!results.some((r) => r.type === "text" && r.subtype !== "html") && result.data.trim()) {
          handleText(editor, stripHtml(result.data), point, results);
          return;
        }
      }
      if (result.type === "text" && result.subtype === "text" && result.data.startsWith("<iframe ")) {
        const rootNode = new DOMParser().parseFromString(result.data, "text/html");
        const bodyNode = rootNode.querySelector("body");
        const isSingleIframe = bodyNode && Array.from(bodyNode.children).filter((el) => el.nodeType === 1).length === 1 && bodyNode.firstElementChild && bodyNode.firstElementChild.tagName === "IFRAME" && bodyNode.firstElementChild.hasAttribute("src") && bodyNode.firstElementChild.getAttribute("src") !== "";
        if (isSingleIframe) {
          const src = bodyNode.firstElementChild.getAttribute("src");
          handleText(editor, src, point, results);
          return;
        }
      }
    }
    for (const result of results) {
      if (result.type === "text" && result.subtype === "url") {
        pasteUrl(editor, result.data, point, results);
        return;
      }
    }
    for (const result of results) {
      if (result.type === "text" && result.subtype === "text" && result.data.trim()) {
        handleText(editor, result.data, point, results);
        return;
      }
    }
  }
  var handleNativeOrMenuCopy = async (editor) => {
    const content = await editor.resolveAssetsInContent(
      editor.getContentFromCurrentPage(editor.getSelectedShapeIds())
    );
    if (!content) {
      if (navigator && navigator.clipboard) {
        navigator.clipboard.writeText("");
      }
      return;
    }
    const stringifiedClipboard = import_lz_string.default.compressToBase64(
      JSON.stringify({
        type: "application/tldraw",
        kind: "content",
        data: content
      })
    );
    if (typeof navigator === "undefined") {
      return;
    } else {
      const textItems = content.shapes.map((shape) => {
        const util = editor.getShapeUtil(shape);
        return util.getText(shape);
      }).filter(isDefined);
      if (navigator.clipboard?.write) {
        const htmlBlob = new Blob([`<div data-tldraw>${stringifiedClipboard}</div>`], {
          type: "text/html"
        });
        let textContent = textItems.join(" ");
        if (textContent === "") {
          textContent = " ";
        }
        navigator.clipboard.write([
          new ClipboardItem({
            "text/html": htmlBlob,
            // What is this second blob used for?
            "text/plain": new Blob([textContent], { type: "text/plain" })
          })
        ]);
      } else if (navigator.clipboard.writeText) {
        navigator.clipboard.writeText(`<div data-tldraw>${stringifiedClipboard}</div>`);
      }
    }
  };
  function useMenuClipboardEvents() {
    const editor = useEditor();
    const trackEvent = useUiEvents();
    const copy = (0, import_react61.useCallback)(
      async function onCopy(source) {
        if (editor.getSelectedShapeIds().length === 0) return;
        await handleNativeOrMenuCopy(editor);
        trackEvent("copy", { source });
      },
      [editor, trackEvent]
    );
    const cut = (0, import_react61.useCallback)(
      async function onCut(source) {
        if (editor.getSelectedShapeIds().length === 0) return;
        await handleNativeOrMenuCopy(editor);
        editor.deleteShapes(editor.getSelectedShapeIds());
        trackEvent("cut", { source });
      },
      [editor, trackEvent]
    );
    const paste = (0, import_react61.useCallback)(
      async function onPaste(data, source, point) {
        if (editor.getEditingShapeId() !== null) return;
        if (Array.isArray(data) && data[0] instanceof ClipboardItem) {
          handlePasteFromClipboardApi({ editor, clipboardItems: data, point });
          trackEvent("paste", { source: "menu" });
        } else {
          navigator.clipboard.read().then((clipboardItems) => {
            paste(clipboardItems, source, point);
          });
        }
      },
      [editor, trackEvent]
    );
    return {
      copy,
      cut,
      paste
    };
  }
  function useNativeClipboardEvents() {
    const editor = useEditor();
    const trackEvent = useUiEvents();
    const appIsFocused = useValue("editor.isFocused", () => editor.getInstanceState().isFocused, [
      editor
    ]);
    (0, import_react61.useEffect)(() => {
      if (!appIsFocused) return;
      const copy = async (e) => {
        if (editor.getSelectedShapeIds().length === 0 || editor.getEditingShapeId() !== null || areShortcutsDisabled2(editor)) {
          return;
        }
        preventDefault(e);
        await handleNativeOrMenuCopy(editor);
        trackEvent("copy", { source: "kbd" });
      };
      async function cut(e) {
        if (editor.getSelectedShapeIds().length === 0 || editor.getEditingShapeId() !== null || areShortcutsDisabled2(editor)) {
          return;
        }
        preventDefault(e);
        await handleNativeOrMenuCopy(editor);
        editor.deleteShapes(editor.getSelectedShapeIds());
        trackEvent("cut", { source: "kbd" });
      }
      let disablingMiddleClickPaste = false;
      const pointerUpHandler = (e) => {
        if (e.button === 1) {
          disablingMiddleClickPaste = true;
          editor.timers.requestAnimationFrame(() => {
            disablingMiddleClickPaste = false;
          });
        }
      };
      const paste = (e) => {
        if (disablingMiddleClickPaste) {
          stopEventPropagation(e);
          return;
        }
        if (editor.getEditingShapeId() !== null || areShortcutsDisabled2(editor)) return;
        let point = void 0;
        let pasteAtCursor = false;
        if (editor.inputs.shiftKey) pasteAtCursor = true;
        if (editor.user.getIsPasteAtCursorMode()) pasteAtCursor = !pasteAtCursor;
        if (pasteAtCursor) point = editor.inputs.currentPagePoint;
        const pasteFromEvent = () => {
          if (e.clipboardData) {
            handlePasteFromEventClipboardData(editor, e.clipboardData, point);
          }
        };
        if (navigator.clipboard?.read) {
          const fallbackFiles = Array.from(e.clipboardData?.files || []);
          navigator.clipboard.read().then(
            (clipboardItems) => {
              if (Array.isArray(clipboardItems) && clipboardItems[0] instanceof ClipboardItem) {
                handlePasteFromClipboardApi({ editor, clipboardItems, point, fallbackFiles });
              }
            },
            () => {
              pasteFromEvent();
            }
          );
        } else {
          pasteFromEvent();
        }
        preventDefault(e);
        trackEvent("paste", { source: "kbd" });
      };
      document.addEventListener("copy", copy);
      document.addEventListener("cut", cut);
      document.addEventListener("paste", paste);
      document.addEventListener("pointerup", pointerUpHandler);
      return () => {
        document.removeEventListener("copy", copy);
        document.removeEventListener("cut", cut);
        document.removeEventListener("paste", paste);
        document.removeEventListener("pointerup", pointerUpHandler);
      };
    }, [editor, trackEvent, appIsFocused]);
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useCopyAs.mjs
  var import_react62 = __toESM(require_react(), 1);

  // node_modules/canvas-size/dist/canvas-size.esm.js
  function _iterableToArrayLimit(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
      var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
      try {
        if (_x = (_i = _i.call(arr)).next, 0 === i) {
          if (Object(_i) !== _i) return;
          _n = false;
        } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true) ;
      } catch (err) {
        _d = true, _e = err;
      } finally {
        try {
          if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
  }
  function ownKeys2(object2, enumerableOnly) {
    var keys = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread22(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        _defineProperty2(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty2(obj, key, value) {
    key = _toPropertyKey2(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties2(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose2(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _toPrimitive2(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey2(arg) {
    var key = _toPrimitive2(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function canvasTest(settings) {
    var size4 = settings.sizes.shift();
    var width = Math.max(Math.ceil(size4[0]), 1);
    var height = Math.max(Math.ceil(size4[1]), 1);
    var fill = [width - 1, height - 1, 1, 1];
    var job = Date.now();
    var isWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
    var cropCvs, testCvs;
    if (isWorker) {
      cropCvs = new OffscreenCanvas(1, 1);
      testCvs = new OffscreenCanvas(width, height);
    } else {
      cropCvs = document.createElement("canvas");
      cropCvs.width = 1;
      cropCvs.height = 1;
      testCvs = document.createElement("canvas");
      testCvs.width = width;
      testCvs.height = height;
    }
    var cropCtx = cropCvs.getContext("2d");
    var testCtx = testCvs.getContext("2d");
    if (testCtx) {
      testCtx.fillRect.apply(testCtx, fill);
      cropCtx.drawImage(testCvs, width - 1, height - 1, 1, 1, 0, 0, 1, 1);
    }
    var isTestPass = cropCtx && cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;
    var benchmark = Date.now() - job;
    [cropCvs, testCvs].forEach(function(cvs) {
      cvs.height = 0;
      cvs.width = 0;
    });
    if (isWorker) {
      postMessage({
        width,
        height,
        benchmark,
        isTestPass
      });
      if (!isTestPass && settings.sizes.length) {
        canvasTest(settings);
      }
    } else if (isTestPass) {
      settings.onSuccess(width, height, benchmark);
    } else {
      settings.onError(width, height, benchmark);
      if (settings.sizes.length) {
        canvasTest(settings);
      }
    }
    return isTestPass;
  }
  var testSizes = {
    area: [16384, 14188, 11402, 11180, 10836, 8192, 4096, 1],
    height: [8388607, 65535, 32767, 16384, 8192, 4096, 1],
    width: [4194303, 65535, 32767, 16384, 8192, 4096, 1]
  };
  var _excluded2 = ["onError", "onSuccess"];
  var defaults = {
    max: null,
    min: 1,
    sizes: [],
    step: 1024,
    usePromise: false,
    useWorker: false,
    onError: Function.prototype,
    onSuccess: Function.prototype
  };
  var workerJobs = {};
  function createSizesArray(settings) {
    var isArea = settings.width === settings.height;
    var isWidth = settings.height === 1;
    var isHeight = settings.width === 1;
    var sizes = [];
    if (!settings.width || !settings.height) {
      settings.sizes.forEach(function(testSize2) {
        var width2 = isArea || isWidth ? testSize2 : 1;
        var height2 = isArea || isHeight ? testSize2 : 1;
        sizes.push([width2, height2]);
      });
    } else {
      var testMin = settings.min || defaults.min;
      var testStep = settings.step || defaults.step;
      var testSize = Math.max(settings.width, settings.height);
      while (testSize >= testMin) {
        var width = isArea || isWidth ? testSize : 1;
        var height = isArea || isHeight ? testSize : 1;
        sizes.push([width, height]);
        testSize -= testStep;
      }
    }
    return sizes;
  }
  function handleMethod(settings) {
    var hasCanvasSupport = window && "HTMLCanvasElement" in window;
    var hasOffscreenCanvasSupport = window && "OffscreenCanvas" in window;
    var jobID = Date.now();
    var _onError = settings.onError, _onSuccess = settings.onSuccess, settingsWithoutCallbacks = _objectWithoutProperties2(settings, _excluded2);
    var worker = null;
    if (!hasCanvasSupport) {
      return false;
    }
    if (settings.useWorker && hasOffscreenCanvasSupport) {
      var js = "\n            var canvasTest = ".concat(canvasTest.toString(), ";\n            onmessage = function(e) {\n                canvasTest(e.data);\n            };\n        ");
      var blob = new Blob([js], {
        type: "application/javascript"
      });
      var blobURL = URL.createObjectURL(blob);
      worker = new Worker(blobURL);
      URL.revokeObjectURL(blobURL);
      worker.onmessage = function(e) {
        var _e$data = e.data, width = _e$data.width, height = _e$data.height, benchmark = _e$data.benchmark, isTestPass = _e$data.isTestPass;
        if (isTestPass) {
          workerJobs[jobID].onSuccess(width, height, benchmark);
          delete workerJobs[jobID];
        } else {
          workerJobs[jobID].onError(width, height, benchmark);
        }
      };
    }
    if (settings.usePromise) {
      return new Promise(function(resolve, reject) {
        var promiseSettings = _objectSpread22(_objectSpread22({}, settings), {}, {
          onError: function onError2(width, height, benchmark) {
            var isLastTest;
            if (settings.sizes.length === 0) {
              isLastTest = true;
            } else {
              var _settings$sizes$slice = settings.sizes.slice(-1), _settings$sizes$slice2 = _slicedToArray(_settings$sizes$slice, 1), _settings$sizes$slice3 = _slicedToArray(_settings$sizes$slice2[0], 2), lastWidth = _settings$sizes$slice3[0], lastHeight = _settings$sizes$slice3[1];
              isLastTest = width === lastWidth && height === lastHeight;
            }
            _onError(width, height, benchmark);
            if (isLastTest) {
              reject({
                width,
                height,
                benchmark
              });
            }
          },
          onSuccess: function onSuccess2(width, height, benchmark) {
            _onSuccess(width, height, benchmark);
            resolve({
              width,
              height,
              benchmark
            });
          }
        });
        if (worker) {
          var onError = promiseSettings.onError, onSuccess = promiseSettings.onSuccess;
          workerJobs[jobID] = {
            onError,
            onSuccess
          };
          worker.postMessage(settingsWithoutCallbacks);
        } else {
          canvasTest(promiseSettings);
        }
      });
    } else {
      if (worker) {
        workerJobs[jobID] = {
          onError: _onError,
          onSuccess: _onSuccess
        };
        worker.postMessage(settingsWithoutCallbacks);
      } else {
        return canvasTest(settings);
      }
    }
  }
  var canvasSize = {
    maxArea: function maxArea() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var sizes = createSizesArray({
        width: options.max,
        height: options.max,
        min: options.min,
        step: options.step,
        sizes: _toConsumableArray(testSizes.area)
      });
      var settings = _objectSpread22(_objectSpread22(_objectSpread22({}, defaults), options), {}, {
        sizes
      });
      return handleMethod(settings);
    },
    maxHeight: function maxHeight() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var sizes = createSizesArray({
        width: 1,
        height: options.max,
        min: options.min,
        step: options.step,
        sizes: _toConsumableArray(testSizes.height)
      });
      var settings = _objectSpread22(_objectSpread22(_objectSpread22({}, defaults), options), {}, {
        sizes
      });
      return handleMethod(settings);
    },
    maxWidth: function maxWidth() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var sizes = createSizesArray({
        width: options.max,
        height: 1,
        min: options.min,
        step: options.step,
        sizes: _toConsumableArray(testSizes.width)
      });
      var settings = _objectSpread22(_objectSpread22(_objectSpread22({}, defaults), options), {}, {
        sizes
      });
      return handleMethod(settings);
    },
    test: function test() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var settings = _objectSpread22(_objectSpread22({}, defaults), options);
      settings.sizes = _toConsumableArray(settings.sizes);
      if (settings.width && settings.height) {
        settings.sizes = [[settings.width, settings.height]];
      }
      return handleMethod(settings);
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/shared/getBrowserCanvasMaxSize.mjs
  var maxSizePromise = null;
  function getBrowserCanvasMaxSize() {
    if (!maxSizePromise) {
      maxSizePromise = calculateBrowserCanvasMaxSize();
    }
    return maxSizePromise;
  }
  async function calculateBrowserCanvasMaxSize() {
    const maxWidth2 = await canvasSize.maxWidth({ usePromise: true });
    const maxHeight2 = await canvasSize.maxHeight({ usePromise: true });
    const maxArea2 = await canvasSize.maxArea({ usePromise: true });
    return {
      maxWidth: maxWidth2.width,
      maxHeight: maxHeight2.height,
      maxArea: maxArea2.width * maxArea2.height
    };
  }
  var MAX_SAFE_CANVAS_DIMENSION = 8192;
  var MAX_SAFE_CANVAS_AREA = 4096 * 4096;
  async function clampToBrowserMaxCanvasSize(width, height) {
    if (width <= MAX_SAFE_CANVAS_DIMENSION && height <= MAX_SAFE_CANVAS_DIMENSION && width * height <= MAX_SAFE_CANVAS_AREA) {
      return [width, height];
    }
    const { maxWidth: maxWidth2, maxHeight: maxHeight2, maxArea: maxArea2 } = await getBrowserCanvasMaxSize();
    const aspectRatio = width / height;
    if (width > maxWidth2) {
      width = maxWidth2;
      height = width / aspectRatio;
    }
    if (height > maxHeight2) {
      height = maxHeight2;
      width = height * aspectRatio;
    }
    if (width * height > maxArea2) {
      const ratio = Math.sqrt(maxArea2 / (width * height));
      width *= ratio;
      height *= ratio;
    }
    return [width, height];
  }

  // node_modules/tldraw/dist-esm/lib/utils/export/export.mjs
  async function getSvgAsImage(editor, svgString, options) {
    const { type, width, height, quality = 1, pixelRatio = 2 } = options;
    let [clampedWidth, clampedHeight] = await clampToBrowserMaxCanvasSize(
      width * pixelRatio,
      height * pixelRatio
    );
    clampedWidth = Math.floor(clampedWidth);
    clampedHeight = Math.floor(clampedHeight);
    const effectiveScale = clampedWidth / width;
    const svgUrl = await FileHelpers.blobToDataUrl(new Blob([svgString], { type: "image/svg+xml" }));
    const canvas = await new Promise((resolve) => {
      const image = Image();
      image.crossOrigin = "anonymous";
      image.onload = async () => {
        if (tlenv.isSafari) {
          await sleep(250);
        }
        const canvas2 = document.createElement("canvas");
        const ctx = canvas2.getContext("2d");
        canvas2.width = clampedWidth;
        canvas2.height = clampedHeight;
        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = "high";
        ctx.drawImage(image, 0, 0, clampedWidth, clampedHeight);
        URL.revokeObjectURL(svgUrl);
        resolve(canvas2);
      };
      image.onerror = () => {
        resolve(null);
      };
      image.src = svgUrl;
    });
    if (!canvas) return null;
    const blob = await new Promise(
      (resolve) => canvas.toBlob(
        (blob2) => {
          if (!blob2 || debugFlags.throwToBlob.get()) {
            resolve(null);
          }
          resolve(blob2);
        },
        "image/" + type,
        quality
      )
    );
    if (!blob) return null;
    if (type === "png") {
      const view = new DataView(await blob.arrayBuffer());
      return PngHelpers.setPhysChunk(view, effectiveScale, {
        type: "image/" + type
      });
    } else {
      return blob;
    }
  }
  async function getSvgString(editor, ids, opts) {
    const svg = await editor.getSvgString(ids?.length ? ids : [...editor.getCurrentPageShapeIds()], {
      scale: opts.scale ?? 1,
      background: editor.getInstanceState().exportBackground,
      ...opts
    });
    if (!svg) {
      throw new Error("Could not construct SVG.");
    }
    return svg;
  }
  async function exportToString(editor, ids, format2, opts = {}) {
    switch (format2) {
      case "svg": {
        return (await getSvgString(editor, ids, opts))?.svg;
      }
      case "json": {
        const data = await editor.resolveAssetsInContent(editor.getContentFromCurrentPage(ids));
        return JSON.stringify(data);
      }
      default: {
        exhaustiveSwitchError(format2);
      }
    }
  }
  async function exportToBlob({
    editor,
    ids,
    format: format2,
    opts = {}
  }) {
    switch (format2) {
      case "svg":
        return new Blob([await exportToString(editor, ids, "svg", opts)], { type: "text/plain" });
      case "json":
        return new Blob([await exportToString(editor, ids, "json", opts)], { type: "text/plain" });
      case "jpeg":
      case "png":
      case "webp": {
        const svgResult = await getSvgString(editor, ids, opts);
        if (!svgResult) throw new Error("Could not construct image.");
        const image = await getSvgAsImage(editor, svgResult.svg, {
          type: format2,
          quality: opts.quality,
          pixelRatio: opts.pixelRatio,
          width: svgResult.width,
          height: svgResult.height
        });
        if (!image) {
          throw new Error("Could not construct image.");
        }
        return image;
      }
      default: {
        exhaustiveSwitchError(format2);
      }
    }
  }
  var mimeTypeByFormat = {
    jpeg: "image/jpeg",
    png: "image/png",
    webp: "image/webp",
    json: "text/plain",
    svg: "text/plain"
  };
  function exportToBlobPromise(editor, ids, format2, opts = {}) {
    return {
      blobPromise: exportToBlob({ editor, ids, format: format2, opts }),
      mimeType: mimeTypeByFormat[format2]
    };
  }

  // node_modules/tldraw/dist-esm/lib/utils/export/copyAs.mjs
  function copyAs(editor, ids, format2 = "svg", opts = {}) {
    if (!navigator.clipboard) return Promise.reject(new Error("Copy not supported"));
    if (navigator.clipboard.write) {
      const { blobPromise, mimeType } = exportToBlobPromise(editor, ids, format2, opts);
      const types = { [mimeType]: blobPromise };
      const additionalMimeType = getAdditionalClipboardWriteType(mimeType);
      if (additionalMimeType && doesClipboardSupportType(additionalMimeType)) {
        types[additionalMimeType] = blobPromise.then(
          (blob) => FileHelpers.rewriteMimeType(blob, additionalMimeType)
        );
      }
      return clipboardWrite(types);
    }
    switch (format2) {
      case "json":
      case "svg":
        return fallbackWriteTextAsync(async () => exportToString(editor, ids, format2, opts));
      case "jpeg":
      case "png":
        throw new Error("Copy not supported");
      default:
        exhaustiveSwitchError(format2);
    }
  }
  async function fallbackWriteTextAsync(getText) {
    await navigator.clipboard?.writeText?.(await getText());
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useCopyAs.mjs
  function useCopyAs() {
    const editor = useEditor();
    const { addToast } = useToasts();
    const msg2 = useTranslation();
    return (0, import_react62.useCallback)(
      (ids, format2 = "svg") => {
        copyAs(editor, ids, format2).catch(() => {
          addToast({
            id: "copy-fail",
            severity: "warning",
            title: msg2("toast.error.copy-fail.title"),
            description: msg2("toast.error.copy-fail.desc")
          });
        });
      },
      [editor, addToast, msg2]
    );
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useExportAs.mjs
  var import_react63 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/utils/export/exportAs.mjs
  async function exportAs(editor, ids, format2 = "png", name, opts = {}) {
    if (!name) {
      name = `shapes at ${getTimestamp()}`;
      if (ids.length === 1) {
        const first = editor.getShape(ids[0]);
        if (editor.isShapeOfType(first, "frame")) {
          name = first.props.name || "frame";
        } else {
          name = `${sanitizeId(first.id)} at ${getTimestamp()}`;
        }
      }
    }
    name += `.${format2}`;
    const blob = await exportToBlob({ editor, ids, format: format2, opts });
    const file = new File([blob], name, { type: blob.type });
    downloadFile(file);
  }
  function getTimestamp() {
    const now = /* @__PURE__ */ new Date();
    const year = String(now.getFullYear()).slice(2);
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const day = String(now.getDate()).padStart(2, "0");
    const hours = String(now.getHours()).padStart(2, "0");
    const minutes = String(now.getMinutes()).padStart(2, "0");
    const seconds = String(now.getSeconds()).padStart(2, "0");
    return `${year}-${month}-${day} ${hours}.${minutes}.${seconds}`;
  }
  function downloadFile(file) {
    const link = document.createElement("a");
    const url = URL.createObjectURL(file);
    link.href = url;
    link.download = file.name;
    link.click();
    URL.revokeObjectURL(url);
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useExportAs.mjs
  function useExportAs() {
    const editor = useEditor();
    const { addToast } = useToasts();
    const msg2 = useTranslation();
    return (0, import_react63.useCallback)(
      (ids, format2 = "png", name) => {
        exportAs(editor, ids, format2, name, {
          scale: 1,
          background: editor.getInstanceState().exportBackground
        }).catch((e) => {
          console.error(e.message);
          addToast({
            id: "export-fail",
            title: msg2("toast.error.export-fail.title"),
            description: msg2("toast.error.export-fail.desc"),
            severity: "error"
          });
        });
      },
      [editor, addToast, msg2]
    );
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useInsertMedia.mjs
  var import_react64 = __toESM(require_react(), 1);
  var MimeTypeContext = import_react64.default.createContext([]);
  function useInsertMedia() {
    const editor = useEditor();
    const inputRef = (0, import_react64.useRef)();
    const mimeTypes = useShallowArrayIdentity(import_react64.default.useContext(MimeTypeContext));
    (0, import_react64.useEffect)(() => {
      const input = window.document.createElement("input");
      input.type = "file";
      input.accept = mimeTypes?.join(",") ?? DEFAULT_SUPPORTED_MEDIA_TYPE_LIST;
      input.multiple = true;
      inputRef.current = input;
      async function onchange(e) {
        const fileList = e.target.files;
        if (!fileList || fileList.length === 0) return;
        editor.markHistoryStoppingPoint("insert media");
        await editor.putExternalContent({
          type: "files",
          files: Array.from(fileList),
          point: editor.getViewportPageBounds().center,
          ignoreParent: false
        });
        input.value = "";
      }
      input.addEventListener("change", onchange);
      return () => {
        inputRef.current = void 0;
        input.removeEventListener("change", onchange);
      };
    }, [editor, mimeTypes]);
    return (0, import_react64.useCallback)(() => {
      inputRef.current?.click();
    }, [inputRef]);
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/usePrint.mjs
  var import_react65 = __toESM(require_react(), 1);
  function usePrint() {
    const editor = useEditor();
    const prevPrintEl = (0, import_react65.useRef)(null);
    const prevStyleEl = (0, import_react65.useRef)(null);
    return (0, import_react65.useCallback)(
      async function printSelectionOrPages() {
        const el = document.createElement("div");
        const style = document.createElement("style");
        const clearElements = (printEl, styleEl) => {
          if (printEl) printEl.innerHTML = "";
          if (styleEl && document.head.contains(styleEl)) document.head.removeChild(styleEl);
          if (printEl && document.body.contains(printEl)) {
            document.body.removeChild(printEl);
          }
        };
        clearElements(prevPrintEl.current, prevStyleEl.current);
        prevPrintEl.current = el;
        prevStyleEl.current = style;
        const className = `tl-print-surface-${uniqueId()}`;
        el.className = className;
        const enableMargins = false;
        const allowAllPages = false;
        style.innerHTML = `
			.${className} {
				display: none;
			}

			.${className} svg {
				max-width: 100%;
				height: 100%;
				display: block;
			}

			@media print {				  
				html, body {
					min-height: 100%;
					height: 100%;
					margin: 0;
				}

				body {
					position: relative;
				}

				body > * {
					display: none;
				}

				.tldraw__editor {
					display: none;
				}

				.${className} {
					display: block !important;
					background: white;
					min-height: 100%;
					height: 100%;
					max-width: 100%;
				}

				.${className}__item {
					padding: 10mm;
					display: flex;
					min-height: 100%;
					flex-direction: column;
					page-break-after: always;
					position: relative;
					overflow: hidden;
					height: 100%;
				}

				.${className}__item__main {
					flex: 1;
					display: flex;
					align-items: center;
					justify-content: center;
					max-height: 100%;
				}

				.${className}__item__header {
					display: none;
				}

				.${className}__item__footer {
					display: none;
					text-align: right;
				}

				.${className}__item__footer__hide {
					display: none;
				}

				${!enableMargins ? "" : `
					/**
					 * Note: Safari doesn't support removing the page margins to remove them all!
					 */
					@page {
						margin:0;
					}

					.${className} .${className}__item__header {
						display: block;
					}

					.${className} .${className}__item__footer {
						display: block;
					}
				`}
			}

		`;
        const beforePrintHandler = () => {
          document.head.appendChild(style);
          document.body.appendChild(el);
        };
        const afterPrintHandler = () => {
          editor.once("tick", () => {
            clearElements(el, style);
          });
        };
        window.addEventListener("beforeprint", beforePrintHandler);
        window.addEventListener("afterprint", afterPrintHandler);
        function addPageToPrint(title, footer, svg) {
          try {
            el.innerHTML += `<div class="${className}__item">
        <div class="${className}__item__header">
          ${title.replace(/</g, "&lt;").replace(/>/g, "&gt;")}
        </div>
        <div class="${className}__item__main">
          ${svg}
        </div>
        <div class="${className}__item__footer ${className}__item__footer__${footer ? "" : "hide"}">
          ${footer ?? ""}
        </div>
      </div>`;
          } catch (e) {
            console.error(e);
          }
        }
        function triggerPrint() {
          if (tlenv.isChromeForIos) {
            beforePrintHandler();
            window.print();
          } else if (tlenv.isSafari) {
            beforePrintHandler();
            document.execCommand("print", false);
          } else {
            window.print();
          }
        }
        const selectedShapeIds = editor.getSelectedShapeIds();
        const currentPageId = editor.getCurrentPageId();
        const pages = editor.getPages();
        const preserveAspectRatio = "xMidYMid meet";
        const svgOpts = {
          scale: 1,
          background: false,
          darkMode: false,
          preserveAspectRatio
        };
        if (editor.getSelectedShapeIds().length > 0) {
          const svgExport = await editor.getSvgString(selectedShapeIds, svgOpts);
          if (svgExport) {
            const page = pages.find((p) => p.id === currentPageId);
            addPageToPrint(`tldraw \u2014 ${page?.name}`, null, svgExport.svg);
            triggerPrint();
          }
        } else {
          if (allowAllPages) {
            for (let i = 0; i < pages.length; i++) {
              const page = pages[i];
              const svgExport = await editor.getSvgString(
                editor.getSortedChildIdsForParent(page.id),
                svgOpts
              );
              if (svgExport) {
                addPageToPrint(`tldraw \u2014 ${page.name}`, `${i}/${pages.length}`, svgExport.svg);
              }
            }
            triggerPrint();
          } else {
            const page = editor.getCurrentPage();
            const svgExport = await editor.getSvgString(
              editor.getSortedChildIdsForParent(page.id),
              svgOpts
            );
            if (svgExport) {
              addPageToPrint(`tldraw \u2014 ${page.name}`, null, svgExport.svg);
              triggerPrint();
            }
          }
        }
        window.removeEventListener("beforeprint", beforePrintHandler);
        window.removeEventListener("afterprint", afterPrintHandler);
      },
      [editor]
    );
  }

  // node_modules/tldraw/dist-esm/lib/ui/overrides.mjs
  function useDefaultHelpers() {
    const { addToast, removeToast, clearToasts } = useToasts();
    const { addDialog, clearDialogs, removeDialog } = useDialogs();
    const msg2 = useTranslation();
    const insertMedia = useInsertMedia();
    const printSelectionOrPages = usePrint();
    const { cut, copy, paste } = useMenuClipboardEvents();
    const copyAs2 = useCopyAs();
    const exportAs2 = useExportAs();
    const getEmbedDefinition = useGetEmbedDefinition();
    const breakpoint = useBreakpoint();
    const isMobile = breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM;
    return (0, import_react66.useMemo)(
      () => ({
        addToast,
        removeToast,
        clearToasts,
        addDialog,
        removeDialog,
        clearDialogs,
        msg: msg2,
        isMobile,
        insertMedia,
        printSelectionOrPages,
        cut,
        copy,
        paste,
        copyAs: copyAs2,
        exportAs: exportAs2,
        getEmbedDefinition
      }),
      [
        addToast,
        removeToast,
        clearToasts,
        addDialog,
        removeDialog,
        clearDialogs,
        msg2,
        isMobile,
        insertMedia,
        printSelectionOrPages,
        cut,
        copy,
        paste,
        copyAs2,
        exportAs2,
        getEmbedDefinition
      ]
    );
  }
  function mergeOverrides(overrides, defaultHelpers) {
    const mergedTranslations = {};
    for (const override of overrides) {
      if (override.translations) {
        for (const [key, value] of objectMapEntries(override.translations)) {
          let strings = mergedTranslations[key];
          if (!strings) {
            strings = mergedTranslations[key] = {};
          }
          Object.assign(strings, value);
        }
      }
    }
    return {
      actions: (editor, schema, helpers) => {
        for (const override of overrides) {
          if (override.actions) {
            schema = override.actions(editor, schema, helpers);
          }
        }
        return schema;
      },
      tools: (editor, schema, helpers) => {
        for (const override of overrides) {
          if (override.tools) {
            schema = override.tools(editor, schema, { ...defaultHelpers, ...helpers });
          }
        }
        return schema;
      },
      translations: mergedTranslations
    };
  }
  function useShallowArrayEquality(array2) {
    return (0, import_react66.useMemo)(() => array2, array2);
  }
  function useMergedTranslationOverrides(overrides) {
    const overridesArray = useShallowArrayEquality(
      overrides == null ? [] : Array.isArray(overrides) ? overrides : [overrides]
    );
    return (0, import_react66.useMemo)(() => {
      const mergedTranslations = {};
      for (const override of overridesArray) {
        if (override.translations) {
          for (const [key, value] of objectMapEntries(override.translations)) {
            let strings = mergedTranslations[key];
            if (!strings) {
              strings = mergedTranslations[key] = {};
            }
            Object.assign(strings, value);
          }
        }
      }
      return mergedTranslations;
    }, [overridesArray]);
  }
  function useMergedOverrides(overrides) {
    const defaultHelpers = useDefaultHelpers();
    const overridesArray = useShallowArrayEquality(
      overrides == null ? [] : Array.isArray(overrides) ? overrides : [overrides]
    );
    return (0, import_react66.useMemo)(
      () => mergeOverrides(overridesArray, defaultHelpers),
      [overridesArray, defaultHelpers]
    );
  }

  // node_modules/tldraw/dist-esm/lib/ui/context/actions.mjs
  var ActionsContext = React52.createContext(null);
  function makeActions(actions) {
    return Object.fromEntries(actions.map((action) => [action.id, action]));
  }
  function getExportName(editor, defaultName) {
    const selectedShapes = editor.getSelectedShapes();
    if (selectedShapes.length === 0) {
      return editor.getDocumentSettings().name || defaultName;
    }
    return void 0;
  }
  function ActionsProvider({ overrides, children }) {
    const editor = useEditor();
    const showCollaborationUi = useShowCollaborationUi();
    const helpers = useDefaultHelpers();
    const trackEvent = useUiEvents();
    const defaultDocumentName = helpers.msg("document.default-name");
    const actions = React52.useMemo(() => {
      function mustGoBackToSelectToolFirst() {
        if (!editor.isIn("select")) {
          editor.complete();
          editor.setCurrentTool("select");
          return false;
        }
        return false;
      }
      function canApplySelectionAction() {
        return editor.isIn("select") && editor.getSelectedShapeIds().length > 0;
      }
      const actionItems = [
        {
          id: "edit-link",
          label: "action.edit-link",
          icon: "link",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("edit-link", { source });
            editor.markHistoryStoppingPoint("edit-link");
            helpers.addDialog({ component: EditLinkDialog });
          }
        },
        {
          id: "insert-embed",
          label: "action.insert-embed",
          kbd: "$i",
          onSelect(source) {
            trackEvent("insert-embed", { source });
            helpers.addDialog({ component: EmbedDialog });
          }
        },
        {
          id: "insert-media",
          label: "action.insert-media",
          kbd: "$u",
          onSelect(source) {
            trackEvent("insert-media", { source });
            helpers.insertMedia();
          }
        },
        {
          id: "undo",
          label: "action.undo",
          icon: "undo",
          kbd: "$z",
          onSelect(source) {
            trackEvent("undo", { source });
            editor.undo();
          }
        },
        {
          id: "redo",
          label: "action.redo",
          icon: "redo",
          kbd: "$!z",
          onSelect(source) {
            trackEvent("redo", { source });
            editor.redo();
          }
        },
        {
          id: "export-as-svg",
          label: {
            default: "action.export-as-svg",
            menu: "action.export-as-svg.short",
            ["context-menu"]: "action.export-as-svg.short"
          },
          readonlyOk: true,
          onSelect(source) {
            let ids = editor.getSelectedShapeIds();
            if (ids.length === 0) ids = Array.from(editor.getCurrentPageShapeIds().values());
            if (ids.length === 0) return;
            trackEvent("export-as", { format: "svg", source });
            helpers.exportAs(ids, "svg", getExportName(editor, defaultDocumentName));
          }
        },
        {
          id: "export-as-png",
          label: {
            default: "action.export-as-png",
            menu: "action.export-as-png.short",
            ["context-menu"]: "action.export-as-png.short"
          },
          readonlyOk: true,
          onSelect(source) {
            let ids = editor.getSelectedShapeIds();
            if (ids.length === 0) ids = Array.from(editor.getCurrentPageShapeIds().values());
            if (ids.length === 0) return;
            trackEvent("export-as", { format: "png", source });
            helpers.exportAs(ids, "png", getExportName(editor, defaultDocumentName));
          }
        },
        {
          id: "export-as-json",
          label: {
            default: "action.export-as-json",
            menu: "action.export-as-json.short",
            ["context-menu"]: "action.export-as-json.short"
          },
          readonlyOk: true,
          onSelect(source) {
            let ids = editor.getSelectedShapeIds();
            if (ids.length === 0) ids = Array.from(editor.getCurrentPageShapeIds().values());
            if (ids.length === 0) return;
            trackEvent("export-as", { format: "json", source });
            helpers.exportAs(ids, "json", getExportName(editor, defaultDocumentName));
          }
        },
        {
          id: "export-all-as-svg",
          label: {
            default: "action.export-all-as-svg",
            menu: "action.export-all-as-svg.short",
            ["context-menu"]: "action.export-all-as-svg.short"
          },
          readonlyOk: true,
          onSelect(source) {
            let ids = editor.getSelectedShapeIds();
            if (ids.length === 0) ids = Array.from(editor.getCurrentPageShapeIds().values());
            if (ids.length === 0) return;
            trackEvent("export-all-as", { format: "svg", source });
            helpers.exportAs(
              Array.from(editor.getCurrentPageShapeIds()),
              "svg",
              getExportName(editor, defaultDocumentName)
            );
          }
        },
        {
          id: "export-all-as-png",
          label: {
            default: "action.export-all-as-png",
            menu: "action.export-all-as-png.short",
            ["context-menu"]: "action.export-all-as-png.short"
          },
          readonlyOk: true,
          onSelect(source) {
            const ids = Array.from(editor.getCurrentPageShapeIds().values());
            if (ids.length === 0) return;
            trackEvent("export-all-as", { format: "png", source });
            helpers.exportAs(ids, "png", getExportName(editor, defaultDocumentName));
          }
        },
        {
          id: "export-all-as-json",
          label: {
            default: "action.export-all-as-json",
            menu: "action.export-all-as-json.short",
            ["context-menu"]: "action.export-all-as-json.short"
          },
          readonlyOk: true,
          onSelect(source) {
            const ids = Array.from(editor.getCurrentPageShapeIds().values());
            if (ids.length === 0) return;
            trackEvent("export-all-as", { format: "json", source });
            helpers.exportAs(ids, "json", getExportName(editor, defaultDocumentName));
          }
        },
        {
          id: "copy-as-svg",
          label: {
            default: "action.copy-as-svg",
            menu: "action.copy-as-svg.short",
            ["context-menu"]: "action.copy-as-svg.short"
          },
          kbd: "$!c",
          readonlyOk: true,
          onSelect(source) {
            let ids = editor.getSelectedShapeIds();
            if (ids.length === 0) ids = Array.from(editor.getCurrentPageShapeIds().values());
            if (ids.length === 0) return;
            trackEvent("copy-as", { format: "svg", source });
            helpers.copyAs(ids, "svg");
          }
        },
        {
          id: "copy-as-png",
          label: {
            default: "action.copy-as-png",
            menu: "action.copy-as-png.short",
            ["context-menu"]: "action.copy-as-png.short"
          },
          readonlyOk: true,
          onSelect(source) {
            let ids = editor.getSelectedShapeIds();
            if (ids.length === 0) ids = Array.from(editor.getCurrentPageShapeIds().values());
            if (ids.length === 0) return;
            trackEvent("copy-as", { format: "png", source });
            helpers.copyAs(ids, "png");
          }
        },
        {
          id: "copy-as-json",
          label: {
            default: "action.copy-as-json",
            menu: "action.copy-as-json.short",
            ["context-menu"]: "action.copy-as-json.short"
          },
          readonlyOk: true,
          onSelect(source) {
            let ids = editor.getSelectedShapeIds();
            if (ids.length === 0) ids = Array.from(editor.getCurrentPageShapeIds().values());
            if (ids.length === 0) return;
            trackEvent("copy-as", { format: "json", source });
            helpers.copyAs(ids, "json");
          }
        },
        {
          id: "toggle-auto-size",
          label: "action.toggle-auto-size",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("toggle-auto-size", { source });
            editor.markHistoryStoppingPoint("toggling auto size");
            const shapes = editor.getSelectedShapes().filter(
              (shape) => editor.isShapeOfType(shape, "text") && shape.props.autoSize === false
            );
            editor.updateShapes(
              shapes.map((shape) => {
                return {
                  id: shape.id,
                  type: shape.type,
                  props: {
                    ...shape.props,
                    w: 8,
                    autoSize: true
                  }
                };
              })
            );
            kickoutOccludedShapes(
              editor,
              shapes.map((shape) => shape.id)
            );
          }
        },
        {
          id: "open-embed-link",
          label: "action.open-embed-link",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("open-embed-link", { source });
            const ids = editor.getSelectedShapeIds();
            const warnMsg = "No embed shapes selected";
            if (ids.length !== 1) {
              console.error(warnMsg);
              return;
            }
            const shape = editor.getShape(ids[0]);
            if (!shape || !editor.isShapeOfType(shape, "embed")) {
              console.error(warnMsg);
              return;
            }
            openWindow(shape.props.url, "_blank");
          }
        },
        {
          id: "select-zoom-tool",
          readonlyOk: true,
          kbd: "z",
          onSelect(source) {
            if (editor.root.getCurrent()?.id === "zoom") return;
            trackEvent("zoom-tool", { source });
            if (!(editor.inputs.shiftKey || editor.inputs.ctrlKey)) {
              const currentTool = editor.root.getCurrent();
              if (currentTool && currentTool.getCurrent()?.id === "idle") {
                editor.setCurrentTool("zoom", { onInteractionEnd: currentTool.id, maskAs: "zoom" });
              }
            }
          }
        },
        {
          id: "convert-to-bookmark",
          label: "action.convert-to-bookmark",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            editor.run(() => {
              trackEvent("convert-to-bookmark", { source });
              const shapes = editor.getSelectedShapes();
              const createList = [];
              const deleteList = [];
              for (const shape of shapes) {
                if (!shape || !editor.isShapeOfType(shape, "embed") || !shape.props.url)
                  continue;
                const newPos = new Vec(shape.x, shape.y);
                newPos.rot(-shape.rotation);
                newPos.add(new Vec(shape.props.w / 2 - 300 / 2, shape.props.h / 2 - 320 / 2));
                newPos.rot(shape.rotation);
                const partial = {
                  id: createShapeId(),
                  type: "bookmark",
                  rotation: shape.rotation,
                  x: newPos.x,
                  y: newPos.y,
                  opacity: 1,
                  props: {
                    url: shape.props.url
                  }
                };
                createList.push(partial);
                deleteList.push(shape.id);
              }
              editor.markHistoryStoppingPoint("convert shapes to bookmark");
              editor.deleteShapes(deleteList);
              editor.createShapes(createList);
            });
          }
        },
        {
          id: "convert-to-embed",
          label: "action.convert-to-embed",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("convert-to-embed", { source });
            editor.run(() => {
              const ids = editor.getSelectedShapeIds();
              const shapes = compact(ids.map((id) => editor.getShape(id)));
              const createList = [];
              const deleteList = [];
              for (const shape of shapes) {
                if (!editor.isShapeOfType(shape, "bookmark")) continue;
                const { url } = shape.props;
                const embedInfo = helpers.getEmbedDefinition(url);
                if (!embedInfo) continue;
                if (!embedInfo.definition) continue;
                const { width, height } = embedInfo.definition;
                const newPos = new Vec(shape.x, shape.y);
                newPos.rot(-shape.rotation);
                newPos.add(new Vec(shape.props.w / 2 - width / 2, shape.props.h / 2 - height / 2));
                newPos.rot(shape.rotation);
                const shapeToCreate = {
                  id: createShapeId(),
                  type: "embed",
                  x: newPos.x,
                  y: newPos.y,
                  rotation: shape.rotation,
                  props: {
                    url,
                    w: width,
                    h: height
                  }
                };
                createList.push(shapeToCreate);
                deleteList.push(shape.id);
              }
              editor.markHistoryStoppingPoint("convert shapes to embed");
              editor.deleteShapes(deleteList);
              editor.createShapes(createList);
            });
          }
        },
        {
          id: "duplicate",
          kbd: "$d",
          label: "action.duplicate",
          icon: "duplicate",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("duplicate-shapes", { source });
            const instanceState = editor.getInstanceState();
            let ids;
            let offset4;
            if (instanceState.duplicateProps) {
              ids = instanceState.duplicateProps.shapeIds;
              offset4 = instanceState.duplicateProps.offset;
            } else {
              ids = editor.getSelectedShapeIds();
              const commonBounds = Box.Common(compact(ids.map((id) => editor.getShapePageBounds(id))));
              offset4 = editor.getCameraOptions().isLocked ? {
                // same as the adjacent note margin
                x: editor.options.adjacentShapeMargin,
                y: editor.options.adjacentShapeMargin
              } : {
                x: commonBounds.width + editor.options.adjacentShapeMargin,
                y: 0
              };
            }
            editor.markHistoryStoppingPoint("duplicate shapes");
            editor.duplicateShapes(ids, offset4);
            if (instanceState.duplicateProps) {
              editor.updateInstanceState({
                duplicateProps: {
                  ...instanceState.duplicateProps,
                  shapeIds: editor.getSelectedShapeIds()
                }
              });
            }
          }
        },
        {
          id: "ungroup",
          label: "action.ungroup",
          kbd: "$!g",
          icon: "ungroup",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("ungroup-shapes", { source });
            editor.markHistoryStoppingPoint("ungroup");
            editor.ungroupShapes(editor.getSelectedShapeIds());
          }
        },
        {
          id: "group",
          label: "action.group",
          kbd: "$g",
          icon: "group",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("group-shapes", { source });
            const onlySelectedShape = editor.getOnlySelectedShape();
            if (onlySelectedShape && editor.isShapeOfType(onlySelectedShape, "group")) {
              editor.markHistoryStoppingPoint("ungroup");
              editor.ungroupShapes(editor.getSelectedShapeIds());
            } else {
              editor.markHistoryStoppingPoint("group");
              editor.groupShapes(editor.getSelectedShapeIds());
            }
          }
        },
        {
          id: "remove-frame",
          label: "action.remove-frame",
          kbd: "$!f",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            trackEvent("remove-frame", { source });
            const selectedShapes = editor.getSelectedShapes();
            if (selectedShapes.length > 0 && selectedShapes.every((shape) => editor.isShapeOfType(shape, "frame"))) {
              editor.markHistoryStoppingPoint("remove-frame");
              removeFrame(
                editor,
                selectedShapes.map((shape) => shape.id)
              );
            }
          }
        },
        {
          id: "fit-frame-to-content",
          label: "action.fit-frame-to-content",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            trackEvent("fit-frame-to-content", { source });
            const onlySelectedShape = editor.getOnlySelectedShape();
            if (onlySelectedShape && editor.isShapeOfType(onlySelectedShape, "frame")) {
              editor.markHistoryStoppingPoint("fit-frame-to-content");
              fitFrameToContent(editor, onlySelectedShape.id);
            }
          }
        },
        {
          id: "align-left",
          label: "action.align-left",
          kbd: "?A",
          icon: "align-left",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("align-shapes", { operation: "left", source });
            editor.markHistoryStoppingPoint("align left");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.alignShapes(selectedShapeIds, "left");
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "align-center-horizontal",
          label: {
            default: "action.align-center-horizontal",
            ["context-menu"]: "action.align-center-horizontal.short"
          },
          kbd: "?H",
          icon: "align-center-horizontal",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("align-shapes", { operation: "center-horizontal", source });
            editor.markHistoryStoppingPoint("align center horizontal");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.alignShapes(selectedShapeIds, "center-horizontal");
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "align-right",
          label: "action.align-right",
          kbd: "?D",
          icon: "align-right",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("align-shapes", { operation: "right", source });
            editor.markHistoryStoppingPoint("align right");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.alignShapes(selectedShapeIds, "right");
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "align-center-vertical",
          label: {
            default: "action.align-center-vertical",
            ["context-menu"]: "action.align-center-vertical.short"
          },
          kbd: "?V",
          icon: "align-center-vertical",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("align-shapes", { operation: "center-vertical", source });
            editor.markHistoryStoppingPoint("align center vertical");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.alignShapes(selectedShapeIds, "center-vertical");
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "align-top",
          label: "action.align-top",
          icon: "align-top",
          kbd: "?W",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("align-shapes", { operation: "top", source });
            editor.markHistoryStoppingPoint("align top");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.alignShapes(selectedShapeIds, "top");
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "align-bottom",
          label: "action.align-bottom",
          icon: "align-bottom",
          kbd: "?S",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("align-shapes", { operation: "bottom", source });
            editor.markHistoryStoppingPoint("align bottom");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.alignShapes(selectedShapeIds, "bottom");
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "distribute-horizontal",
          label: {
            default: "action.distribute-horizontal",
            ["context-menu"]: "action.distribute-horizontal.short"
          },
          icon: "distribute-horizontal",
          kbd: "?!h",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("distribute-shapes", { operation: "horizontal", source });
            editor.markHistoryStoppingPoint("distribute horizontal");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.distributeShapes(selectedShapeIds, "horizontal");
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "distribute-vertical",
          label: {
            default: "action.distribute-vertical",
            ["context-menu"]: "action.distribute-vertical.short"
          },
          icon: "distribute-vertical",
          kbd: "?!V",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("distribute-shapes", { operation: "vertical", source });
            editor.markHistoryStoppingPoint("distribute vertical");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.distributeShapes(selectedShapeIds, "vertical");
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "stretch-horizontal",
          label: {
            default: "action.stretch-horizontal",
            ["context-menu"]: "action.stretch-horizontal.short"
          },
          icon: "stretch-horizontal",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("stretch-shapes", { operation: "horizontal", source });
            editor.markHistoryStoppingPoint("stretch horizontal");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.stretchShapes(selectedShapeIds, "horizontal");
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "stretch-vertical",
          label: {
            default: "action.stretch-vertical",
            ["context-menu"]: "action.stretch-vertical.short"
          },
          icon: "stretch-vertical",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("stretch-shapes", { operation: "vertical", source });
            editor.markHistoryStoppingPoint("stretch vertical");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.stretchShapes(selectedShapeIds, "vertical");
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "flip-horizontal",
          label: {
            default: "action.flip-horizontal",
            ["context-menu"]: "action.flip-horizontal.short"
          },
          kbd: "!h",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("flip-shapes", { operation: "horizontal", source });
            editor.markHistoryStoppingPoint("flip horizontal");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.flipShapes(selectedShapeIds, "horizontal");
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "flip-vertical",
          label: { default: "action.flip-vertical", ["context-menu"]: "action.flip-vertical.short" },
          kbd: "!v",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("flip-shapes", { operation: "vertical", source });
            editor.markHistoryStoppingPoint("flip vertical");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.flipShapes(selectedShapeIds, "vertical");
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "pack",
          label: "action.pack",
          icon: "pack",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("pack-shapes", { source });
            editor.markHistoryStoppingPoint("pack");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.packShapes(selectedShapeIds, editor.options.adjacentShapeMargin);
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "stack-vertical",
          label: {
            default: "action.stack-vertical",
            ["context-menu"]: "action.stack-vertical.short"
          },
          icon: "stack-vertical",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("stack-shapes", { operation: "vertical", source });
            editor.markHistoryStoppingPoint("stack-vertical");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.stackShapes(selectedShapeIds, "vertical", 16);
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "stack-horizontal",
          label: {
            default: "action.stack-horizontal",
            ["context-menu"]: "action.stack-horizontal.short"
          },
          icon: "stack-horizontal",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("stack-shapes", { operation: "horizontal", source });
            editor.markHistoryStoppingPoint("stack-horizontal");
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.stackShapes(selectedShapeIds, "horizontal", 16);
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "bring-to-front",
          label: "action.bring-to-front",
          kbd: "]",
          icon: "bring-to-front",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("reorder-shapes", { operation: "toFront", source });
            editor.markHistoryStoppingPoint("bring to front");
            editor.bringToFront(editor.getSelectedShapeIds());
          }
        },
        {
          id: "bring-forward",
          label: "action.bring-forward",
          icon: "bring-forward",
          kbd: "?]",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("reorder-shapes", { operation: "forward", source });
            editor.markHistoryStoppingPoint("bring forward");
            editor.bringForward(editor.getSelectedShapeIds());
          }
        },
        {
          id: "send-backward",
          label: "action.send-backward",
          icon: "send-backward",
          kbd: "?[",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("reorder-shapes", { operation: "backward", source });
            editor.markHistoryStoppingPoint("send backward");
            editor.sendBackward(editor.getSelectedShapeIds());
          }
        },
        {
          id: "send-to-back",
          label: "action.send-to-back",
          icon: "send-to-back",
          kbd: "[",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("reorder-shapes", { operation: "toBack", source });
            editor.markHistoryStoppingPoint("send to back");
            editor.sendToBack(editor.getSelectedShapeIds());
          }
        },
        {
          id: "cut",
          label: "action.cut",
          kbd: "$x",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            editor.markHistoryStoppingPoint("cut");
            helpers.cut(source);
          }
        },
        {
          id: "copy",
          label: "action.copy",
          kbd: "$c",
          readonlyOk: true,
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            helpers.copy(source);
          }
        },
        {
          id: "paste",
          label: "action.paste",
          kbd: "$v",
          onSelect(source) {
            navigator.clipboard?.read().then((clipboardItems) => {
              helpers.paste(
                clipboardItems,
                source,
                source === "context-menu" ? editor.inputs.currentPagePoint : void 0
              );
            }).catch(() => {
              helpers.addToast({
                title: helpers.msg("action.paste-error-title"),
                description: helpers.msg("action.paste-error-description"),
                severity: "error"
              });
            });
          }
        },
        {
          id: "select-all",
          label: "action.select-all",
          kbd: "$a",
          readonlyOk: true,
          onSelect(source) {
            editor.run(() => {
              if (mustGoBackToSelectToolFirst()) return;
              trackEvent("select-all-shapes", { source });
              editor.markHistoryStoppingPoint("select all kbd");
              editor.selectAll();
            });
          }
        },
        {
          id: "select-none",
          label: "action.select-none",
          readonlyOk: true,
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("select-none-shapes", { source });
            editor.markHistoryStoppingPoint("select none");
            editor.selectNone();
          }
        },
        {
          id: "delete",
          label: "action.delete",
          kbd: "\u232B,del,backspace",
          icon: "trash",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("delete-shapes", { source });
            editor.markHistoryStoppingPoint("delete");
            editor.deleteShapes(editor.getSelectedShapeIds());
          }
        },
        {
          id: "rotate-cw",
          label: "action.rotate-cw",
          icon: "rotate-cw",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("rotate-cw", { source });
            editor.markHistoryStoppingPoint("rotate-cw");
            const offset4 = editor.getSelectionRotation() % (HALF_PI / 2);
            const dontUseOffset = approximately(offset4, 0) || approximately(offset4, HALF_PI / 2);
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.rotateShapesBy(selectedShapeIds, HALF_PI / 2 - (dontUseOffset ? 0 : offset4));
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "rotate-ccw",
          label: "action.rotate-ccw",
          icon: "rotate-ccw",
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("rotate-ccw", { source });
            editor.markHistoryStoppingPoint("rotate-ccw");
            const offset4 = editor.getSelectionRotation() % (HALF_PI / 2);
            const offsetCloseToZero = approximately(offset4, 0);
            const selectedShapeIds = editor.getSelectedShapeIds();
            editor.rotateShapesBy(selectedShapeIds, offsetCloseToZero ? -(HALF_PI / 2) : -offset4);
            kickoutOccludedShapes(editor, selectedShapeIds);
          }
        },
        {
          id: "zoom-in",
          label: "action.zoom-in",
          kbd: "$=,=",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("zoom-in", { source });
            editor.zoomIn(void 0, {
              animation: { duration: editor.options.animationMediumMs }
            });
          }
        },
        {
          id: "zoom-out",
          label: "action.zoom-out",
          kbd: "$-,-",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("zoom-out", { source });
            editor.zoomOut(void 0, {
              animation: { duration: editor.options.animationMediumMs }
            });
          }
        },
        {
          id: "zoom-to-100",
          label: "action.zoom-to-100",
          icon: "reset-zoom",
          kbd: "!0",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("reset-zoom", { source });
            editor.resetZoom(void 0, {
              animation: { duration: editor.options.animationMediumMs }
            });
          }
        },
        {
          id: "zoom-to-fit",
          label: "action.zoom-to-fit",
          kbd: "!1",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("zoom-to-fit", { source });
            editor.zoomToFit({ animation: { duration: editor.options.animationMediumMs } });
          }
        },
        {
          id: "zoom-to-selection",
          label: "action.zoom-to-selection",
          kbd: "!2",
          readonlyOk: true,
          onSelect(source) {
            if (!canApplySelectionAction()) return;
            if (mustGoBackToSelectToolFirst()) return;
            trackEvent("zoom-to-selection", { source });
            editor.zoomToSelection({ animation: { duration: editor.options.animationMediumMs } });
          }
        },
        {
          id: "toggle-snap-mode",
          label: {
            default: "action.toggle-snap-mode",
            menu: "action.toggle-snap-mode.menu"
          },
          onSelect(source) {
            trackEvent("toggle-snap-mode", { source });
            editor.user.updateUserPreferences({ isSnapMode: !editor.user.getIsSnapMode() });
          },
          checkbox: true
        },
        {
          id: "toggle-dark-mode",
          label: {
            default: "action.toggle-dark-mode",
            menu: "action.toggle-dark-mode.menu"
          },
          kbd: "$/",
          readonlyOk: true,
          onSelect(source) {
            const value = editor.user.getIsDarkMode() ? "light" : "dark";
            trackEvent("color-scheme", { source, value });
            editor.user.updateUserPreferences({
              colorScheme: value
            });
          },
          checkbox: true
        },
        {
          id: "toggle-wrap-mode",
          label: {
            default: "action.toggle-wrap-mode",
            menu: "action.toggle-wrap-mode.menu"
          },
          readonlyOk: true,
          onSelect(source) {
            trackEvent("toggle-wrap-mode", { source });
            editor.user.updateUserPreferences({
              isWrapMode: !editor.user.getIsWrapMode()
            });
          },
          checkbox: true
        },
        {
          id: "toggle-dynamic-size-mode",
          label: {
            default: "action.toggle-dynamic-size-mode",
            menu: "action.toggle-dynamic-size-mode.menu"
          },
          readonlyOk: false,
          onSelect(source) {
            trackEvent("toggle-dynamic-size-mode", { source });
            editor.user.updateUserPreferences({
              isDynamicSizeMode: !editor.user.getIsDynamicResizeMode()
            });
          },
          checkbox: true
        },
        {
          id: "toggle-paste-at-cursor",
          label: {
            default: "action.toggle-paste-at-cursor",
            menu: "action.toggle-paste-at-cursor.menu"
          },
          readonlyOk: false,
          onSelect(source) {
            trackEvent("toggle-paste-at-cursor", { source });
            editor.user.updateUserPreferences({
              isPasteAtCursorMode: !editor.user.getIsPasteAtCursorMode()
            });
          },
          checkbox: true
        },
        {
          id: "toggle-reduce-motion",
          label: {
            default: "action.toggle-reduce-motion",
            menu: "action.toggle-reduce-motion.menu"
          },
          readonlyOk: true,
          onSelect(source) {
            trackEvent("toggle-reduce-motion", { source });
            editor.user.updateUserPreferences({
              animationSpeed: editor.user.getAnimationSpeed() === 0 ? 1 : 0
            });
          },
          checkbox: true
        },
        {
          id: "toggle-edge-scrolling",
          label: {
            default: "action.toggle-edge-scrolling",
            menu: "action.toggle-edge-scrolling.menu"
          },
          readonlyOk: true,
          onSelect(source) {
            trackEvent("toggle-edge-scrolling", { source });
            editor.user.updateUserPreferences({
              edgeScrollSpeed: editor.user.getEdgeScrollSpeed() === 0 ? 1 : 0
            });
          },
          checkbox: true
        },
        {
          id: "toggle-transparent",
          label: {
            default: "action.toggle-transparent",
            menu: "action.toggle-transparent.menu",
            ["context-menu"]: "action.toggle-transparent.context-menu"
          },
          readonlyOk: true,
          onSelect(source) {
            trackEvent("toggle-transparent", { source });
            editor.updateInstanceState({
              exportBackground: !editor.getInstanceState().exportBackground
            });
          },
          checkbox: true
        },
        {
          id: "toggle-tool-lock",
          label: {
            default: "action.toggle-tool-lock",
            menu: "action.toggle-tool-lock.menu"
          },
          kbd: "q",
          onSelect(source) {
            trackEvent("toggle-tool-lock", { source });
            editor.updateInstanceState({ isToolLocked: !editor.getInstanceState().isToolLocked });
          },
          checkbox: true
        },
        {
          id: "unlock-all",
          label: "action.unlock-all",
          onSelect(source) {
            trackEvent("unlock-all", { source });
            const updates = [];
            for (const shape of editor.getCurrentPageShapes()) {
              if (shape.isLocked) {
                updates.push({ id: shape.id, type: shape.type, isLocked: false });
              }
            }
            if (updates.length > 0) {
              editor.updateShapes(updates);
            }
          }
        },
        {
          id: "toggle-focus-mode",
          label: {
            default: "action.toggle-focus-mode",
            menu: "action.toggle-focus-mode.menu"
          },
          readonlyOk: true,
          kbd: "$.",
          checkbox: true,
          onSelect(source) {
            editor.timers.requestAnimationFrame(() => {
              editor.run(() => {
                trackEvent("toggle-focus-mode", { source });
                helpers.clearDialogs();
                helpers.clearToasts();
                editor.updateInstanceState({ isFocusMode: !editor.getInstanceState().isFocusMode });
              });
            });
          }
        },
        {
          id: "toggle-grid",
          label: {
            default: "action.toggle-grid",
            menu: "action.toggle-grid.menu"
          },
          readonlyOk: true,
          kbd: "$'",
          onSelect(source) {
            trackEvent("toggle-grid-mode", { source });
            editor.updateInstanceState({ isGridMode: !editor.getInstanceState().isGridMode });
          },
          checkbox: true
        },
        {
          id: "toggle-debug-mode",
          label: {
            default: "action.toggle-debug-mode",
            menu: "action.toggle-debug-mode.menu"
          },
          readonlyOk: true,
          onSelect(source) {
            trackEvent("toggle-debug-mode", { source });
            editor.updateInstanceState({
              isDebugMode: !editor.getInstanceState().isDebugMode
            });
          },
          checkbox: true
        },
        {
          id: "print",
          label: "action.print",
          kbd: "$p",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("print", { source });
            helpers.printSelectionOrPages();
          }
        },
        {
          id: "exit-pen-mode",
          label: "action.exit-pen-mode",
          icon: "cross-2",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("exit-pen-mode", { source });
            editor.updateInstanceState({ isPenMode: false });
          }
        },
        {
          id: "stop-following",
          label: "action.stop-following",
          icon: "cross-2",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("stop-following", { source });
            editor.stopFollowingUser();
          }
        },
        {
          id: "back-to-content",
          label: "action.back-to-content",
          icon: "arrow-left",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("zoom-to-content", { source });
            const bounds = editor.getSelectionPageBounds() ?? editor.getCurrentPageBounds();
            if (!bounds) return;
            editor.zoomToBounds(bounds, {
              targetZoom: Math.min(1, editor.getZoomLevel()),
              animation: { duration: 220 }
            });
          }
        },
        {
          id: "toggle-lock",
          label: "action.toggle-lock",
          kbd: "!l",
          onSelect(source) {
            editor.markHistoryStoppingPoint("locking");
            trackEvent("toggle-lock", { source });
            editor.toggleLock(editor.getSelectedShapeIds());
          }
        },
        {
          id: "move-to-new-page",
          label: "context.pages.new-page",
          onSelect(source) {
            const newPageId = PageRecordType.createId();
            const ids = editor.getSelectedShapeIds();
            editor.run(() => {
              editor.markHistoryStoppingPoint("move_shapes_to_page");
              editor.createPage({
                name: helpers.msg("page-menu.new-page-initial-name"),
                id: newPageId
              });
              editor.moveShapesToPage(ids, newPageId);
            });
            trackEvent("move-to-new-page", { source });
          }
        },
        {
          id: "select-white-color",
          label: "color-style.white",
          kbd: "?t",
          onSelect(source) {
            const style = DefaultColorStyle;
            editor.run(() => {
              editor.markHistoryStoppingPoint("change-color");
              if (editor.isIn("select")) {
                editor.setStyleForSelectedShapes(style, "white");
              }
              editor.setStyleForNextShapes(style, "white");
            });
            trackEvent("set-style", { source, id: style.id, value: "white" });
          }
        },
        {
          id: "select-fill-fill",
          label: "fill-style.fill",
          kbd: "?f",
          onSelect(source) {
            const style = DefaultFillStyle;
            editor.run(() => {
              editor.markHistoryStoppingPoint("change-fill");
              if (editor.isIn("select")) {
                editor.setStyleForSelectedShapes(style, "fill");
              }
              editor.setStyleForNextShapes(style, "fill");
            });
            trackEvent("set-style", { source, id: style.id, value: "fill" });
          }
        },
        {
          id: "flatten-to-image",
          label: "action.flatten-to-image",
          kbd: "!f",
          onSelect: async (source) => {
            const ids = editor.getSelectedShapeIds();
            if (ids.length === 0) return;
            editor.markHistoryStoppingPoint("flattening to image");
            trackEvent("flatten-to-image", { source });
            const newShapeIds = await flattenShapesToImages(
              editor,
              ids,
              editor.options.flattenImageBoundsExpand
            );
            if (newShapeIds?.length) {
              editor.setSelectedShapes(newShapeIds);
            }
          }
        }
      ];
      if (showCollaborationUi) {
        actionItems.push({
          id: "open-cursor-chat",
          label: "action.open-cursor-chat",
          readonlyOk: true,
          kbd: "/",
          onSelect(source) {
            trackEvent("open-cursor-chat", { source });
            if (editor.getInstanceState().isCoarsePointer) {
              return;
            }
            editor.timers.requestAnimationFrame(() => {
              editor.updateInstanceState({ isChatting: true });
            });
          }
        });
      }
      const actions2 = makeActions(actionItems);
      if (overrides) {
        return overrides(editor, actions2, helpers);
      }
      return actions2;
    }, [helpers, editor, trackEvent, overrides, defaultDocumentName, showCollaborationUi]);
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ActionsContext.Provider, { value: asActions(actions), children });
  }
  function useActions() {
    const ctx = React52.useContext(ActionsContext);
    if (!ctx) {
      throw new Error("useTools must be used within a ToolProvider");
    }
    return ctx;
  }
  function asActions(actions) {
    return actions;
  }
  function unwrapLabel(label, menuType) {
    return label ? typeof label === "string" ? label : menuType ? label[menuType] ?? label["default"] : void 0 : void 0;
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useReadonly.mjs
  function useReadonly() {
    const editor = useMaybeEditor();
    return useValue("isReadonlyMode", () => !!editor?.getIsReadonly(), [editor]);
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiKbd.mjs
  var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/kbd-utils.mjs
  var cmdKey = tlenv.isDarwin ? "\u2318" : "Ctrl";
  var altKey = tlenv.isDarwin ? "\u2325" : "Alt";
  function kbd(str) {
    if (str === ",") return [","];
    return str.split(",")[0].split("").map((sub) => {
      const subStr = sub.replace(/\$/g, cmdKey).replace(/\?/g, altKey).replace(/!/g, "\u21E7");
      return subStr[0].toUpperCase() + subStr.slice(1);
    });
  }
  function kbdStr(str) {
    return "\u2014 " + kbd(str).join("\u2009");
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiKbd.mjs
  function TldrawUiKbd({ children, visibleOnMobileLayout = false }) {
    const breakpoint = useBreakpoint();
    if (!visibleOnMobileLayout && breakpoint < PORTRAIT_BREAKPOINT.MOBILE) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("kbd", { className: "tlui-kbd", children: kbd(children).map((k, i) => /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("span", { children: k }, i)) });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuContext.mjs
  var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
  var import_react67 = __toESM(require_react(), 1);
  var menuContext = (0, import_react67.createContext)(null);
  function useTldrawUiMenuContext() {
    const context = (0, import_react67.useContext)(menuContext);
    if (!context) {
      throw new Error("useTldrawUiMenuContext must be used within a TldrawUiMenuContextProvider");
    }
    return context;
  }
  function TldrawUiMenuContextProvider({
    type,
    sourceId,
    children
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(menuContext.Provider, { value: { type, sourceId }, children });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuCheckboxItem.mjs
  function TldrawUiMenuCheckboxItem({
    id,
    kbd: kbd2,
    label,
    readonlyOk,
    onSelect,
    toggle = false,
    disabled = false,
    checked = false
  }) {
    const { type: menuType, sourceId } = useTldrawUiMenuContext();
    const isReadonlyMode = useReadonly();
    const msg2 = useTranslation();
    if (isReadonlyMode && !readonlyOk) return null;
    const labelToUse = unwrapLabel(label, menuType);
    const labelStr = labelToUse ? msg2(labelToUse) : void 0;
    switch (menuType) {
      case "menu": {
        return /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(
          CheckboxItem22,
          {
            dir: "ltr",
            className: "tlui-button tlui-button__menu tlui-button__checkbox",
            title: labelStr,
            onSelect: (e) => {
              onSelect?.(sourceId);
              preventDefault(e);
            },
            disabled,
            checked,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
                TldrawUiIcon,
                {
                  small: true,
                  icon: toggle ? checked ? "toggle-on" : "toggle-off" : checked ? "check" : "none"
                }
              ),
              labelStr && /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("span", { className: "tlui-button__label", draggable: false, children: labelStr }),
              kbd2 && /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(TldrawUiKbd, { children: kbd2 })
            ]
          }
        );
      }
      case "context-menu": {
        return /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(
          CheckboxItem2,
          {
            className: "tlui-button tlui-button__menu tlui-button__checkbox",
            dir: "ltr",
            title: labelStr,
            onSelect: (e) => {
              onSelect(sourceId);
              preventDefault(e);
            },
            disabled,
            checked,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
                TldrawUiIcon,
                {
                  small: true,
                  icon: toggle ? checked ? "toggle-on" : "toggle-off" : checked ? "check" : "none"
                }
              ),
              labelStr && /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("span", { className: "tlui-button__label", draggable: false, children: labelStr }),
              kbd2 && /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(TldrawUiKbd, { children: kbd2 })
            ]
          },
          id
        );
      }
      default: {
        return null;
      }
    }
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuGroup.mjs
  var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiDropdownMenu.mjs
  var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
  var import_classnames17 = __toESM(require_classnames(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useMenuIsOpen.mjs
  var import_react68 = __toESM(require_react(), 1);
  function useMenuIsOpen(id, cb) {
    const editor = useMaybeEditor();
    const onChange = (0, import_react68.useCallback)(
      (isOpen) => {
        if (isOpen) {
          editor?.complete();
        }
        cb?.(isOpen);
      },
      [editor, cb]
    );
    const trackEvent = useUiEvents();
    const onEvent = (0, import_react68.useCallback)(
      (eventName) => {
        trackEvent(eventName, { source: "unknown", id });
      },
      [id, trackEvent]
    );
    return useGlobalMenuIsOpen(editor ? `${id}-${editor.contextId}` : id, onChange, onEvent);
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiDropdownMenu.mjs
  function TldrawUiDropdownMenuRoot({
    id,
    children,
    modal = false,
    debugOpen = false
  }) {
    const [open, onOpenChange] = useMenuIsOpen(id);
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
      Root24,
      {
        open: debugOpen || open,
        dir: "ltr",
        modal,
        onOpenChange,
        children
      }
    );
  }
  function TldrawUiDropdownMenuTrigger({ children, ...rest }) {
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
      Trigger2,
      {
        dir: "ltr",
        asChild: true,
        onTouchEnd: (e) => preventDefault(e),
        ...rest,
        children
      }
    );
  }
  function TldrawUiDropdownMenuContent({
    className,
    side = "bottom",
    align = "start",
    sideOffset = 8,
    alignOffset = 8,
    children
  }) {
    const container = useContainer();
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Portal23, { container, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
      Content23,
      {
        className: (0, import_classnames17.default)("tlui-menu", className),
        side,
        sideOffset,
        align,
        alignOffset,
        collisionPadding: 4,
        children
      }
    ) });
  }
  function TldrawUiDropdownMenuSub({ id, children }) {
    const [open, onOpenChange] = useMenuIsOpen(id);
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Sub2, { open, onOpenChange, children });
  }
  function TldrawUiDropdownMenuSubTrigger({
    id,
    label,
    title,
    disabled
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(SubTrigger2, { dir: "ltr", asChild: true, disabled, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(
      TldrawUiButton,
      {
        "data-testid": id,
        type: "menu",
        className: "tlui-menu__submenu__trigger",
        disabled,
        title,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TldrawUiButtonLabel, { children: label }),
          /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(TldrawUiButtonIcon, { icon: "chevron-right", small: true })
        ]
      }
    ) });
  }
  function TldrawUiDropdownMenuSubContent({
    id,
    alignOffset = -1,
    sideOffset = -6,
    size: size4 = "small",
    children
  }) {
    const container = useContainer();
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Portal23, { container, children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
      SubContent2,
      {
        "data-testid": id,
        className: "tlui-menu tlui-menu__submenu__content",
        alignOffset,
        sideOffset,
        collisionPadding: 4,
        "data-size": size4,
        children
      }
    ) });
  }
  function TldrawUiDropdownMenuGroup({ children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Group2, { dir: "ltr", className: "tlui-menu__group", children });
  }
  function TldrawUiDropdownMenuItem({ noClose, children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(Item22, { dir: "ltr", asChild: true, onClick: noClose ? preventDefault : void 0, children });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuGroup.mjs
  function TldrawUiMenuGroup({ id, label, children }) {
    const { type: menuType, sourceId } = useTldrawUiMenuContext();
    const msg2 = useTranslation();
    const labelToUse = unwrapLabel(label, menuType);
    const labelStr = labelToUse ? msg2(labelToUse) : void 0;
    switch (menuType) {
      case "panel": {
        return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("div", { className: "tlui-menu__group", "data-testid": `${sourceId}-group.${id}`, children });
      }
      case "menu": {
        return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(TldrawUiDropdownMenuGroup, { "data-testid": `${sourceId}-group.${id}`, children });
      }
      case "context-menu": {
        return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
          ContextMenuGroup,
          {
            dir: "ltr",
            className: "tlui-menu__group",
            "data-testid": `${sourceId}-group.${id}`,
            children
          }
        );
      }
      case "keyboard-shortcuts": {
        return /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { className: "tlui-shortcuts-dialog__group", "data-testid": `${sourceId}-group.${id}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("h2", { className: "tlui-shortcuts-dialog__group__title", children: labelStr }),
          /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("div", { className: "tlui-shortcuts-dialog__group__content", children })
        ] });
      }
      default: {
        return children;
      }
    }
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuSubmenu.mjs
  var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
  function TldrawUiMenuSubmenu({
    id,
    disabled = false,
    label,
    size: size4 = "small",
    children
  }) {
    const { type: menuType, sourceId } = useTldrawUiMenuContext();
    const container = useContainer();
    const msg2 = useTranslation();
    const labelToUse = label ? typeof label === "string" ? label : label[menuType] ?? label["default"] : void 0;
    const labelStr = labelToUse ? msg2(labelToUse) : void 0;
    switch (menuType) {
      case "menu": {
        return /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(TldrawUiDropdownMenuSub, { id: `${sourceId}-sub.${id}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
            TldrawUiDropdownMenuSubTrigger,
            {
              id: `${sourceId}-sub.${id}-button`,
              disabled,
              label: labelStr,
              title: labelStr
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(TldrawUiDropdownMenuSubContent, { id: `${sourceId}-sub.${id}-content`, size: size4, children })
        ] });
      }
      case "context-menu": {
        if (disabled) return null;
        return /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(ContextMenuSubWithMenu, { id: `${sourceId}-sub.${id}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(ContextMenuSubTrigger, { dir: "ltr", disabled, asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(
            TldrawUiButton,
            {
              "data-testid": `${sourceId}-sub.${id}-button`,
              type: "menu",
              className: "tlui-menu__submenu__trigger",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(TldrawUiButtonLabel, { children: labelStr }),
                /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(TldrawUiButtonIcon, { icon: "chevron-right", small: true })
              ]
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(ContextMenuPortal, { container, children: /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
            ContextMenuSubContent,
            {
              "data-testid": `${sourceId}-sub.${id}-content`,
              className: "tlui-menu tlui-menu__submenu__content",
              alignOffset: -1,
              sideOffset: -4,
              collisionPadding: 4,
              "data-size": size4,
              children
            }
          ) })
        ] });
      }
      default: {
        return children;
      }
    }
  }
  function ContextMenuSubWithMenu({ id, children }) {
    const [open, onOpenChange] = useMenuIsOpen(id);
    return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(ContextMenuSub, { open, onOpenChange, children });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/ColorSchemeMenu.mjs
  var COLOR_SCHEMES = [
    { colorScheme: "light", label: "theme.light" },
    { colorScheme: "dark", label: "theme.dark" },
    { colorScheme: "system", label: "theme.system" }
  ];
  function ColorSchemeMenu() {
    const editor = useEditor();
    const trackEvent = useUiEvents();
    const currentColorScheme = useValue(
      "colorScheme",
      () => editor.user.getUserPreferences().colorScheme ?? (editor.user.getIsDarkMode() ? "dark" : "light"),
      [editor]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(TldrawUiMenuSubmenu, { id: "help menu color-scheme", label: "menu.theme", children: /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(TldrawUiMenuGroup, { id: "theme", children: COLOR_SCHEMES.map(({ colorScheme, label }) => /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
      TldrawUiMenuCheckboxItem,
      {
        id: `color-scheme-${colorScheme}`,
        label,
        checked: colorScheme === currentColorScheme,
        readonlyOk: true,
        onSelect: () => {
          editor.user.updateUserPreferences({ colorScheme });
          trackEvent("color-scheme", { source: "menu", value: colorScheme });
        }
      },
      colorScheme
    )) }) });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/Dialogs.mjs
  var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
  var import_react69 = __toESM(require_react(), 1);
  var TldrawUiDialog = ({ id, component: ModalContent, onClose }) => {
    const { removeDialog } = useDialogs();
    const container = useContainer();
    const handleOpenChange = (0, import_react69.useCallback)(
      (isOpen) => {
        if (!isOpen) {
          if (onClose) {
            try {
              onClose();
            } catch (err) {
              console.warn(err);
            }
          }
          removeDialog(id);
        }
      },
      [id, onClose, removeDialog]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(Root4, { onOpenChange: handleOpenChange, defaultOpen: true, children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(Portal3, { container, children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
      Overlay,
      {
        dir: "ltr",
        className: "tlui-dialog__overlay",
        onClick: (e) => {
          if (e.target === e.currentTarget) handleOpenChange(false);
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(Content3, { dir: "ltr", className: "tlui-dialog__content", "aria-describedby": void 0, children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(ModalContent, { onClose: () => handleOpenChange(false) }) })
      }
    ) }) });
  };
  var TldrawUiDialogs = (0, import_react69.memo)(function TldrawUiDialogs2() {
    const { dialogs } = useDialogs();
    const dialogsArray = useValue("dialogs", () => dialogs.get(), [dialogs]);
    return dialogsArray.map((dialog) => /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(TldrawUiDialog, { ...dialog }, dialog.id));
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/Toasts.mjs
  var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
  var import_react70 = __toESM(require_react(), 1);
  var DEFAULT_TOAST_DURATION = 4e3;
  var SEVERITY_TO_ICON = {
    success: "check-circle",
    warning: "warning-triangle",
    error: "cross-circle",
    info: "info-circle"
  };
  function TldrawUiToast({ toast }) {
    const { removeToast } = useToasts();
    const msg2 = useTranslation();
    const onOpenChange = (isOpen) => {
      if (!isOpen) {
        removeToast(toast.id);
      }
    };
    const hasActions = toast.actions && toast.actions.length > 0;
    const icon = toast.icon || toast.severity && SEVERITY_TO_ICON[toast.severity];
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(
      Root25,
      {
        onOpenChange,
        className: "tlui-toast__container",
        duration: toast.keepOpen ? Infinity : DEFAULT_TOAST_DURATION,
        "data-severity": toast.severity,
        children: [
          icon && /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("div", { className: "tlui-toast__icon", children: /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(TldrawUiIcon, { icon }) }),
          /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(
            "div",
            {
              className: "tlui-toast__main",
              "data-title": !!toast.title,
              "data-description": !!toast.description,
              "data-actions": !!toast.actions,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "tlui-toast__content", children: [
                  toast.title && /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(Title, { className: "tlui-toast__title", children: toast.title }),
                  toast.description && /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(Description, { className: "tlui-toast__description", children: toast.description })
                ] }),
                toast.actions && /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: "tlui-toast__actions", children: [
                  toast.actions.map((action, i) => /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(Action, { altText: action.label, asChild: true, onClick: action.onClick, children: /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(TldrawUiButton, { type: action.type, children: /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(TldrawUiButtonLabel, { children: action.label }) }) }, i)),
                  /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(Close, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
                    TldrawUiButton,
                    {
                      type: "normal",
                      className: "tlui-toast__close",
                      style: { marginLeft: "auto" },
                      children: /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(TldrawUiButtonLabel, { children: toast.closeLabel ?? msg2("toast.close") })
                    }
                  ) })
                ] })
              ]
            }
          ),
          !hasActions && /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(Close, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(TldrawUiButton, { type: "normal", className: "tlui-toast__close", children: /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(TldrawUiButtonLabel, { children: toast.closeLabel ?? msg2("toast.close") }) }) })
        ]
      }
    );
  }
  var TldrawUiToasts = (0, import_react70.memo)(function TldrawUiToasts2() {
    const { toasts } = useToasts();
    const toastsArray = useValue("toasts", () => toasts.get(), []);
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(import_jsx_runtime78.Fragment, { children: [
      toastsArray.map((toast) => /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(TldrawUiToast, { toast }, toast.id)),
      /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(ToastViewport, { className: "tlui-toast__viewport" })
    ] });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuActionCheckboxItem.mjs
  var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
  function TldrawUiMenuActionCheckboxItem({
    actionId = "",
    ...rest
  }) {
    const actions = useActions();
    const action = actions[actionId];
    if (!action) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(TldrawUiMenuCheckboxItem, { ...action, ...rest });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuActionItem.mjs
  var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuItem.mjs
  var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
  var import_react71 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/Spinner.mjs
  var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
  function Spinner(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("svg", { width: 16, height: 16, viewBox: "0 0 16 16", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("g", { strokeWidth: 2, fill: "none", fillRule: "evenodd", children: [
      /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("circle", { strokeOpacity: 0.25, cx: 8, cy: 8, r: 7, stroke: "currentColor" }),
      /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("path", { strokeLinecap: "round", d: "M15 8c0-4.5-4.5-7-7-7", stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(
        "animateTransform",
        {
          attributeName: "transform",
          type: "rotate",
          from: "0 8 8",
          to: "360 8 8",
          dur: "1s",
          repeatCount: "indefinite"
        }
      ) })
    ] }) });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuItem.mjs
  function TldrawUiMenuItem({
    disabled = false,
    spinner = false,
    readonlyOk = false,
    id,
    kbd: kbd2,
    label,
    icon,
    onSelect,
    noClose,
    isSelected
  }) {
    const { type: menuType, sourceId } = useTldrawUiMenuContext();
    const msg2 = useTranslation();
    const [disableClicks, setDisableClicks] = (0, import_react71.useState)(false);
    const isReadonlyMode = useReadonly();
    if (isReadonlyMode && !readonlyOk) return null;
    const labelToUse = unwrapLabel(label, menuType);
    const kbdTouse = kbd2 ? kbdStr(kbd2) : void 0;
    const labelStr = labelToUse ? msg2(labelToUse) : void 0;
    const titleStr = labelStr && kbdTouse ? `${labelStr} ${kbdTouse}` : labelStr;
    switch (menuType) {
      case "menu": {
        return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiDropdownMenuItem, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(
          TldrawUiButton,
          {
            type: "menu",
            "data-testid": `${sourceId}.${id}`,
            disabled,
            title: titleStr,
            onClick: (e) => {
              if (noClose) {
                preventDefault(e);
              }
              if (disableClicks) {
                setDisableClicks(false);
              } else {
                onSelect(sourceId);
              }
            },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiButtonLabel, { children: labelStr }),
              kbd2 && /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiKbd, { children: kbd2 })
            ]
          }
        ) });
      }
      case "context-menu": {
        if (disabled) return null;
        return /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(
          ContextMenuItem,
          {
            dir: "ltr",
            title: titleStr,
            draggable: false,
            className: "tlui-button tlui-button__menu",
            "data-testid": `${sourceId}.${id}`,
            onSelect: (e) => {
              if (noClose) preventDefault(e);
              if (disableClicks) {
                setDisableClicks(false);
              } else {
                onSelect(sourceId);
              }
            },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("span", { className: "tlui-button__label", draggable: false, children: labelStr }),
              kbd2 && /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiKbd, { children: kbd2 }),
              spinner && /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Spinner, {})
            ]
          }
        );
      }
      case "panel": {
        return /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(
          TldrawUiButton,
          {
            "data-testid": `${sourceId}.${id}`,
            type: "menu",
            title: titleStr,
            disabled,
            onClick: () => onSelect(sourceId),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiButtonLabel, { children: labelStr }),
              spinner ? /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Spinner, {}) : icon && /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiButtonIcon, { icon })
            ]
          }
        );
      }
      case "small-icons":
      case "icons": {
        return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
          TldrawUiButton,
          {
            "data-testid": `${sourceId}.${id}`,
            type: "icon",
            title: titleStr,
            disabled,
            onClick: () => onSelect(sourceId),
            children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiButtonIcon, { icon, small: menuType === "small-icons" })
          }
        );
      }
      case "keyboard-shortcuts": {
        if (!kbd2) {
          console.warn(
            `Menu item '${label}' isn't shown in the keyboard shortcuts dialog because it doesn't have a keyboard shortcut.`
          );
          return null;
        }
        return /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)("div", { className: "tlui-shortcuts-dialog__key-pair", "data-testid": `${sourceId}.${id}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("div", { className: "tlui-shortcuts-dialog__key-pair__key", children: labelStr }),
          /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("div", { className: "tlui-shortcuts-dialog__key-pair__value", children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiKbd, { visibleOnMobileLayout: true, children: kbd2 }) })
        ] });
      }
      case "helper-buttons": {
        return /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(TldrawUiButton, { type: "low", onClick: () => onSelect(sourceId), children: [
          /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiButtonIcon, { icon }),
          /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiButtonLabel, { children: labelStr })
        ] });
      }
      case "toolbar": {
        return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
          TldrawUiButton,
          {
            type: "tool",
            "data-testid": `tools.${id}`,
            "aria-label": labelToUse,
            "data-value": id,
            onClick: () => onSelect("toolbar"),
            title: titleStr,
            disabled,
            onTouchStart: (e) => {
              preventDefault(e);
              onSelect("toolbar");
            },
            role: "radio",
            "aria-checked": isSelected ? "true" : "false",
            children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiButtonIcon, { icon })
          }
        );
      }
      case "toolbar-overflow": {
        return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiDropdownMenuItem, { "aria-label": label, children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
          TldrawUiButton,
          {
            type: "icon",
            className: "tlui-button-grid__button",
            onClick: () => {
              onSelect("toolbar");
            },
            "data-testid": `tools.more.${id}`,
            title: titleStr,
            disabled,
            role: "radio",
            "aria-checked": isSelected ? "true" : "false",
            "data-value": id,
            children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TldrawUiButtonIcon, { icon })
          }
        ) });
      }
      default: {
        throw exhaustiveSwitchError(menuType);
      }
    }
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuActionItem.mjs
  function TldrawUiMenuActionItem({ actionId = "", ...rest }) {
    const actions = useActions();
    const action = actions[actionId];
    if (!action) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(TldrawUiMenuItem, { ...action, ...rest });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuToolItem.mjs
  var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useTools.mjs
  var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
  var React53 = __toESM(require_react(), 1);
  var ToolsContext = React53.createContext(null);
  function ToolsProvider({ overrides, children }) {
    const editor = useEditor();
    const trackEvent = useUiEvents();
    const helpers = useDefaultHelpers();
    const tools = React53.useMemo(() => {
      const toolsArray = [
        {
          id: "select",
          label: "tool.select",
          icon: "tool-pointer",
          kbd: "v",
          readonlyOk: true,
          onSelect(source) {
            if (editor.isIn("select")) {
              const currentNode = editor.root.getCurrent();
              currentNode.exit({}, currentNode.id);
              currentNode.enter({}, currentNode.id);
            }
            editor.setCurrentTool("select");
            trackEvent("select-tool", { source, id: "select" });
          }
        },
        {
          id: "hand",
          label: "tool.hand",
          icon: "tool-hand",
          kbd: "h",
          readonlyOk: true,
          onSelect(source) {
            editor.setCurrentTool("hand");
            trackEvent("select-tool", { source, id: "hand" });
          }
        },
        {
          id: "eraser",
          label: "tool.eraser",
          icon: "tool-eraser",
          kbd: "e",
          onSelect(source) {
            editor.setCurrentTool("eraser");
            trackEvent("select-tool", { source, id: "eraser" });
          }
        },
        {
          id: "draw",
          label: "tool.draw",
          icon: "tool-pencil",
          kbd: "d,b,x",
          onSelect(source) {
            editor.setCurrentTool("draw");
            trackEvent("select-tool", { source, id: "draw" });
          }
        },
        ...[...GeoShapeGeoStyle.values].map((id) => ({
          id,
          label: `tool.${id}`,
          meta: {
            geo: id
          },
          kbd: id === "rectangle" ? "r" : id === "ellipse" ? "o" : void 0,
          icon: "geo-" + id,
          onSelect(source) {
            editor.run(() => {
              editor.setStyleForNextShapes(GeoShapeGeoStyle, id);
              editor.setCurrentTool("geo");
              trackEvent("select-tool", { source, id: `geo-${id}` });
            });
          }
        })),
        {
          id: "arrow",
          label: "tool.arrow",
          icon: "tool-arrow",
          kbd: "a",
          onSelect(source) {
            editor.setCurrentTool("arrow");
            trackEvent("select-tool", { source, id: "arrow" });
          }
        },
        {
          id: "line",
          label: "tool.line",
          icon: "tool-line",
          kbd: "l",
          onSelect(source) {
            editor.setCurrentTool("line");
            trackEvent("select-tool", { source, id: "line" });
          }
        },
        {
          id: "frame",
          label: "tool.frame",
          icon: "tool-frame",
          kbd: "f",
          onSelect(source) {
            editor.setCurrentTool("frame");
            trackEvent("select-tool", { source, id: "frame" });
          }
        },
        {
          id: "text",
          label: "tool.text",
          icon: "tool-text",
          kbd: "t",
          onSelect(source) {
            editor.setCurrentTool("text");
            trackEvent("select-tool", { source, id: "text" });
          }
        },
        {
          id: "asset",
          label: "tool.asset",
          icon: "tool-media",
          kbd: "$u",
          onSelect(source) {
            helpers.insertMedia();
            trackEvent("select-tool", { source, id: "media" });
          }
        },
        {
          id: "note",
          label: "tool.note",
          icon: "tool-note",
          kbd: "n",
          onSelect(source) {
            editor.setCurrentTool("note");
            trackEvent("select-tool", { source, id: "note" });
          }
        },
        {
          id: "laser",
          label: "tool.laser",
          readonlyOk: true,
          icon: "tool-laser",
          kbd: "k",
          onSelect(source) {
            editor.setCurrentTool("laser");
            trackEvent("select-tool", { source, id: "laser" });
          }
        },
        {
          id: "embed",
          label: "tool.embed",
          icon: "dot",
          onSelect(source) {
            helpers.addDialog({ component: EmbedDialog });
            trackEvent("select-tool", { source, id: "embed" });
          }
        },
        {
          id: "highlight",
          label: "tool.highlight",
          icon: "tool-highlight",
          // TODO: pick a better shortcut
          kbd: "!d",
          onSelect(source) {
            editor.setCurrentTool("highlight");
            trackEvent("select-tool", { source, id: "highlight" });
          }
        }
      ];
      toolsArray.push();
      const tools2 = Object.fromEntries(toolsArray.map((t2) => [t2.id, t2]));
      if (overrides) {
        return overrides(editor, tools2, helpers);
      }
      return tools2;
    }, [overrides, editor, trackEvent, helpers]);
    return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(ToolsContext.Provider, { value: tools, children });
  }
  function useTools() {
    const ctx = React53.useContext(ToolsContext);
    if (!ctx) {
      throw new Error("useTools must be used within a ToolProvider");
    }
    return ctx;
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuToolItem.mjs
  function TldrawUiMenuToolItem({ toolId = "", ...rest }) {
    const tools = useTools();
    const tool = tools[toolId];
    if (!tool) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(TldrawUiMenuItem, { ...tool, ...rest });
  }

  // node_modules/tldraw/dist-esm/lib/Tldraw.mjs
  var import_jsx_runtime173 = __toESM(require_jsx_runtime(), 1);
  var import_react121 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/canvas/TldrawHandles.mjs
  var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);
  function TldrawHandles({ children }) {
    const editor = useEditor();
    const shouldDisplayHandles = useValue(
      "shouldDisplayHandles",
      () => {
        if (editor.isInAny("select.idle", "select.pointing_handle", "select.pointing_shape")) {
          return true;
        }
        if (editor.isInAny("select.editing_shape")) {
          const onlySelectedShape = editor.getOnlySelectedShape();
          return onlySelectedShape && editor.isShapeOfType(onlySelectedShape, "note");
        }
        return false;
      },
      [editor]
    );
    if (!shouldDisplayHandles) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("svg", { className: "tl-user-handles tl-overlays__item", children });
  }

  // node_modules/tldraw/dist-esm/lib/canvas/TldrawScribble.mjs
  var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
  var import_classnames18 = __toESM(require_classnames(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/getStrokeOutlinePoints.mjs
  var { PI: PI3 } = Math;
  var FIXED_PI = PI3 + 1e-4;
  function getStrokeOutlineTracks(strokePoints, options = {}) {
    const { size: size4 = 16, smoothing = 0.5 } = options;
    if (strokePoints.length === 0 || size4 <= 0) {
      return { left: [], right: [] };
    }
    const firstStrokePoint = strokePoints[0];
    const lastStrokePoint = strokePoints[strokePoints.length - 1];
    const totalLength = lastStrokePoint.runningLength;
    const minDistance = Math.pow(size4 * smoothing, 2);
    const leftPts = [];
    const rightPts = [];
    let prevVector = strokePoints[0].vector;
    let pl = strokePoints[0].point;
    let pr = pl;
    let tl = pl;
    let tr = pr;
    let isPrevPointSharpCorner = false;
    let strokePoint;
    for (let i = 0; i < strokePoints.length; i++) {
      strokePoint = strokePoints[i];
      const { point, vector } = strokePoints[i];
      const prevDpr = strokePoint.vector.dpr(prevVector);
      const nextVector = (i < strokePoints.length - 1 ? strokePoints[i + 1] : strokePoints[i]).vector;
      const nextDpr = i < strokePoints.length - 1 ? nextVector.dpr(strokePoint.vector) : 1;
      const isPointSharpCorner = prevDpr < 0 && !isPrevPointSharpCorner;
      const isNextPointSharpCorner = nextDpr !== null && nextDpr < 0.2;
      if (isPointSharpCorner || isNextPointSharpCorner) {
        if (nextDpr > -0.62 && totalLength - strokePoint.runningLength > strokePoint.radius) {
          const offset22 = prevVector.clone().mul(strokePoint.radius);
          const cpr = prevVector.clone().cpr(nextVector);
          if (cpr < 0) {
            tl = Vec.Add(point, offset22);
            tr = Vec.Sub(point, offset22);
          } else {
            tl = Vec.Sub(point, offset22);
            tr = Vec.Add(point, offset22);
          }
          leftPts.push(tl);
          rightPts.push(tr);
        } else {
          const offset22 = prevVector.clone().mul(strokePoint.radius).per();
          const start = Vec.Sub(strokePoint.input, offset22);
          for (let step = 1 / 13, t2 = 0; t2 < 1; t2 += step) {
            tl = Vec.RotWith(start, strokePoint.input, FIXED_PI * t2);
            leftPts.push(tl);
            tr = Vec.RotWith(start, strokePoint.input, FIXED_PI + FIXED_PI * -t2);
            rightPts.push(tr);
          }
        }
        pl = tl;
        pr = tr;
        if (isNextPointSharpCorner) {
          isPrevPointSharpCorner = true;
        }
        continue;
      }
      isPrevPointSharpCorner = false;
      if (strokePoint === firstStrokePoint || strokePoint === lastStrokePoint) {
        const offset22 = Vec.Per(vector).mul(strokePoint.radius);
        leftPts.push(Vec.Sub(point, offset22));
        rightPts.push(Vec.Add(point, offset22));
        continue;
      }
      const offset4 = Vec.Lrp(nextVector, vector, nextDpr).per().mul(strokePoint.radius);
      tl = Vec.Sub(point, offset4);
      if (i <= 1 || Vec.Dist2(pl, tl) > minDistance) {
        leftPts.push(tl);
        pl = tl;
      }
      tr = Vec.Add(point, offset4);
      if (i <= 1 || Vec.Dist2(pr, tr) > minDistance) {
        rightPts.push(tr);
        pr = tr;
      }
      prevVector = vector;
      continue;
    }
    return {
      left: leftPts,
      right: rightPts
    };
  }
  function getStrokeOutlinePoints(strokePoints, options = {}) {
    const { size: size4 = 16, start = {}, end = {}, last: isComplete = false } = options;
    const { cap: capStart = true } = start;
    const { cap: capEnd = true } = end;
    if (strokePoints.length === 0 || size4 <= 0) {
      return [];
    }
    const firstStrokePoint = strokePoints[0];
    const lastStrokePoint = strokePoints[strokePoints.length - 1];
    const totalLength = lastStrokePoint.runningLength;
    const taperStart = start.taper === false ? 0 : start.taper === true ? Math.max(size4, totalLength) : start.taper;
    const taperEnd = end.taper === false ? 0 : end.taper === true ? Math.max(size4, totalLength) : end.taper;
    const { left: leftPts, right: rightPts } = getStrokeOutlineTracks(strokePoints, options);
    const firstPoint = firstStrokePoint.point;
    const lastPoint = strokePoints.length > 1 ? strokePoints[strokePoints.length - 1].point : Vec.AddXY(firstStrokePoint.point, 1, 1);
    if (strokePoints.length === 1) {
      if (!(taperStart || taperEnd) || isComplete) {
        const start2 = Vec.Add(
          firstPoint,
          Vec.Sub(firstPoint, lastPoint).uni().per().mul(-firstStrokePoint.radius)
        );
        const dotPts = [];
        for (let step = 1 / 13, t2 = step; t2 <= 1; t2 += step) {
          dotPts.push(Vec.RotWith(start2, firstPoint, FIXED_PI * 2 * t2));
        }
        return dotPts;
      }
    }
    const startCap = [];
    if (taperStart || taperEnd && strokePoints.length === 1) {
    } else if (capStart) {
      for (let step = 1 / 8, t2 = step; t2 <= 1; t2 += step) {
        const pt = Vec.RotWith(rightPts[0], firstPoint, FIXED_PI * t2);
        startCap.push(pt);
      }
    } else {
      const cornersVector = Vec.Sub(leftPts[0], rightPts[0]);
      const offsetA = Vec.Mul(cornersVector, 0.5);
      const offsetB = Vec.Mul(cornersVector, 0.51);
      startCap.push(
        Vec.Sub(firstPoint, offsetA),
        Vec.Sub(firstPoint, offsetB),
        Vec.Add(firstPoint, offsetB),
        Vec.Add(firstPoint, offsetA)
      );
    }
    const endCap = [];
    const direction = lastStrokePoint.vector.clone().per().neg();
    if (taperEnd || taperStart && strokePoints.length === 1) {
      endCap.push(lastPoint);
    } else if (capEnd) {
      const start2 = Vec.Add(lastPoint, Vec.Mul(direction, lastStrokePoint.radius));
      for (let step = 1 / 29, t2 = step; t2 < 1; t2 += step) {
        endCap.push(Vec.RotWith(start2, lastPoint, FIXED_PI * 3 * t2));
      }
    } else {
      endCap.push(
        Vec.Add(lastPoint, Vec.Mul(direction, lastStrokePoint.radius)),
        Vec.Add(lastPoint, Vec.Mul(direction, lastStrokePoint.radius * 0.99)),
        Vec.Sub(lastPoint, Vec.Mul(direction, lastStrokePoint.radius * 0.99)),
        Vec.Sub(lastPoint, Vec.Mul(direction, lastStrokePoint.radius))
      );
    }
    return leftPts.concat(endCap, rightPts.reverse(), startCap);
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/getStrokePoints.mjs
  var MIN_START_PRESSURE = 0.025;
  var MIN_END_PRESSURE = 0.01;
  function getStrokePoints(rawInputPoints, options = {}) {
    const { streamline = 0.5, size: size4 = 16, simulatePressure = false } = options;
    if (rawInputPoints.length === 0) return [];
    const t2 = 0.15 + (1 - streamline) * 0.85;
    let pts = rawInputPoints.map(Vec.From);
    let pointsRemovedFromNearEnd = 0;
    if (!simulatePressure) {
      let pt2 = pts[0];
      while (pt2) {
        if (pt2.z >= MIN_START_PRESSURE) break;
        pts.shift();
        pt2 = pts[0];
      }
    }
    if (!simulatePressure) {
      let pt2 = pts[pts.length - 1];
      while (pt2) {
        if (pt2.z >= MIN_END_PRESSURE) break;
        pts.pop();
        pt2 = pts[pts.length - 1];
      }
    }
    if (pts.length === 0)
      return [
        {
          point: Vec.From(rawInputPoints[0]),
          input: Vec.From(rawInputPoints[0]),
          pressure: simulatePressure ? 0.5 : 0.15,
          vector: new Vec(1, 1),
          distance: 0,
          runningLength: 0,
          radius: 1
        }
      ];
    let pt = pts[1];
    while (pt) {
      if (Vec.Dist2(pt, pts[0]) > (size4 / 3) ** 2) break;
      pts[0].z = Math.max(pts[0].z, pt.z);
      pts.splice(1, 1);
      pt = pts[1];
    }
    const last3 = pts.pop();
    pt = pts[pts.length - 1];
    while (pt) {
      if (Vec.Dist2(pt, last3) > (size4 / 3) ** 2) break;
      pts.pop();
      pt = pts[pts.length - 1];
      pointsRemovedFromNearEnd++;
    }
    pts.push(last3);
    const isComplete = options.last || !options.simulatePressure || pts.length > 1 && Vec.Dist2(pts[pts.length - 1], pts[pts.length - 2]) < size4 ** 2 || pointsRemovedFromNearEnd > 0;
    if (pts.length === 2 && options.simulatePressure) {
      const last22 = pts[1];
      pts = pts.slice(0, -1);
      for (let i = 1; i < 5; i++) {
        const next = Vec.Lrp(pts[0], last22, i / 4);
        next.z = (pts[0].z + (last22.z - pts[0].z)) * i / 4;
        pts.push(next);
      }
    }
    const strokePoints = [
      {
        point: pts[0],
        input: pts[0],
        pressure: simulatePressure ? 0.5 : pts[0].z,
        vector: new Vec(1, 1),
        distance: 0,
        runningLength: 0,
        radius: 1
      }
    ];
    let totalLength = 0;
    let prev = strokePoints[0];
    let point, distance;
    if (isComplete && streamline > 0) {
      pts.push(pts[pts.length - 1].clone());
    }
    for (let i = 1, n = pts.length; i < n; i++) {
      point = !t2 || options.last && i === n - 1 ? pts[i].clone() : pts[i].clone().lrp(prev.point, 1 - t2);
      if (prev.point.equals(point)) continue;
      distance = Vec.Dist(point, prev.point);
      totalLength += distance;
      if (i < 4 && totalLength < size4) {
        continue;
      }
      prev = {
        input: pts[i],
        // The adjusted point
        point,
        // The input pressure (or .5 if not specified)
        pressure: simulatePressure ? 0.5 : pts[i].z,
        // The vector from the current point to the previous point
        vector: Vec.Sub(prev.point, point).uni(),
        // The distance between the current point and the previous point
        distance,
        // The total distance so far
        runningLength: totalLength,
        // The stroke point's radius
        radius: 1
      };
      strokePoints.push(prev);
    }
    if (strokePoints[1]?.vector) {
      strokePoints[0].vector = strokePoints[1].vector.clone();
    }
    if (totalLength < 1) {
      const maxPressureAmongPoints = Math.max(0.5, ...strokePoints.map((s) => s.pressure));
      strokePoints.forEach((s) => s.pressure = maxPressureAmongPoints);
    }
    return strokePoints;
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/setStrokePointRadii.mjs
  var { min: min2 } = Math;
  var RATE_OF_PRESSURE_CHANGE = 0.275;
  function setStrokePointRadii(strokePoints, options) {
    const {
      size: size4 = 16,
      thinning = 0.5,
      simulatePressure = true,
      easing = (t2) => t2,
      start = {},
      end = {}
    } = options;
    const { easing: taperStartEase = EASINGS.easeOutQuad } = start;
    const { easing: taperEndEase = EASINGS.easeOutCubic } = end;
    const totalLength = strokePoints[strokePoints.length - 1].runningLength;
    let firstRadius;
    let prevPressure = strokePoints[0].pressure;
    let strokePoint;
    if (!simulatePressure && totalLength < size4) {
      const max2 = strokePoints.reduce((max22, curr) => Math.max(max22, curr.pressure), 0.5);
      strokePoints.forEach((sp) => {
        sp.pressure = max2;
        sp.radius = size4 * easing(0.5 - thinning * (0.5 - sp.pressure));
      });
      return strokePoints;
    } else {
      let p;
      for (let i = 0, n = strokePoints.length; i < n; i++) {
        strokePoint = strokePoints[i];
        if (strokePoint.runningLength > size4 * 5) break;
        const sp = min2(1, strokePoint.distance / size4);
        if (simulatePressure) {
          const rp = min2(1, 1 - sp);
          p = min2(1, prevPressure + (rp - prevPressure) * (sp * RATE_OF_PRESSURE_CHANGE));
        } else {
          p = min2(1, prevPressure + (strokePoint.pressure - prevPressure) * 0.5);
        }
        prevPressure = prevPressure + (p - prevPressure) * 0.5;
      }
      for (let i = 0; i < strokePoints.length; i++) {
        strokePoint = strokePoints[i];
        if (thinning) {
          let { pressure } = strokePoint;
          const sp = min2(1, strokePoint.distance / size4);
          if (simulatePressure) {
            const rp = min2(1, 1 - sp);
            pressure = min2(1, prevPressure + (rp - prevPressure) * (sp * RATE_OF_PRESSURE_CHANGE));
          } else {
            pressure = min2(
              1,
              prevPressure + (pressure - prevPressure) * (sp * RATE_OF_PRESSURE_CHANGE)
            );
          }
          strokePoint.radius = size4 * easing(0.5 - thinning * (0.5 - pressure));
          prevPressure = pressure;
        } else {
          strokePoint.radius = size4 / 2;
        }
        if (firstRadius === void 0) {
          firstRadius = strokePoint.radius;
        }
      }
    }
    const taperStart = start.taper === false ? 0 : start.taper === true ? Math.max(size4, totalLength) : start.taper;
    const taperEnd = end.taper === false ? 0 : end.taper === true ? Math.max(size4, totalLength) : end.taper;
    if (taperStart || taperEnd) {
      for (let i = 0; i < strokePoints.length; i++) {
        strokePoint = strokePoints[i];
        const { runningLength } = strokePoint;
        const ts = runningLength < taperStart ? taperStartEase(runningLength / taperStart) : 1;
        const te = totalLength - runningLength < taperEnd ? taperEndEase((totalLength - runningLength) / taperEnd) : 1;
        strokePoint.radius = Math.max(0.01, strokePoint.radius * Math.min(ts, te));
      }
    }
    return strokePoints;
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/getStroke.mjs
  function getStroke(points, options = {}) {
    return getStrokeOutlinePoints(
      setStrokePointRadii(getStrokePoints(points, options), options),
      options
    );
  }

  // node_modules/tldraw/dist-esm/lib/canvas/TldrawScribble.mjs
  function TldrawScribble({ scribble, zoom, color, opacity, className }) {
    if (!scribble.points.length) return null;
    const stroke = getStroke(scribble.points, {
      size: scribble.size / zoom,
      start: { taper: scribble.taper, easing: EASINGS.linear },
      last: scribble.state === "stopping",
      simulatePressure: false,
      streamline: 0.32
    });
    let d;
    if (stroke.length < 4) {
      const r = scribble.size / zoom / 2;
      const { x, y } = scribble.points[scribble.points.length - 1];
      d = `M ${x - r},${y} a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 ${-r * 2},0`;
    } else {
      d = getSvgPathFromPoints(stroke);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("svg", { className: className ? (0, import_classnames18.default)("tl-overlays__item", className) : className, children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
      "path",
      {
        className: "tl-scribble",
        d,
        fill: color ?? `var(--color-${scribble.color})`,
        opacity: opacity ?? scribble.opacity
      }
    ) });
  }

  // node_modules/tldraw/dist-esm/lib/canvas/TldrawSelectionBackground.mjs
  var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
  var TldrawSelectionBackground = ({ bounds, rotation }) => {
    const editor = useEditor();
    const shouldDisplay = useValue(
      "should display",
      () => editor.isInAny(
        "select.idle",
        "select.brushing",
        "select.scribble_brushing",
        "select.pointing_shape",
        "select.pointing_selection",
        "text.resizing"
      ),
      [editor]
    );
    if (!shouldDisplay) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(DefaultSelectionBackground, { bounds, rotation });
  };

  // node_modules/tldraw/dist-esm/lib/canvas/TldrawSelectionForeground.mjs
  var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);
  var import_classnames20 = __toESM(require_classnames(), 1);
  var import_react72 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/canvas/TldrawCropHandles.mjs
  var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
  var import_classnames19 = __toESM(require_classnames(), 1);
  function TldrawCropHandles({
    size: size4,
    width,
    height,
    hideAlternateHandles
  }) {
    const cropStrokeWidth = toDomPrecision(size4 / 3);
    const offset4 = cropStrokeWidth / 2;
    return /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)("svg", { className: "tl-overlays__item", children: [
      /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
        "polyline",
        {
          className: "tl-corner-crop-handle",
          points: `
						${toDomPrecision(0 - offset4)},${toDomPrecision(size4)} 
						${toDomPrecision(0 - offset4)},${toDomPrecision(0 - offset4)} 
						${toDomPrecision(size4)},${toDomPrecision(0 - offset4)}`,
          strokeWidth: cropStrokeWidth,
          "data-testid": "selection.crop.top_left",
          "aria-label": "top_left handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
        "line",
        {
          className: (0, import_classnames19.default)("tl-corner-crop-edge-handle", {
            "tl-hidden": hideAlternateHandles
          }),
          x1: toDomPrecision(width / 2 - size4),
          y1: toDomPrecision(0 - offset4),
          x2: toDomPrecision(width / 2 + size4),
          y2: toDomPrecision(0 - offset4),
          strokeWidth: cropStrokeWidth,
          "data-testid": "selection.crop.top",
          "aria-label": "top handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
        "polyline",
        {
          className: (0, import_classnames19.default)("tl-corner-crop-handle", {
            "tl-hidden": hideAlternateHandles
          }),
          points: `
						${toDomPrecision(width - size4)},${toDomPrecision(0 - offset4)} 
						${toDomPrecision(width + offset4)},${toDomPrecision(0 - offset4)} 
						${toDomPrecision(width + offset4)},${toDomPrecision(size4)}`,
          strokeWidth: cropStrokeWidth,
          "data-testid": "selection.crop.top_right",
          "aria-label": "top_right handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
        "line",
        {
          className: (0, import_classnames19.default)("tl-corner-crop-edge-handle", {
            "tl-hidden": hideAlternateHandles
          }),
          x1: toDomPrecision(width + offset4),
          y1: toDomPrecision(height / 2 - size4),
          x2: toDomPrecision(width + offset4),
          y2: toDomPrecision(height / 2 + size4),
          strokeWidth: cropStrokeWidth,
          "data-testid": "selection.crop.right",
          "aria-label": "right handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
        "polyline",
        {
          className: "tl-corner-crop-handle",
          points: `
						${toDomPrecision(width + offset4)},${toDomPrecision(height - size4)} 
						${toDomPrecision(width + offset4)},${toDomPrecision(height + offset4)}
						${toDomPrecision(width - size4)},${toDomPrecision(height + offset4)}`,
          strokeWidth: cropStrokeWidth,
          "data-testid": "selection.crop.bottom_right",
          "aria-label": "bottom_right handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
        "line",
        {
          className: (0, import_classnames19.default)("tl-corner-crop-edge-handle", {
            "tl-hidden": hideAlternateHandles
          }),
          x1: toDomPrecision(width / 2 - size4),
          y1: toDomPrecision(height + offset4),
          x2: toDomPrecision(width / 2 + size4),
          y2: toDomPrecision(height + offset4),
          strokeWidth: cropStrokeWidth,
          "data-testid": "selection.crop.bottom",
          "aria-label": "bottom handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
        "polyline",
        {
          className: (0, import_classnames19.default)("tl-corner-crop-handle", {
            "tl-hidden": hideAlternateHandles
          }),
          points: `
						${toDomPrecision(0 + size4)},${toDomPrecision(height + offset4)} 
						${toDomPrecision(0 - offset4)},${toDomPrecision(height + offset4)}
						${toDomPrecision(0 - offset4)},${toDomPrecision(height - size4)}`,
          strokeWidth: cropStrokeWidth,
          "data-testid": "selection.crop.bottom_left",
          "aria-label": "bottom_left handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
        "line",
        {
          className: (0, import_classnames19.default)("tl-corner-crop-edge-handle", {
            "tl-hidden": hideAlternateHandles
          }),
          x1: toDomPrecision(0 - offset4),
          y1: toDomPrecision(height / 2 - size4),
          x2: toDomPrecision(0 - offset4),
          y2: toDomPrecision(height / 2 + size4),
          strokeWidth: cropStrokeWidth,
          "data-testid": "selection.crop.left",
          "aria-label": "left handle"
        }
      )
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/canvas/TldrawSelectionForeground.mjs
  var TldrawSelectionForeground = track(function TldrawSelectionForeground2({
    bounds,
    rotation
  }) {
    const editor = useEditor();
    const rSvg = (0, import_react72.useRef)(null);
    const isReadonlyMode = useReadonly();
    const topEvents = useSelectionEvents("top");
    const rightEvents = useSelectionEvents("right");
    const bottomEvents = useSelectionEvents("bottom");
    const leftEvents = useSelectionEvents("left");
    const topLeftEvents = useSelectionEvents("top_left");
    const topRightEvents = useSelectionEvents("top_right");
    const bottomRightEvents = useSelectionEvents("bottom_right");
    const bottomLeftEvents = useSelectionEvents("bottom_left");
    const isDefaultCursor = editor.getInstanceState().cursor.type === "default";
    const isCoarsePointer = editor.getInstanceState().isCoarsePointer;
    const onlyShape = editor.getOnlySelectedShape();
    const isLockedShape = onlyShape && editor.isShapeOrAncestorLocked(onlyShape);
    const expandOutlineBy = onlyShape ? editor.getShapeUtil(onlyShape).expandSelectionOutlinePx(onlyShape) : 0;
    const expandedBounds = expandOutlineBy instanceof Box ? bounds.clone().expand(expandOutlineBy).zeroFix() : bounds.clone().expandBy(expandOutlineBy).zeroFix();
    useTransform(rSvg, bounds?.x, bounds?.y, 1, editor.getSelectionRotation(), {
      x: expandedBounds.x - bounds.x,
      y: expandedBounds.y - bounds.y
    });
    if (onlyShape && editor.isShapeHidden(onlyShape)) return null;
    const zoom = editor.getZoomLevel();
    const isChangingStyle = editor.getInstanceState().isChangingStyle;
    const width = expandedBounds.width;
    const height = expandedBounds.height;
    const size4 = 8 / zoom;
    const isTinyX = width < size4 * 2;
    const isTinyY = height < size4 * 2;
    const isSmallX = width < size4 * 4;
    const isSmallY = height < size4 * 4;
    const isSmallCropX = width < size4 * 5;
    const isSmallCropY = height < size4 * 5;
    const mobileHandleMultiplier = isCoarsePointer ? 1.75 : 1;
    const targetSize = 6 / zoom * mobileHandleMultiplier;
    const targetSizeX = (isSmallX ? targetSize / 2 : targetSize) * (mobileHandleMultiplier * 0.75);
    const targetSizeY = (isSmallY ? targetSize / 2 : targetSize) * (mobileHandleMultiplier * 0.75);
    const showSelectionBounds = (onlyShape ? !editor.getShapeUtil(onlyShape).hideSelectionBoundsFg(onlyShape) : true) && !isChangingStyle;
    let shouldDisplayBox = showSelectionBounds && editor.isInAny(
      "select.idle",
      "select.brushing",
      "select.scribble_brushing",
      "select.pointing_canvas",
      "select.pointing_selection",
      "select.pointing_shape",
      "select.crop.idle",
      "select.crop.pointing_crop",
      "select.crop.pointing_crop_handle",
      "select.pointing_resize_handle"
    ) || showSelectionBounds && editor.isIn("select.resizing") && onlyShape && editor.isShapeOfType(onlyShape, "text");
    if (onlyShape && shouldDisplayBox) {
      if (tlenv.isFirefox && editor.isShapeOfType(onlyShape, "embed")) {
        shouldDisplayBox = false;
      }
    }
    const showCropHandles = editor.isInAny(
      "select.crop.idle",
      "select.crop.pointing_crop",
      "select.crop.pointing_crop_handle"
    ) && !isChangingStyle && !isReadonlyMode;
    const shouldDisplayControls = editor.isInAny(
      "select.idle",
      "select.pointing_selection",
      "select.pointing_shape",
      "select.crop.idle"
    ) && !isChangingStyle && !isReadonlyMode;
    const showCornerRotateHandles = !isCoarsePointer && !(isTinyX || isTinyY) && (shouldDisplayControls || showCropHandles) && (onlyShape ? !editor.getShapeUtil(onlyShape).hideRotateHandle(onlyShape) : true) && !isLockedShape;
    const showMobileRotateHandle = isCoarsePointer && (!isSmallX || !isSmallY) && (shouldDisplayControls || showCropHandles) && (onlyShape ? !editor.getShapeUtil(onlyShape).hideRotateHandle(onlyShape) : true) && !isLockedShape;
    const showResizeHandles = shouldDisplayControls && (onlyShape ? editor.getShapeUtil(onlyShape).canResize(onlyShape) && !editor.getShapeUtil(onlyShape).hideResizeHandles(onlyShape) : true) && !showCropHandles && !isLockedShape;
    const hideAlternateCornerHandles = isTinyX || isTinyY;
    const showOnlyOneHandle = isTinyX && isTinyY;
    const hideAlternateCropHandles = isSmallCropX || isSmallCropY;
    const showHandles = showResizeHandles || showCropHandles;
    const hideRotateCornerHandles = !showCornerRotateHandles;
    const hideMobileRotateHandle = !shouldDisplayControls || !showMobileRotateHandle;
    const hideTopLeftCorner = !shouldDisplayControls || !showHandles;
    const hideTopRightCorner = !shouldDisplayControls || !showHandles || hideAlternateCornerHandles;
    const hideBottomLeftCorner = !shouldDisplayControls || !showHandles || hideAlternateCornerHandles;
    const hideBottomRightCorner = !shouldDisplayControls || !showHandles || showOnlyOneHandle && !showCropHandles;
    let hideVerticalEdgeTargets = true;
    let hideHorizontalEdgeTargets = true;
    if (showCropHandles) {
      hideVerticalEdgeTargets = hideAlternateCropHandles;
      hideHorizontalEdgeTargets = hideAlternateCropHandles;
    } else if (showResizeHandles) {
      hideVerticalEdgeTargets = hideAlternateCornerHandles || showOnlyOneHandle || isCoarsePointer;
      const isMobileAndTextShape = isCoarsePointer && onlyShape && onlyShape.type === "text";
      hideHorizontalEdgeTargets = hideVerticalEdgeTargets && !isMobileAndTextShape;
    }
    const textHandleHeight = Math.min(24 / zoom, height - targetSizeY * 3);
    const showTextResizeHandles = shouldDisplayControls && isCoarsePointer && onlyShape && editor.isShapeOfType(onlyShape, "text") && textHandleHeight * zoom >= 4;
    return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("svg", { className: "tl-overlays__item tl-selection__fg", "data-testid": "selection-foreground", children: /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("g", { ref: rSvg, children: [
      shouldDisplayBox && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        "rect",
        {
          className: "tl-selection__fg__outline",
          width: toDomPrecision(width),
          height: toDomPrecision(height)
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        RotateCornerHandle,
        {
          "data-testid": "selection.rotate.top-left",
          cx: 0,
          cy: 0,
          targetSize,
          corner: "top_left_rotate",
          cursor: isDefaultCursor ? getCursor("nwse-rotate", rotation) : void 0,
          isHidden: hideRotateCornerHandles
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        RotateCornerHandle,
        {
          "data-testid": "selection.rotate.top-right",
          cx: width + targetSize * 3,
          cy: 0,
          targetSize,
          corner: "top_right_rotate",
          cursor: isDefaultCursor ? getCursor("nesw-rotate", rotation) : void 0,
          isHidden: hideRotateCornerHandles
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        RotateCornerHandle,
        {
          "data-testid": "selection.rotate.bottom-left",
          cx: 0,
          cy: height + targetSize * 3,
          targetSize,
          corner: "bottom_left_rotate",
          cursor: isDefaultCursor ? getCursor("swne-rotate", rotation) : void 0,
          isHidden: hideRotateCornerHandles
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        RotateCornerHandle,
        {
          "data-testid": "selection.rotate.bottom-right",
          cx: width + targetSize * 3,
          cy: height + targetSize * 3,
          targetSize,
          corner: "bottom_right_rotate",
          cursor: isDefaultCursor ? getCursor("senw-rotate", rotation) : void 0,
          isHidden: hideRotateCornerHandles
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        MobileRotateHandle,
        {
          "data-testid": "selection.rotate.mobile",
          cx: isSmallX ? -targetSize * 1.5 : width / 2,
          cy: isSmallX ? height / 2 : -targetSize * 1.5,
          size: size4,
          isHidden: hideMobileRotateHandle
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        "rect",
        {
          className: (0, import_classnames20.default)("tl-transparent", {
            "tl-hidden": hideVerticalEdgeTargets
          }),
          "data-testid": "selection.resize.top",
          "aria-label": "top target",
          pointerEvents: "all",
          x: 0,
          y: toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY)),
          width: toDomPrecision(width),
          height: toDomPrecision(Math.max(1, targetSizeY * 2)),
          style: isDefaultCursor ? { cursor: getCursor("ns-resize", rotation) } : void 0,
          ...topEvents
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        "rect",
        {
          className: (0, import_classnames20.default)("tl-transparent", {
            "tl-hidden": hideHorizontalEdgeTargets
          }),
          "data-testid": "selection.resize.right",
          "aria-label": "right target",
          pointerEvents: "all",
          x: toDomPrecision(width - (isSmallX ? 0 : targetSizeX)),
          y: 0,
          height: toDomPrecision(height),
          width: toDomPrecision(Math.max(1, targetSizeX * 2)),
          style: isDefaultCursor ? { cursor: getCursor("ew-resize", rotation) } : void 0,
          ...rightEvents
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        "rect",
        {
          className: (0, import_classnames20.default)("tl-transparent", {
            "tl-hidden": hideVerticalEdgeTargets
          }),
          "data-testid": "selection.resize.bottom",
          "aria-label": "bottom target",
          pointerEvents: "all",
          x: 0,
          y: toDomPrecision(height - (isSmallY ? 0 : targetSizeY)),
          width: toDomPrecision(width),
          height: toDomPrecision(Math.max(1, targetSizeY * 2)),
          style: isDefaultCursor ? { cursor: getCursor("ns-resize", rotation) } : void 0,
          ...bottomEvents
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        "rect",
        {
          className: (0, import_classnames20.default)("tl-transparent", {
            "tl-hidden": hideHorizontalEdgeTargets
          }),
          "data-testid": "selection.resize.left",
          "aria-label": "left target",
          pointerEvents: "all",
          x: toDomPrecision(0 - (isSmallX ? targetSizeX * 2 : targetSizeX)),
          y: 0,
          height: toDomPrecision(height),
          width: toDomPrecision(Math.max(1, targetSizeX * 2)),
          style: isDefaultCursor ? { cursor: getCursor("ew-resize", rotation) } : void 0,
          ...leftEvents
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        "rect",
        {
          className: (0, import_classnames20.default)("tl-transparent", {
            "tl-hidden": hideTopLeftCorner
          }),
          "data-testid": "selection.target.top-left",
          "aria-label": "top-left target",
          pointerEvents: "all",
          x: toDomPrecision(0 - (isSmallX ? targetSizeX * 2 : targetSizeX * 1.5)),
          y: toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY * 1.5)),
          width: toDomPrecision(targetSizeX * 3),
          height: toDomPrecision(targetSizeY * 3),
          style: isDefaultCursor ? { cursor: getCursor("nwse-resize", rotation) } : void 0,
          ...topLeftEvents
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        "rect",
        {
          className: (0, import_classnames20.default)("tl-transparent", {
            "tl-hidden": hideTopRightCorner
          }),
          "data-testid": "selection.target.top-right",
          "aria-label": "top-right target",
          pointerEvents: "all",
          x: toDomPrecision(width - (isSmallX ? 0 : targetSizeX * 1.5)),
          y: toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY * 1.5)),
          width: toDomPrecision(targetSizeX * 3),
          height: toDomPrecision(targetSizeY * 3),
          style: isDefaultCursor ? { cursor: getCursor("nesw-resize", rotation) } : void 0,
          ...topRightEvents
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        "rect",
        {
          className: (0, import_classnames20.default)("tl-transparent", {
            "tl-hidden": hideBottomRightCorner
          }),
          "data-testid": "selection.target.bottom-right",
          "aria-label": "bottom-right target",
          pointerEvents: "all",
          x: toDomPrecision(width - (isSmallX ? targetSizeX : targetSizeX * 1.5)),
          y: toDomPrecision(height - (isSmallY ? targetSizeY : targetSizeY * 1.5)),
          width: toDomPrecision(targetSizeX * 3),
          height: toDomPrecision(targetSizeY * 3),
          style: isDefaultCursor ? { cursor: getCursor("nwse-resize", rotation) } : void 0,
          ...bottomRightEvents
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        "rect",
        {
          className: (0, import_classnames20.default)("tl-transparent", {
            "tl-hidden": hideBottomLeftCorner
          }),
          "data-testid": "selection.target.bottom-left",
          "aria-label": "bottom-left target",
          pointerEvents: "all",
          x: toDomPrecision(0 - (isSmallX ? targetSizeX * 3 : targetSizeX * 1.5)),
          y: toDomPrecision(height - (isSmallY ? 0 : targetSizeY * 1.5)),
          width: toDomPrecision(targetSizeX * 3),
          height: toDomPrecision(targetSizeY * 3),
          style: isDefaultCursor ? { cursor: getCursor("nesw-resize", rotation) } : void 0,
          ...bottomLeftEvents
        }
      ),
      showResizeHandles && /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)(import_jsx_runtime89.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "rect",
          {
            "data-testid": "selection.resize.top-left",
            className: (0, import_classnames20.default)("tl-corner-handle", {
              "tl-hidden": hideTopLeftCorner
            }),
            "aria-label": "top_left handle",
            x: toDomPrecision(0 - size4 / 2),
            y: toDomPrecision(0 - size4 / 2),
            width: toDomPrecision(size4),
            height: toDomPrecision(size4)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "rect",
          {
            "data-testid": "selection.resize.top-right",
            className: (0, import_classnames20.default)("tl-corner-handle", {
              "tl-hidden": hideTopRightCorner
            }),
            "aria-label": "top_right handle",
            x: toDomPrecision(width - size4 / 2),
            y: toDomPrecision(0 - size4 / 2),
            width: toDomPrecision(size4),
            height: toDomPrecision(size4)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "rect",
          {
            "data-testid": "selection.resize.bottom-right",
            className: (0, import_classnames20.default)("tl-corner-handle", {
              "tl-hidden": hideBottomRightCorner
            }),
            "aria-label": "bottom_right handle",
            x: toDomPrecision(width - size4 / 2),
            y: toDomPrecision(height - size4 / 2),
            width: toDomPrecision(size4),
            height: toDomPrecision(size4)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "rect",
          {
            "data-testid": "selection.resize.bottom-left",
            className: (0, import_classnames20.default)("tl-corner-handle", {
              "tl-hidden": hideBottomLeftCorner
            }),
            "aria-label": "bottom_left handle",
            x: toDomPrecision(0 - size4 / 2),
            y: toDomPrecision(height - size4 / 2),
            width: toDomPrecision(size4),
            height: toDomPrecision(size4)
          }
        )
      ] }),
      showTextResizeHandles && /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)(import_jsx_runtime89.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "rect",
          {
            "data-testid": "selection.text-resize.left.handle",
            className: "tl-text-handle",
            "aria-label": "bottom_left handle",
            x: toDomPrecision(0 - size4 / 4),
            y: toDomPrecision(height / 2 - textHandleHeight / 2),
            rx: size4 / 4,
            width: toDomPrecision(size4 / 2),
            height: toDomPrecision(textHandleHeight)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "rect",
          {
            "data-testid": "selection.text-resize.right.handle",
            className: "tl-text-handle",
            "aria-label": "bottom_left handle",
            rx: size4 / 4,
            x: toDomPrecision(width - size4 / 4),
            y: toDomPrecision(height / 2 - textHandleHeight / 2),
            width: toDomPrecision(size4 / 2),
            height: toDomPrecision(textHandleHeight)
          }
        )
      ] }),
      showCropHandles && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        TldrawCropHandles,
        {
          ...{
            size: size4,
            width,
            height,
            hideAlternateHandles: hideAlternateCropHandles
          }
        }
      )
    ] }) });
  });
  var RotateCornerHandle = function RotateCornerHandle2({
    cx,
    cy,
    targetSize,
    corner,
    cursor,
    isHidden: isHidden2,
    "data-testid": testId
  }) {
    const events = useSelectionEvents(corner);
    return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
      "rect",
      {
        className: (0, import_classnames20.default)("tl-transparent", "tl-rotate-corner", { "tl-hidden": isHidden2 }),
        "data-testid": testId,
        "aria-label": `${corner} target`,
        pointerEvents: "all",
        x: toDomPrecision(cx - targetSize * 3),
        y: toDomPrecision(cy - targetSize * 3),
        width: toDomPrecision(Math.max(1, targetSize * 3)),
        height: toDomPrecision(Math.max(1, targetSize * 3)),
        cursor,
        ...events
      }
    );
  };
  var SQUARE_ROOT_PI = Math.sqrt(Math.PI);
  var MobileRotateHandle = function RotateHandle({
    cx,
    cy,
    size: size4,
    isHidden: isHidden2,
    "data-testid": testId
  }) {
    const events = useSelectionEvents("mobile_rotate");
    const editor = useEditor();
    const zoom = useValue("zoom level", () => editor.getZoomLevel(), [editor]);
    const bgRadius = Math.max(14 * (1 / zoom), 20 / Math.max(1, zoom));
    return /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("g", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        "circle",
        {
          "data-testid": testId,
          pointerEvents: "all",
          className: (0, import_classnames20.default)("tl-transparent", "tl-mobile-rotate__bg", { "tl-hidden": isHidden2 }),
          cx,
          cy,
          r: bgRadius,
          ...events
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
        "circle",
        {
          className: (0, import_classnames20.default)("tl-mobile-rotate__fg", { "tl-hidden": isHidden2 }),
          cx,
          cy,
          r: size4 / SQUARE_ROOT_PI
        }
      )
    ] });
  };

  // node_modules/tldraw/dist-esm/lib/canvas/TldrawShapeIndicators.mjs
  var import_jsx_runtime90 = __toESM(require_jsx_runtime(), 1);
  function TldrawShapeIndicators() {
    const editor = useEditor();
    const isInSelectState = useValue(
      "is in a valid select state",
      () => {
        return editor.isInAny(
          "select.idle",
          "select.brushing",
          "select.scribble_brushing",
          "select.editing_shape",
          "select.pointing_shape",
          "select.pointing_selection",
          "select.pointing_handle"
        );
      },
      [editor]
    );
    if (!isInSelectState) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(DefaultShapeIndicators, {});
  }

  // node_modules/tldraw/dist-esm/lib/shapes/arrow/straight-arrow.mjs
  function getStraightArrowInfo(editor, shape, bindings) {
    const { arrowheadStart, arrowheadEnd } = shape.props;
    const terminalsInArrowSpace = getArrowTerminalsInArrowSpace(editor, shape, bindings);
    const a = terminalsInArrowSpace.start.clone();
    const b = terminalsInArrowSpace.end.clone();
    const c = Vec.Med(a, b);
    if (Vec.Equals(a, b)) {
      return {
        bindings,
        isStraight: true,
        start: {
          handle: a,
          point: a,
          arrowhead: shape.props.arrowheadStart
        },
        end: {
          handle: b,
          point: b,
          arrowhead: shape.props.arrowheadEnd
        },
        middle: c,
        isValid: false,
        length: 0
      };
    }
    const uAB = Vec.Sub(b, a).uni();
    const startShapeInfo = getBoundShapeInfoForTerminal(editor, shape, "start");
    const endShapeInfo = getBoundShapeInfoForTerminal(editor, shape, "end");
    const arrowPageTransform = editor.getShapePageTransform(shape);
    updateArrowheadPointWithBoundShape(
      b,
      // <-- will be mutated
      terminalsInArrowSpace.start,
      arrowPageTransform,
      endShapeInfo
    );
    updateArrowheadPointWithBoundShape(
      a,
      // <-- will be mutated
      terminalsInArrowSpace.end,
      arrowPageTransform,
      startShapeInfo
    );
    let offsetA = 0;
    let offsetB = 0;
    let strokeOffsetA = 0;
    let strokeOffsetB = 0;
    let minLength = MIN_ARROW_LENGTH * shape.props.scale;
    const isSelfIntersection = startShapeInfo && endShapeInfo && startShapeInfo.shape === endShapeInfo.shape;
    const relationship = startShapeInfo && endShapeInfo ? getBoundShapeRelationships(editor, startShapeInfo.shape.id, endShapeInfo.shape.id) : "safe";
    if (relationship === "safe" && startShapeInfo && endShapeInfo && !isSelfIntersection && !startShapeInfo.isExact && !endShapeInfo.isExact) {
      if (endShapeInfo.didIntersect && !startShapeInfo.didIntersect) {
        if (startShapeInfo.isClosed) {
          a.setTo(b.clone().add(uAB.clone().mul(MIN_ARROW_LENGTH * shape.props.scale)));
        }
      } else if (!endShapeInfo.didIntersect) {
        if (endShapeInfo.isClosed) {
          b.setTo(a.clone().sub(uAB.clone().mul(MIN_ARROW_LENGTH * shape.props.scale)));
        }
      }
    }
    const distance = Vec.Sub(b, a);
    const u = Vec.Len(distance) ? distance.uni() : Vec.From(distance);
    const didFlip = !Vec.Equals(u, uAB);
    if (!isSelfIntersection) {
      if (relationship !== "start-contains-end" && startShapeInfo && arrowheadStart !== "none" && !startShapeInfo.isExact) {
        strokeOffsetA = STROKE_SIZES[shape.props.size] / 2 + ("size" in startShapeInfo.shape.props ? STROKE_SIZES[startShapeInfo.shape.props.size] / 2 : 0);
        offsetA = (BOUND_ARROW_OFFSET + strokeOffsetA) * shape.props.scale;
        minLength += strokeOffsetA * shape.props.scale;
      }
      if (relationship !== "end-contains-start" && endShapeInfo && arrowheadEnd !== "none" && !endShapeInfo.isExact) {
        strokeOffsetB = STROKE_SIZES[shape.props.size] / 2 + ("size" in endShapeInfo.shape.props ? STROKE_SIZES[endShapeInfo.shape.props.size] / 2 : 0);
        offsetB = (BOUND_ARROW_OFFSET + strokeOffsetB) * shape.props.scale;
        minLength += strokeOffsetB * shape.props.scale;
      }
    }
    const tA = a.clone().add(u.clone().mul(offsetA * (didFlip ? -1 : 1)));
    const tB = b.clone().sub(u.clone().mul(offsetB * (didFlip ? -1 : 1)));
    if (Vec.DistMin(tA, tB, minLength)) {
      if (offsetA !== 0 && offsetB !== 0) {
        offsetA *= -1.5;
        offsetB *= -1.5;
      } else if (offsetA !== 0) {
        offsetA *= -1;
      } else if (offsetB !== 0) {
        offsetB *= -1;
      } else {
      }
    }
    a.add(u.clone().mul(offsetA * (didFlip ? -1 : 1)));
    b.sub(u.clone().mul(offsetB * (didFlip ? -1 : 1)));
    if (didFlip) {
      if (startShapeInfo && endShapeInfo) {
        b.setTo(Vec.Add(a, u.clone().mul(-MIN_ARROW_LENGTH * shape.props.scale)));
      }
      c.setTo(Vec.Med(terminalsInArrowSpace.start, terminalsInArrowSpace.end));
    } else {
      c.setTo(Vec.Med(a, b));
    }
    const length = Vec.Dist(a, b);
    return {
      bindings,
      isStraight: true,
      start: {
        handle: terminalsInArrowSpace.start,
        point: a,
        arrowhead: shape.props.arrowheadStart
      },
      end: {
        handle: terminalsInArrowSpace.end,
        point: b,
        arrowhead: shape.props.arrowheadEnd
      },
      middle: c,
      isValid: length > 0,
      length
    };
  }
  function updateArrowheadPointWithBoundShape(point, opposite, arrowPageTransform, targetShapeInfo) {
    if (targetShapeInfo === void 0) {
      return;
    }
    if (targetShapeInfo.isExact) {
      return;
    }
    const pageFrom = Mat.applyToPoint(arrowPageTransform, opposite);
    const pageTo = Mat.applyToPoint(arrowPageTransform, point);
    const targetFrom = Mat.applyToPoint(Mat.Inverse(targetShapeInfo.transform), pageFrom);
    const targetTo = Mat.applyToPoint(Mat.Inverse(targetShapeInfo.transform), pageTo);
    const isClosed = targetShapeInfo.isClosed;
    const fn = isClosed ? intersectLineSegmentPolygon : intersectLineSegmentPolyline;
    const intersection = fn(targetFrom, targetTo, targetShapeInfo.outline);
    let targetInt;
    if (intersection !== null) {
      targetInt = intersection.sort((p1, p2) => Vec.Dist2(p1, targetFrom) - Vec.Dist2(p2, targetFrom))[0] ?? (isClosed ? void 0 : targetTo);
    }
    if (targetInt === void 0) {
      return;
    }
    const pageInt = Mat.applyToPoint(targetShapeInfo.transform, targetInt);
    const arrowInt = Mat.applyToPoint(Mat.Inverse(arrowPageTransform), pageInt);
    point.setTo(arrowInt);
    targetShapeInfo.didIntersect = true;
  }

  // node_modules/tldraw/dist-esm/lib/shapes/arrow/curved-arrow.mjs
  function getCurvedArrowInfo(editor, shape, bindings) {
    const { arrowheadEnd, arrowheadStart } = shape.props;
    const bend = shape.props.bend;
    if (Math.abs(bend) > Math.abs(shape.props.bend * (WAY_TOO_BIG_ARROW_BEND_FACTOR * shape.props.scale))) {
      return getStraightArrowInfo(editor, shape, bindings);
    }
    const terminalsInArrowSpace = getArrowTerminalsInArrowSpace(editor, shape, bindings);
    const med = Vec.Med(terminalsInArrowSpace.start, terminalsInArrowSpace.end);
    const distance = Vec.Sub(terminalsInArrowSpace.end, terminalsInArrowSpace.start);
    const u = Vec.Len(distance) ? distance.uni() : Vec.From(distance);
    const middle = Vec.Add(med, u.per().mul(-bend));
    const startShapeInfo = getBoundShapeInfoForTerminal(editor, shape, "start");
    const endShapeInfo = getBoundShapeInfoForTerminal(editor, shape, "end");
    const a = terminalsInArrowSpace.start.clone();
    const b = terminalsInArrowSpace.end.clone();
    const c = middle.clone();
    if (Vec.Equals(a, b)) {
      return {
        bindings,
        isStraight: true,
        start: {
          handle: a,
          point: a,
          arrowhead: shape.props.arrowheadStart
        },
        end: {
          handle: b,
          point: b,
          arrowhead: shape.props.arrowheadEnd
        },
        middle: c,
        isValid: false,
        length: 0
      };
    }
    const isClockwise = shape.props.bend < 0;
    const distFn = isClockwise ? clockwiseAngleDist : counterClockwiseAngleDist;
    const handleArc = getArcInfo(a, b, c);
    const handle_aCA = Vec.Angle(handleArc.center, a);
    const handle_aCB = Vec.Angle(handleArc.center, b);
    const handle_dAB = distFn(handle_aCA, handle_aCB);
    if (handleArc.length === 0 || handleArc.size === 0 || !isSafeFloat(handleArc.length) || !isSafeFloat(handleArc.size)) {
      return getStraightArrowInfo(editor, shape, bindings);
    }
    const tempA = a.clone();
    const tempB = b.clone();
    const tempC = c.clone();
    const arrowPageTransform = editor.getShapePageTransform(shape);
    let offsetA = 0;
    let offsetB = 0;
    let minLength = MIN_ARROW_LENGTH * shape.props.scale;
    if (startShapeInfo && !startShapeInfo.isExact) {
      const startInPageSpace = Mat.applyToPoint(arrowPageTransform, tempA);
      const centerInPageSpace = Mat.applyToPoint(arrowPageTransform, handleArc.center);
      const endInPageSpace = Mat.applyToPoint(arrowPageTransform, tempB);
      const inverseTransform = Mat.Inverse(startShapeInfo.transform);
      const startInStartShapeLocalSpace = Mat.applyToPoint(inverseTransform, startInPageSpace);
      const centerInStartShapeLocalSpace = Mat.applyToPoint(inverseTransform, centerInPageSpace);
      const endInStartShapeLocalSpace = Mat.applyToPoint(inverseTransform, endInPageSpace);
      const { isClosed } = startShapeInfo;
      const fn = isClosed ? intersectCirclePolygon : intersectCirclePolyline;
      let point;
      let intersections = fn(centerInStartShapeLocalSpace, handleArc.radius, startShapeInfo.outline);
      if (intersections) {
        const angleToStart = centerInStartShapeLocalSpace.angle(startInStartShapeLocalSpace);
        const angleToEnd = centerInStartShapeLocalSpace.angle(endInStartShapeLocalSpace);
        const dAB2 = distFn(angleToStart, angleToEnd);
        intersections = intersections.filter(
          (pt) => distFn(angleToStart, centerInStartShapeLocalSpace.angle(pt)) <= dAB2
        );
        const targetDist = dAB2 * 0.25;
        intersections.sort(
          isClosed ? (p0, p1) => Math.abs(distFn(angleToStart, centerInStartShapeLocalSpace.angle(p0)) - targetDist) < Math.abs(distFn(angleToStart, centerInStartShapeLocalSpace.angle(p1)) - targetDist) ? -1 : 1 : (p0, p1) => distFn(angleToStart, centerInStartShapeLocalSpace.angle(p0)) < distFn(angleToStart, centerInStartShapeLocalSpace.angle(p1)) ? -1 : 1
        );
        point = intersections[0] ?? (isClosed ? void 0 : startInStartShapeLocalSpace);
      } else {
        point = isClosed ? void 0 : startInStartShapeLocalSpace;
      }
      if (point) {
        tempA.setTo(
          editor.getPointInShapeSpace(shape, Mat.applyToPoint(startShapeInfo.transform, point))
        );
        startShapeInfo.didIntersect = true;
        if (arrowheadStart !== "none") {
          const strokeOffset = STROKE_SIZES[shape.props.size] / 2 + ("size" in startShapeInfo.shape.props ? STROKE_SIZES[startShapeInfo.shape.props.size] / 2 : 0);
          offsetA = (BOUND_ARROW_OFFSET + strokeOffset) * shape.props.scale;
          minLength += strokeOffset * shape.props.scale;
        }
      }
    }
    if (endShapeInfo && !endShapeInfo.isExact) {
      const startInPageSpace = Mat.applyToPoint(arrowPageTransform, tempA);
      const endInPageSpace = Mat.applyToPoint(arrowPageTransform, tempB);
      const centerInPageSpace = Mat.applyToPoint(arrowPageTransform, handleArc.center);
      const inverseTransform = Mat.Inverse(endShapeInfo.transform);
      const startInEndShapeLocalSpace = Mat.applyToPoint(inverseTransform, startInPageSpace);
      const centerInEndShapeLocalSpace = Mat.applyToPoint(inverseTransform, centerInPageSpace);
      const endInEndShapeLocalSpace = Mat.applyToPoint(inverseTransform, endInPageSpace);
      const isClosed = endShapeInfo.isClosed;
      const fn = isClosed ? intersectCirclePolygon : intersectCirclePolyline;
      let point;
      let intersections = fn(centerInEndShapeLocalSpace, handleArc.radius, endShapeInfo.outline);
      if (intersections) {
        const angleToStart = centerInEndShapeLocalSpace.angle(startInEndShapeLocalSpace);
        const angleToEnd = centerInEndShapeLocalSpace.angle(endInEndShapeLocalSpace);
        const dAB2 = distFn(angleToStart, angleToEnd);
        const targetDist = dAB2 * 0.75;
        intersections = intersections.filter(
          (pt) => distFn(angleToStart, centerInEndShapeLocalSpace.angle(pt)) <= dAB2
        );
        intersections.sort(
          isClosed ? (p0, p1) => Math.abs(distFn(angleToStart, centerInEndShapeLocalSpace.angle(p0)) - targetDist) < Math.abs(distFn(angleToStart, centerInEndShapeLocalSpace.angle(p1)) - targetDist) ? -1 : 1 : (p0, p1) => distFn(angleToStart, centerInEndShapeLocalSpace.angle(p0)) < distFn(angleToStart, centerInEndShapeLocalSpace.angle(p1)) ? -1 : 1
        );
        if (intersections[0]) {
          point = intersections[0];
        } else {
          point = isClosed ? void 0 : endInEndShapeLocalSpace;
        }
      } else {
        point = isClosed ? void 0 : endInEndShapeLocalSpace;
      }
      if (point) {
        tempB.setTo(
          editor.getPointInShapeSpace(shape, Mat.applyToPoint(endShapeInfo.transform, point))
        );
        endShapeInfo.didIntersect = true;
        if (arrowheadEnd !== "none") {
          const strokeOffset = STROKE_SIZES[shape.props.size] / 2 + ("size" in endShapeInfo.shape.props ? STROKE_SIZES[endShapeInfo.shape.props.size] / 2 : 0);
          offsetB = (BOUND_ARROW_OFFSET + strokeOffset) * shape.props.scale;
          minLength += strokeOffset * shape.props.scale;
        }
      }
    }
    let aCA = Vec.Angle(handleArc.center, tempA);
    let aCB = Vec.Angle(handleArc.center, tempB);
    let dAB = distFn(aCA, aCB);
    let lAB = dAB * handleArc.radius;
    const tA = tempA.clone();
    const tB = tempB.clone();
    if (offsetA !== 0) {
      tA.setTo(handleArc.center).add(
        Vec.FromAngle(aCA + dAB * (offsetA / lAB * (isClockwise ? 1 : -1))).mul(handleArc.radius)
      );
    }
    if (offsetB !== 0) {
      tB.setTo(handleArc.center).add(
        Vec.FromAngle(aCB + dAB * (offsetB / lAB * (isClockwise ? -1 : 1))).mul(handleArc.radius)
      );
    }
    if (Vec.DistMin(tA, tB, minLength)) {
      if (offsetA !== 0 && offsetB !== 0) {
        offsetA *= -1.5;
        offsetB *= -1.5;
      } else if (offsetA !== 0) {
        offsetA *= -2;
      } else if (offsetB !== 0) {
        offsetB *= -2;
      } else {
      }
    }
    if (offsetA !== 0) {
      tempA.setTo(handleArc.center).add(
        Vec.FromAngle(aCA + dAB * (offsetA / lAB * (isClockwise ? 1 : -1))).mul(handleArc.radius)
      );
    }
    if (offsetB !== 0) {
      tempB.setTo(handleArc.center).add(
        Vec.FromAngle(aCB + dAB * (offsetB / lAB * (isClockwise ? -1 : 1))).mul(handleArc.radius)
      );
    }
    if (startShapeInfo && endShapeInfo && !startShapeInfo.isExact && !endShapeInfo.isExact) {
      aCA = Vec.Angle(handleArc.center, tempA);
      aCB = Vec.Angle(handleArc.center, tempB);
      dAB = distFn(aCA, aCB);
      lAB = dAB * handleArc.radius;
      const relationship = getBoundShapeRelationships(
        editor,
        startShapeInfo.shape.id,
        endShapeInfo.shape.id
      );
      if (relationship === "double-bound" && lAB < 30) {
        tempA.setTo(a);
        tempB.setTo(b);
        tempC.setTo(c);
      } else if (relationship === "safe") {
        if (startShapeInfo && !startShapeInfo.didIntersect) {
          tempA.setTo(a);
        }
        if (endShapeInfo && !endShapeInfo.didIntersect || distFn(handle_aCA, aCA) > distFn(handle_aCA, aCB)) {
          tempB.setTo(handleArc.center).add(
            Vec.FromAngle(
              aCA + dAB * (Math.min(0.9, MIN_ARROW_LENGTH * shape.props.scale / lAB) * (isClockwise ? 1 : -1))
            ).mul(handleArc.radius)
          );
        }
      }
    }
    placeCenterHandle(
      handleArc.center,
      handleArc.radius,
      tempA,
      tempB,
      tempC,
      handle_dAB,
      isClockwise
    );
    if (tempA.equals(tempB)) {
      tempA.setTo(tempC.clone().addXY(1, 1));
      tempB.setTo(tempC.clone().subXY(1, 1));
    }
    a.setTo(tempA);
    b.setTo(tempB);
    c.setTo(tempC);
    const bodyArc = getArcInfo(a, b, c);
    return {
      bindings,
      isStraight: false,
      start: {
        point: a,
        handle: terminalsInArrowSpace.start,
        arrowhead: shape.props.arrowheadStart
      },
      end: {
        point: b,
        handle: terminalsInArrowSpace.end,
        arrowhead: shape.props.arrowheadEnd
      },
      middle: c,
      handleArc,
      bodyArc,
      isValid: bodyArc.length !== 0 && isFinite(bodyArc.center.x) && isFinite(bodyArc.center.y)
    };
  }
  function getArcInfo(a, b, c) {
    const center = centerOfCircleFromThreePoints(a, b, c) ?? Vec.Med(a, b);
    const radius = Vec.Dist(center, a);
    const sweepFlag = +Vec.Clockwise(a, c, b);
    const ab = ((a.y - b.y) ** 2 + (a.x - b.x) ** 2) ** 0.5;
    const bc = ((b.y - c.y) ** 2 + (b.x - c.x) ** 2) ** 0.5;
    const ca = ((c.y - a.y) ** 2 + (c.x - a.x) ** 2) ** 0.5;
    const theta = Math.acos((bc * bc + ca * ca - ab * ab) / (2 * bc * ca)) * 2;
    const largeArcFlag = +(PI > theta);
    const size4 = (PI2 - theta) * (sweepFlag ? 1 : -1);
    const length = size4 * radius;
    return {
      center,
      radius,
      size: size4,
      length,
      largeArcFlag,
      sweepFlag
    };
  }
  function placeCenterHandle(center, radius, tempA, tempB, tempC, originalArcLength, isClockwise) {
    const aCA = Vec.Angle(center, tempA);
    const aCB = Vec.Angle(center, tempB);
    let dAB = clockwiseAngleDist(aCA, aCB);
    if (!isClockwise) dAB = PI2 - dAB;
    tempC.setTo(center).add(Vec.FromAngle(aCA + dAB * (0.5 * (isClockwise ? 1 : -1))).mul(radius));
    if (dAB > originalArcLength) {
      tempC.rotWith(center, PI);
      const t2 = tempB.clone();
      tempB.setTo(tempA);
      tempA.setTo(t2);
    }
  }

  // node_modules/tldraw/dist-esm/lib/shapes/arrow/shared.mjs
  var MIN_ARROW_BEND = 8;
  function getIsArrowStraight(shape) {
    return Math.abs(shape.props.bend) < MIN_ARROW_BEND * shape.props.scale;
  }
  function getBoundShapeInfoForTerminal(editor, arrow4, terminalName) {
    const binding = editor.getBindingsFromShape(arrow4, "arrow").find((b) => b.props.terminal === terminalName);
    if (!binding) return;
    const boundShape = editor.getShape(binding.toId);
    if (!boundShape) return;
    const transform = editor.getShapePageTransform(boundShape);
    const geometry = editor.getShapeGeometry(boundShape);
    const outline = geometry instanceof Group2d ? geometry.children[0].vertices : geometry.vertices;
    return {
      shape: boundShape,
      transform,
      isClosed: geometry.isClosed,
      isExact: binding.props.isExact,
      didIntersect: false,
      outline
    };
  }
  function getArrowTerminalInArrowSpace(editor, arrowPageTransform, binding, forceImprecise) {
    const boundShape = editor.getShape(binding.toId);
    if (!boundShape) {
      return new Vec(0, 0);
    } else {
      const { point, size: size4 } = editor.getShapeGeometry(boundShape).bounds;
      const shapePoint = Vec.Add(
        point,
        Vec.MulV(
          // if the parent is the bound shape, then it's ALWAYS precise
          binding.props.isPrecise || forceImprecise ? binding.props.normalizedAnchor : { x: 0.5, y: 0.5 },
          size4
        )
      );
      const pagePoint = Mat.applyToPoint(editor.getShapePageTransform(boundShape), shapePoint);
      const arrowPoint = Mat.applyToPoint(Mat.Inverse(arrowPageTransform), pagePoint);
      return arrowPoint;
    }
  }
  function getArrowBindings(editor, shape) {
    const bindings = editor.getBindingsFromShape(shape, "arrow");
    return {
      start: bindings.find((b) => b.props.terminal === "start"),
      end: bindings.find((b) => b.props.terminal === "end")
    };
  }
  var arrowInfoCache = createComputedCache("arrow info", (editor, shape) => {
    const bindings = getArrowBindings(editor, shape);
    return getIsArrowStraight(shape) ? getStraightArrowInfo(editor, shape, bindings) : getCurvedArrowInfo(editor, shape, bindings);
  });
  function getArrowInfo(editor, shape) {
    const id = typeof shape === "string" ? shape : shape.id;
    return arrowInfoCache.get(editor, id);
  }
  function getArrowTerminalsInArrowSpace(editor, shape, bindings) {
    const arrowPageTransform = editor.getShapePageTransform(shape);
    const boundShapeRelationships = getBoundShapeRelationships(
      editor,
      bindings.start?.toId,
      bindings.end?.toId
    );
    const start = bindings.start ? getArrowTerminalInArrowSpace(
      editor,
      arrowPageTransform,
      bindings.start,
      boundShapeRelationships === "double-bound" || boundShapeRelationships === "start-contains-end"
    ) : Vec.From(shape.props.start);
    const end = bindings.end ? getArrowTerminalInArrowSpace(
      editor,
      arrowPageTransform,
      bindings.end,
      boundShapeRelationships === "double-bound" || boundShapeRelationships === "end-contains-start"
    ) : Vec.From(shape.props.end);
    return { start, end };
  }
  function createOrUpdateArrowBinding(editor, arrow4, target, props) {
    const arrowId = typeof arrow4 === "string" ? arrow4 : arrow4.id;
    const targetId = typeof target === "string" ? target : target.id;
    const existingMany = editor.getBindingsFromShape(arrowId, "arrow").filter((b) => b.props.terminal === props.terminal);
    if (existingMany.length > 1) {
      editor.deleteBindings(existingMany.slice(1));
    }
    const existing = existingMany[0];
    if (existing) {
      editor.updateBinding({
        ...existing,
        toId: targetId,
        props
      });
    } else {
      editor.createBinding({
        type: "arrow",
        fromId: arrowId,
        toId: targetId,
        props
      });
    }
  }
  function removeArrowBinding(editor, arrow4, terminal) {
    const existing = editor.getBindingsFromShape(arrow4, "arrow").filter((b) => b.props.terminal === terminal);
    editor.deleteBindings(existing);
  }
  var MIN_ARROW_LENGTH = 10;
  var BOUND_ARROW_OFFSET = 10;
  var WAY_TOO_BIG_ARROW_BEND_FACTOR = 10;
  var STROKE_SIZES = {
    s: 2,
    m: 3.5,
    l: 5,
    xl: 10
  };
  function getBoundShapeRelationships(editor, startShapeId, endShapeId) {
    if (!startShapeId || !endShapeId) return "safe";
    if (startShapeId === endShapeId) return "double-bound";
    const startBounds = editor.getShapePageBounds(startShapeId);
    const endBounds = editor.getShapePageBounds(endShapeId);
    if (startBounds && endBounds) {
      if (startBounds.contains(endBounds)) return "start-contains-end";
      if (endBounds.contains(startBounds)) return "end-contains-start";
    }
    return "safe";
  }

  // node_modules/tldraw/dist-esm/lib/bindings/arrow/ArrowBindingUtil.mjs
  var ArrowBindingUtil = class extends BindingUtil {
    static type = "arrow";
    static props = arrowBindingProps;
    static migrations = arrowBindingMigrations;
    getDefaultProps() {
      return {
        isPrecise: false,
        isExact: false,
        normalizedAnchor: { x: 0.5, y: 0.5 }
      };
    }
    // when the binding itself changes
    onAfterCreate({ binding }) {
      const arrow4 = this.editor.getShape(binding.fromId);
      if (!arrow4) return;
      arrowDidUpdate(this.editor, arrow4);
    }
    // when the binding itself changes
    onAfterChange({ bindingAfter }) {
      const arrow4 = this.editor.getShape(bindingAfter.fromId);
      if (!arrow4) return;
      arrowDidUpdate(this.editor, arrow4);
    }
    // when the arrow itself changes
    onAfterChangeFromShape({
      shapeAfter
    }) {
      arrowDidUpdate(this.editor, shapeAfter);
    }
    // when the shape an arrow is bound to changes
    onAfterChangeToShape({ binding }) {
      reparentArrow(this.editor, binding.fromId);
    }
    // when the arrow is isolated we need to update it's x,y positions
    onBeforeIsolateFromShape({
      binding
    }) {
      const arrow4 = this.editor.getShape(binding.fromId);
      if (!arrow4) return;
      updateArrowTerminal({
        editor: this.editor,
        arrow: arrow4,
        terminal: binding.props.terminal
      });
    }
  };
  function reparentArrow(editor, arrowId) {
    const arrow4 = editor.getShape(arrowId);
    if (!arrow4) return;
    const bindings = getArrowBindings(editor, arrow4);
    const { start, end } = bindings;
    const startShape = start ? editor.getShape(start.toId) : void 0;
    const endShape = end ? editor.getShape(end.toId) : void 0;
    const parentPageId = editor.getAncestorPageId(arrow4);
    if (!parentPageId) return;
    let nextParentId;
    if (startShape && endShape) {
      nextParentId = editor.findCommonAncestor([startShape, endShape]) ?? parentPageId;
    } else if (startShape || endShape) {
      const bindingParentId = (startShape || endShape)?.parentId;
      if (bindingParentId && bindingParentId === arrow4.parentId) {
        nextParentId = arrow4.parentId;
      } else {
        nextParentId = parentPageId;
      }
    } else {
      return;
    }
    if (nextParentId && nextParentId !== arrow4.parentId) {
      editor.reparentShapes([arrowId], nextParentId);
    }
    const reparentedArrow = editor.getShape(arrowId);
    if (!reparentedArrow) throw Error("no reparented arrow");
    const startSibling = editor.getShapeNearestSibling(reparentedArrow, startShape);
    const endSibling = editor.getShapeNearestSibling(reparentedArrow, endShape);
    let highestSibling;
    if (startSibling && endSibling) {
      highestSibling = startSibling.index > endSibling.index ? startSibling : endSibling;
    } else if (startSibling && !endSibling) {
      highestSibling = startSibling;
    } else if (endSibling && !startSibling) {
      highestSibling = endSibling;
    } else {
      return;
    }
    let finalIndex;
    const higherSiblings = editor.getSortedChildIdsForParent(highestSibling.parentId).map((id) => editor.getShape(id)).filter((sibling) => sibling.index > highestSibling.index);
    if (higherSiblings.length) {
      const nextHighestNonArrowSibling = higherSiblings.find((sibling) => sibling.type !== "arrow");
      if (
        // ...then, if we're above the last shape we want to be above...
        reparentedArrow.index > highestSibling.index && // ...but below the next non-arrow sibling...
        (!nextHighestNonArrowSibling || reparentedArrow.index < nextHighestNonArrowSibling.index)
      ) {
        return;
      }
      finalIndex = getIndexBetween(highestSibling.index, higherSiblings[0].index);
    } else {
      finalIndex = getIndexAbove(highestSibling.index);
    }
    if (finalIndex !== reparentedArrow.index) {
      editor.updateShapes([{ id: arrowId, type: "arrow", index: finalIndex }]);
    }
  }
  function arrowDidUpdate(editor, arrow4) {
    const bindings = getArrowBindings(editor, arrow4);
    for (const handle of ["start", "end"]) {
      const binding = bindings[handle];
      if (!binding) continue;
      const boundShape = editor.getShape(binding.toId);
      const isShapeInSamePageAsArrow = editor.getAncestorPageId(arrow4) === editor.getAncestorPageId(boundShape);
      if (!boundShape || !isShapeInSamePageAsArrow) {
        updateArrowTerminal({ editor, arrow: arrow4, terminal: handle, unbind: true });
      }
    }
    reparentArrow(editor, arrow4.id);
  }
  function updateArrowTerminal({
    editor,
    arrow: arrow4,
    terminal,
    unbind: unbind2 = false,
    useHandle = false
  }) {
    const info = getArrowInfo(editor, arrow4);
    if (!info) {
      throw new Error("expected arrow info");
    }
    const startPoint = useHandle ? info.start.handle : info.start.point;
    const endPoint = useHandle ? info.end.handle : info.end.point;
    const point = terminal === "start" ? startPoint : endPoint;
    const update = {
      id: arrow4.id,
      type: "arrow",
      props: {
        [terminal]: { x: point.x, y: point.y },
        bend: arrow4.props.bend
      }
    };
    if (!info.isStraight) {
      const newStart = terminal === "start" ? startPoint : info.start.handle;
      const newEnd = terminal === "end" ? endPoint : info.end.handle;
      const newMidPoint = Vec.Med(newStart, newEnd);
      const lineSegment = Vec.Sub(newStart, newEnd).per().uni().mul(info.handleArc.radius * 2 * Math.sign(arrow4.props.bend));
      const intersections = intersectLineSegmentCircle(
        info.handleArc.center,
        Vec.Add(newMidPoint, lineSegment),
        info.handleArc.center,
        info.handleArc.radius
      );
      assert(intersections?.length === 1);
      const bend = Vec.Dist(newMidPoint, intersections[0]) * Math.sign(arrow4.props.bend);
      if (!approximately(bend, update.props.bend)) {
        update.props.bend = bend;
      }
    }
    editor.updateShape(update);
    if (unbind2) {
      removeArrowBinding(editor, arrow4, terminal);
    }
  }

  // node_modules/tldraw/dist-esm/lib/defaultBindingUtils.mjs
  var defaultBindingUtils = [ArrowBindingUtil];

  // node_modules/tldraw/dist-esm/lib/shapes/shared/default-shape-constants.mjs
  var TEXT_PROPS = {
    lineHeight: 1.35,
    fontWeight: "normal",
    fontVariant: "normal",
    fontStyle: "normal",
    padding: "0px"
  };
  var STROKE_SIZES2 = {
    s: 2,
    m: 3.5,
    l: 5,
    xl: 10
  };
  var FONT_SIZES = {
    s: 18,
    m: 24,
    l: 36,
    xl: 44
  };
  var LABEL_FONT_SIZES = {
    s: 18,
    m: 22,
    l: 26,
    xl: 32
  };
  var ARROW_LABEL_FONT_SIZES = {
    s: 18,
    m: 20,
    l: 24,
    xl: 28
  };
  var FONT_FAMILIES = {
    draw: "var(--tl-font-draw)",
    sans: "var(--tl-font-sans)",
    serif: "var(--tl-font-serif)",
    mono: "var(--tl-font-mono)"
  };
  var LABEL_TO_ARROW_PADDING = 20;
  var ARROW_LABEL_PADDING = 4.25;
  var LABEL_PADDING = 16;

  // node_modules/tldraw/dist-esm/lib/utils/assets/assets.mjs
  function containBoxSize(originalSize, containBoxSize2) {
    const overByXScale = originalSize.w / containBoxSize2.w;
    const overByYScale = originalSize.h / containBoxSize2.h;
    if (overByXScale <= 1 && overByYScale <= 1) {
      return originalSize;
    } else if (overByXScale > overByYScale) {
      return {
        w: originalSize.w / overByXScale,
        h: originalSize.h / overByXScale
      };
    } else {
      return {
        w: originalSize.w / overByYScale,
        h: originalSize.h / overByYScale
      };
    }
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/TextHelpers.mjs
  var INDENT = "  ";
  var TextHelpers = class _TextHelpers {
    static insertTextFirefox(field, text) {
      field.setRangeText(
        text,
        field.selectionStart || 0,
        field.selectionEnd || 0,
        "end"
        // Without this, the cursor is either at the beginning or text remains selected
      );
      field.dispatchEvent(
        new InputEvent("input", {
          data: text,
          inputType: "insertText",
          isComposing: false
          // TODO: fix @types/jsdom, this shouldn't be required
        })
      );
    }
    /**
     * Inserts text at the cursor’s position, replacing any selection, with **undo** support and by
     * firing the input event.
     */
    static insert(field, text) {
      const document2 = field.ownerDocument;
      const initialFocus = document2.activeElement;
      if (initialFocus !== field) {
        field.focus();
      }
      if (!document2.execCommand("insertText", false, text)) {
        _TextHelpers.insertTextFirefox(field, text);
      }
      if (initialFocus === document2.body) {
        field.blur();
      } else if (initialFocus instanceof HTMLElement && initialFocus !== field) {
        initialFocus.focus();
      }
    }
    /**
     * Replaces the entire content, equivalent to field.value = text but with **undo** support and by
     * firing the input event.
     */
    static set(field, text) {
      field.select();
      _TextHelpers.insert(field, text);
    }
    /** Get the selected text in a field or an empty string if nothing is selected. */
    static getSelection(field) {
      const { selectionStart, selectionEnd } = field;
      return field.value.slice(
        selectionStart ? selectionStart : void 0,
        selectionEnd ? selectionEnd : void 0
      );
    }
    /**
     * Adds the wrappingText before and after field’s selection (or cursor). If endWrappingText is
     * provided, it will be used instead of wrappingText at on the right.
     */
    static wrapSelection(field, wrap2, wrapEnd) {
      const { selectionStart, selectionEnd } = field;
      const selection = _TextHelpers.getSelection(field);
      _TextHelpers.insert(field, wrap2 + selection + (wrapEnd ?? wrap2));
      field.selectionStart = (selectionStart || 0) + wrap2.length;
      field.selectionEnd = (selectionEnd || 0) + wrap2.length;
    }
    /** Finds and replaces strings and regex in the field’s value. */
    static replace(field, searchValue, replacer) {
      let drift = 0;
      field.value.replace(searchValue, (...args) => {
        const matchStart = drift + args[args.length - 2];
        const matchLength = args[0].length;
        field.selectionStart = matchStart;
        field.selectionEnd = matchStart + matchLength;
        const replacement = typeof replacer === "string" ? replacer : replacer(...args);
        _TextHelpers.insert(field, replacement);
        field.selectionStart = matchStart;
        drift += replacement.length - matchLength;
        return replacement;
      });
    }
    static findLineEnd(value, currentEnd) {
      const lastLineStart = value.lastIndexOf("\n", currentEnd - 1) + 1;
      if (value.charAt(lastLineStart) !== "	") {
        return currentEnd;
      }
      return lastLineStart + 1;
    }
    static indent(element) {
      const { selectionStart, selectionEnd, value } = element;
      const selectedContrast = value.slice(selectionStart, selectionEnd);
      const lineBreakCount = /\n/g.exec(selectedContrast)?.length;
      if (lineBreakCount && lineBreakCount > 0) {
        const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
        const newSelection = element.value.slice(firstLineStart, selectionEnd - 1);
        const indentedText = newSelection.replace(
          /^|\n/g,
          // Match all line starts
          `$&${INDENT}`
        );
        const replacementsCount = indentedText.length - newSelection.length;
        element.setSelectionRange(firstLineStart, selectionEnd - 1);
        _TextHelpers.insert(element, indentedText);
        element.setSelectionRange(selectionStart + 1, selectionEnd + replacementsCount);
      } else {
        _TextHelpers.insert(element, INDENT);
      }
    }
    // The first line should always be unindented
    // The last line should only be unindented if the selection includes any characters after \n
    static unindent(element) {
      const { selectionStart, selectionEnd, value } = element;
      const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
      const minimumSelectionEnd = _TextHelpers.findLineEnd(value, selectionEnd);
      const newSelection = element.value.slice(firstLineStart, minimumSelectionEnd);
      const indentedText = newSelection.replace(/(^|\n)(\t| {1,2})/g, "$1");
      const replacementsCount = newSelection.length - indentedText.length;
      element.setSelectionRange(firstLineStart, minimumSelectionEnd);
      _TextHelpers.insert(element, indentedText);
      const firstLineIndentation = /\t| {1,2}/.exec(value.slice(firstLineStart, selectionStart));
      const difference = firstLineIndentation ? firstLineIndentation[0].length : 0;
      const newSelectionStart = selectionStart - difference;
      element.setSelectionRange(
        selectionStart - difference,
        Math.max(newSelectionStart, selectionEnd - replacementsCount)
      );
    }
    static indentCE(element) {
      const selection = window.getSelection();
      const value = element.innerText;
      const selectionStart = getCaretIndex(element) ?? 0;
      const selectionEnd = getCaretIndex(element) ?? 0;
      const selectedContrast = value.slice(selectionStart, selectionEnd);
      const lineBreakCount = /\n/g.exec(selectedContrast)?.length;
      if (lineBreakCount && lineBreakCount > 0) {
        const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
        const newSelection = value.slice(firstLineStart, selectionEnd - 1);
        const indentedText = newSelection.replace(
          /^|\n/g,
          // Match all line starts
          `$&${INDENT}`
        );
        const replacementsCount = indentedText.length - newSelection.length;
        if (selection) {
          selection.setBaseAndExtent(
            element,
            selectionStart + 1,
            element,
            selectionEnd + replacementsCount
          );
        }
      } else {
        const selection2 = window.getSelection();
        element.innerText = value.slice(0, selectionStart) + INDENT + value.slice(selectionStart);
        selection2?.setBaseAndExtent(element, selectionStart + 1, element, selectionStart + 2);
      }
    }
    static unindentCE(element) {
      const selection = window.getSelection();
      const value = element.innerText;
      const selectionStart = getCaretIndex(element) ?? 0;
      const selectionEnd = getCaretIndex(element) ?? 0;
      const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
      const minimumSelectionEnd = _TextHelpers.findLineEnd(value, selectionEnd);
      const newSelection = value.slice(firstLineStart, minimumSelectionEnd);
      const indentedText = newSelection.replace(/(^|\n)(\t| {1,2})/g, "$1");
      const replacementsCount = newSelection.length - indentedText.length;
      if (selection) {
        selection.setBaseAndExtent(element, firstLineStart, element, minimumSelectionEnd);
        const firstLineIndentation = /\t| {1,2}/.exec(value.slice(firstLineStart, selectionStart));
        const difference = firstLineIndentation ? firstLineIndentation[0].length : 0;
        const newSelectionStart = selectionStart - difference;
        selection.setBaseAndExtent(
          element,
          selectionStart - difference,
          element,
          Math.max(newSelectionStart, selectionEnd - replacementsCount)
        );
      }
    }
    static fixNewLines = /\r?\n|\r/g;
    static normalizeText(text) {
      return text.replace(_TextHelpers.fixNewLines, "\n");
    }
    static normalizeTextForDom(text) {
      return text.replace(_TextHelpers.fixNewLines, "\n").split("\n").map((x) => x || " ").join("\n");
    }
  };
  function getCaretIndex(element) {
    if (typeof window.getSelection === "undefined") return;
    const selection = window.getSelection();
    if (!selection) return;
    let position = 0;
    if (selection.rangeCount !== 0) {
      const range = selection.getRangeAt(0);
      const preCaretRange = range.cloneRange();
      preCaretRange.selectNodeContents(element);
      preCaretRange.setEnd(range.endContainer, range.endOffset);
      position = preCaretRange.toString().length;
    }
    return position;
  }

  // node_modules/tldraw/dist-esm/lib/utils/text/text.mjs
  var rtlRegex = /[\u0590-\u05FF\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]/;
  function isRightToLeftLanguage(text) {
    return rtlRegex.test(text);
  }
  function replaceTabsWithSpaces(text) {
    return text.replace(/\t/g, INDENT);
  }
  function stripCommonMinimumIndentation(text) {
    const lines = text.split("\n");
    while (lines[0] && lines[0].trim().length === 0) {
      lines.shift();
    }
    let minIndentation = Infinity;
    for (const line of lines) {
      if (line.trim().length > 0) {
        const indentation = line.length - line.trimStart().length;
        minIndentation = Math.min(minIndentation, indentation);
      }
    }
    return lines.map((line) => line.slice(minIndentation)).join("\n");
  }
  var COMMON_ENTITY_MAP = {
    "&amp;": "&",
    "&quot;": '"',
    "&apos;": "'",
    "&#34;": '"',
    "&#38;": "&",
    "&#39;": "'",
    "&#8211;": "\u2013",
    "&#8212;": "\u2014",
    "&#8216;": "\u2018",
    "&#8217;": "\u2019",
    "&#8220;": "\u201C",
    "&#8221;": "\u201D",
    "&#8230;": "\u2026"
  };
  var entityRegex = new RegExp(Object.keys(COMMON_ENTITY_MAP).join("|"), "g");
  function convertCommonTitleHTMLEntities(text) {
    return text.replace(entityRegex, (m) => COMMON_ENTITY_MAP[m]);
  }
  function stripTrailingWhitespace(text) {
    return text.replace(/[ \t]+$/gm, "").replace(/\n+$/, "");
  }
  function cleanupText(text) {
    return stripTrailingWhitespace(stripCommonMinimumIndentation(replaceTabsWithSpaces(text)));
  }

  // node_modules/tldraw/dist-esm/lib/defaultExternalContentHandlers.mjs
  function registerDefaultExternalContentHandlers(editor, {
    maxImageDimension,
    maxAssetSize,
    acceptedImageMimeTypes,
    acceptedVideoMimeTypes
  }, { toasts, msg: msg2 }) {
    editor.registerExternalAssetHandler("file", async ({ file, assetId }) => {
      const isImageType = acceptedImageMimeTypes.includes(file.type);
      const isVideoType = acceptedVideoMimeTypes.includes(file.type);
      if (!isImageType && !isVideoType) {
        toasts.addToast({
          title: msg2("assets.files.type-not-allowed"),
          severity: "error"
        });
      }
      assert(isImageType || isVideoType, `File type not allowed: ${file.type}`);
      if (file.size > maxAssetSize) {
        toasts.addToast({
          title: msg2("assets.files.size-too-big"),
          severity: "error"
        });
      }
      assert(
        file.size <= maxAssetSize,
        `File size too big: ${(file.size / 1024).toFixed()}kb > ${(maxAssetSize / 1024).toFixed()}kb`
      );
      const hash = getHashForBuffer(await file.arrayBuffer());
      assetId = assetId ?? AssetRecordType.createId(hash);
      const assetInfo = await getMediaAssetInfoPartial(file, assetId, isImageType, isVideoType);
      if (isFinite(maxImageDimension)) {
        const size4 = { w: assetInfo.props.w, h: assetInfo.props.h };
        const resizedSize = containBoxSize(size4, { w: maxImageDimension, h: maxImageDimension });
        if (size4 !== resizedSize && MediaHelpers.isStaticImageType(file.type)) {
          assetInfo.props.w = resizedSize.w;
          assetInfo.props.h = resizedSize.h;
        }
      }
      assetInfo.props.src = await editor.uploadAsset(assetInfo, file);
      return AssetRecordType.create(assetInfo);
    });
    editor.registerExternalAssetHandler("url", async ({ url }) => {
      let meta;
      try {
        const resp = await fetch(url, {
          method: "GET",
          mode: "no-cors"
        });
        const html = await resp.text();
        const doc = new DOMParser().parseFromString(html, "text/html");
        meta = {
          image: doc.head.querySelector('meta[property="og:image"]')?.getAttribute("content") ?? "",
          favicon: doc.head.querySelector('link[rel="apple-touch-icon"]')?.getAttribute("href") ?? doc.head.querySelector('link[rel="icon"]')?.getAttribute("href") ?? "",
          title: doc.head.querySelector('meta[property="og:title"]')?.getAttribute("content") ?? url,
          description: doc.head.querySelector('meta[property="og:description"]')?.getAttribute("content") ?? ""
        };
        if (!meta.image.startsWith("http")) {
          meta.image = new URL(meta.image, url).href;
        }
        if (!meta.favicon.startsWith("http")) {
          meta.favicon = new URL(meta.favicon, url).href;
        }
      } catch (error) {
        console.error(error);
        toasts.addToast({
          title: msg2("assets.url.failed"),
          severity: "error"
        });
        meta = { image: "", favicon: "", title: "", description: "" };
      }
      return {
        id: AssetRecordType.createId(getHashForString(url)),
        typeName: "asset",
        type: "bookmark",
        props: {
          src: url,
          description: meta.description,
          image: meta.image,
          favicon: meta.favicon,
          title: meta.title
        },
        meta: {}
      };
    });
    editor.registerExternalContentHandler("svg-text", async ({ point, text }) => {
      const position = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageBounds().center);
      const svg = new DOMParser().parseFromString(text, "image/svg+xml").querySelector("svg");
      if (!svg) {
        throw new Error("No <svg/> element present");
      }
      let width = parseFloat(svg.getAttribute("width") || "0");
      let height = parseFloat(svg.getAttribute("height") || "0");
      if (!(width && height)) {
        document.body.appendChild(svg);
        const box = svg.getBoundingClientRect();
        document.body.removeChild(svg);
        width = box.width;
        height = box.height;
      }
      const asset = await editor.getAssetForExternalContent({
        type: "file",
        file: new File([text], "asset.svg", { type: "image/svg+xml" })
      });
      if (!asset) throw Error("Could not create an asset");
      createShapesForAssets(editor, [asset], position);
    });
    editor.registerExternalContentHandler(
      "embed",
      ({ point, url, embed }) => {
        const position = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageBounds().center);
        const { width, height } = embed;
        const id = createShapeId();
        const shapePartial = {
          id,
          type: "embed",
          x: position.x - (width || 450) / 2,
          y: position.y - (height || 450) / 2,
          props: {
            w: width,
            h: height,
            url
          }
        };
        editor.createShapes([shapePartial]).select(id);
      }
    );
    editor.registerExternalContentHandler("files", async ({ point, files }) => {
      if (files.length > editor.options.maxFilesAtOnce) {
        throw Error("Too many files");
      }
      const position = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageBounds().center);
      const pagePoint = new Vec(position.x, position.y);
      const assetsToUpdate = [];
      for (const file of files) {
        if (file.size > maxAssetSize) {
          toasts.addToast({
            title: msg2("assets.files.size-too-big"),
            severity: "error"
          });
          console.warn(
            `File size too big: ${(file.size / 1024).toFixed()}kb > ${(maxAssetSize / 1024).toFixed()}kb`
          );
          continue;
        }
        if (!file.type) {
          toasts.addToast({
            title: msg2("assets.files.upload-failed"),
            severity: "error"
          });
          console.error("No mime type");
          continue;
        }
        if (!acceptedImageMimeTypes.concat(acceptedVideoMimeTypes).includes(file.type)) {
          toasts.addToast({
            title: msg2("assets.files.type-not-allowed"),
            severity: "error"
          });
          console.warn(`${file.name} not loaded - Mime type not allowed ${file.type}.`);
          continue;
        }
        const isImageType = acceptedImageMimeTypes.includes(file.type);
        const isVideoType = acceptedVideoMimeTypes.includes(file.type);
        const hash = getHashForBuffer(await file.arrayBuffer());
        const assetId = AssetRecordType.createId(hash);
        const assetInfo = await getMediaAssetInfoPartial(file, assetId, isImageType, isVideoType);
        let temporaryAssetPreview;
        if (isImageType) {
          temporaryAssetPreview = editor.createTemporaryAssetPreview(assetId, file);
        }
        assetsToUpdate.push({ asset: assetInfo, file, temporaryAssetPreview });
      }
      const assets = [];
      await Promise.allSettled(
        assetsToUpdate.map(async (assetAndFile) => {
          try {
            const newAsset = await editor.getAssetForExternalContent({
              type: "file",
              file: assetAndFile.file
            });
            if (!newAsset) {
              throw Error("Could not create an asset");
            }
            const updated = { ...newAsset, id: assetAndFile.asset.id };
            assets.push(updated);
            editor.updateAssets([updated]);
          } catch (error) {
            toasts.addToast({
              title: msg2("assets.files.upload-failed"),
              severity: "error"
            });
            console.error(error);
            return;
          }
        })
      );
      createShapesForAssets(editor, assets, pagePoint);
    });
    editor.registerExternalContentHandler("text", async ({ point, text }) => {
      const p = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageBounds().center);
      const defaultProps = editor.getShapeUtil("text").getDefaultProps();
      const textToPaste = cleanupText(text);
      const onlySelectedShape = editor.getOnlySelectedShape();
      if (onlySelectedShape && "text" in onlySelectedShape.props) {
        editor.updateShapes([
          {
            id: onlySelectedShape.id,
            type: onlySelectedShape.type,
            props: {
              text: textToPaste
            }
          }
        ]);
        return;
      }
      let w;
      let h;
      let autoSize;
      let align = "middle";
      const isMultiLine = textToPaste.split("\n").length > 1;
      const isRtl = isRightToLeftLanguage(textToPaste);
      if (isMultiLine) {
        align = isMultiLine ? isRtl ? "end" : "start" : "middle";
      }
      const rawSize = editor.textMeasure.measureText(textToPaste, {
        ...TEXT_PROPS,
        fontFamily: FONT_FAMILIES[defaultProps.font],
        fontSize: FONT_SIZES[defaultProps.size],
        maxWidth: null
      });
      const minWidth = Math.min(
        isMultiLine ? editor.getViewportPageBounds().width * 0.9 : 920,
        Math.max(200, editor.getViewportPageBounds().width * 0.9)
      );
      if (rawSize.w > minWidth) {
        const shrunkSize = editor.textMeasure.measureText(textToPaste, {
          ...TEXT_PROPS,
          fontFamily: FONT_FAMILIES[defaultProps.font],
          fontSize: FONT_SIZES[defaultProps.size],
          maxWidth: minWidth
        });
        w = shrunkSize.w;
        h = shrunkSize.h;
        autoSize = false;
        align = isRtl ? "end" : "start";
      } else {
        w = rawSize.w;
        h = rawSize.h;
        autoSize = true;
      }
      if (p.y - h / 2 < editor.getViewportPageBounds().minY + 40) {
        p.y = editor.getViewportPageBounds().minY + 40 + h / 2;
      }
      editor.createShapes([
        {
          id: createShapeId(),
          type: "text",
          x: p.x - w / 2,
          y: p.y - h / 2,
          props: {
            text: textToPaste,
            // if the text has more than one line, align it to the left
            textAlign: align,
            autoSize,
            w
          }
        }
      ]);
    });
    editor.registerExternalContentHandler("url", async ({ point, url }) => {
      const embedUtil = editor.getShapeUtil("embed");
      const embedInfo = embedUtil?.getEmbedDefinition(url);
      if (embedInfo) {
        return editor.putExternalContent({
          type: "embed",
          url: embedInfo.url,
          point,
          embed: embedInfo.definition
        });
      }
      const position = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageBounds().center);
      const assetId = AssetRecordType.createId(getHashForString(url));
      const shape = createEmptyBookmarkShape(editor, url, position);
      let asset = editor.getAsset(assetId);
      let shouldAlsoCreateAsset = false;
      if (!asset) {
        shouldAlsoCreateAsset = true;
        try {
          const bookmarkAsset = await editor.getAssetForExternalContent({ type: "url", url });
          if (!bookmarkAsset) throw Error("Could not create an asset");
          asset = bookmarkAsset;
        } catch {
          toasts.addToast({
            title: msg2("assets.url.failed"),
            severity: "error"
          });
          return;
        }
      }
      editor.run(() => {
        if (shouldAlsoCreateAsset) {
          editor.createAssets([asset]);
        }
        editor.updateShapes([
          {
            id: shape.id,
            type: shape.type,
            props: {
              assetId: asset.id
            }
          }
        ]);
      });
    });
  }
  async function getMediaAssetInfoPartial(file, assetId, isImageType, isVideoType) {
    let fileType = file.type;
    if (file.type === "video/quicktime") {
      fileType = "video/mp4";
    }
    const size4 = isImageType ? await MediaHelpers.getImageSize(file) : await MediaHelpers.getVideoSize(file);
    const isAnimated = await MediaHelpers.isAnimated(file) || isVideoType;
    const assetInfo = {
      id: assetId,
      type: isImageType ? "image" : "video",
      typeName: "asset",
      props: {
        name: file.name,
        src: "",
        w: size4.w,
        h: size4.h,
        fileSize: file.size,
        mimeType: fileType,
        isAnimated
      },
      meta: {}
    };
    return assetInfo;
  }
  async function createShapesForAssets(editor, assets, position) {
    if (!assets.length) return [];
    const currentPoint = Vec.From(position);
    const partials = [];
    for (let i = 0; i < assets.length; i++) {
      const asset = assets[i];
      switch (asset.type) {
        case "image": {
          partials.push({
            id: createShapeId(),
            type: "image",
            x: currentPoint.x,
            y: currentPoint.y,
            opacity: 1,
            props: {
              assetId: asset.id,
              w: asset.props.w,
              h: asset.props.h
            }
          });
          currentPoint.x += asset.props.w;
          break;
        }
        case "video": {
          partials.push({
            id: createShapeId(),
            type: "video",
            x: currentPoint.x,
            y: currentPoint.y,
            opacity: 1,
            props: {
              assetId: asset.id,
              w: asset.props.w,
              h: asset.props.h
            }
          });
          currentPoint.x += asset.props.w;
        }
      }
    }
    editor.run(() => {
      const assetsToCreate = assets.filter((asset) => !editor.getAsset(asset.id));
      if (assetsToCreate.length) {
        editor.createAssets(assetsToCreate);
      }
      editor.createShapes(partials).select(...partials.map((p) => p.id));
      centerSelectionAroundPoint(editor, position);
    });
    return partials.map((p) => p.id);
  }
  function centerSelectionAroundPoint(editor, position) {
    const viewportPageBounds = editor.getViewportPageBounds();
    let selectionPageBounds = editor.getSelectionPageBounds();
    if (selectionPageBounds) {
      const offset4 = selectionPageBounds.center.sub(position);
      editor.updateShapes(
        editor.getSelectedShapes().map((shape) => {
          const localRotation = editor.getShapeParentTransform(shape).decompose().rotation;
          const localDelta = Vec.Rot(offset4, -localRotation);
          return {
            id: shape.id,
            type: shape.type,
            x: shape.x - localDelta.x,
            y: shape.y - localDelta.y
          };
        })
      );
    }
    selectionPageBounds = editor.getSelectionPageBounds();
    if (selectionPageBounds && editor.getInstanceState().isGridMode) {
      const gridSize = editor.getDocumentSettings().gridSize;
      const topLeft = new Vec(selectionPageBounds.minX, selectionPageBounds.minY);
      const gridSnappedPoint = topLeft.clone().snapToGrid(gridSize);
      const delta = Vec.Sub(topLeft, gridSnappedPoint);
      editor.updateShapes(
        editor.getSelectedShapes().map((shape) => {
          const newPoint = { x: shape.x - delta.x, y: shape.y - delta.y };
          return {
            id: shape.id,
            type: shape.type,
            x: newPoint.x,
            y: newPoint.y
          };
        })
      );
    }
    selectionPageBounds = editor.getSelectionPageBounds();
    if (selectionPageBounds && !viewportPageBounds.contains(selectionPageBounds)) {
      editor.zoomToSelection({ animation: { duration: editor.options.animationMediumMs } });
    }
  }
  function createEmptyBookmarkShape(editor, url, position) {
    const partial = {
      id: createShapeId(),
      type: "bookmark",
      x: position.x - 150,
      y: position.y - 160,
      opacity: 1,
      props: {
        assetId: null,
        url
      }
    };
    editor.run(() => {
      editor.createShapes([partial]).select(partial.id);
      centerSelectionAroundPoint(editor, position);
    });
    return editor.getShape(partial.id);
  }

  // node_modules/tldraw/dist-esm/lib/shapes/arrow/toolStates/Idle.mjs
  var Idle2 = class extends StateNode {
    static id = "idle";
    onPointerDown(info) {
      this.parent.transition("pointing", info);
    }
    onEnter() {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    }
    onCancel() {
      this.editor.setCurrentTool("select");
    }
    onKeyUp(info) {
      if (info.key === "Enter") {
        if (this.editor.getIsReadonly()) return null;
        const onlySelectedShape = this.editor.getOnlySelectedShape();
        if (onlySelectedShape && this.editor.getShapeUtil(onlySelectedShape).canEdit(onlySelectedShape)) {
          this.editor.setCurrentTool("select");
          this.editor.setEditingShape(onlySelectedShape.id);
          this.editor.root.getCurrent()?.transition("editing_shape", {
            ...info,
            target: "shape",
            shape: onlySelectedShape
          });
        }
      }
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/arrow/toolStates/Pointing.mjs
  var Pointing2 = class extends StateNode {
    static id = "pointing";
    shape;
    markId = "";
    onEnter() {
      this.markId = "";
      this.didTimeout = false;
      const target = this.editor.getShapeAtPoint(this.editor.inputs.currentPagePoint, {
        filter: (targetShape) => {
          return !targetShape.isLocked && this.editor.canBindShapes({ fromShape: "arrow", toShape: targetShape, binding: "arrow" });
        },
        margin: 0,
        hitInside: true,
        renderingOnly: true
      });
      if (!target) {
        this.createArrowShape();
      } else {
        this.editor.setHintingShapes([target.id]);
      }
      this.startPreciseTimeout();
    }
    onExit() {
      this.shape = void 0;
      this.editor.setHintingShapes([]);
      this.clearPreciseTimeout();
    }
    onPointerMove() {
      if (this.editor.inputs.isDragging) {
        if (!this.shape) {
          this.createArrowShape();
        }
        if (!this.shape) throw Error(`expected shape`);
        this.updateArrowShapeEndHandle();
        this.editor.setCurrentTool("select.dragging_handle", {
          shape: this.shape,
          handle: { id: "end", type: "vertex", index: "a3", x: 0, y: 0 },
          isCreating: true,
          creatingMarkId: this.markId || void 0,
          onInteractionEnd: "arrow"
        });
      }
    }
    onPointerUp() {
      this.cancel();
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.cancel();
    }
    onInterrupt() {
      this.cancel();
    }
    cancel() {
      if (this.shape) {
        this.editor.bailToMark(this.markId);
      }
      this.editor.setHintingShapes([]);
      this.parent.transition("idle");
    }
    createArrowShape() {
      const { originPagePoint } = this.editor.inputs;
      const id = createShapeId();
      this.markId = this.editor.markHistoryStoppingPoint(`creating_arrow:${id}`);
      const newPoint = maybeSnapToGrid(originPagePoint, this.editor);
      this.editor.createShape({
        id,
        type: "arrow",
        x: newPoint.x,
        y: newPoint.y,
        props: {
          scale: this.editor.user.getIsDynamicResizeMode() ? 1 / this.editor.getZoomLevel() : 1
        }
      });
      const shape = this.editor.getShape(id);
      if (!shape) throw Error(`expected shape`);
      const handles = this.editor.getShapeHandles(shape);
      if (!handles) throw Error(`expected handles for arrow`);
      const util = this.editor.getShapeUtil("arrow");
      const initial = this.shape;
      const startHandle = handles.find((h) => h.id === "start");
      const change = util.onHandleDrag?.(shape, {
        handle: { ...startHandle, x: 0, y: 0 },
        isPrecise: true,
        initial
      });
      if (change) {
        this.editor.updateShapes([change]);
      }
      this.shape = this.editor.getShape(id);
      this.editor.select(id);
    }
    updateArrowShapeEndHandle() {
      const shape = this.shape;
      if (!shape) throw Error(`expected shape`);
      const handles = this.editor.getShapeHandles(shape);
      if (!handles) throw Error(`expected handles for arrow`);
      {
        const util = this.editor.getShapeUtil("arrow");
        const initial = this.shape;
        const startHandle = handles.find((h) => h.id === "start");
        const change = util.onHandleDrag?.(shape, {
          handle: { ...startHandle, x: 0, y: 0 },
          isPrecise: this.didTimeout,
          // sure about that?
          initial
        });
        if (change) {
          this.editor.updateShapes([change]);
        }
      }
      {
        const util = this.editor.getShapeUtil("arrow");
        const initial = this.shape;
        const point = this.editor.getPointInShapeSpace(shape, this.editor.inputs.currentPagePoint);
        const endHandle = handles.find((h) => h.id === "end");
        const change = util.onHandleDrag?.(this.editor.getShape(shape), {
          handle: { ...endHandle, x: point.x, y: point.y },
          isPrecise: false,
          // sure about that?
          initial
        });
        if (change) {
          this.editor.updateShapes([change]);
        }
      }
      this.shape = this.editor.getShape(shape.id);
    }
    preciseTimeout = -1;
    didTimeout = false;
    startPreciseTimeout() {
      this.preciseTimeout = this.editor.timers.setTimeout(() => {
        if (!this.getIsActive()) return;
        this.didTimeout = true;
      }, 320);
    }
    clearPreciseTimeout() {
      clearTimeout(this.preciseTimeout);
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/arrow/ArrowShapeTool.mjs
  var ArrowShapeTool = class extends StateNode {
    static id = "arrow";
    static initial = "idle";
    static children() {
      return [Idle2, Pointing2];
    }
    shapeType = "arrow";
  };

  // node_modules/tldraw/dist-esm/lib/shapes/draw/toolStates/Drawing.mjs
  var Drawing = class extends StateNode {
    static id = "drawing";
    info = {};
    initialShape;
    shapeType = this.parent.id === "highlight" ? "highlight" : "draw";
    util = this.editor.getShapeUtil(this.shapeType);
    isPen = false;
    isPenOrStylus = false;
    segmentMode = "free";
    didJustShiftClickToExtendPreviousShapeLine = false;
    pagePointWhereCurrentSegmentChanged = {};
    pagePointWhereNextSegmentChanged = null;
    lastRecordedPoint = {};
    mergeNextPoint = false;
    currentLineLength = 0;
    markId = null;
    onEnter(info) {
      this.markId = null;
      this.info = info;
      this.lastRecordedPoint = this.editor.inputs.currentPagePoint.clone();
      this.startShape();
    }
    onPointerMove() {
      const { inputs } = this.editor;
      if (this.isPen && !inputs.isPen) {
        if (this.markId) {
          this.editor.bailToMark(this.markId);
          this.startShape();
          return;
        }
      }
      if (this.isPenOrStylus) {
        if (Vec.Dist(inputs.currentPagePoint, this.lastRecordedPoint) >= 1 / this.editor.getZoomLevel()) {
          this.lastRecordedPoint = inputs.currentPagePoint.clone();
          this.mergeNextPoint = false;
        } else {
          this.mergeNextPoint = true;
        }
      } else {
        this.mergeNextPoint = false;
      }
      this.updateDrawingShape();
    }
    onKeyDown(info) {
      if (info.key === "Shift") {
        switch (this.segmentMode) {
          case "free": {
            this.segmentMode = "starting_straight";
            this.pagePointWhereNextSegmentChanged = this.editor.inputs.currentPagePoint.clone();
            break;
          }
          case "starting_free": {
            this.segmentMode = "starting_straight";
          }
        }
      }
      this.updateDrawingShape();
    }
    onKeyUp(info) {
      if (info.key === "Shift") {
        this.editor.snaps.clearIndicators();
        switch (this.segmentMode) {
          case "straight": {
            this.segmentMode = "starting_free";
            this.pagePointWhereNextSegmentChanged = this.editor.inputs.currentPagePoint.clone();
            break;
          }
          case "starting_straight": {
            this.pagePointWhereNextSegmentChanged = null;
            this.segmentMode = "free";
            break;
          }
        }
      }
      this.updateDrawingShape();
    }
    onExit() {
      this.editor.snaps.clearIndicators();
      this.pagePointWhereCurrentSegmentChanged = this.editor.inputs.currentPagePoint.clone();
    }
    canClose() {
      return this.shapeType !== "highlight";
    }
    getIsClosed(segments, size4, scale) {
      if (!this.canClose()) return false;
      const strokeWidth = STROKE_SIZES2[size4];
      const firstPoint = segments[0].points[0];
      const lastSegment = segments[segments.length - 1];
      const lastPoint = lastSegment.points[lastSegment.points.length - 1];
      return firstPoint !== lastPoint && this.currentLineLength > strokeWidth * 4 * scale && Vec.DistMin(firstPoint, lastPoint, strokeWidth * 2 * scale);
    }
    startShape() {
      const {
        inputs: { originPagePoint, isPen }
      } = this.editor;
      this.markId = this.editor.markHistoryStoppingPoint("draw start");
      const { z = 0.5 } = this.info.point;
      this.isPen = isPen;
      this.isPenOrStylus = isPen || z > 0 && z < 0.5 || z > 0.5 && z < 1;
      const pressure = this.isPenOrStylus ? z * 1.25 : 0.5;
      this.segmentMode = this.editor.inputs.shiftKey ? "straight" : "free";
      this.didJustShiftClickToExtendPreviousShapeLine = false;
      this.lastRecordedPoint = originPagePoint.clone();
      if (this.initialShape) {
        const shape = this.editor.getShape(this.initialShape.id);
        if (shape && this.segmentMode === "straight") {
          this.didJustShiftClickToExtendPreviousShapeLine = true;
          const prevSegment = last(shape.props.segments);
          if (!prevSegment) throw Error("Expected a previous segment!");
          const prevPoint = last(prevSegment.points);
          if (!prevPoint) throw Error("Expected a previous point!");
          const { x, y } = this.editor.getPointInShapeSpace(shape, originPagePoint).toFixed();
          const newSegment = {
            type: this.segmentMode,
            points: [
              {
                x: prevPoint.x,
                y: prevPoint.y,
                z: +pressure.toFixed(2)
              },
              {
                x,
                y,
                z: +pressure.toFixed(2)
              }
            ]
          };
          const prevPointPageSpace = Mat.applyToPoint(
            this.editor.getShapePageTransform(shape.id),
            prevPoint
          );
          this.pagePointWhereCurrentSegmentChanged = prevPointPageSpace;
          this.pagePointWhereNextSegmentChanged = null;
          const segments = [...shape.props.segments, newSegment];
          if (this.currentLineLength < STROKE_SIZES2[shape.props.size] * 4) {
            this.currentLineLength = this.getLineLength(segments);
          }
          const shapePartial = {
            id: shape.id,
            type: this.shapeType,
            props: {
              segments
            }
          };
          if (this.canClose()) {
            ;
            shapePartial.props.isClosed = this.getIsClosed(
              segments,
              shape.props.size,
              shape.props.scale
            );
          }
          this.editor.updateShapes([shapePartial]);
          return;
        }
      }
      this.pagePointWhereCurrentSegmentChanged = originPagePoint.clone();
      const id = createShapeId();
      this.editor.createShapes([
        {
          id,
          type: this.shapeType,
          x: originPagePoint.x,
          y: originPagePoint.y,
          props: {
            isPen: this.isPenOrStylus,
            scale: this.editor.user.getIsDynamicResizeMode() ? 1 / this.editor.getZoomLevel() : 1,
            segments: [
              {
                type: this.segmentMode,
                points: [
                  {
                    x: 0,
                    y: 0,
                    z: +pressure.toFixed(2)
                  }
                ]
              }
            ]
          }
        }
      ]);
      this.currentLineLength = 0;
      this.initialShape = this.editor.getShape(id);
    }
    updateDrawingShape() {
      const { initialShape } = this;
      const { inputs } = this.editor;
      if (!initialShape) return;
      const {
        id,
        props: { size: size4, scale }
      } = initialShape;
      const shape = this.editor.getShape(id);
      if (!shape) return;
      const { segments } = shape.props;
      const { x, y, z } = this.editor.getPointInShapeSpace(shape, inputs.currentPagePoint).toFixed();
      const pressure = this.isPenOrStylus ? +(inputs.currentPagePoint.z * 1.25).toFixed(2) : 0.5;
      const newPoint = { x, y, z: pressure };
      switch (this.segmentMode) {
        case "starting_straight": {
          const { pagePointWhereNextSegmentChanged } = this;
          if (pagePointWhereNextSegmentChanged === null) {
            throw Error("We should have a point where the segment changed");
          }
          const hasMovedFarEnough = Vec.Dist2(pagePointWhereNextSegmentChanged, inputs.currentPagePoint) > this.editor.options.dragDistanceSquared;
          if (hasMovedFarEnough) {
            this.pagePointWhereCurrentSegmentChanged = this.pagePointWhereNextSegmentChanged.clone();
            this.pagePointWhereNextSegmentChanged = null;
            this.segmentMode = "straight";
            const prevSegment = last(segments);
            if (!prevSegment) throw Error("Expected a previous segment!");
            const prevLastPoint = last(prevSegment.points);
            if (!prevLastPoint) throw Error("Expected a previous last point!");
            let newSegment;
            const newLastPoint = this.editor.getPointInShapeSpace(shape, this.pagePointWhereCurrentSegmentChanged).toFixed().toJson();
            if (prevSegment.type === "straight") {
              this.currentLineLength += Vec.Dist(prevLastPoint, newLastPoint);
              newSegment = {
                type: "straight",
                points: [{ ...prevLastPoint }, newLastPoint]
              };
              const transform = this.editor.getShapePageTransform(shape);
              this.pagePointWhereCurrentSegmentChanged = Mat.applyToPoint(transform, prevLastPoint);
            } else {
              newSegment = {
                type: "straight",
                points: [newLastPoint, newPoint]
              };
            }
            const shapePartial = {
              id,
              type: this.shapeType,
              props: {
                segments: [...segments, newSegment]
              }
            };
            if (this.canClose()) {
              ;
              shapePartial.props.isClosed = this.getIsClosed(
                segments,
                size4,
                scale
              );
            }
            this.editor.updateShapes([shapePartial]);
          }
          break;
        }
        case "starting_free": {
          const { pagePointWhereNextSegmentChanged } = this;
          if (pagePointWhereNextSegmentChanged === null) {
            throw Error("We should have a point where the segment changed");
          }
          const hasMovedFarEnough = Vec.Dist2(pagePointWhereNextSegmentChanged, inputs.currentPagePoint) > this.editor.options.dragDistanceSquared;
          if (hasMovedFarEnough) {
            this.pagePointWhereCurrentSegmentChanged = this.pagePointWhereNextSegmentChanged.clone();
            this.pagePointWhereNextSegmentChanged = null;
            this.segmentMode = "free";
            const newSegments = segments.slice();
            const prevStraightSegment = newSegments[newSegments.length - 1];
            const prevPoint = last(prevStraightSegment.points);
            if (!prevPoint) {
              throw Error("No previous point!");
            }
            const newFreeSegment = {
              type: "free",
              points: [
                ...Vec.PointsBetween(prevPoint, newPoint, 6).map((p) => ({
                  x: toFixed(p.x),
                  y: toFixed(p.y),
                  z: toFixed(p.z)
                }))
              ]
            };
            const finalSegments = [...newSegments, newFreeSegment];
            if (this.currentLineLength < STROKE_SIZES2[shape.props.size] * 4) {
              this.currentLineLength = this.getLineLength(finalSegments);
            }
            const shapePartial = {
              id,
              type: this.shapeType,
              props: {
                segments: finalSegments
              }
            };
            if (this.canClose()) {
              ;
              shapePartial.props.isClosed = this.getIsClosed(
                finalSegments,
                size4,
                scale
              );
            }
            this.editor.updateShapes([shapePartial]);
          }
          break;
        }
        case "straight": {
          const newSegments = segments.slice();
          const newSegment = newSegments[newSegments.length - 1];
          const { pagePointWhereCurrentSegmentChanged } = this;
          const { ctrlKey, currentPagePoint } = this.editor.inputs;
          if (!pagePointWhereCurrentSegmentChanged)
            throw Error("We should have a point where the segment changed");
          let pagePoint;
          let shouldSnapToAngle = false;
          if (this.didJustShiftClickToExtendPreviousShapeLine) {
            if (this.editor.inputs.isDragging) {
              shouldSnapToAngle = !ctrlKey;
              this.didJustShiftClickToExtendPreviousShapeLine = false;
            } else {
            }
          } else {
            shouldSnapToAngle = !ctrlKey;
          }
          let newPoint2 = this.editor.getPointInShapeSpace(shape, currentPagePoint).toFixed().toJson();
          let didSnap = false;
          let snapSegment = void 0;
          const shouldSnap = this.editor.user.getIsSnapMode() ? !ctrlKey : ctrlKey;
          if (shouldSnap) {
            if (newSegments.length > 2) {
              let nearestPoint = void 0;
              let minDistance = 8 / this.editor.getZoomLevel();
              for (let i = 0, n = segments.length - 2; i < n; i++) {
                const segment = segments[i];
                if (!segment) break;
                if (segment.type === "free") continue;
                const first = segment.points[0];
                const lastPoint = last(segment.points);
                if (!(first && lastPoint)) continue;
                const nearestPointOnSegment = Vec.NearestPointOnLineSegment(
                  first,
                  lastPoint,
                  newPoint2
                );
                if (Vec.DistMin(nearestPointOnSegment, newPoint2, minDistance)) {
                  nearestPoint = nearestPointOnSegment.toFixed().toJson();
                  minDistance = Vec.Dist(nearestPointOnSegment, newPoint2);
                  snapSegment = segment;
                  break;
                }
              }
              if (nearestPoint) {
                didSnap = true;
                newPoint2 = nearestPoint;
              }
            }
          }
          if (didSnap && snapSegment) {
            const transform = this.editor.getShapePageTransform(shape);
            const first = snapSegment.points[0];
            const lastPoint = last(snapSegment.points);
            if (!lastPoint) throw Error("Expected a last point!");
            const A = Mat.applyToPoint(transform, first);
            const B = Mat.applyToPoint(transform, lastPoint);
            const snappedPoint = Mat.applyToPoint(transform, newPoint2);
            this.editor.snaps.setIndicators([
              {
                id: uniqueId(),
                type: "points",
                points: [A, snappedPoint, B]
              }
            ]);
          } else {
            this.editor.snaps.clearIndicators();
            if (shouldSnapToAngle) {
              const currentAngle = Vec.Angle(pagePointWhereCurrentSegmentChanged, currentPagePoint);
              const snappedAngle = snapAngle(currentAngle, 24);
              const angleDiff = snappedAngle - currentAngle;
              pagePoint = Vec.RotWith(
                currentPagePoint,
                pagePointWhereCurrentSegmentChanged,
                angleDiff
              );
            } else {
              pagePoint = currentPagePoint;
            }
            newPoint2 = this.editor.getPointInShapeSpace(shape, pagePoint).toFixed().toJson();
          }
          this.currentLineLength += Vec.Dist(newSegment.points[0], newPoint2);
          newSegments[newSegments.length - 1] = {
            ...newSegment,
            type: "straight",
            points: [newSegment.points[0], newPoint2]
          };
          const shapePartial = {
            id,
            type: this.shapeType,
            props: {
              segments: newSegments
            }
          };
          if (this.canClose()) {
            ;
            shapePartial.props.isClosed = this.getIsClosed(
              segments,
              size4,
              scale
            );
          }
          this.editor.updateShapes([shapePartial]);
          break;
        }
        case "free": {
          const newSegments = segments.slice();
          const newSegment = newSegments[newSegments.length - 1];
          const newPoints = [...newSegment.points];
          if (newPoints.length && this.mergeNextPoint) {
            const { z: z2 } = newPoints[newPoints.length - 1];
            newPoints[newPoints.length - 1] = {
              x: newPoint.x,
              y: newPoint.y,
              z: z2 ? Math.max(z2, newPoint.z) : newPoint.z
            };
          } else {
            this.currentLineLength += Vec.Dist(newPoints[newPoints.length - 1], newPoint);
            newPoints.push(newPoint);
          }
          newSegments[newSegments.length - 1] = {
            ...newSegment,
            points: newPoints
          };
          if (this.currentLineLength < STROKE_SIZES2[shape.props.size] * 4) {
            this.currentLineLength = this.getLineLength(newSegments);
          }
          const shapePartial = {
            id,
            type: this.shapeType,
            props: {
              segments: newSegments
            }
          };
          if (this.canClose()) {
            ;
            shapePartial.props.isClosed = this.getIsClosed(
              newSegments,
              size4,
              scale
            );
          }
          this.editor.updateShapes([shapePartial]);
          if (newPoints.length > this.editor.options.maxPointsPerDrawShape) {
            this.editor.updateShapes([{ id, type: this.shapeType, props: { isComplete: true } }]);
            const newShapeId = createShapeId();
            const props = this.editor.getShape(id).props;
            this.editor.createShapes([
              {
                id: newShapeId,
                type: this.shapeType,
                x: toFixed(inputs.currentPagePoint.x),
                y: toFixed(inputs.currentPagePoint.y),
                props: {
                  isPen: this.isPenOrStylus,
                  scale: props.scale,
                  segments: [
                    {
                      type: "free",
                      points: [{ x: 0, y: 0, z: this.isPenOrStylus ? +(z * 1.25).toFixed() : 0.5 }]
                    }
                  ]
                }
              }
            ]);
            this.initialShape = structuredClone(this.editor.getShape(newShapeId));
            this.mergeNextPoint = false;
            this.lastRecordedPoint = inputs.currentPagePoint.clone();
            this.currentLineLength = 0;
          }
          break;
        }
      }
    }
    getLineLength(segments) {
      let length = 0;
      for (const segment of segments) {
        for (let i = 0; i < segment.points.length - 1; i++) {
          const A = segment.points[i];
          const B = segment.points[i + 1];
          length += Vec.Dist2(B, A);
        }
      }
      return Math.sqrt(length);
    }
    onPointerUp() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.complete();
    }
    onInterrupt() {
      if (this.editor.inputs.isDragging) {
        return;
      }
      if (this.markId) {
        this.editor.bailToMark(this.markId);
      }
      this.cancel();
    }
    complete() {
      const { initialShape } = this;
      if (!initialShape) return;
      this.editor.updateShapes([
        { id: initialShape.id, type: initialShape.type, props: { isComplete: true } }
      ]);
      this.parent.transition("idle");
    }
    cancel() {
      this.parent.transition("idle", this.info);
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/draw/toolStates/Idle.mjs
  var Idle3 = class extends StateNode {
    static id = "idle";
    onPointerDown(info) {
      this.parent.transition("drawing", info);
    }
    onEnter() {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    }
    onCancel() {
      this.editor.setCurrentTool("select");
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/draw/DrawShapeTool.mjs
  var DrawShapeTool = class extends StateNode {
    static id = "draw";
    static initial = "idle";
    static isLockable = false;
    static children() {
      return [Idle3, Drawing];
    }
    shapeType = "draw";
    onExit() {
      const drawingState = this.children["drawing"];
      drawingState.initialShape = void 0;
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/frame/FrameShapeTool.mjs
  var FrameShapeTool = class extends BaseBoxShapeTool {
    static id = "frame";
    static initial = "idle";
    shapeType = "frame";
    onCreate(shape) {
      if (!shape) return;
      const bounds = this.editor.getShapePageBounds(shape);
      const shapesToAddToFrame = [];
      const ancestorIds = this.editor.getShapeAncestors(shape).map((shape2) => shape2.id);
      this.editor.getSortedChildIdsForParent(shape.parentId).map((siblingShapeId) => {
        const siblingShape = this.editor.getShape(siblingShapeId);
        if (!siblingShape) return;
        if (siblingShape.id === shape.id) return;
        if (siblingShape.isLocked) return;
        const pageShapeBounds = this.editor.getShapePageBounds(siblingShape);
        if (!pageShapeBounds) return;
        if (bounds.contains(pageShapeBounds)) {
          if (canEnclose(siblingShape, ancestorIds, shape)) {
            shapesToAddToFrame.push(siblingShape.id);
          }
        }
      });
      this.editor.reparentShapes(shapesToAddToFrame, shape.id);
      if (this.editor.getInstanceState().isToolLocked) {
        this.editor.setCurrentTool("frame");
      } else {
        this.editor.setCurrentTool("select.idle");
      }
    }
  };
  function canEnclose(shape, ancestorIds, frame2) {
    if (ancestorIds.includes(shape.id)) {
      return false;
    }
    if (shape.parentId === frame2.parentId) {
      return true;
    }
    return false;
  }

  // node_modules/tldraw/dist-esm/lib/shapes/geo/toolStates/Idle.mjs
  var Idle4 = class extends StateNode {
    static id = "idle";
    onPointerDown(info) {
      this.parent.transition("pointing", info);
    }
    onEnter() {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    }
    onKeyUp(info) {
      if (info.key === "Enter") {
        if (this.editor.getIsReadonly()) return null;
        const onlySelectedShape = this.editor.getOnlySelectedShape();
        if (onlySelectedShape && this.editor.getShapeUtil(onlySelectedShape).canEdit(onlySelectedShape)) {
          this.editor.setCurrentTool("select");
          this.editor.setEditingShape(onlySelectedShape.id);
          this.editor.root.getCurrent()?.transition("editing_shape", {
            ...info,
            target: "shape",
            shape: onlySelectedShape
          });
        }
      }
    }
    onCancel() {
      this.editor.setCurrentTool("select");
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/geo/toolStates/Pointing.mjs
  var Pointing3 = class extends StateNode {
    static id = "pointing";
    onPointerUp() {
      this.complete();
    }
    onPointerMove(info) {
      if (this.editor.inputs.isDragging) {
        const { originPagePoint } = this.editor.inputs;
        const id = createShapeId();
        const creatingMarkId = this.editor.markHistoryStoppingPoint(`creating_geo:${id}`);
        const newPoint = maybeSnapToGrid(originPagePoint, this.editor);
        this.editor.createShapes([
          {
            id,
            type: "geo",
            x: newPoint.x,
            y: newPoint.y,
            props: {
              w: 1,
              h: 1,
              geo: this.editor.getStyleForNextShape(GeoShapeGeoStyle),
              scale: this.editor.user.getIsDynamicResizeMode() ? 1 / this.editor.getZoomLevel() : 1
            }
          }
        ]).select(id).setCurrentTool("select.resizing", {
          ...info,
          target: "selection",
          handle: "bottom_right",
          isCreating: true,
          creatingMarkId,
          creationCursorOffset: { x: 1, y: 1 },
          onInteractionEnd: "geo"
        });
      }
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.complete();
    }
    onInterrupt() {
      this.cancel();
    }
    complete() {
      const { originPagePoint } = this.editor.inputs;
      const id = createShapeId();
      this.editor.markHistoryStoppingPoint(`creating_geo:${id}`);
      const scale = this.editor.user.getIsDynamicResizeMode() ? 1 / this.editor.getZoomLevel() : 1;
      const geo = this.editor.getStyleForNextShape(GeoShapeGeoStyle);
      const size4 = geo === "star" ? { w: 200, h: 190 } : geo === "cloud" ? { w: 300, h: 180 } : { w: 200, h: 200 };
      this.editor.createShapes([
        {
          id,
          type: "geo",
          x: originPagePoint.x,
          y: originPagePoint.y,
          props: {
            geo: this.editor.getStyleForNextShape(GeoShapeGeoStyle),
            scale,
            ...size4
          }
        }
      ]);
      const shape = this.editor.getShape(id);
      if (!shape) return;
      const { w, h } = shape.props;
      const delta = new Vec(w / 2, h / 2).mul(scale);
      const parentTransform = this.editor.getShapeParentTransform(shape);
      if (parentTransform) delta.rot(-parentTransform.rotation());
      const newPoint = maybeSnapToGrid(new Vec(shape.x - delta.x, shape.y - delta.y), this.editor);
      this.editor.select(id);
      this.editor.updateShape({
        id: shape.id,
        type: "geo",
        x: newPoint.x,
        y: newPoint.y,
        props: {
          geo: this.editor.getStyleForNextShape(GeoShapeGeoStyle),
          w: w * scale,
          h: h * scale
        }
      });
      if (this.editor.getInstanceState().isToolLocked) {
        this.parent.transition("idle");
      } else {
        this.editor.setCurrentTool("select", {});
      }
    }
    cancel() {
      this.parent.transition("idle");
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/geo/GeoShapeTool.mjs
  var GeoShapeTool = class extends StateNode {
    static id = "geo";
    static initial = "idle";
    static children() {
      return [Idle4, Pointing3];
    }
    shapeType = "geo";
  };

  // node_modules/tldraw/dist-esm/lib/shapes/highlight/HighlightShapeTool.mjs
  var HighlightShapeTool = class extends StateNode {
    static id = "highlight";
    static initial = "idle";
    static children() {
      return [Idle3, Drawing];
    }
    static isLockable = false;
    shapeType = "highlight";
    onExit() {
      const drawingState = this.children["drawing"];
      drawingState.initialShape = void 0;
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/line/toolStates/Idle.mjs
  var Idle5 = class extends StateNode {
    static id = "idle";
    shapeId = "";
    onEnter(info) {
      this.shapeId = info.shapeId;
      this.editor.setCursor({ type: "cross", rotation: 0 });
    }
    onPointerDown() {
      this.parent.transition("pointing", { shapeId: this.shapeId });
    }
    onCancel() {
      this.editor.setCurrentTool("select");
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/line/toolStates/Pointing.mjs
  var MINIMUM_DISTANCE_BETWEEN_SHIFT_CLICKED_HANDLES = 2;
  var Pointing4 = class extends StateNode {
    static id = "pointing";
    shape = {};
    markId;
    onEnter(info) {
      const { inputs } = this.editor;
      const { currentPagePoint } = inputs;
      this.markId = void 0;
      const shape = info.shapeId && this.editor.getShape(info.shapeId);
      if (shape && inputs.shiftKey) {
        this.markId = this.editor.markHistoryStoppingPoint(`creating_line:${shape.id}`);
        this.shape = shape;
        const handles = this.editor.getShapeHandles(this.shape);
        if (!handles) return;
        const vertexHandles = handles.filter((h) => h.type === "vertex").sort(sortByIndex);
        const endHandle = vertexHandles[vertexHandles.length - 1];
        const prevEndHandle = vertexHandles[vertexHandles.length - 2];
        const shapePagePoint = Mat.applyToPoint(
          this.editor.getShapeParentTransform(this.shape),
          new Vec(this.shape.x, this.shape.y)
        );
        const nudgedPoint = Vec.Sub(currentPagePoint, shapePagePoint).addXY(0.1, 0.1);
        const nextPoint = maybeSnapToGrid(nudgedPoint, this.editor);
        const points = structuredClone(this.shape.props.points);
        if (Vec.DistMin(endHandle, prevEndHandle, MINIMUM_DISTANCE_BETWEEN_SHIFT_CLICKED_HANDLES) || Vec.DistMin(nextPoint, endHandle, MINIMUM_DISTANCE_BETWEEN_SHIFT_CLICKED_HANDLES)) {
          points[endHandle.id] = {
            id: endHandle.id,
            index: endHandle.index,
            x: nextPoint.x,
            y: nextPoint.y
          };
        } else {
          const nextIndex = getIndexAbove(endHandle.index);
          points[nextIndex] = {
            id: nextIndex,
            index: nextIndex,
            x: nextPoint.x,
            y: nextPoint.y
          };
        }
        this.editor.updateShapes([
          {
            id: this.shape.id,
            type: this.shape.type,
            props: {
              points
            }
          }
        ]);
      } else {
        const id = createShapeId();
        this.markId = this.editor.markHistoryStoppingPoint(`creating_line:${id}`);
        const newPoint = maybeSnapToGrid(currentPagePoint, this.editor);
        this.editor.createShapes([
          {
            id,
            type: "line",
            x: newPoint.x,
            y: newPoint.y,
            props: {
              scale: this.editor.user.getIsDynamicResizeMode() ? 1 / this.editor.getZoomLevel() : 1
            }
          }
        ]);
        this.editor.select(id);
        this.shape = this.editor.getShape(id);
      }
    }
    onPointerMove() {
      if (!this.shape) return;
      if (this.editor.inputs.isDragging) {
        const handles = this.editor.getShapeHandles(this.shape);
        if (!handles) {
          if (this.markId) this.editor.bailToMark(this.markId);
          throw Error("No handles found");
        }
        const lastHandle = last(handles);
        this.editor.setCurrentTool("select.dragging_handle", {
          shape: this.shape,
          isCreating: true,
          creatingMarkId: this.markId,
          // remove the offset that we added to the handle when we created it
          handle: { ...lastHandle, x: lastHandle.x - 0.1, y: lastHandle.y - 0.1 },
          onInteractionEnd: "line"
        });
      }
    }
    onPointerUp() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.complete();
    }
    onInterrupt() {
      this.parent.transition("idle");
      if (this.markId) this.editor.bailToMark(this.markId);
      this.editor.snaps.clearIndicators();
    }
    complete() {
      this.parent.transition("idle", { shapeId: this.shape.id });
      this.editor.snaps.clearIndicators();
    }
    cancel() {
      if (this.markId) this.editor.bailToMark(this.markId);
      this.parent.transition("idle", { shapeId: this.shape.id });
      this.editor.snaps.clearIndicators();
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/line/LineShapeTool.mjs
  var LineShapeTool = class extends StateNode {
    static id = "line";
    static initial = "idle";
    static children() {
      return [Idle5, Pointing4];
    }
    shapeType = "line";
  };

  // node_modules/tldraw/dist-esm/lib/shapes/note/toolStates/Idle.mjs
  var Idle6 = class extends StateNode {
    static id = "idle";
    onPointerDown(info) {
      this.parent.transition("pointing", info);
    }
    onEnter() {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    }
    onCancel() {
      this.editor.setCurrentTool("select");
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/note/noteHelpers.mjs
  var CLONE_HANDLE_MARGIN = 0;
  var NOTE_SIZE = 200;
  var NOTE_CENTER_OFFSET = new Vec(NOTE_SIZE / 2, NOTE_SIZE / 2);
  var NOTE_ADJACENT_POSITION_SNAP_RADIUS = 10;
  var BASE_NOTE_POSITIONS = (editor) => [
    [
      ["a1"],
      new Vec(NOTE_SIZE * 0.5, NOTE_SIZE * -0.5 - editor.options.adjacentShapeMargin)
    ],
    // t
    [
      ["a2"],
      new Vec(NOTE_SIZE * 1.5 + editor.options.adjacentShapeMargin, NOTE_SIZE * 0.5)
    ],
    // r
    [
      ["a3"],
      new Vec(NOTE_SIZE * 0.5, NOTE_SIZE * 1.5 + editor.options.adjacentShapeMargin)
    ],
    // b
    [
      ["a4"],
      new Vec(NOTE_SIZE * -0.5 - editor.options.adjacentShapeMargin, NOTE_SIZE * 0.5)
    ]
    // l
  ];
  function getBaseAdjacentNotePositions(editor, scale) {
    if (scale === 1) return BASE_NOTE_POSITIONS(editor);
    const s = NOTE_SIZE * scale;
    const m = editor.options.adjacentShapeMargin * scale;
    return [
      [["a1"], new Vec(s * 0.5, s * -0.5 - m)],
      // t
      [["a2"], new Vec(s * 1.5 + m, s * 0.5)],
      // r
      [["a3"], new Vec(s * 0.5, s * 1.5 + m)],
      // b
      [["a4"], new Vec(s * -0.5 - m, s * 0.5)]
      // l
    ];
  }
  function getNoteAdjacentPositions(editor, pagePoint, pageRotation, growY, extraHeight, scale) {
    return Object.fromEntries(
      getBaseAdjacentNotePositions(editor, scale).map(([id, v], i) => {
        const point = v.clone();
        if (i === 0 && extraHeight) {
          point.y -= extraHeight;
        } else if (i === 2 && growY) {
          point.y += growY;
        }
        return [id, point.rot(pageRotation).add(pagePoint)];
      })
    );
  }
  function getAvailableNoteAdjacentPositions(editor, rotation, scale, extraHeight) {
    const selectedShapeIds = new Set(editor.getSelectedShapeIds());
    const minSize = (NOTE_SIZE + editor.options.adjacentShapeMargin + extraHeight) ** 2;
    const allCenters = /* @__PURE__ */ new Map();
    const positions = [];
    for (const shape of editor.getCurrentPageShapes()) {
      if (!editor.isShapeOfType(shape, "note") || scale !== shape.props.scale || selectedShapeIds.has(shape.id)) {
        continue;
      }
      const transform = editor.getShapePageTransform(shape.id);
      if (rotation !== transform.rotation()) continue;
      allCenters.set(shape, editor.getShapePageBounds(shape).center);
      positions.push(
        ...Object.values(
          getNoteAdjacentPositions(
            editor,
            transform.point(),
            rotation,
            shape.props.growY,
            extraHeight,
            scale
          )
        )
      );
    }
    const len = positions.length;
    let position;
    for (const [shape, center] of allCenters) {
      for (let i = 0; i < len; i++) {
        position = positions[i];
        if (!position) continue;
        if (Vec.Dist2(center, position) > minSize) continue;
        if (editor.isPointInShape(shape, position)) {
          positions[i] = void 0;
        }
      }
    }
    return compact(positions);
  }
  function getNoteShapeForAdjacentPosition(editor, shape, center, pageRotation, forceNew = false) {
    let nextNote;
    const allShapesOnPage = editor.getCurrentPageShapesSorted();
    const minDistance = (NOTE_SIZE + editor.options.adjacentShapeMargin ** 2) ** shape.props.scale;
    for (let i = allShapesOnPage.length - 1; i >= 0; i--) {
      const otherNote = allShapesOnPage[i];
      if (otherNote.type === "note" && otherNote.id !== shape.id) {
        const otherBounds = editor.getShapePageBounds(otherNote);
        if (otherBounds && Vec.Dist2(otherBounds.center, center) < minDistance && editor.isPointInShape(otherNote, center)) {
          nextNote = otherNote;
          break;
        }
      }
    }
    editor.complete();
    if (!nextNote || forceNew) {
      editor.markHistoryStoppingPoint("creating note shape");
      const id = createShapeId();
      editor.createShape({
        id,
        type: "note",
        x: center.x,
        y: center.y,
        rotation: pageRotation,
        opacity: shape.opacity,
        props: {
          // Use the props of the shape we're cloning
          ...shape.props,
          // ...except for these values, which should reset to their defaults
          text: "",
          growY: 0,
          fontSizeAdjustment: 0,
          url: ""
        }
      });
      const createdShape = editor.getShape(id);
      if (!createdShape) return;
      const topLeft = editor.getPointInParentSpace(
        createdShape,
        Vec.Sub(
          center,
          Vec.Rot(NOTE_CENTER_OFFSET.clone().mul(createdShape.props.scale), pageRotation)
        )
      );
      editor.updateShape({
        id,
        type: "note",
        x: topLeft.x,
        y: topLeft.y
      });
      nextNote = editor.getShape(id);
    }
    zoomToShapeIfOffscreen(editor);
    return nextNote;
  }
  var ZOOM_TO_SHAPE_PADDING = 16;
  function zoomToShapeIfOffscreen(editor) {
    const selectionPageBounds = editor.getSelectionPageBounds();
    const viewportPageBounds = editor.getViewportPageBounds();
    if (selectionPageBounds && !viewportPageBounds.contains(selectionPageBounds)) {
      const eb = selectionPageBounds.clone().expandBy(ZOOM_TO_SHAPE_PADDING / editor.getZoomLevel()).expand(viewportPageBounds);
      const nextBounds = viewportPageBounds.clone().translate({
        x: (eb.center.x - viewportPageBounds.center.x) * 2,
        y: (eb.center.y - viewportPageBounds.center.y) * 2
      });
      editor.zoomToBounds(nextBounds, {
        animation: {
          duration: editor.options.animationMediumMs
        },
        inset: 0
      });
    }
  }

  // node_modules/tldraw/dist-esm/lib/shapes/note/toolStates/Pointing.mjs
  var Pointing5 = class extends StateNode {
    static id = "pointing";
    dragged = false;
    info = {};
    markId = "";
    shape = {};
    onEnter() {
      const { editor } = this;
      const id = createShapeId();
      this.markId = editor.markHistoryStoppingPoint(`creating_note:${id}`);
      const center = this.editor.inputs.originPagePoint.clone();
      const offset4 = getNoteShapeAdjacentPositionOffset(
        this.editor,
        center,
        this.editor.user.getIsDynamicResizeMode() ? 1 / this.editor.getZoomLevel() : 1
      );
      if (offset4) {
        center.sub(offset4);
      }
      this.shape = createNoteShape(this.editor, id, center);
    }
    onPointerMove(info) {
      if (this.editor.inputs.isDragging) {
        this.editor.setCurrentTool("select.translating", {
          ...info,
          target: "shape",
          shape: this.shape,
          onInteractionEnd: "note",
          isCreating: true,
          creatingMarkId: this.markId,
          onCreate: () => {
            this.editor.setEditingShape(this.shape.id);
            this.editor.setCurrentTool("select.editing_shape");
          }
        });
      }
    }
    onPointerUp() {
      this.complete();
    }
    onInterrupt() {
      this.cancel();
    }
    onComplete() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    complete() {
      if (this.editor.getInstanceState().isToolLocked) {
        this.parent.transition("idle");
      } else {
        this.editor.setEditingShape(this.shape.id);
        this.editor.setCurrentTool("select.editing_shape", {
          ...this.info,
          target: "shape",
          shape: this.shape
        });
      }
    }
    cancel() {
      this.editor.bailToMark(this.markId);
      this.parent.transition("idle", this.info);
    }
  };
  function getNoteShapeAdjacentPositionOffset(editor, center, scale) {
    let min3 = NOTE_ADJACENT_POSITION_SNAP_RADIUS / editor.getZoomLevel();
    let offset4;
    for (const pit of getAvailableNoteAdjacentPositions(editor, 0, scale, 0)) {
      const deltaToPit = Vec.Sub(center, pit);
      const dist = deltaToPit.len();
      if (dist < min3) {
        min3 = dist;
        offset4 = deltaToPit;
      }
    }
    return offset4;
  }
  function createNoteShape(editor, id, center) {
    editor.createShape({
      id,
      type: "note",
      x: center.x,
      y: center.y,
      props: {
        scale: editor.user.getIsDynamicResizeMode() ? 1 / editor.getZoomLevel() : 1
      }
    }).select(id);
    const shape = editor.getShape(id);
    const bounds = editor.getShapeGeometry(shape).bounds;
    const newPoint = maybeSnapToGrid(
      new Vec(shape.x - bounds.width / 2, shape.y - bounds.height / 2),
      editor
    );
    editor.updateShapes([
      {
        id,
        type: "note",
        x: newPoint.x,
        y: newPoint.y
      }
    ]);
    return editor.getShape(id);
  }

  // node_modules/tldraw/dist-esm/lib/shapes/note/NoteShapeTool.mjs
  var NoteShapeTool = class extends StateNode {
    static id = "note";
    static initial = "idle";
    static children() {
      return [Idle6, Pointing5];
    }
    shapeType = "note";
  };

  // node_modules/tldraw/dist-esm/lib/tools/selection-logic/updateHoveredShapeId.mjs
  function _updateHoveredShapeId(editor) {
    const hitShape = editor.getShapeAtPoint(editor.inputs.currentPagePoint, {
      hitInside: false,
      hitLabels: false,
      margin: editor.options.hitTestMargin / editor.getZoomLevel(),
      renderingOnly: true
    });
    if (!hitShape) return editor.setHoveredShape(null);
    let shapeToHover = void 0;
    const outermostShape = editor.getOutermostSelectableShape(hitShape);
    if (outermostShape === hitShape) {
      shapeToHover = hitShape;
    } else {
      if (outermostShape.id === editor.getFocusedGroupId() || editor.getSelectedShapeIds().includes(outermostShape.id)) {
        shapeToHover = hitShape;
      } else {
        shapeToHover = outermostShape;
      }
    }
    return editor.setHoveredShape(shapeToHover.id);
  }
  var updateHoveredShapeId = (0, import_lodash.default)(
    _updateHoveredShapeId,
    false ? 0 : 32
  );

  // node_modules/tldraw/dist-esm/lib/shapes/text/toolStates/Idle.mjs
  var Idle7 = class extends StateNode {
    static id = "idle";
    onPointerMove(info) {
      switch (info.target) {
        case "shape":
        case "canvas": {
          updateHoveredShapeId(this.editor);
        }
      }
    }
    onPointerDown(info) {
      this.parent.transition("pointing", info);
    }
    onEnter() {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    }
    onExit() {
      updateHoveredShapeId.cancel();
    }
    onKeyDown(info) {
      if (info.key === "Enter") {
        if (this.editor.getIsReadonly()) return null;
        const onlySelectedShape = this.editor.getOnlySelectedShape();
        if (onlySelectedShape && this.editor.getShapeUtil(onlySelectedShape).canEdit(onlySelectedShape)) {
          this.editor.setCurrentTool("select");
          this.editor.setEditingShape(onlySelectedShape.id);
          this.editor.root.getCurrent()?.transition("editing_shape", {
            ...info,
            target: "shape",
            shape: onlySelectedShape
          });
        }
      }
    }
    onCancel() {
      this.editor.setCurrentTool("select");
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/text/toolStates/Pointing.mjs
  var Pointing6 = class extends StateNode {
    static id = "pointing";
    shape;
    markId = "";
    enterTime = 0;
    onEnter() {
      this.enterTime = Date.now();
    }
    onExit() {
      this.editor.setHintingShapes([]);
    }
    onPointerMove(info) {
      if (Date.now() - this.enterTime < 150) return;
      const { editor } = this;
      const { isPointing } = editor.inputs;
      if (!isPointing) return;
      const { originPagePoint, currentPagePoint } = editor.inputs;
      const currentDragDist = Math.abs(originPagePoint.x - currentPagePoint.x);
      const baseMinDragDistForFixedWidth = Math.sqrt(
        editor.getInstanceState().isCoarsePointer ? editor.options.coarseDragDistanceSquared : editor.options.dragDistanceSquared
      );
      const minSquaredDragDist = baseMinDragDistForFixedWidth * 6 / editor.getZoomLevel();
      if (currentDragDist > minSquaredDragDist) {
        const id = createShapeId();
        this.markId = editor.markHistoryStoppingPoint(`creating_text:${id}`);
        const shape = this.createTextShape(id, originPagePoint, false, currentDragDist);
        if (!shape) {
          this.cancel();
          return;
        }
        this.shape = editor.getShape(shape);
        editor.select(id);
        editor.setCurrentTool("select.resizing", {
          ...info,
          target: "selection",
          handle: "right",
          isCreating: true,
          creatingMarkId: this.markId,
          // Make sure the cursor offset takes into account how far we've already dragged
          creationCursorOffset: { x: currentDragDist, y: 1 },
          onInteractionEnd: "text",
          onCreate: () => {
            editor.setEditingShape(shape.id);
          }
        });
      }
    }
    onPointerUp() {
      this.complete();
    }
    onComplete() {
      this.cancel();
    }
    onCancel() {
      this.cancel();
    }
    onInterrupt() {
      this.cancel();
    }
    complete() {
      this.editor.markHistoryStoppingPoint("creating text shape");
      const id = createShapeId();
      const { originPagePoint } = this.editor.inputs;
      const shape = this.createTextShape(id, originPagePoint, true, 20);
      if (!shape) return;
      this.editor.select(id);
      this.editor.setEditingShape(id);
    }
    cancel() {
      this.parent.transition("idle");
      this.editor.bailToMark(this.markId);
    }
    createTextShape(id, point, autoSize, width) {
      this.editor.createShape({
        id,
        type: "text",
        x: point.x,
        y: point.y,
        props: {
          text: "",
          autoSize,
          w: width,
          scale: this.editor.user.getIsDynamicResizeMode() ? 1 / this.editor.getZoomLevel() : 1
        }
      });
      const shape = this.editor.getShape(id);
      if (!shape) {
        this.cancel();
        return;
      }
      const bounds = this.editor.getShapePageBounds(shape);
      const delta = new Vec();
      if (autoSize) {
        switch (shape.props.textAlign) {
          case "start": {
            delta.x = 0;
            break;
          }
          case "middle": {
            delta.x = -bounds.width / 2;
            break;
          }
          case "end": {
            delta.x = -bounds.width;
            break;
          }
        }
      } else {
        delta.x = 0;
      }
      delta.y = -bounds.height / 2;
      if (isShapeId(shape.parentId)) {
        const transform = this.editor.getShapeParentTransform(shape);
        delta.rot(-transform.rotation());
      }
      const shapeX = shape.x + delta.x;
      const shapeY = shape.y + delta.y;
      if (this.editor.getInstanceState().isGridMode) {
        const topLeft = new Vec(shapeX, shapeY);
        const gridSnappedPoint = maybeSnapToGrid(topLeft, this.editor);
        const gridDelta = Vec.Sub(topLeft, gridSnappedPoint);
        this.editor.updateShape({
          ...shape,
          x: shapeX - gridDelta.x,
          y: shapeY - gridDelta.y
        });
      } else {
        this.editor.updateShape({
          ...shape,
          x: shapeX,
          y: shapeY
        });
      }
      return shape;
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/text/TextShapeTool.mjs
  var TextShapeTool = class extends StateNode {
    static id = "text";
    static initial = "idle";
    static children() {
      return [Idle7, Pointing6];
    }
    shapeType = "text";
  };

  // node_modules/tldraw/dist-esm/lib/defaultShapeTools.mjs
  var defaultShapeTools = [
    TextShapeTool,
    DrawShapeTool,
    GeoShapeTool,
    NoteShapeTool,
    LineShapeTool,
    FrameShapeTool,
    ArrowShapeTool,
    HighlightShapeTool
  ];

  // node_modules/tldraw/dist-esm/lib/shapes/arrow/ArrowShapeUtil.mjs
  var import_jsx_runtime97 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/shared/ShapeFill.mjs
  var import_jsx_runtime92 = __toESM(require_jsx_runtime(), 1);
  var import_react74 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/shared/defaultStyleDefs.mjs
  var import_jsx_runtime91 = __toESM(require_jsx_runtime(), 1);
  var import_react73 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/shared/useDefaultColorTheme.mjs
  function useDefaultColorTheme() {
    return getDefaultColorTheme({ isDarkMode: useIsDarkMode() });
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/defaultStyleDefs.mjs
  function getFontDefForExport(fontStyle) {
    return {
      key: `${DefaultFontStyle.id}:${fontStyle}`,
      async getElement() {
        const fontInfo = findFontInfo(fontStyle);
        if (!fontInfo) return null;
        const { url, fontFaceRule } = fontInfo;
        const fontFile = await (await fetch(url)).blob();
        const base64FontFile = await FileHelpers.blobToDataUrl(fontFile);
        const newFontFaceRule = fontFaceRule.replace(url, base64FontFile);
        return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("style", { children: newFontFaceRule });
      }
    };
  }
  function findFontInfo(name) {
    const fontFamily = DefaultFontFamilies[name];
    for (const font of document.fonts) {
      if (fontFamily.includes(font.family)) {
        if ("$$_url" in font && typeof font.$$_url === "string" && "$$_fontface" in font && typeof font.$$_fontface === "string") {
          return { url: font.$$_url, fontFaceRule: font.$$_fontface };
        }
      }
    }
    return null;
  }
  function getFillDefForExport(fill) {
    return {
      key: `${DefaultFontStyle.id}:${fill}`,
      async getElement() {
        if (fill !== "pattern") return null;
        return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(HashPatternForExport, {});
      }
    };
  }
  function HashPatternForExport() {
    const getHashPatternZoomName = useGetHashPatternZoomName();
    const maskId = useUniqueSafeId();
    const theme = useDefaultColorTheme();
    const t2 = 8 / 12;
    return /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)(import_jsx_runtime91.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("mask", { id: maskId, children: [
        /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("rect", { x: "0", y: "0", width: "8", height: "8", fill: "white" }),
        /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("g", { strokeLinecap: "round", stroke: "black", children: [
          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("line", { x1: t2 * 1, y1: t2 * 3, x2: t2 * 3, y2: t2 * 1 }),
          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("line", { x1: t2 * 5, y1: t2 * 7, x2: t2 * 7, y2: t2 * 5 }),
          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("line", { x1: t2 * 9, y1: t2 * 11, x2: t2 * 11, y2: t2 * 9 })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
        "pattern",
        {
          id: getHashPatternZoomName(1, theme.id),
          width: "8",
          height: "8",
          patternUnits: "userSpaceOnUse",
          children: /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("rect", { x: "0", y: "0", width: "8", height: "8", fill: theme.solid, mask: `url(#${maskId})` })
        }
      )
    ] });
  }
  function getFillDefForCanvas() {
    return {
      key: `${DefaultFontStyle.id}:pattern`,
      component: PatternFillDefForCanvas
    };
  }
  var TILE_PATTERN_SIZE = 8;
  var generateImage = (dpr, currentZoom, darkMode) => {
    return new Promise((resolve, reject) => {
      const size4 = TILE_PATTERN_SIZE * currentZoom * dpr;
      const canvasEl = document.createElement("canvas");
      canvasEl.width = size4;
      canvasEl.height = size4;
      const ctx = canvasEl.getContext("2d");
      if (!ctx) return;
      ctx.fillStyle = darkMode ? DefaultColorThemePalette.darkMode.solid : DefaultColorThemePalette.lightMode.solid;
      ctx.fillRect(0, 0, size4, size4);
      ctx.globalCompositeOperation = "destination-out";
      ctx.lineCap = "round";
      ctx.lineWidth = 1.25 * currentZoom * dpr;
      const t2 = 8 / 12;
      const s = (v) => v * currentZoom * dpr;
      ctx.beginPath();
      ctx.moveTo(s(t2 * 1), s(t2 * 3));
      ctx.lineTo(s(t2 * 3), s(t2 * 1));
      ctx.moveTo(s(t2 * 5), s(t2 * 7));
      ctx.lineTo(s(t2 * 7), s(t2 * 5));
      ctx.moveTo(s(t2 * 9), s(t2 * 11));
      ctx.lineTo(s(t2 * 11), s(t2 * 9));
      ctx.stroke();
      canvasEl.toBlob((blob) => {
        if (!blob || debugFlags.throwToBlob.get()) {
          reject();
        } else {
          resolve(blob);
        }
      });
    });
  };
  var canvasBlob = (size4, fn) => {
    const canvas = document.createElement("canvas");
    canvas.width = size4[0];
    canvas.height = size4[1];
    const ctx = canvas.getContext("2d");
    if (!ctx) return "";
    fn(ctx);
    return canvas.toDataURL();
  };
  var defaultPixels = null;
  function getDefaultPixels() {
    if (!defaultPixels) {
      defaultPixels = {
        white: canvasBlob([1, 1], (ctx) => {
          ctx.fillStyle = "#f8f9fa";
          ctx.fillRect(0, 0, 1, 1);
        }),
        black: canvasBlob([1, 1], (ctx) => {
          ctx.fillStyle = "#212529";
          ctx.fillRect(0, 0, 1, 1);
        })
      };
    }
    return defaultPixels;
  }
  function getPatternLodForZoomLevel(zoom) {
    return Math.ceil(Math.log2(Math.max(1, zoom)));
  }
  function useGetHashPatternZoomName() {
    const id = useSharedSafeId("hash_pattern");
    return (0, import_react73.useCallback)(
      (zoom, theme) => {
        const lod = getPatternLodForZoomLevel(zoom);
        return suffixSafeId(id, `${theme}_${lod}`);
      },
      [id]
    );
  }
  function getPatternLodsToGenerate(maxZoom) {
    const levels = [];
    const minLod = 0;
    const maxLod = getPatternLodForZoomLevel(maxZoom);
    for (let i = minLod; i <= maxLod; i++) {
      levels.push(Math.pow(2, i));
    }
    return levels;
  }
  function getDefaultPatterns(maxZoom) {
    const defaultPixels2 = getDefaultPixels();
    return getPatternLodsToGenerate(maxZoom).flatMap((zoom) => [
      { zoom, url: defaultPixels2.white, theme: "light" },
      { zoom, url: defaultPixels2.black, theme: "dark" }
    ]);
  }
  function usePattern() {
    const editor = useEditor();
    const dpr = useValue("devicePixelRatio", () => editor.getInstanceState().devicePixelRatio, [
      editor
    ]);
    const maxZoom = useValue("maxZoom", () => Math.ceil(last(editor.getCameraOptions().zoomSteps)), [
      editor
    ]);
    const [isReady, setIsReady] = (0, import_react73.useState)(false);
    const [backgroundUrls, setBackgroundUrls] = (0, import_react73.useState)(
      () => getDefaultPatterns(maxZoom)
    );
    const getHashPatternZoomName = useGetHashPatternZoomName();
    (0, import_react73.useEffect)(() => {
      if (false) {
        setIsReady(true);
        return;
      }
      const promise = Promise.all(
        getPatternLodsToGenerate(maxZoom).flatMap((zoom) => [
          generateImage(dpr, zoom, false).then((blob) => ({
            zoom,
            theme: "light",
            url: URL.createObjectURL(blob)
          })),
          generateImage(dpr, zoom, true).then((blob) => ({
            zoom,
            theme: "dark",
            url: URL.createObjectURL(blob)
          }))
        ])
      );
      let isCancelled = false;
      promise.then((urls) => {
        if (isCancelled) return;
        setBackgroundUrls(urls);
        setIsReady(true);
      });
      return () => {
        isCancelled = true;
        setIsReady(false);
        promise.then((patterns) => {
          for (const { url } of patterns) {
            URL.revokeObjectURL(url);
          }
        });
      };
    }, [dpr, maxZoom]);
    const defs = /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(import_jsx_runtime91.Fragment, { children: backgroundUrls.map((item) => {
      const id = getHashPatternZoomName(item.zoom, item.theme);
      return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
        "pattern",
        {
          id,
          width: TILE_PATTERN_SIZE,
          height: TILE_PATTERN_SIZE,
          patternUnits: "userSpaceOnUse",
          children: /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("image", { href: item.url, width: TILE_PATTERN_SIZE, height: TILE_PATTERN_SIZE })
        },
        id
      );
    }) });
    return { defs, isReady };
  }
  function PatternFillDefForCanvas() {
    const editor = useEditor();
    const containerRef = (0, import_react73.useRef)(null);
    const { defs, isReady } = usePattern();
    (0, import_react73.useEffect)(() => {
      if (isReady && tlenv.isSafari) {
        const htmlLayer = findHtmlLayerParent(containerRef.current);
        if (htmlLayer) {
          editor.timers.requestAnimationFrame(() => {
            htmlLayer.style.display = "none";
            editor.timers.requestAnimationFrame(() => {
              htmlLayer.style.display = "";
            });
          });
        }
      }
    }, [editor, isReady]);
    return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("g", { ref: containerRef, "data-testid": isReady ? "ready-pattern-fill-defs" : void 0, children: defs });
  }
  function findHtmlLayerParent(element) {
    if (element.classList.contains("tl-html-layer")) return element;
    if (element.parentElement) return findHtmlLayerParent(element.parentElement);
    return null;
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/ShapeFill.mjs
  var ShapeFill = import_react74.default.memo(function ShapeFill2({
    theme,
    d,
    color,
    fill,
    scale
  }) {
    switch (fill) {
      case "none": {
        return null;
      }
      case "solid": {
        return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("path", { fill: theme[color].semi, d });
      }
      case "semi": {
        return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("path", { fill: theme.solid, d });
      }
      case "fill": {
        return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("path", { fill: theme[color].fill, d });
      }
      case "pattern": {
        return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(PatternFill, { theme, color, fill, d, scale });
      }
    }
  });
  function PatternFill({ d, color, theme }) {
    const editor = useEditor();
    const svgExport = useSvgExportContext();
    const zoomLevel = useValue("zoomLevel", () => editor.getZoomLevel(), [editor]);
    const getHashPatternZoomName = useGetHashPatternZoomName();
    const teenyTiny = editor.getZoomLevel() <= 0.18;
    return /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)(import_jsx_runtime92.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("path", { fill: theme[color].pattern, d }),
      /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(
        "path",
        {
          fill: svgExport ? `url(#${getHashPatternZoomName(1, theme.id)})` : teenyTiny ? theme[color].semi : `url(#${getHashPatternZoomName(zoomLevel, theme.id)})`,
          d
        }
      )
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/SvgTextLabel.mjs
  var import_jsx_runtime94 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/shared/createTextJsxFromSpans.mjs
  var import_jsx_runtime93 = __toESM(require_jsx_runtime(), 1);
  function correctSpacesToNbsp(input) {
    return input.replace(/\s/g, "\xA0");
  }
  function createTextJsxFromSpans(editor, spans, opts) {
    const { padding = 0 } = opts;
    if (spans.length === 0) return null;
    const bounds = Box.From(spans[0].box);
    for (const { box } of spans) {
      bounds.union(box);
    }
    const offsetX = padding + (opts.offsetX ?? 0);
    const offsetY = (opts.offsetY ?? 0) + opts.fontSize / 2 + (opts.verticalTextAlign === "start" ? padding : opts.verticalTextAlign === "end" ? opts.height - padding - bounds.height : (Math.ceil(opts.height) - bounds.height) / 2);
    let currentLineTop = null;
    const children = [];
    for (const { text, box } of spans) {
      const didBreakLine = currentLineTop !== null && box.y > currentLineTop;
      if (didBreakLine) {
        children.push(
          /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(
            "tspan",
            {
              alignmentBaseline: "mathematical",
              x: offsetX,
              y: box.y + offsetY,
              children: "\n"
            },
            children.length
          )
        );
      }
      children.push(
        /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(
          "tspan",
          {
            alignmentBaseline: "mathematical",
            x: box.x + offsetX,
            y: box.y + offsetY,
            unicodeBidi: "plaintext",
            children: correctSpacesToNbsp(text)
          },
          children.length
        )
      );
      currentLineTop = box.y;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(
      "text",
      {
        fontSize: opts.fontSize,
        fontFamily: opts.fontFamily,
        fontStyle: opts.fontStyle,
        fontWeight: opts.fontWeight,
        dominantBaseline: "mathematical",
        alignmentBaseline: "mathematical",
        stroke: opts.stroke,
        strokeWidth: opts.strokeWidth,
        fill: opts.fill,
        children
      }
    );
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/legacyProps.mjs
  function getLegacyOffsetX(align, padding, spans, totalWidth) {
    if ((align === "start-legacy" || align === "end-legacy") && spans.length !== 0) {
      const spansBounds = Box.From(spans[0].box);
      for (const { box } of spans) {
        spansBounds.union(box);
      }
      if (align === "start-legacy") {
        return (totalWidth - 2 * padding - spansBounds.width) / 2;
      } else if (align === "end-legacy") {
        return -(totalWidth - 2 * padding - spansBounds.width) / 2;
      }
    }
  }
  function isLegacyAlign(align) {
    return align === "start-legacy" || align === "middle-legacy" || align === "end-legacy";
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/SvgTextLabel.mjs
  function SvgTextLabel({
    fontSize,
    font,
    align,
    verticalAlign,
    text,
    labelColor,
    bounds,
    padding = 16,
    stroke = true
  }) {
    const editor = useEditor();
    const theme = useDefaultColorTheme();
    const opts = {
      fontSize,
      fontFamily: DefaultFontFamilies[font],
      textAlign: align,
      verticalTextAlign: verticalAlign,
      width: Math.ceil(bounds.width),
      height: Math.ceil(bounds.height),
      padding,
      lineHeight: TEXT_PROPS.lineHeight,
      fontStyle: "normal",
      fontWeight: "normal",
      overflow: "wrap",
      offsetX: 0,
      offsetY: 0,
      fill: labelColor,
      stroke: void 0,
      strokeWidth: void 0
    };
    const spans = editor.textMeasure.measureTextSpans(text, opts);
    const offsetX = getLegacyOffsetX(align, padding, spans, bounds.width);
    if (offsetX) {
      opts.offsetX = offsetX;
    }
    opts.offsetX += bounds.x;
    opts.offsetY += bounds.y;
    const mainSpans = createTextJsxFromSpans(editor, spans, opts);
    let outlineSpans = null;
    if (stroke) {
      opts.fill = theme.background;
      opts.stroke = theme.background;
      opts.strokeWidth = 2;
      outlineSpans = createTextJsxFromSpans(editor, spans, opts);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(import_jsx_runtime94.Fragment, { children: [
      outlineSpans,
      mainSpans
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/TextLabel.mjs
  var import_jsx_runtime96 = __toESM(require_jsx_runtime(), 1);
  var import_react77 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/text/TextArea.mjs
  var import_jsx_runtime95 = __toESM(require_jsx_runtime(), 1);
  var import_react75 = __toESM(require_react(), 1);
  var TextArea = (0, import_react75.forwardRef)(function TextArea2({
    isEditing,
    text,
    handleFocus,
    handleChange,
    handleKeyDown,
    handleBlur,
    handleInputPointerDown,
    handleDoubleClick
  }, ref) {
    return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
      "textarea",
      {
        ref,
        className: "tl-text tl-text-input",
        name: "text",
        tabIndex: -1,
        readOnly: !isEditing,
        autoComplete: "off",
        autoCapitalize: "off",
        autoCorrect: "off",
        autoSave: "off",
        placeholder: "",
        spellCheck: "true",
        wrap: "off",
        dir: "auto",
        defaultValue: text,
        onFocus: handleFocus,
        onChange: handleChange,
        onKeyDown: handleKeyDown,
        onBlur: handleBlur,
        onTouchEnd: stopEventPropagation,
        onContextMenu: isEditing ? stopEventPropagation : void 0,
        onPointerDown: handleInputPointerDown,
        onDoubleClick: handleDoubleClick,
        onDragStart: preventDefault
      }
    );
  });

  // node_modules/tldraw/dist-esm/lib/shapes/shared/useEditableText.mjs
  var import_react76 = __toESM(require_react(), 1);
  function useEditableText(shapeId, type, text) {
    const editor = useEditor();
    const rInput = (0, import_react76.useRef)(null);
    const isEditing = useValue("isEditing", () => editor.getEditingShapeId() === shapeId, [editor]);
    const isEditingAnything = useValue("isEditingAnything", () => !!editor.getEditingShapeId(), [
      editor
    ]);
    (0, import_react76.useEffect)(() => {
      function selectAllIfEditing(event) {
        if (event.shapeId === shapeId) {
          rInput.current?.select();
        }
      }
      editor.on("select-all-text", selectAllIfEditing);
      return () => {
        editor.off("select-all-text", selectAllIfEditing);
      };
    }, [editor, shapeId, isEditing]);
    (0, import_react76.useEffect)(() => {
      if (!isEditing) return;
      if (document.activeElement !== rInput.current) {
        rInput.current?.focus();
      }
      if (editor.getInstanceState().isCoarsePointer) {
        rInput.current?.select();
      }
      if (tlenv.isSafari) {
        rInput.current?.blur();
        rInput.current?.focus();
      }
    }, [editor, isEditing]);
    const handleKeyDown = (0, import_react76.useCallback)(
      (e) => {
        if (editor.getEditingShapeId() !== shapeId) return;
        switch (e.key) {
          case "Enter": {
            if (e.ctrlKey || e.metaKey) {
              editor.complete();
            }
            break;
          }
        }
      },
      [editor, shapeId]
    );
    const handleChange = (0, import_react76.useCallback)(
      (e) => {
        if (editor.getEditingShapeId() !== shapeId) return;
        let text2 = TextHelpers.normalizeText(e.currentTarget.value);
        const untabbedText = text2.replace(/\t/g, INDENT);
        if (untabbedText !== text2) {
          const selectionStart = e.currentTarget.selectionStart;
          e.currentTarget.value = untabbedText;
          e.currentTarget.selectionStart = selectionStart + (untabbedText.length - text2.length);
          e.currentTarget.selectionEnd = selectionStart + (untabbedText.length - text2.length);
          text2 = untabbedText;
        }
        editor.updateShape({
          id: shapeId,
          type,
          props: { text: text2 }
        });
      },
      [editor, shapeId, type]
    );
    const handleInputPointerDown = (0, import_react76.useCallback)(
      (e) => {
        editor.dispatch({
          ...getPointerInfo(e),
          type: "pointer",
          name: "pointer_down",
          target: "shape",
          shape: editor.getShape(shapeId)
        });
        stopEventPropagation(e);
      },
      [editor, shapeId]
    );
    return {
      rInput,
      handleFocus: noop,
      handleBlur: noop,
      handleKeyDown,
      handleChange,
      handleInputPointerDown,
      handleDoubleClick: stopEventPropagation,
      isEmpty: text.trim().length === 0,
      isEditing,
      isEditingAnything
    };
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/TextLabel.mjs
  var TextLabel = import_react77.default.memo(function TextLabel2({
    shapeId,
    type,
    text,
    labelColor,
    font,
    fontSize,
    lineHeight,
    align,
    verticalAlign,
    wrap: wrap2,
    isSelected,
    padding = 0,
    onKeyDown: handleKeyDownCustom,
    classNamePrefix,
    style,
    textWidth,
    textHeight
  }) {
    const { rInput, isEmpty, isEditing, isEditingAnything, ...editableTextRest } = useEditableText(
      shapeId,
      type,
      text
    );
    const [initialText, setInitialText] = (0, import_react77.useState)(text);
    (0, import_react77.useEffect)(() => {
      if (!isEditing) setInitialText(text);
    }, [isEditing, text]);
    const finalText = TextHelpers.normalizeTextForDom(text);
    const hasText = finalText.length > 0;
    const legacyAlign = isLegacyAlign(align);
    if (!isEditing && !hasText) {
      return null;
    }
    const cssPrefix = classNamePrefix || "tl-text";
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
      "div",
      {
        className: `${cssPrefix}-label tl-text-wrapper`,
        "data-font": font,
        "data-align": align,
        "data-hastext": !isEmpty,
        "data-isediting": isEditing,
        "data-iseditinganything": isEditingAnything,
        "data-textwrap": !!wrap2,
        "data-isselected": isSelected,
        style: {
          justifyContent: align === "middle" || legacyAlign ? "center" : align,
          alignItems: verticalAlign === "middle" ? "center" : verticalAlign,
          padding,
          ...style
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime96.jsxs)(
          "div",
          {
            className: `${cssPrefix}-label__inner tl-text-content__wrapper`,
            style: {
              fontSize,
              lineHeight: Math.floor(fontSize * lineHeight) + "px",
              minHeight: Math.floor(fontSize * lineHeight) + "px",
              minWidth: Math.ceil(textWidth || 0),
              color: labelColor,
              width: textWidth ? Math.ceil(textWidth) : void 0,
              height: textHeight ? Math.ceil(textHeight) : void 0
            },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("div", { className: `${cssPrefix} tl-text tl-text-content`, dir: "auto", children: finalText.split("\n").map((lineOfText, index2) => /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("div", { dir: "auto", children: lineOfText }, index2)) }),
              (isEditingAnything || isSelected) && /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
                TextArea,
                {
                  ref: rInput,
                  text,
                  isEditing,
                  ...editableTextRest,
                  handleKeyDown: handleKeyDownCustom ?? editableTextRest.handleKeyDown
                },
                initialText
              )
            ]
          }
        )
      }
    );
  });

  // node_modules/tldraw/dist-esm/lib/shapes/arrow/arrowLabel.mjs
  var labelSizeCacheCache = new WeakCache();
  function getLabelSizeCache(editor) {
    return labelSizeCacheCache.get(editor, () => {
      return editor.store.createComputedCache("arrowLabelSize", (shape) => {
        const info = getArrowInfo(editor, shape);
        let width = 0;
        let height = 0;
        const bodyGeom = info.isStraight ? new Edge2d({
          start: Vec.From(info.start.point),
          end: Vec.From(info.end.point)
        }) : new Arc2d({
          center: Vec.Cast(info.handleArc.center),
          start: Vec.Cast(info.start.point),
          end: Vec.Cast(info.end.point),
          sweepFlag: info.bodyArc.sweepFlag,
          largeArcFlag: info.bodyArc.largeArcFlag
        });
        if (shape.props.text.trim()) {
          const bodyBounds = bodyGeom.bounds;
          const fontSize = getArrowLabelFontSize(shape);
          const { w, h } = editor.textMeasure.measureText(shape.props.text, {
            ...TEXT_PROPS,
            fontFamily: FONT_FAMILIES[shape.props.font],
            fontSize,
            maxWidth: null
          });
          width = w;
          height = h;
          let shouldSquish = false;
          if (bodyBounds.width > bodyBounds.height) {
            width = Math.max(Math.min(w, 64), Math.min(bodyBounds.width - 64, w));
            shouldSquish = true;
          } else if (width > 16 * fontSize) {
            width = 16 * fontSize;
            shouldSquish = true;
          }
          if (shouldSquish) {
            const { w: squishedWidth, h: squishedHeight } = editor.textMeasure.measureText(
              shape.props.text,
              {
                ...TEXT_PROPS,
                fontFamily: FONT_FAMILIES[shape.props.font],
                fontSize,
                maxWidth: width
              }
            );
            width = squishedWidth;
            height = squishedHeight;
          }
        }
        return new Vec(width, height).addScalar(ARROW_LABEL_PADDING * 2 * shape.props.scale);
      });
    });
  }
  function getArrowLabelSize(editor, shape) {
    if (shape.props.text.trim() === "") {
      return new Vec(0, 0).addScalar(ARROW_LABEL_PADDING * 2 * shape.props.scale);
    }
    return getLabelSizeCache(editor).get(shape.id) ?? new Vec(0, 0);
  }
  function getLabelToArrowPadding(shape) {
    const strokeWidth = STROKE_SIZES2[shape.props.size];
    const labelToArrowPadding = (LABEL_TO_ARROW_PADDING + (strokeWidth - STROKE_SIZES2.s) * 2 + (strokeWidth === STROKE_SIZES2.xl ? 20 : 0)) * shape.props.scale;
    return labelToArrowPadding;
  }
  function getStraightArrowLabelRange(editor, shape, info) {
    const labelSize = getArrowLabelSize(editor, shape);
    const labelToArrowPadding = getLabelToArrowPadding(shape);
    const startOffset = Vec.Nudge(info.start.point, info.end.point, labelToArrowPadding);
    const endOffset = Vec.Nudge(info.end.point, info.start.point, labelToArrowPadding);
    const intersectionPoints = intersectLineSegmentPolygon(
      startOffset,
      endOffset,
      Box.FromCenter(info.middle, labelSize).corners
    );
    if (!intersectionPoints || intersectionPoints.length !== 2) {
      return { start: 0.5, end: 0.5 };
    }
    let [startIntersect, endIntersect] = intersectionPoints;
    if (Vec.Dist2(startIntersect, startOffset) > Vec.Dist2(endIntersect, startOffset)) {
      ;
      [endIntersect, startIntersect] = intersectionPoints;
    }
    const startConstrained = startOffset.add(Vec.Sub(info.middle, startIntersect));
    const endConstrained = endOffset.add(Vec.Sub(info.middle, endIntersect));
    const start = Vec.Dist(info.start.point, startConstrained) / info.length;
    const end = Vec.Dist(info.start.point, endConstrained) / info.length;
    return { start, end };
  }
  function getCurvedArrowLabelRange(editor, shape, info) {
    const labelSize = getArrowLabelSize(editor, shape);
    const labelToArrowPadding = getLabelToArrowPadding(shape);
    const direction = Math.sign(shape.props.bend);
    const labelToArrowPaddingRad = labelToArrowPadding / info.handleArc.radius * direction;
    const startOffsetAngle = Vec.Angle(info.bodyArc.center, info.start.point) - labelToArrowPaddingRad;
    const endOffsetAngle = Vec.Angle(info.bodyArc.center, info.end.point) + labelToArrowPaddingRad;
    const startOffset = getPointOnCircle(info.bodyArc.center, info.bodyArc.radius, startOffsetAngle);
    const endOffset = getPointOnCircle(info.bodyArc.center, info.bodyArc.radius, endOffsetAngle);
    const dbg = [];
    const startIntersections = intersectArcPolygon(
      info.bodyArc.center,
      info.bodyArc.radius,
      startOffsetAngle,
      endOffsetAngle,
      direction,
      Box.FromCenter(startOffset, labelSize).corners
    );
    dbg.push(
      new Polygon2d({
        points: Box.FromCenter(startOffset, labelSize).corners,
        debugColor: "lime",
        isFilled: false,
        ignore: true
      })
    );
    const endIntersections = intersectArcPolygon(
      info.bodyArc.center,
      info.bodyArc.radius,
      startOffsetAngle,
      endOffsetAngle,
      direction,
      Box.FromCenter(endOffset, labelSize).corners
    );
    dbg.push(
      new Polygon2d({
        points: Box.FromCenter(endOffset, labelSize).corners,
        debugColor: "lime",
        isFilled: false,
        ignore: true
      })
    );
    for (const pt of [
      ...startIntersections ?? [],
      ...endIntersections ?? [],
      startOffset,
      endOffset
    ]) {
      dbg.push(
        new Circle2d({
          x: pt.x - 3,
          y: pt.y - 3,
          radius: 3,
          isFilled: false,
          debugColor: "magenta",
          ignore: true
        })
      );
    }
    const startConstrained = (startIntersections && furthest(info.start.point, startIntersections)) ?? info.middle;
    const endConstrained = (endIntersections && furthest(info.end.point, endIntersections)) ?? info.middle;
    const startAngle = Vec.Angle(info.bodyArc.center, info.start.point);
    const endAngle = Vec.Angle(info.bodyArc.center, info.end.point);
    const constrainedStartAngle = Vec.Angle(info.bodyArc.center, startConstrained);
    const constrainedEndAngle = Vec.Angle(info.bodyArc.center, endConstrained);
    if (angleDistance(startAngle, constrainedStartAngle, direction) > angleDistance(startAngle, constrainedEndAngle, direction)) {
      return { start: 0.5, end: 0.5, dbg };
    }
    const fullDistance = angleDistance(startAngle, endAngle, direction);
    const start = angleDistance(startAngle, constrainedStartAngle, direction) / fullDistance;
    const end = angleDistance(startAngle, constrainedEndAngle, direction) / fullDistance;
    return { start, end, dbg };
  }
  function getArrowLabelPosition(editor, shape) {
    let labelCenter;
    const debugGeom = [];
    const info = getArrowInfo(editor, shape);
    const arrowheadInfo = {
      hasStartBinding: !!info.bindings.start,
      hasEndBinding: !!info.bindings.end,
      hasStartArrowhead: info.start.arrowhead !== "none",
      hasEndArrowhead: info.end.arrowhead !== "none"
    };
    if (info.isStraight) {
      const range = getStraightArrowLabelRange(editor, shape, info);
      const clampedPosition = getClampedPosition(editor, shape, range, arrowheadInfo);
      labelCenter = Vec.Lrp(info.start.point, info.end.point, clampedPosition);
    } else {
      const range = getCurvedArrowLabelRange(editor, shape, info);
      if (range.dbg) debugGeom.push(...range.dbg);
      const clampedPosition = getClampedPosition(editor, shape, range, arrowheadInfo);
      const labelAngle = interpolateArcAngles(
        Vec.Angle(info.bodyArc.center, info.start.point),
        Vec.Angle(info.bodyArc.center, info.end.point),
        Math.sign(shape.props.bend),
        clampedPosition
      );
      labelCenter = getPointOnCircle(info.bodyArc.center, info.bodyArc.radius, labelAngle);
    }
    const labelSize = getArrowLabelSize(editor, shape);
    return { box: Box.FromCenter(labelCenter, labelSize), debugGeom };
  }
  function getClampedPosition(editor, shape, range, arrowheadInfo) {
    const { hasEndArrowhead, hasEndBinding, hasStartBinding, hasStartArrowhead } = arrowheadInfo;
    const arrowLength = getArrowLength(editor, shape);
    let clampedPosition = clamp(
      shape.props.labelPosition,
      hasStartArrowhead || hasStartBinding ? range.start : 0,
      hasEndArrowhead || hasEndBinding ? range.end : 1
    );
    const snapDistance = Math.min(0.02, 500 / arrowLength * 0.02);
    clampedPosition = clampedPosition >= 0.5 - snapDistance && clampedPosition <= 0.5 + snapDistance ? 0.5 : clampedPosition;
    return clampedPosition;
  }
  function intersectArcPolygon(center, radius, angleStart, angleEnd, direction, polygon) {
    const intersections = intersectCirclePolygon(center, radius, polygon);
    const fullArcDistance = angleDistance(angleStart, angleEnd, direction);
    return intersections?.filter((pt) => {
      const pDistance = angleDistance(angleStart, Vec.Angle(center, pt), direction);
      return pDistance >= 0 && pDistance <= fullArcDistance;
    });
  }
  function furthest(from, candidates) {
    let furthest2 = null;
    let furthestDist = -Infinity;
    for (const candidate of candidates) {
      const dist = Vec.Dist2(from, candidate);
      if (dist > furthestDist) {
        furthest2 = candidate;
        furthestDist = dist;
      }
    }
    return furthest2;
  }
  function interpolateArcAngles(angleStart, angleEnd, direction, t2) {
    const dist = angleDistance(angleStart, angleEnd, direction);
    return angleStart + dist * t2 * direction * -1;
  }
  function getArrowLabelFontSize(shape) {
    return ARROW_LABEL_FONT_SIZES[shape.props.size] * shape.props.scale;
  }

  // node_modules/tldraw/dist-esm/lib/shapes/arrow/arrowheads.mjs
  function getArrowPoints(info, side, strokeWidth) {
    const PT = side === "end" ? info.end.point : info.start.point;
    const PB = side === "end" ? info.start.point : info.end.point;
    const compareLength = info.isStraight ? Vec.Dist(PB, PT) : Math.abs(info.bodyArc.length);
    const length = Math.max(Math.min(compareLength / 5, strokeWidth * 3), strokeWidth);
    let P0;
    if (info.isStraight) {
      P0 = Vec.Nudge(PT, PB, length);
    } else {
      const ints = intersectCircleCircle(PT, length, info.handleArc.center, info.handleArc.radius);
      P0 = side === "end" ? info.handleArc.sweepFlag ? ints[0] : ints[1] : info.handleArc.sweepFlag ? ints[1] : ints[0];
    }
    if (Vec.IsNaN(P0)) {
      P0 = info.start.point;
    }
    return {
      point: PT,
      int: P0
    };
  }
  function getArrowhead({ point, int }) {
    const PL = Vec.RotWith(int, point, PI / 6);
    const PR = Vec.RotWith(int, point, -PI / 6);
    return `M ${PL.x} ${PL.y} L ${point.x} ${point.y} L ${PR.x} ${PR.y}`;
  }
  function getTriangleHead({ point, int }) {
    const PL = Vec.RotWith(int, point, PI / 6);
    const PR = Vec.RotWith(int, point, -PI / 6);
    return `M ${PL.x} ${PL.y} L ${PR.x} ${PR.y} L ${point.x} ${point.y} Z`;
  }
  function getInvertedTriangleHead({ point, int }) {
    const d = Vec.Sub(int, point).div(2);
    const PL = Vec.Add(point, Vec.Rot(d, HALF_PI));
    const PR = Vec.Sub(point, Vec.Rot(d, HALF_PI));
    return `M ${PL.x} ${PL.y} L ${int.x} ${int.y} L ${PR.x} ${PR.y} Z`;
  }
  function getDotHead({ point, int }) {
    const A = Vec.Lrp(point, int, 0.45);
    const r = Vec.Dist(A, point);
    return `M ${A.x - r},${A.y}
  a ${r},${r} 0 1,0 ${r * 2},0
  a ${r},${r} 0 1,0 -${r * 2},0 `;
  }
  function getDiamondHead({ point, int }) {
    const PB = Vec.Lrp(point, int, 0.75);
    const PL = Vec.RotWith(PB, point, PI / 4);
    const PR = Vec.RotWith(PB, point, -PI / 4);
    const PQ = Vec.Lrp(PL, PR, 0.5);
    PQ.add(Vec.Sub(PQ, point));
    return `M ${PQ.x} ${PQ.y} L ${PR.x} ${PR.y} ${point.x} ${point.y} L ${PL.x} ${PL.y} Z`;
  }
  function getSquareHead({ int, point }) {
    const PB = Vec.Lrp(point, int, 0.85);
    const d = Vec.Sub(PB, point).div(2);
    const PL1 = Vec.Add(point, Vec.Rot(d, HALF_PI));
    const PR1 = Vec.Sub(point, Vec.Rot(d, HALF_PI));
    const PL2 = Vec.Add(PB, Vec.Rot(d, HALF_PI));
    const PR2 = Vec.Sub(PB, Vec.Rot(d, HALF_PI));
    return `M ${PL1.x} ${PL1.y} L ${PL2.x} ${PL2.y} L ${PR2.x} ${PR2.y} L ${PR1.x} ${PR1.y} Z`;
  }
  function getBarHead({ int, point }) {
    const d = Vec.Sub(int, point).div(2);
    const PL = Vec.Add(point, Vec.Rot(d, HALF_PI));
    const PR = Vec.Sub(point, Vec.Rot(d, HALF_PI));
    return `M ${PL.x} ${PL.y} L ${PR.x} ${PR.y}`;
  }
  function getArrowheadPathForType(info, side, strokeWidth) {
    const type = side === "end" ? info.end.arrowhead : info.start.arrowhead;
    if (type === "none") return;
    const points = getArrowPoints(info, side, strokeWidth);
    if (!points) return;
    switch (type) {
      case "bar":
        return getBarHead(points);
      case "square":
        return getSquareHead(points);
      case "diamond":
        return getDiamondHead(points);
      case "dot":
        return getDotHead(points);
      case "inverted":
        return getInvertedTriangleHead(points);
      case "arrow":
        return getArrowhead(points);
      case "triangle":
        return getTriangleHead(points);
    }
    return "";
  }

  // node_modules/tldraw/dist-esm/lib/shapes/arrow/arrowpaths.mjs
  function getCurvedArrowHandlePath(info) {
    const {
      start,
      end,
      handleArc: { radius, largeArcFlag, sweepFlag }
    } = info;
    return `M${start.handle.x},${start.handle.y} A${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${end.handle.x},${end.handle.y}`;
  }
  function getSolidCurvedArrowPath(info) {
    const {
      start,
      end,
      bodyArc: { radius, largeArcFlag, sweepFlag }
    } = info;
    return `M${start.point.x},${start.point.y} A${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${end.point.x},${end.point.y}`;
  }
  function getArrowPath(start, end) {
    return `M${start.x},${start.y}L${end.x},${end.y}`;
  }
  function getStraightArrowHandlePath(info) {
    return getArrowPath(info.start.handle, info.end.handle);
  }
  function getSolidStraightArrowPath(info) {
    return getArrowPath(info.start.point, info.end.point);
  }

  // node_modules/tldraw/dist-esm/lib/shapes/arrow/ArrowShapeUtil.mjs
  var ArrowShapeUtil = class extends ShapeUtil {
    static type = "arrow";
    static props = arrowShapeProps;
    static migrations = arrowShapeMigrations;
    canEdit() {
      return true;
    }
    canBind({ toShapeType }) {
      return toShapeType !== "arrow";
    }
    canSnap() {
      return false;
    }
    hideResizeHandles() {
      return true;
    }
    hideRotateHandle() {
      return true;
    }
    hideSelectionBoundsBg() {
      return true;
    }
    hideSelectionBoundsFg() {
      return true;
    }
    canBeLaidOut(shape) {
      const bindings = getArrowBindings(this.editor, shape);
      return !bindings.start && !bindings.end;
    }
    getDefaultProps() {
      return {
        dash: "draw",
        size: "m",
        fill: "none",
        color: "black",
        labelColor: "black",
        bend: 0,
        start: { x: 0, y: 0 },
        end: { x: 2, y: 0 },
        arrowheadStart: "none",
        arrowheadEnd: "arrow",
        text: "",
        labelPosition: 0.5,
        font: "draw",
        scale: 1
      };
    }
    getGeometry(shape) {
      const info = getArrowInfo(this.editor, shape);
      const debugGeom = [];
      const bodyGeom = info.isStraight ? new Edge2d({
        start: Vec.From(info.start.point),
        end: Vec.From(info.end.point)
      }) : new Arc2d({
        center: Vec.Cast(info.handleArc.center),
        start: Vec.Cast(info.start.point),
        end: Vec.Cast(info.end.point),
        sweepFlag: info.bodyArc.sweepFlag,
        largeArcFlag: info.bodyArc.largeArcFlag
      });
      let labelGeom;
      if (shape.props.text.trim()) {
        const labelPosition = getArrowLabelPosition(this.editor, shape);
        debugGeom.push(...labelPosition.debugGeom);
        labelGeom = new Rectangle2d({
          x: labelPosition.box.x,
          y: labelPosition.box.y,
          width: labelPosition.box.w,
          height: labelPosition.box.h,
          isFilled: true,
          isLabel: true
        });
      }
      return new Group2d({
        children: [...labelGeom ? [bodyGeom, labelGeom] : [bodyGeom], ...debugGeom]
      });
    }
    getHandles(shape) {
      const info = getArrowInfo(this.editor, shape);
      return [
        {
          id: "start",
          type: "vertex",
          index: "a0",
          x: info.start.handle.x,
          y: info.start.handle.y
        },
        {
          id: "middle",
          type: "virtual",
          index: "a2",
          x: info.middle.x,
          y: info.middle.y
        },
        {
          id: "end",
          type: "vertex",
          index: "a3",
          x: info.end.handle.x,
          y: info.end.handle.y
        }
      ].filter(Boolean);
    }
    getText(shape) {
      return shape.props.text;
    }
    onHandleDrag(shape, { handle, isPrecise }) {
      const handleId = handle.id;
      const bindings = getArrowBindings(this.editor, shape);
      if (handleId === "middle") {
        const { start, end } = getArrowTerminalsInArrowSpace(this.editor, shape, bindings);
        const delta = Vec.Sub(end, start);
        const v = Vec.Per(delta);
        const med = Vec.Med(end, start);
        const A = Vec.Sub(med, v);
        const B = Vec.Add(med, v);
        const point2 = Vec.NearestPointOnLineSegment(A, B, handle, false);
        let bend = Vec.Dist(point2, med);
        if (Vec.Clockwise(point2, end, med)) bend *= -1;
        return { id: shape.id, type: shape.type, props: { bend } };
      }
      const update = { id: shape.id, type: "arrow", props: {} };
      const currentBinding = bindings[handleId];
      const otherHandleId = handleId === "start" ? "end" : "start";
      const otherBinding = bindings[otherHandleId];
      if (this.editor.inputs.ctrlKey) {
        removeArrowBinding(this.editor, shape, handleId);
        update.props[handleId] = {
          x: handle.x,
          y: handle.y
        };
        return update;
      }
      const point = this.editor.getShapePageTransform(shape.id).applyToPoint(handle);
      const target = this.editor.getShapeAtPoint(point, {
        hitInside: true,
        hitFrameInside: true,
        margin: 0,
        filter: (targetShape) => {
          return !targetShape.isLocked && this.editor.canBindShapes({ fromShape: shape, toShape: targetShape, binding: "arrow" });
        }
      });
      if (!target) {
        removeArrowBinding(this.editor, shape, handleId);
        const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor);
        update.props[handleId] = {
          x: newPoint.x,
          y: newPoint.y
        };
        return update;
      }
      const targetGeometry = this.editor.getShapeGeometry(target);
      const targetBounds = Box.ZeroFix(targetGeometry.bounds);
      const pageTransform = this.editor.getShapePageTransform(update.id);
      const pointInPageSpace = pageTransform.applyToPoint(handle);
      const pointInTargetSpace = this.editor.getPointInShapeSpace(target, pointInPageSpace);
      let precise2 = isPrecise;
      if (!precise2) {
        if (!currentBinding || currentBinding && target.id !== currentBinding.toId) {
          precise2 = this.editor.inputs.pointerVelocity.len() < 0.5;
        }
      }
      if (!isPrecise) {
        if (!targetGeometry.isClosed) {
          precise2 = true;
        }
        if (otherBinding && target.id === otherBinding.toId && otherBinding.props.isPrecise) {
          precise2 = true;
        }
      }
      const normalizedAnchor = {
        x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
        y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height
      };
      if (precise2) {
        if (Vec.Dist(pointInTargetSpace, targetBounds.center) < Math.max(4, Math.min(Math.min(targetBounds.width, targetBounds.height) * 0.15, 16)) / this.editor.getZoomLevel()) {
          normalizedAnchor.x = 0.5;
          normalizedAnchor.y = 0.5;
        }
      }
      const b = {
        terminal: handleId,
        normalizedAnchor,
        isPrecise: precise2,
        isExact: this.editor.inputs.altKey
      };
      createOrUpdateArrowBinding(this.editor, shape, target.id, b);
      this.editor.setHintingShapes([target.id]);
      const newBindings = getArrowBindings(this.editor, shape);
      if (newBindings.start && newBindings.end && newBindings.start.toId === newBindings.end.toId) {
        if (Vec.Equals(newBindings.start.props.normalizedAnchor, newBindings.end.props.normalizedAnchor)) {
          createOrUpdateArrowBinding(this.editor, shape, newBindings.end.toId, {
            ...newBindings.end.props,
            normalizedAnchor: {
              x: newBindings.end.props.normalizedAnchor.x + 0.05,
              y: newBindings.end.props.normalizedAnchor.y
            }
          });
        }
      }
      return update;
    }
    onTranslateStart(shape) {
      const bindings = getArrowBindings(this.editor, shape);
      const terminalsInArrowSpace = getArrowTerminalsInArrowSpace(this.editor, shape, bindings);
      const shapePageTransform = this.editor.getShapePageTransform(shape.id);
      const selectedShapeIds = this.editor.getSelectedShapeIds();
      if (bindings.start && (selectedShapeIds.includes(bindings.start.toId) || this.editor.isAncestorSelected(bindings.start.toId)) || bindings.end && (selectedShapeIds.includes(bindings.end.toId) || this.editor.isAncestorSelected(bindings.end.toId))) {
        return;
      }
      shapeAtTranslationStart.set(shape, {
        pagePosition: shapePageTransform.applyToPoint(shape),
        terminalBindings: mapObjectMapValues(terminalsInArrowSpace, (terminalName, point) => {
          const binding = bindings[terminalName];
          if (!binding) return null;
          return {
            binding,
            shapePosition: point,
            pagePosition: shapePageTransform.applyToPoint(point)
          };
        })
      });
      if (bindings.start) {
        updateArrowTerminal({
          editor: this.editor,
          arrow: shape,
          terminal: "start",
          useHandle: true
        });
        shape = this.editor.getShape(shape.id);
      }
      if (bindings.end) {
        updateArrowTerminal({
          editor: this.editor,
          arrow: shape,
          terminal: "end",
          useHandle: true
        });
      }
      for (const handleName of [
        "start",
        "end"
        /* END */
      ]) {
        const binding = bindings[handleName];
        if (!binding) continue;
        this.editor.updateBinding({
          ...binding,
          props: { ...binding.props, isPrecise: true }
        });
      }
      return;
    }
    onTranslate(initialShape, shape) {
      const atTranslationStart = shapeAtTranslationStart.get(initialShape);
      if (!atTranslationStart) return;
      const shapePageTransform = this.editor.getShapePageTransform(shape.id);
      const pageDelta = Vec.Sub(
        shapePageTransform.applyToPoint(shape),
        atTranslationStart.pagePosition
      );
      for (const terminalBinding of Object.values(atTranslationStart.terminalBindings)) {
        if (!terminalBinding) continue;
        const newPagePoint = Vec.Add(terminalBinding.pagePosition, Vec.Mul(pageDelta, 0.5));
        const newTarget = this.editor.getShapeAtPoint(newPagePoint, {
          hitInside: true,
          hitFrameInside: true,
          margin: 0,
          filter: (targetShape) => {
            return !targetShape.isLocked && this.editor.canBindShapes({ fromShape: shape, toShape: targetShape, binding: "arrow" });
          }
        });
        if (newTarget?.id === terminalBinding.binding.toId) {
          const targetBounds = Box.ZeroFix(this.editor.getShapeGeometry(newTarget).bounds);
          const pointInTargetSpace = this.editor.getPointInShapeSpace(newTarget, newPagePoint);
          const normalizedAnchor = {
            x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
            y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height
          };
          createOrUpdateArrowBinding(this.editor, shape, newTarget.id, {
            ...terminalBinding.binding.props,
            normalizedAnchor,
            isPrecise: true
          });
        } else {
          removeArrowBinding(this.editor, shape, terminalBinding.binding.props.terminal);
        }
      }
    }
    _resizeInitialBindings = new WeakCache();
    onResize(shape, info) {
      const { scaleX, scaleY } = info;
      const bindings = this._resizeInitialBindings.get(
        shape,
        () => getArrowBindings(this.editor, shape)
      );
      const terminals = getArrowTerminalsInArrowSpace(this.editor, shape, bindings);
      const { start, end } = structuredClone(shape.props);
      let { bend } = shape.props;
      if (!bindings.start) {
        start.x = terminals.start.x * scaleX;
        start.y = terminals.start.y * scaleY;
      }
      if (!bindings.end) {
        end.x = terminals.end.x * scaleX;
        end.y = terminals.end.y * scaleY;
      }
      const mx = Math.abs(scaleX);
      const my = Math.abs(scaleY);
      const startNormalizedAnchor = bindings?.start ? Vec.From(bindings.start.props.normalizedAnchor) : null;
      const endNormalizedAnchor = bindings?.end ? Vec.From(bindings.end.props.normalizedAnchor) : null;
      if (scaleX < 0 && scaleY >= 0) {
        if (bend !== 0) {
          bend *= -1;
          bend *= Math.max(mx, my);
        }
        if (startNormalizedAnchor) {
          startNormalizedAnchor.x = 1 - startNormalizedAnchor.x;
        }
        if (endNormalizedAnchor) {
          endNormalizedAnchor.x = 1 - endNormalizedAnchor.x;
        }
      } else if (scaleX >= 0 && scaleY < 0) {
        if (bend !== 0) {
          bend *= -1;
          bend *= Math.max(mx, my);
        }
        if (startNormalizedAnchor) {
          startNormalizedAnchor.y = 1 - startNormalizedAnchor.y;
        }
        if (endNormalizedAnchor) {
          endNormalizedAnchor.y = 1 - endNormalizedAnchor.y;
        }
      } else if (scaleX >= 0 && scaleY >= 0) {
        if (bend !== 0) {
          bend *= Math.max(mx, my);
        }
      } else if (scaleX < 0 && scaleY < 0) {
        if (bend !== 0) {
          bend *= Math.max(mx, my);
        }
        if (startNormalizedAnchor) {
          startNormalizedAnchor.x = 1 - startNormalizedAnchor.x;
          startNormalizedAnchor.y = 1 - startNormalizedAnchor.y;
        }
        if (endNormalizedAnchor) {
          endNormalizedAnchor.x = 1 - endNormalizedAnchor.x;
          endNormalizedAnchor.y = 1 - endNormalizedAnchor.y;
        }
      }
      if (bindings.start && startNormalizedAnchor) {
        createOrUpdateArrowBinding(this.editor, shape, bindings.start.toId, {
          ...bindings.start.props,
          normalizedAnchor: startNormalizedAnchor.toJson()
        });
      }
      if (bindings.end && endNormalizedAnchor) {
        createOrUpdateArrowBinding(this.editor, shape, bindings.end.toId, {
          ...bindings.end.props,
          normalizedAnchor: endNormalizedAnchor.toJson()
        });
      }
      const next = {
        props: {
          start,
          end,
          bend
        }
      };
      return next;
    }
    onDoubleClickHandle(shape, handle) {
      switch (handle.id) {
        case "start": {
          return {
            id: shape.id,
            type: shape.type,
            props: {
              ...shape.props,
              arrowheadStart: shape.props.arrowheadStart === "none" ? "arrow" : "none"
            }
          };
        }
        case "end": {
          return {
            id: shape.id,
            type: shape.type,
            props: {
              ...shape.props,
              arrowheadEnd: shape.props.arrowheadEnd === "none" ? "arrow" : "none"
            }
          };
        }
      }
    }
    component(shape) {
      const theme = useDefaultColorTheme();
      const onlySelectedShape = this.editor.getOnlySelectedShape();
      const shouldDisplayHandles = this.editor.isInAny(
        "select.idle",
        "select.pointing_handle",
        "select.dragging_handle",
        "select.translating",
        "arrow.dragging"
      ) && !this.editor.getIsReadonly();
      const info = getArrowInfo(this.editor, shape);
      if (!info?.isValid) return null;
      const labelPosition = getArrowLabelPosition(this.editor, shape);
      const isSelected = shape.id === this.editor.getOnlySelectedShapeId();
      const isEditing = this.editor.getEditingShapeId() === shape.id;
      const showArrowLabel = isEditing || shape.props.text;
      return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(import_jsx_runtime97.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(SVGContainer, { style: { minWidth: 50, minHeight: 50 }, children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
          ArrowSvg,
          {
            shape,
            shouldDisplayHandles: shouldDisplayHandles && onlySelectedShape?.id === shape.id
          }
        ) }),
        showArrowLabel && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
          TextLabel,
          {
            shapeId: shape.id,
            classNamePrefix: "tl-arrow",
            type: "arrow",
            font: shape.props.font,
            fontSize: getArrowLabelFontSize(shape),
            lineHeight: TEXT_PROPS.lineHeight,
            align: "middle",
            verticalAlign: "middle",
            text: shape.props.text,
            labelColor: theme[shape.props.labelColor].solid,
            textWidth: labelPosition.box.w - ARROW_LABEL_PADDING * 2 * shape.props.scale,
            isSelected,
            padding: 0,
            style: {
              transform: `translate(${labelPosition.box.center.x}px, ${labelPosition.box.center.y}px)`
            }
          }
        )
      ] });
    }
    indicator(shape) {
      const isEditing = useIsEditing(shape.id);
      const clipPathId = useSharedSafeId(shape.id + "_clip");
      const info = getArrowInfo(this.editor, shape);
      if (!info) return null;
      const { start, end } = getArrowTerminalsInArrowSpace(this.editor, shape, info?.bindings);
      const geometry = this.editor.getShapeGeometry(shape);
      const bounds = geometry.bounds;
      const labelGeometry = shape.props.text.trim() ? geometry.children[1] : null;
      if (Vec.Equals(start, end)) return null;
      const strokeWidth = STROKE_SIZES2[shape.props.size] * shape.props.scale;
      const as = info.start.arrowhead && getArrowheadPathForType(info, "start", strokeWidth);
      const ae = info.end.arrowhead && getArrowheadPathForType(info, "end", strokeWidth);
      const path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info);
      const includeClipPath = as && info.start.arrowhead !== "arrow" || ae && info.end.arrowhead !== "arrow" || !!labelGeometry;
      if (isEditing && labelGeometry) {
        return /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
          "rect",
          {
            x: toDomPrecision(labelGeometry.x),
            y: toDomPrecision(labelGeometry.y),
            width: labelGeometry.w,
            height: labelGeometry.h,
            rx: 3.5 * shape.props.scale,
            ry: 3.5 * shape.props.scale
          }
        );
      }
      const clipStartArrowhead = !(info.start.arrowhead === "none" || info.start.arrowhead === "arrow");
      const clipEndArrowhead = !(info.end.arrowhead === "none" || info.end.arrowhead === "arrow");
      return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("g", { children: [
        includeClipPath && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
          ArrowClipPath,
          {
            hasText: shape.props.text.trim().length > 0,
            bounds,
            labelBounds: labelGeometry ? labelGeometry.getBounds() : new Box(0, 0, 0, 0),
            as: clipStartArrowhead && as ? as : "",
            ae: clipEndArrowhead && ae ? ae : ""
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(
          "g",
          {
            style: {
              clipPath: includeClipPath ? `url(#${clipPathId})` : void 0,
              WebkitClipPath: includeClipPath ? `url(#${clipPathId})` : void 0
            },
            children: [
              includeClipPath && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
                "rect",
                {
                  x: bounds.minX - 100,
                  y: bounds.minY - 100,
                  width: bounds.width + 200,
                  height: bounds.height + 200,
                  opacity: 0
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("path", { d: path })
            ]
          }
        ),
        as && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("path", { d: as }),
        ae && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("path", { d: ae }),
        labelGeometry && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
          "rect",
          {
            x: toDomPrecision(labelGeometry.x),
            y: toDomPrecision(labelGeometry.y),
            width: labelGeometry.w,
            height: labelGeometry.h,
            rx: 3.5,
            ry: 3.5
          }
        )
      ] });
    }
    onEditEnd(shape) {
      const {
        id,
        type,
        props: { text }
      } = shape;
      if (text.trimEnd() !== shape.props.text) {
        this.editor.updateShapes([
          {
            id,
            type,
            props: {
              text: text.trimEnd()
            }
          }
        ]);
      }
    }
    toSvg(shape, ctx) {
      ctx.addExportDef(getFillDefForExport(shape.props.fill));
      if (shape.props.text) ctx.addExportDef(getFontDefForExport(shape.props.font));
      const theme = getDefaultColorTheme(ctx);
      const scaleFactor = 1 / shape.props.scale;
      return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("g", { transform: `scale(${scaleFactor})`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(ArrowSvg, { shape, shouldDisplayHandles: false }),
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
          SvgTextLabel,
          {
            fontSize: getArrowLabelFontSize(shape),
            font: shape.props.font,
            align: "middle",
            verticalAlign: "middle",
            text: shape.props.text,
            labelColor: theme[shape.props.labelColor].solid,
            bounds: getArrowLabelPosition(this.editor, shape).box.clone().expandBy(-ARROW_LABEL_PADDING * shape.props.scale),
            padding: 0
          }
        )
      ] });
    }
    getCanvasSvgDefs() {
      return [
        getFillDefForCanvas(),
        {
          key: `arrow:dot`,
          component: ArrowheadDotDef
        },
        {
          key: `arrow:cross`,
          component: ArrowheadCrossDef
        }
      ];
    }
    getInterpolatedProps(startShape, endShape, progress) {
      return {
        ...progress > 0.5 ? endShape.props : startShape.props,
        scale: lerp(startShape.props.scale, endShape.props.scale, progress),
        start: {
          x: lerp(startShape.props.start.x, endShape.props.start.x, progress),
          y: lerp(startShape.props.start.y, endShape.props.start.y, progress)
        },
        end: {
          x: lerp(startShape.props.end.x, endShape.props.end.x, progress),
          y: lerp(startShape.props.end.y, endShape.props.end.y, progress)
        },
        bend: lerp(startShape.props.bend, endShape.props.bend, progress),
        labelPosition: lerp(startShape.props.labelPosition, endShape.props.labelPosition, progress)
      };
    }
  };
  function getArrowLength(editor, shape) {
    const info = getArrowInfo(editor, shape);
    return info.isStraight ? Vec.Dist(info.start.handle, info.end.handle) : Math.abs(info.handleArc.length);
  }
  var ArrowSvg = track(function ArrowSvg2({
    shape,
    shouldDisplayHandles
  }) {
    const editor = useEditor();
    const theme = useDefaultColorTheme();
    const info = getArrowInfo(editor, shape);
    const bounds = Box.ZeroFix(editor.getShapeGeometry(shape).bounds);
    const bindings = getArrowBindings(editor, shape);
    const isForceSolid = useValue(
      "force solid",
      () => {
        return editor.getZoomLevel() < 0.2;
      },
      [editor]
    );
    const clipPathId = useSharedSafeId(shape.id + "_clip");
    const arrowheadDotId = useSharedSafeId("arrowhead-dot");
    const arrowheadCrossId = useSharedSafeId("arrowhead-cross");
    if (!info?.isValid) return null;
    const strokeWidth = STROKE_SIZES2[shape.props.size] * shape.props.scale;
    const as = info.start.arrowhead && getArrowheadPathForType(info, "start", strokeWidth);
    const ae = info.end.arrowhead && getArrowheadPathForType(info, "end", strokeWidth);
    const path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info);
    let handlePath = null;
    if (shouldDisplayHandles) {
      const sw = 2 / editor.getZoomLevel();
      const { strokeDasharray: strokeDasharray2, strokeDashoffset: strokeDashoffset2 } = getPerfectDashProps(
        getArrowLength(editor, shape),
        sw,
        {
          end: "skip",
          start: "skip",
          lengthRatio: 2.5
        }
      );
      handlePath = bindings.start || bindings.end ? /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
        "path",
        {
          className: "tl-arrow-hint",
          d: info.isStraight ? getStraightArrowHandlePath(info) : getCurvedArrowHandlePath(info),
          strokeDasharray: strokeDasharray2,
          strokeDashoffset: strokeDashoffset2,
          strokeWidth: sw,
          markerStart: bindings.start ? bindings.start.props.isExact ? "" : bindings.start.props.isPrecise ? `url(#${arrowheadCrossId})` : `url(#${arrowheadDotId})` : "",
          markerEnd: bindings.end ? bindings.end.props.isExact ? "" : bindings.end.props.isPrecise ? `url(#${arrowheadCrossId})` : `url(#${arrowheadDotId})` : "",
          opacity: 0.16
        }
      ) : null;
    }
    const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
      info.isStraight ? info.length : Math.abs(info.bodyArc.length),
      strokeWidth,
      {
        style: shape.props.dash,
        forceSolid: isForceSolid
      }
    );
    const labelPosition = getArrowLabelPosition(editor, shape);
    const clipStartArrowhead = !(info.start.arrowhead === "none" || info.start.arrowhead === "arrow");
    const clipEndArrowhead = !(info.end.arrowhead === "none" || info.end.arrowhead === "arrow");
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(import_jsx_runtime97.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("clipPath", { id: clipPathId, children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
        ArrowClipPath,
        {
          hasText: shape.props.text.trim().length > 0,
          bounds,
          labelBounds: labelPosition.box,
          as: clipStartArrowhead && as ? as : "",
          ae: clipEndArrowhead && ae ? ae : ""
        }
      ) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(
        "g",
        {
          fill: "none",
          stroke: theme[shape.props.color].solid,
          strokeWidth,
          strokeLinejoin: "round",
          strokeLinecap: "round",
          pointerEvents: "none",
          children: [
            handlePath,
            /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(
              "g",
              {
                style: {
                  clipPath: `url(#${clipPathId})`,
                  WebkitClipPath: `url(#${clipPathId})`
                },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
                    "rect",
                    {
                      x: toDomPrecision(bounds.minX - 100),
                      y: toDomPrecision(bounds.minY - 100),
                      width: toDomPrecision(bounds.width + 200),
                      height: toDomPrecision(bounds.height + 200),
                      opacity: 0
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("path", { d: path, strokeDasharray, strokeDashoffset })
                ]
              }
            ),
            as && clipStartArrowhead && shape.props.fill !== "none" && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
              ShapeFill,
              {
                theme,
                d: as,
                color: shape.props.color,
                fill: shape.props.fill,
                scale: shape.props.scale
              }
            ),
            ae && clipEndArrowhead && shape.props.fill !== "none" && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
              ShapeFill,
              {
                theme,
                d: ae,
                color: shape.props.color,
                fill: shape.props.fill,
                scale: shape.props.scale
              }
            ),
            as && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("path", { d: as }),
            ae && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("path", { d: ae })
          ]
        }
      )
    ] });
  });
  function ArrowClipPath({
    hasText,
    bounds,
    labelBounds,
    as,
    ae
  }) {
    const boundingBoxPath = `M${toDomPrecision(bounds.minX - 100)},${toDomPrecision(bounds.minY - 100)} h${bounds.width + 200} v${bounds.height + 200} h-${bounds.width + 200} Z`;
    const labelBoxPath = `M${toDomPrecision(labelBounds.minX)},${toDomPrecision(labelBounds.minY)} v${labelBounds.height} h${labelBounds.width} v-${labelBounds.height} Z`;
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("path", { d: `${boundingBoxPath}${hasText ? labelBoxPath : ""}${as}${ae}` });
  }
  var shapeAtTranslationStart = /* @__PURE__ */ new WeakMap();
  function ArrowheadDotDef() {
    const id = useSharedSafeId("arrowhead-dot");
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("marker", { id, className: "tl-arrow-hint", refX: "3.0", refY: "3.0", orient: "0", children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("circle", { cx: "3", cy: "3", r: "2", strokeDasharray: "100%" }) });
  }
  function ArrowheadCrossDef() {
    const id = useSharedSafeId("arrowhead-cross");
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("marker", { id, className: "tl-arrow-hint", refX: "3.0", refY: "3.0", orient: "auto", children: [
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("line", { x1: "1.5", y1: "1.5", x2: "4.5", y2: "4.5", strokeDasharray: "100%" }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("line", { x1: "1.5", y1: "4.5", x2: "4.5", y2: "1.5", strokeDasharray: "100%" })
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/shapes/bookmark/BookmarkShapeUtil.mjs
  var import_jsx_runtime99 = __toESM(require_jsx_runtime(), 1);
  var import_classnames22 = __toESM(require_classnames(), 1);
  var import_react78 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/shared/HyperlinkButton.mjs
  var import_jsx_runtime98 = __toESM(require_jsx_runtime(), 1);
  var import_classnames21 = __toESM(require_classnames(), 1);
  var LINK_ICON = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' fill='none'%3E%3Cpath stroke='%23000' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 5H7a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6M19 5h6m0 0v6m0-6L13 17'/%3E%3C/svg%3E";
  function HyperlinkButton({ url }) {
    const editor = useEditor();
    const hideButton = useValue("zoomLevel", () => editor.getZoomLevel() < 0.32, [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
      "a",
      {
        className: (0, import_classnames21.default)("tl-hyperlink-button", {
          "tl-hyperlink-button__hidden": hideButton
        }),
        href: url,
        target: "_blank",
        rel: "noopener noreferrer",
        onPointerDown: stopEventPropagation,
        onPointerUp: stopEventPropagation,
        title: url,
        draggable: false,
        children: /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
          "div",
          {
            className: "tl-hyperlink__icon",
            style: {
              mask: `url("${LINK_ICON}") center 100% / 100% no-repeat`,
              WebkitMask: `url("${LINK_ICON}") center 100% / 100% no-repeat`
            }
          }
        )
      }
    );
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/icons-editor.mjs
  var LINK_ICON2 = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' fill='none'%3E%3Cpath stroke='%23000' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 5H7a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6M19 5h6m0 0v6m0-6L13 17'/%3E%3C/svg%3E";

  // node_modules/tldraw/dist-esm/lib/shapes/shared/rotated-box-shadow.mjs
  var ROTATING_BOX_SHADOWS = [
    {
      offsetX: 0,
      offsetY: 2,
      blur: 4,
      spread: 0,
      color: "#00000029"
    },
    {
      offsetX: 0,
      offsetY: 3,
      blur: 6,
      spread: 0,
      color: "#0000001f"
    }
  ];
  function getRotatedBoxShadow(rotation) {
    const cssStrings = ROTATING_BOX_SHADOWS.map((shadow) => {
      const { offsetX, offsetY, blur, spread, color } = shadow;
      const vec = new Vec(offsetX, offsetY);
      const { x, y } = vec.rot(-rotation);
      return `${x}px ${y}px ${blur}px ${spread}px ${color}`;
    });
    return cssStrings.join(", ");
  }

  // node_modules/tldraw/dist-esm/lib/shapes/bookmark/BookmarkShapeUtil.mjs
  var BOOKMARK_WIDTH = 300;
  var BOOKMARK_HEIGHT = 320;
  var BOOKMARK_JUST_URL_HEIGHT = 46;
  var SHORT_BOOKMARK_HEIGHT = 101;
  var BookmarkShapeUtil = class extends BaseBoxShapeUtil {
    static type = "bookmark";
    static props = bookmarkShapeProps;
    static migrations = bookmarkShapeMigrations;
    canResize() {
      return false;
    }
    hideSelectionBoundsFg() {
      return true;
    }
    getText(shape) {
      return shape.props.url;
    }
    getDefaultProps() {
      return {
        url: "",
        w: BOOKMARK_WIDTH,
        h: BOOKMARK_HEIGHT,
        assetId: null
      };
    }
    component(shape) {
      return /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(BookmarkShapeComponent, { shape, util: this });
    }
    indicator(shape) {
      return /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
        "rect",
        {
          width: toDomPrecision(shape.props.w),
          height: toDomPrecision(shape.props.h),
          rx: "6",
          ry: "6"
        }
      );
    }
    onBeforeCreate(next) {
      return getBookmarkSize(this.editor, next);
    }
    onBeforeUpdate(prev, shape) {
      if (prev.props.url !== shape.props.url) {
        if (!validation_exports.linkUrl.isValid(shape.props.url)) {
          return { ...shape, props: { ...shape.props, url: prev.props.url } };
        } else {
          updateBookmarkAssetOnUrlChange(this.editor, shape);
        }
      }
      if (prev.props.assetId !== shape.props.assetId) {
        return getBookmarkSize(this.editor, shape);
      }
    }
    getInterpolatedProps(startShape, endShape, t2) {
      return {
        ...t2 > 0.5 ? endShape.props : startShape.props,
        w: lerp(startShape.props.w, endShape.props.w, t2),
        h: lerp(startShape.props.h, endShape.props.h, t2)
      };
    }
  };
  function BookmarkShapeComponent({
    shape,
    util
  }) {
    const asset = shape.props.assetId ? util.editor.getAsset(shape.props.assetId) : null;
    const isSafariExport = !!useSvgExportContext() && tlenv.isSafari;
    const pageRotation = util.editor.getShapePageTransform(shape).rotation();
    const address = getHumanReadableAddress(shape);
    const [isFaviconValid, setIsFaviconValid] = (0, import_react78.useState)(true);
    const onFaviconError = () => setIsFaviconValid(false);
    return /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(HTMLContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(
      "div",
      {
        className: (0, import_classnames22.default)(
          "tl-bookmark__container",
          isSafariExport && "tl-bookmark__container--safariExport"
        ),
        style: {
          boxShadow: isSafariExport ? void 0 : getRotatedBoxShadow(pageRotation),
          maxHeight: shape.props.h
        },
        children: [
          (!asset || asset.props.image) && /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)("div", { className: "tl-bookmark__image_container", children: [
            asset ? /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
              "img",
              {
                className: "tl-bookmark__image",
                draggable: false,
                referrerPolicy: "strict-origin-when-cross-origin",
                src: asset?.props.image,
                alt: asset?.props.title || ""
              }
            ) : /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("div", { className: "tl-bookmark__placeholder" }),
            asset?.props.image && /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(HyperlinkButton, { url: shape.props.url })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)("div", { className: "tl-bookmark__copy_container", children: [
            asset?.props.title ? /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("h2", { className: "tl-bookmark__heading", children: convertCommonTitleHTMLEntities(asset.props.title) }) : null,
            asset?.props.description && asset?.props.image ? /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("p", { className: "tl-bookmark__description", children: asset.props.description }) : null,
            /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(
              "a",
              {
                className: "tl-bookmark__link",
                href: shape.props.url || "",
                target: "_blank",
                rel: "noopener noreferrer",
                onPointerDown: stopEventPropagation,
                onPointerUp: stopEventPropagation,
                onClick: stopEventPropagation,
                children: [
                  isFaviconValid && asset?.props.favicon ? /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
                    "img",
                    {
                      className: "tl-bookmark__favicon",
                      src: asset?.props.favicon,
                      referrerPolicy: "strict-origin-when-cross-origin",
                      onError: onFaviconError,
                      alt: `favicon of ${address}`
                    }
                  ) : /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
                    "div",
                    {
                      className: "tl-hyperlink__icon",
                      style: {
                        mask: `url("${LINK_ICON2}") center 100% / 100% no-repeat`,
                        WebkitMask: `url("${LINK_ICON2}") center 100% / 100% no-repeat`
                      }
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("span", { children: address })
                ]
              }
            )
          ] })
        ]
      }
    ) });
  }
  function getBookmarkSize(editor, shape) {
    const asset = shape.props.assetId ? editor.getAsset(shape.props.assetId) : null;
    let h = BOOKMARK_HEIGHT;
    if (asset) {
      if (!asset.props.image) {
        if (!asset.props.title) {
          h = BOOKMARK_JUST_URL_HEIGHT;
        } else {
          h = SHORT_BOOKMARK_HEIGHT;
        }
      }
    }
    return {
      ...shape,
      props: {
        ...shape.props,
        h
      }
    };
  }
  var getHumanReadableAddress = (shape) => {
    try {
      const url = new URL(shape.props.url);
      return url.hostname.replace(/^www\./, "");
    } catch {
      return shape.props.url;
    }
  };
  function updateBookmarkAssetOnUrlChange(editor, shape) {
    const { url } = shape.props;
    const assetId = AssetRecordType.createId(getHashForString(url));
    if (editor.getAsset(assetId)) {
      if (shape.props.assetId !== assetId) {
        editor.updateShapes([
          {
            id: shape.id,
            type: shape.type,
            props: { assetId }
          }
        ]);
      }
    } else {
      editor.updateShapes([
        {
          id: shape.id,
          type: shape.type,
          props: { assetId: null }
        }
      ]);
      createBookmarkAssetOnUrlChange(editor, shape);
    }
  }
  var createBookmarkAssetOnUrlChange = debounce(async (editor, shape) => {
    if (editor.isDisposed) return;
    const { url } = shape.props;
    const asset = await editor.getAssetForExternalContent({ type: "url", url });
    if (!asset) {
      return;
    }
    editor.run(() => {
      editor.createAssets([asset]);
      editor.updateShapes([
        {
          id: shape.id,
          type: shape.type,
          props: { assetId: asset.id }
        }
      ]);
    });
  }, 500);

  // node_modules/tldraw/dist-esm/lib/shapes/draw/DrawShapeUtil.mjs
  var import_jsx_runtime100 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/svg.mjs
  function getSvgPathFromStrokePoints(points, closed = false) {
    const len = points.length;
    if (len < 2) {
      return "";
    }
    let a = points[0].point;
    let b = points[1].point;
    if (len === 2) {
      return `M${precise(a)}L${precise(b)}`;
    }
    let result = "";
    for (let i = 2, max2 = len - 1; i < max2; i++) {
      a = points[i].point;
      b = points[i + 1].point;
      result += average(a, b);
    }
    if (closed) {
      return `M${average(points[0].point, points[1].point)}Q${precise(points[1].point)}${average(
        points[1].point,
        points[2].point
      )}T${result}${average(points[len - 1].point, points[0].point)}${average(
        points[0].point,
        points[1].point
      )}Z`;
    } else {
      return `M${precise(points[0].point)}Q${precise(points[1].point)}${average(
        points[1].point,
        points[2].point
      )}${points.length > 3 ? "T" : ""}${result}L${precise(points[len - 1].point)}`;
    }
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/svgInk.mjs
  function svgInk(rawInputPoints, options = {}) {
    const { start = {}, end = {} } = options;
    const { cap: capStart = true } = start;
    const { cap: capEnd = true } = end;
    assert(!start.taper && !end.taper, "cap taper not supported here");
    assert(!start.easing && !end.easing, "cap easing not supported here");
    assert(capStart && capEnd, "cap must be true");
    const points = getStrokePoints(rawInputPoints, options);
    setStrokePointRadii(points, options);
    const partitions = partitionAtElbows(points);
    let svg = "";
    for (const partition2 of partitions) {
      svg += renderPartition(partition2, options);
    }
    return svg;
  }
  function partitionAtElbows(points) {
    if (points.length <= 2) return [points];
    const result = [];
    let currentPartition = [points[0]];
    let prevV = Vec.Sub(points[1].point, points[0].point).uni();
    let nextV;
    let dpr;
    let prevPoint, thisPoint, nextPoint;
    for (let i = 1, n = points.length; i < n - 1; i++) {
      prevPoint = points[i - 1];
      thisPoint = points[i];
      nextPoint = points[i + 1];
      nextV = Vec.Sub(nextPoint.point, thisPoint.point).uni();
      dpr = Vec.Dpr(prevV, nextV);
      prevV = nextV;
      if (dpr < -0.8) {
        const elbowPoint = {
          ...thisPoint,
          point: thisPoint.input
        };
        currentPartition.push(elbowPoint);
        result.push(cleanUpPartition(currentPartition));
        currentPartition = [elbowPoint];
        continue;
      }
      currentPartition.push(thisPoint);
      if (dpr > 0.7) {
        continue;
      }
      if ((Vec.Dist2(prevPoint.point, thisPoint.point) + Vec.Dist2(thisPoint.point, nextPoint.point)) / ((prevPoint.radius + thisPoint.radius + nextPoint.radius) / 3) ** 2 < 1.5) {
        currentPartition.push(thisPoint);
        result.push(cleanUpPartition(currentPartition));
        currentPartition = [thisPoint];
        continue;
      }
    }
    currentPartition.push(points[points.length - 1]);
    result.push(cleanUpPartition(currentPartition));
    return result;
  }
  function cleanUpPartition(partition2) {
    const startPoint = partition2[0];
    let nextPoint;
    while (partition2.length > 2) {
      nextPoint = partition2[1];
      if (Vec.Dist2(startPoint.point, nextPoint.point) < ((startPoint.radius + nextPoint.radius) / 2 * 0.5) ** 2) {
        partition2.splice(1, 1);
      } else {
        break;
      }
    }
    const endPoint = partition2[partition2.length - 1];
    let prevPoint;
    while (partition2.length > 2) {
      prevPoint = partition2[partition2.length - 2];
      if (Vec.Dist2(endPoint.point, prevPoint.point) < ((endPoint.radius + prevPoint.radius) / 2 * 0.5) ** 2) {
        partition2.splice(partition2.length - 2, 1);
      } else {
        break;
      }
    }
    if (partition2.length > 1) {
      partition2[0] = {
        ...partition2[0],
        vector: Vec.Sub(partition2[0].point, partition2[1].point).uni()
      };
      partition2[partition2.length - 1] = {
        ...partition2[partition2.length - 1],
        vector: Vec.Sub(
          partition2[partition2.length - 2].point,
          partition2[partition2.length - 1].point
        ).uni()
      };
    }
    return partition2;
  }
  function circlePath(cx, cy, r) {
    return "M " + cx + " " + cy + " m -" + r + ", 0 a " + r + "," + r + " 0 1,1 " + r * 2 + ",0 a " + r + "," + r + " 0 1,1 -" + r * 2 + ",0";
  }
  function renderPartition(strokePoints, options = {}) {
    if (strokePoints.length === 0) return "";
    if (strokePoints.length === 1) {
      return circlePath(strokePoints[0].point.x, strokePoints[0].point.y, strokePoints[0].radius);
    }
    const { left, right } = getStrokeOutlineTracks(strokePoints, options);
    right.reverse();
    let svg = `M${precise(left[0])}T`;
    for (let i = 1; i < left.length; i++) {
      svg += average(left[i - 1], left[i]);
    }
    {
      const point = strokePoints[strokePoints.length - 1];
      const radius = point.radius;
      const direction = point.vector.clone().per().neg();
      const arcStart = Vec.Add(point.point, Vec.Mul(direction, radius));
      const arcEnd = Vec.Add(point.point, Vec.Mul(direction, -radius));
      svg += `${precise(arcStart)}A${toDomPrecision(radius)},${toDomPrecision(
        radius
      )} 0 0 1 ${precise(arcEnd)}T`;
    }
    for (let i = 1; i < right.length; i++) {
      svg += average(right[i - 1], right[i]);
    }
    {
      const point = strokePoints[0];
      const radius = point.radius;
      const direction = point.vector.clone().per();
      const arcStart = Vec.Add(point.point, Vec.Mul(direction, radius));
      const arcEnd = Vec.Add(point.point, Vec.Mul(direction, -radius));
      svg += `${precise(arcStart)}A${toDomPrecision(radius)},${toDomPrecision(
        radius
      )} 0 0 1 ${precise(arcEnd)}Z`;
    }
    return svg;
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/interpolate-props.mjs
  var interpolateSegments = (startSegments, endSegments, progress) => {
    const startPoints = [];
    const endPoints = [];
    startSegments.forEach((segment) => startPoints.push(...segment.points));
    endSegments.forEach((segment) => endPoints.push(...segment.points));
    const maxLength = Math.max(startPoints.length, endPoints.length);
    const pointsToUseStart = [];
    const pointsToUseEnd = [];
    for (let i = 0; i < maxLength; i++) {
      pointsToUseStart.push(startPoints[i] || startPoints[startPoints.length - 1]);
      pointsToUseEnd.push(endPoints[i] || endPoints[endPoints.length - 1]);
    }
    const interpolatedPoints = pointsToUseStart.map((point, k) => {
      let z = 0.5;
      if (pointsToUseEnd[k].z !== void 0 && point.z !== void 0) {
        z = lerp(point.z, pointsToUseEnd[k].z, progress);
      }
      return {
        x: lerp(point.x, pointsToUseEnd[k].x, progress),
        y: lerp(point.y, pointsToUseEnd[k].y, progress),
        z
      };
    });
    return [
      {
        type: "free",
        points: interpolatedPoints
      }
    ];
  };

  // node_modules/tldraw/dist-esm/lib/shapes/draw/getPath.mjs
  var PEN_EASING = (t2) => t2 * 0.65 + SIN(t2 * PI / 2) * 0.35;
  var simulatePressureSettings = (strokeWidth) => {
    return {
      size: strokeWidth,
      thinning: 0.5,
      streamline: modulate(strokeWidth, [9, 16], [0.64, 0.74], true),
      // 0.62 + ((1 + strokeWidth) / 8) * 0.06,
      smoothing: 0.62,
      easing: EASINGS.easeOutSine,
      simulatePressure: true
    };
  };
  var realPressureSettings = (strokeWidth) => {
    return {
      size: 1 + strokeWidth * 1.2,
      thinning: 0.62,
      streamline: 0.62,
      smoothing: 0.62,
      simulatePressure: false,
      easing: PEN_EASING
    };
  };
  var solidSettings = (strokeWidth) => {
    return {
      size: strokeWidth,
      thinning: 0,
      streamline: modulate(strokeWidth, [9, 16], [0.64, 0.74], true),
      // 0.62 + ((1 + strokeWidth) / 8) * 0.06,
      smoothing: 0.62,
      simulatePressure: false,
      easing: EASINGS.linear
    };
  };
  var solidRealPressureSettings = (strokeWidth) => {
    return {
      size: strokeWidth,
      thinning: 0,
      streamline: 0.62,
      smoothing: 0.62,
      simulatePressure: false,
      easing: EASINGS.linear
    };
  };
  function getHighlightFreehandSettings({
    strokeWidth,
    showAsComplete
  }) {
    return {
      size: 1 + strokeWidth,
      thinning: 0,
      streamline: 0.5,
      smoothing: 0.5,
      simulatePressure: false,
      easing: EASINGS.easeOutSine,
      last: showAsComplete
    };
  }
  function getFreehandOptions(shapeProps, strokeWidth, forceComplete, forceSolid) {
    const last3 = shapeProps.isComplete || forceComplete;
    if (forceSolid) {
      if (shapeProps.isPen) {
        return { ...solidRealPressureSettings(strokeWidth), last: last3 };
      } else {
        return { ...solidSettings(strokeWidth), last: last3 };
      }
    }
    if (shapeProps.dash === "draw") {
      if (shapeProps.isPen) {
        return { ...realPressureSettings(strokeWidth), last: last3 };
      } else {
        return { ...simulatePressureSettings(strokeWidth), last: last3 };
      }
    }
    return { ...solidSettings(strokeWidth), last: last3 };
  }
  function getPointsFromSegments(segments) {
    const points = [];
    for (const segment of segments) {
      if (segment.type === "free" || segment.points.length < 2) {
        points.push(...segment.points.map(Vec.Cast));
      } else {
        const pointsToInterpolate = Math.max(
          4,
          Math.floor(Vec.Dist(segment.points[0], segment.points[1]) / 16)
        );
        points.push(...Vec.PointsBetween(segment.points[0], segment.points[1], pointsToInterpolate));
      }
    }
    return points;
  }
  function getDrawShapeStrokeDashArray(shape, strokeWidth, dotAdjustment) {
    return {
      draw: "none",
      solid: `none`,
      dotted: `${dotAdjustment} ${strokeWidth * 2}`,
      dashed: `${strokeWidth * 2} ${strokeWidth * 2}`
    }[shape.props.dash];
  }

  // node_modules/tldraw/dist-esm/lib/shapes/draw/DrawShapeUtil.mjs
  var DrawShapeUtil = class extends ShapeUtil {
    static type = "draw";
    static props = drawShapeProps;
    static migrations = drawShapeMigrations;
    hideResizeHandles(shape) {
      return getIsDot(shape);
    }
    hideRotateHandle(shape) {
      return getIsDot(shape);
    }
    hideSelectionBoundsFg(shape) {
      return getIsDot(shape);
    }
    getDefaultProps() {
      return {
        segments: [],
        color: "black",
        fill: "none",
        dash: "draw",
        size: "m",
        isComplete: false,
        isClosed: false,
        isPen: false,
        scale: 1
      };
    }
    getGeometry(shape) {
      const points = getPointsFromSegments(shape.props.segments);
      const sw = (STROKE_SIZES2[shape.props.size] + 1) * shape.props.scale;
      if (shape.props.segments.length === 1) {
        const box = Box.FromPoints(points);
        if (box.width < sw * 2 && box.height < sw * 2) {
          return new Circle2d({
            x: -sw,
            y: -sw,
            radius: sw,
            isFilled: true
          });
        }
      }
      const strokePoints = getStrokePoints(
        points,
        getFreehandOptions(shape.props, sw, shape.props.isPen, true)
      ).map((p) => p.point);
      if (shape.props.isClosed) {
        return new Polygon2d({
          points: strokePoints,
          isFilled: shape.props.fill !== "none"
        });
      }
      return new Polyline2d({
        points: strokePoints
      });
    }
    component(shape) {
      return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(SVGContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(DrawShapeSvg, { shape }) });
    }
    indicator(shape) {
      const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
      let sw = (STROKE_SIZES2[shape.props.size] + 1) * shape.props.scale;
      const zoomLevel = this.editor.getZoomLevel();
      const forceSolid = zoomLevel < 0.5 && zoomLevel < 1.5 / sw;
      if (!forceSolid && !shape.props.isPen && shape.props.dash === "draw" && allPointsFromSegments.length === 1) {
        sw += rng(shape.id)() * (sw / 6);
      }
      const showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === "straight";
      const options = getFreehandOptions(shape.props, sw, showAsComplete, true);
      const strokePoints = getStrokePoints(allPointsFromSegments, options);
      const solidStrokePath = strokePoints.length > 1 ? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed) : getDot(allPointsFromSegments[0], sw);
      return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("path", { d: solidStrokePath });
    }
    toSvg(shape, ctx) {
      ctx.addExportDef(getFillDefForExport(shape.props.fill));
      const scaleFactor = 1 / shape.props.scale;
      return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("g", { transform: `scale(${scaleFactor})`, children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(DrawShapeSvg, { shape, zoomOverride: 1 }) });
    }
    getCanvasSvgDefs() {
      return [getFillDefForCanvas()];
    }
    onResize(shape, info) {
      const { scaleX, scaleY } = info;
      const newSegments = [];
      for (const segment of shape.props.segments) {
        newSegments.push({
          ...segment,
          points: segment.points.map(({ x, y, z }) => {
            return {
              x: toFixed(scaleX * x),
              y: toFixed(scaleY * y),
              z
            };
          })
        });
      }
      return {
        props: {
          segments: newSegments
        }
      };
    }
    expandSelectionOutlinePx(shape) {
      const multiplier = shape.props.dash === "draw" ? 1.6 : 1;
      return STROKE_SIZES2[shape.props.size] * multiplier / 2 * shape.props.scale;
    }
    getInterpolatedProps(startShape, endShape, t2) {
      return {
        ...t2 > 0.5 ? endShape.props : startShape.props,
        segments: interpolateSegments(startShape.props.segments, endShape.props.segments, t2),
        scale: lerp(startShape.props.scale, endShape.props.scale, t2)
      };
    }
  };
  function getDot(point, sw) {
    const r = (sw + 1) * 0.5;
    return `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${r * 2},0`;
  }
  function getIsDot(shape) {
    return shape.props.segments.length === 1 && shape.props.segments[0].points.length < 2;
  }
  function DrawShapeSvg({ shape, zoomOverride }) {
    const theme = useDefaultColorTheme();
    const editor = useEditor();
    const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
    const showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === "straight";
    let sw = (STROKE_SIZES2[shape.props.size] + 1) * shape.props.scale;
    const forceSolid = useValue(
      "force solid",
      () => {
        const zoomLevel = zoomOverride ?? editor.getZoomLevel();
        return zoomLevel < 0.5 && zoomLevel < 1.5 / sw;
      },
      [editor, sw, zoomOverride]
    );
    const dotAdjustment = useValue(
      "dot adjustment",
      () => {
        const zoomLevel = zoomOverride ?? editor.getZoomLevel();
        return zoomLevel < 0.2 ? 0 : 0.1;
      },
      [editor, zoomOverride]
    );
    if (!forceSolid && !shape.props.isPen && shape.props.dash === "draw" && allPointsFromSegments.length === 1) {
      sw += rng(shape.id)() * (sw / 6);
    }
    const options = getFreehandOptions(shape.props, sw, showAsComplete, forceSolid);
    if (!forceSolid && shape.props.dash === "draw") {
      return /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(import_jsx_runtime100.Fragment, { children: [
        shape.props.isClosed && shape.props.fill && allPointsFromSegments.length > 1 ? /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
          ShapeFill,
          {
            d: getSvgPathFromStrokePoints(
              getStrokePoints(allPointsFromSegments, options),
              shape.props.isClosed
            ),
            theme,
            color: shape.props.color,
            fill: shape.props.isClosed ? shape.props.fill : "none",
            scale: shape.props.scale
          }
        ) : null,
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
          "path",
          {
            d: svgInk(allPointsFromSegments, options),
            strokeLinecap: "round",
            fill: theme[shape.props.color].solid
          }
        )
      ] });
    }
    const strokePoints = getStrokePoints(allPointsFromSegments, options);
    const isDot = strokePoints.length < 2;
    const solidStrokePath = isDot ? getDot(allPointsFromSegments[0], 0) : getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed);
    return /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(import_jsx_runtime100.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
        ShapeFill,
        {
          d: solidStrokePath,
          theme,
          color: shape.props.color,
          fill: isDot || shape.props.isClosed ? shape.props.fill : "none",
          scale: shape.props.scale
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
        "path",
        {
          d: solidStrokePath,
          strokeLinecap: "round",
          fill: isDot ? theme[shape.props.color].solid : "none",
          stroke: theme[shape.props.color].solid,
          strokeWidth: sw,
          strokeDasharray: isDot ? "none" : getDrawShapeStrokeDashArray(shape, sw, dotAdjustment),
          strokeDashoffset: "0"
        }
      )
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/shapes/embed/EmbedShapeUtil.mjs
  var import_jsx_runtime101 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/utils/embeds/embeds.mjs
  function escapeStringRegexp(string2) {
    if (typeof string2 !== "string") {
      throw new TypeError("Expected a string");
    }
    return string2.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
  }
  function matchEmbedUrl(definitions, url) {
    const parsed = safeParseUrl(url);
    if (!parsed) return;
    const host = parsed.host.replace("www.", "");
    for (const localEmbedDef of definitions) {
      if (checkHostnames(localEmbedDef.hostnames, host)) {
        const originalUrl = localEmbedDef.fromEmbedUrl(url);
        if (originalUrl) {
          return {
            definition: localEmbedDef,
            url: originalUrl,
            embedUrl: url
          };
        }
      }
    }
  }
  var globlikeRegExp = (input) => {
    return input.split("*").map((str) => escapeStringRegexp(str)).join(".+");
  };
  var checkHostnames = (hostnames, targetHostname) => {
    return !!hostnames.find((hostname) => {
      const re = new RegExp(globlikeRegExp(hostname));
      return targetHostname.match(re);
    });
  };
  function matchUrl(definitions, url) {
    const parsed = safeParseUrl(url);
    if (!parsed) return;
    const host = parsed.host.replace("www.", "");
    for (const localEmbedDef of definitions) {
      if (checkHostnames(localEmbedDef.hostnames, host)) {
        const embedUrl = localEmbedDef.toEmbedUrl(url);
        if (embedUrl) {
          return {
            definition: localEmbedDef,
            embedUrl,
            url
          };
        }
      }
    }
  }
  function getEmbedInfo(definitions, inputUrl) {
    try {
      return matchUrl(definitions, inputUrl) ?? matchEmbedUrl(definitions, inputUrl);
    } catch {
      return void 0;
    }
  }

  // node_modules/tldraw/dist-esm/lib/shapes/embed/EmbedShapeUtil.mjs
  var getSandboxPermissions = (permissions) => {
    return Object.entries(permissions).filter(([_perm, isEnabled]) => isEnabled).map(([perm]) => perm).join(" ");
  };
  var EmbedShapeUtil = class _EmbedShapeUtil extends BaseBoxShapeUtil {
    static type = "embed";
    static props = embedShapeProps;
    static migrations = embedShapeMigrations;
    static embedDefinitions = DEFAULT_EMBED_DEFINITIONS;
    static setEmbedDefinitions(embedDefinitions) {
      _EmbedShapeUtil.embedDefinitions = embedDefinitions;
    }
    getEmbedDefinitions() {
      return _EmbedShapeUtil.embedDefinitions;
    }
    getEmbedDefinition(url) {
      return getEmbedInfo(_EmbedShapeUtil.embedDefinitions, url);
    }
    getText(shape) {
      return shape.props.url;
    }
    hideSelectionBoundsFg(shape) {
      return !this.canResize(shape);
    }
    canEdit() {
      return true;
    }
    canResize(shape) {
      return !!this.getEmbedDefinition(shape.props.url)?.definition?.doesResize;
    }
    canEditInReadOnly() {
      return true;
    }
    getDefaultProps() {
      return {
        w: 300,
        h: 300,
        url: ""
      };
    }
    isAspectRatioLocked(shape) {
      const embedInfo = this.getEmbedDefinition(shape.props.url);
      return embedInfo?.definition.isAspectRatioLocked ?? false;
    }
    onResize(shape, info) {
      const isAspectRatioLocked = this.isAspectRatioLocked(shape);
      const embedInfo = this.getEmbedDefinition(shape.props.url);
      let minWidth = embedInfo?.definition.minWidth ?? 200;
      let minHeight = embedInfo?.definition.minHeight ?? 200;
      if (isAspectRatioLocked) {
        const aspectRatio = shape.props.w / shape.props.h;
        if (aspectRatio > 1) {
          minWidth *= aspectRatio;
        } else {
          minHeight /= aspectRatio;
        }
      }
      return resizeBox(shape, info, { minWidth, minHeight });
    }
    component(shape) {
      const svgExport = useSvgExportContext();
      const { w, h, url } = shape.props;
      const isEditing = useIsEditing(shape.id);
      const embedInfo = this.getEmbedDefinition(url);
      const isHoveringWhileEditingSameShape = useValue(
        "is hovering",
        () => {
          const { editingShapeId, hoveredShapeId } = this.editor.getCurrentPageState();
          if (editingShapeId && hoveredShapeId !== editingShapeId) {
            const editingShape = this.editor.getShape(editingShapeId);
            if (editingShape && this.editor.isShapeOfType(editingShape, "embed")) {
              return true;
            }
          }
          return false;
        },
        []
      );
      const pageRotation = this.editor.getShapePageTransform(shape).rotation();
      if (svgExport) {
        return /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(HTMLContainer, { className: "tl-embed-container", id: shape.id, children: /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
          "div",
          {
            className: "tl-embed",
            style: {
              border: 0,
              boxShadow: getRotatedBoxShadow(pageRotation),
              borderRadius: embedInfo?.definition.overrideOutlineRadius ?? 8,
              background: embedInfo?.definition.backgroundColor ?? "var(--color-background)",
              width: w,
              height: h
            }
          }
        ) });
      }
      const isInteractive = isEditing || isHoveringWhileEditingSameShape;
      const isIframe = typeof window !== "undefined" && (window !== window.top || window.self !== window.parent);
      if (isIframe && embedInfo?.definition.type === "tldraw") return null;
      if (embedInfo?.definition.type === "github_gist") {
        const idFromGistUrl = embedInfo.url.split("/").pop();
        if (!idFromGistUrl) throw Error("No gist id!");
        return /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(HTMLContainer, { className: "tl-embed-container", id: shape.id, children: /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
          Gist,
          {
            id: idFromGistUrl,
            width: toDomPrecision(w),
            height: toDomPrecision(h),
            isInteractive,
            pageRotation
          }
        ) });
      }
      const sandbox = getSandboxPermissions({
        ...embedShapePermissionDefaults,
        ...embedInfo?.definition.overridePermissions ?? {}
      });
      return /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(HTMLContainer, { className: "tl-embed-container", id: shape.id, children: embedInfo?.definition ? /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
        "iframe",
        {
          className: "tl-embed",
          sandbox,
          src: embedInfo.embedUrl,
          width: toDomPrecision(w),
          height: toDomPrecision(h),
          draggable: false,
          frameBorder: "0",
          referrerPolicy: "no-referrer-when-downgrade",
          style: {
            border: 0,
            pointerEvents: isInteractive ? "auto" : "none",
            // Fix for safari <https://stackoverflow.com/a/49150908>
            zIndex: isInteractive ? "" : "-1",
            boxShadow: getRotatedBoxShadow(pageRotation),
            borderRadius: embedInfo?.definition.overrideOutlineRadius ?? 8,
            background: embedInfo?.definition.backgroundColor
          }
        }
      ) : null });
    }
    indicator(shape) {
      const embedInfo = this.getEmbedDefinition(shape.props.url);
      return /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
        "rect",
        {
          width: toDomPrecision(shape.props.w),
          height: toDomPrecision(shape.props.h),
          rx: embedInfo?.definition.overrideOutlineRadius ?? 8,
          ry: embedInfo?.definition.overrideOutlineRadius ?? 8
        }
      );
    }
    getInterpolatedProps(startShape, endShape, t2) {
      return {
        ...t2 > 0.5 ? endShape.props : startShape.props,
        w: lerp(startShape.props.w, endShape.props.w, t2),
        h: lerp(startShape.props.h, endShape.props.h, t2)
      };
    }
  };
  function Gist({
    id,
    isInteractive,
    width,
    height,
    style,
    pageRotation
  }) {
    if (!id.match(/^[0-9a-f]+$/)) throw Error("No gist id!");
    return /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
      "iframe",
      {
        className: "tl-embed",
        draggable: false,
        width: toDomPrecision(width),
        height: toDomPrecision(height),
        frameBorder: "0",
        scrolling: "no",
        referrerPolicy: "no-referrer-when-downgrade",
        style: {
          ...style,
          pointerEvents: isInteractive ? "all" : "none",
          // Fix for safari <https://stackoverflow.com/a/49150908>
          zIndex: isInteractive ? "" : "-1",
          boxShadow: getRotatedBoxShadow(pageRotation)
        },
        srcDoc: `
			<html>
				<head>
					<base target="_blank">
				</head>
				<body>
					<script src=${`https://gist.github.com/${id}.js`}><\/script>
					<style type="text/css">
						* { margin: 0px; }
						table { height: 100%; background-color: red; }
						.gist { background-color: none; height: 100%;  }
						.gist .gist-file { height: calc(100vh - 2px); padding: 0px; display: grid; grid-template-rows: 1fr auto; }
					</style>
				</body>
			</html>`
      }
    );
  }

  // node_modules/tldraw/dist-esm/lib/shapes/frame/FrameShapeUtil.mjs
  var import_jsx_runtime104 = __toESM(require_jsx_runtime(), 1);
  var import_classnames23 = __toESM(require_classnames(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/frame/components/FrameHeading.mjs
  var import_jsx_runtime103 = __toESM(require_jsx_runtime(), 1);
  var import_react80 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/frame/frameHelpers.mjs
  function getFrameHeadingSide(editor, shape) {
    const pageRotation = canonicalizeRotation(editor.getShapePageTransform(shape.id).rotation());
    const offsetRotation = pageRotation + Math.PI / 4;
    const scaledRotation = (offsetRotation * (2 / Math.PI) + 4) % 4;
    return Math.floor(scaledRotation);
  }
  function getFrameHeadingInfo(editor, shape, opts) {
    if (false) {
      return {
        box: new Box(0, -opts.height, shape.props.w, opts.height),
        spans: []
      };
    }
    const spans = editor.textMeasure.measureTextSpans(
      defaultEmptyAs(shape.props.name, "Frame") + String.fromCharCode(8203),
      opts
    );
    const firstSpan = spans[0];
    const lastSpan = last(spans);
    const labelTextWidth = lastSpan.box.w + lastSpan.box.x - firstSpan.box.x;
    return {
      box: new Box(0, -opts.height, labelTextWidth, opts.height),
      spans
    };
  }
  function getFrameHeadingOpts(shape, color) {
    return {
      fontSize: 12,
      fontFamily: "Inter, sans-serif",
      textAlign: "start",
      width: shape.props.w,
      height: 32,
      padding: 0,
      lineHeight: 1,
      fontStyle: "normal",
      fontWeight: "normal",
      overflow: "truncate-ellipsis",
      verticalTextAlign: "middle",
      fill: color,
      offsetY: -(32 + 2),
      offsetX: 2
    };
  }
  function getFrameHeadingTranslation(shape, side, isSvg) {
    const u = isSvg ? "" : "px";
    const r = isSvg ? "" : "deg";
    let labelTranslate;
    switch (side) {
      case 0:
        labelTranslate = ``;
        break;
      case 3:
        labelTranslate = `translate(${toDomPrecision(shape.props.w)}${u}, 0${u}) rotate(90${r})`;
        break;
      case 2:
        labelTranslate = `translate(${toDomPrecision(shape.props.w)}${u}, ${toDomPrecision(
          shape.props.h
        )}${u}) rotate(180${r})`;
        break;
      case 1:
        labelTranslate = `translate(0${u}, ${toDomPrecision(shape.props.h)}${u}) rotate(270${r})`;
        break;
      default:
        throw Error("labelSide out of bounds");
    }
    return labelTranslate;
  }

  // node_modules/tldraw/dist-esm/lib/shapes/frame/components/FrameLabelInput.mjs
  var import_jsx_runtime102 = __toESM(require_jsx_runtime(), 1);
  var import_react79 = __toESM(require_react(), 1);
  var FrameLabelInput = (0, import_react79.forwardRef)(({ id, name, isEditing }, ref) => {
    const editor = useEditor();
    const handleKeyDown = (0, import_react79.useCallback)(
      (e) => {
        if (e.key === "Enter" && !e.nativeEvent.isComposing) {
          stopEventPropagation(e);
          e.currentTarget.blur();
          editor.setEditingShape(null);
        }
      },
      [editor]
    );
    const handleBlur = (0, import_react79.useCallback)(
      (e) => {
        const shape = editor.getShape(id);
        if (!shape) return;
        const name2 = shape.props.name;
        const value = e.currentTarget.value.trim();
        if (name2 === value) return;
        editor.updateShapes([
          {
            id,
            type: "frame",
            props: { name: value }
          }
        ]);
      },
      [id, editor]
    );
    const handleChange = (0, import_react79.useCallback)(
      (e) => {
        const shape = editor.getShape(id);
        if (!shape) return;
        const name2 = shape.props.name;
        const value = e.currentTarget.value;
        if (name2 === value) return;
        editor.updateShapes([
          {
            id,
            type: "frame",
            props: { name: value }
          }
        ]);
      },
      [id, editor]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)("div", { className: `tl-frame-label ${isEditing ? "tl-frame-label__editing" : ""}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(
        "input",
        {
          className: "tl-frame-name-input",
          ref,
          style: { display: isEditing ? void 0 : "none" },
          value: name,
          autoFocus: true,
          onKeyDown: handleKeyDown,
          onBlur: handleBlur,
          onChange: handleChange
        }
      ),
      defaultEmptyAs(name, "Frame") + String.fromCharCode(8203)
    ] });
  });

  // node_modules/tldraw/dist-esm/lib/shapes/frame/components/FrameHeading.mjs
  function FrameHeading({
    id,
    name,
    width,
    height
  }) {
    const editor = useEditor();
    const { side, translation } = useValue(
      "shape rotation",
      () => {
        const shape = editor.getShape(id);
        if (!shape) {
          return {
            side: 0,
            translation: "translate(0, 0)"
          };
        }
        const labelSide = getFrameHeadingSide(editor, shape);
        return {
          side: labelSide,
          translation: getFrameHeadingTranslation(shape, labelSide, false)
        };
      },
      [editor, id]
    );
    const rInput = (0, import_react80.useRef)(null);
    const isEditing = useIsEditing(id);
    (0, import_react80.useEffect)(() => {
      const el = rInput.current;
      if (el && isEditing) {
        el.focus();
        el.select();
      }
    }, [rInput, isEditing]);
    return /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
      "div",
      {
        className: "tl-frame-heading",
        style: {
          overflow: isEditing ? "visible" : "hidden",
          maxWidth: `calc(var(--tl-zoom) * ${side === 0 || side === 2 ? Math.ceil(width) : Math.ceil(height)}px + var(--space-5))`,
          bottom: "100%",
          transform: `${translation} scale(var(--tl-scale)) translateX(calc(-1 * var(--space-3))`
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)("div", { className: "tl-frame-heading-hit-area", children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(FrameLabelInput, { ref: rInput, id, name, isEditing }) })
      }
    );
  }

  // node_modules/tldraw/dist-esm/lib/shapes/frame/FrameShapeUtil.mjs
  function defaultEmptyAs(str, dflt) {
    if (str.match(/^\s*$/)) {
      return dflt;
    }
    return str;
  }
  var FrameShapeUtil = class extends BaseBoxShapeUtil {
    static type = "frame";
    static props = frameShapeProps;
    static migrations = frameShapeMigrations;
    canEdit() {
      return true;
    }
    getDefaultProps() {
      return { w: 160 * 2, h: 90 * 2, name: "" };
    }
    getGeometry(shape) {
      const { editor } = this;
      const z = editor.getZoomLevel();
      const opts = getFrameHeadingOpts(shape, "black");
      const headingInfo = getFrameHeadingInfo(editor, shape, opts);
      const labelSide = getFrameHeadingSide(editor, shape);
      let x, y, w, h;
      const { w: hw, h: hh } = headingInfo.box;
      const scaledW = Math.min(hw, shape.props.w * z);
      const scaledH = Math.min(hh, shape.props.h * z);
      switch (labelSide) {
        case 0: {
          x = -8 / z;
          y = (-hh - 4) / z;
          w = (scaledW + 16) / z;
          h = hh / z;
          break;
        }
        case 1: {
          x = (-hh - 4) / z;
          h = (scaledH + 16) / z;
          y = shape.props.h - h + 8 / z;
          w = hh / z;
          break;
        }
        case 2: {
          x = shape.props.w - (scaledW + 8) / z;
          y = shape.props.h + 4 / z;
          w = (scaledH + 16) / z;
          h = hh / z;
          break;
        }
        case 3: {
          x = shape.props.w + 4 / z;
          h = (scaledH + 16) / z;
          y = -8 / z;
          w = hh / z;
          break;
        }
      }
      return new Group2d({
        children: [
          new Rectangle2d({
            width: shape.props.w,
            height: shape.props.h,
            isFilled: false
          }),
          new Rectangle2d({
            x,
            y,
            width: w,
            height: h,
            isFilled: true,
            isLabel: true
          })
        ]
      });
    }
    getText(shape) {
      return shape.props.name;
    }
    component(shape) {
      const bounds = this.editor.getShapeGeometry(shape).bounds;
      const theme = useDefaultColorTheme();
      const isCreating = useValue(
        "is creating this shape",
        () => {
          const resizingState = this.editor.getStateDescendant("select.resizing");
          if (!resizingState) return false;
          if (!resizingState.getIsActive()) return false;
          const info = resizingState?.info;
          if (!info) return false;
          return info.isCreating && this.editor.getOnlySelectedShapeId() === shape.id;
        },
        [shape.id]
      );
      return /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(import_jsx_runtime104.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(SVGContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
          "rect",
          {
            className: (0, import_classnames23.default)("tl-frame__body", { "tl-frame__creating": isCreating }),
            width: bounds.width,
            height: bounds.height,
            fill: theme.solid,
            stroke: theme.text
          }
        ) }),
        isCreating ? null : /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
          FrameHeading,
          {
            id: shape.id,
            name: shape.props.name,
            width: bounds.width,
            height: bounds.height
          }
        )
      ] });
    }
    toSvg(shape, ctx) {
      const theme = getDefaultColorTheme({ isDarkMode: ctx.isDarkMode });
      const labelSide = getFrameHeadingSide(this.editor, shape);
      const labelTranslate = getFrameHeadingTranslation(shape, labelSide, true);
      const opts = getFrameHeadingOpts(shape, theme.text);
      const { box: labelBounds, spans } = getFrameHeadingInfo(this.editor, shape, opts);
      const text = createTextJsxFromSpans(this.editor, spans, opts);
      return /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(import_jsx_runtime104.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
          "rect",
          {
            width: shape.props.w,
            height: shape.props.h,
            fill: theme.solid,
            stroke: theme.black.solid,
            strokeWidth: 1,
            rx: 1,
            ry: 1
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)("g", { transform: labelTranslate, children: [
          /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
            "rect",
            {
              x: labelBounds.x - 8,
              y: labelBounds.y - 4,
              width: labelBounds.width + 20,
              height: labelBounds.height,
              fill: theme.background,
              rx: 4,
              ry: 4
            }
          ),
          text
        ] })
      ] });
    }
    indicator(shape) {
      const bounds = this.editor.getShapeGeometry(shape).bounds;
      return /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
        "rect",
        {
          width: toDomPrecision(bounds.width),
          height: toDomPrecision(bounds.height),
          className: `tl-frame-indicator`
        }
      );
    }
    canReceiveNewChildrenOfType(shape, _type) {
      return !shape.isLocked;
    }
    providesBackgroundForChildren() {
      return true;
    }
    canDropShapes(shape, _shapes) {
      return !shape.isLocked;
    }
    onDragShapesOver(frame2, shapes) {
      if (!shapes.every((child) => child.parentId === frame2.id)) {
        this.editor.reparentShapes(shapes, frame2.id);
      }
    }
    onDragShapesOut(_shape, shapes) {
      const parent = this.editor.getShape(_shape.parentId);
      const isInGroup = parent && this.editor.isShapeOfType(parent, "group");
      if (isInGroup) {
        this.editor.reparentShapes(shapes, parent.id);
      } else {
        this.editor.reparentShapes(shapes, this.editor.getCurrentPageId());
      }
    }
    onResize(shape, info) {
      return resizeBox(shape, info);
    }
    getInterpolatedProps(startShape, endShape, t2) {
      return {
        ...t2 > 0.5 ? endShape.props : startShape.props,
        w: lerp(startShape.props.w, endShape.props.w, t2),
        h: lerp(startShape.props.h, endShape.props.h, t2)
      };
    }
  };

  // node_modules/tldraw/dist-esm/lib/shapes/geo/GeoShapeUtil.mjs
  var import_jsx_runtime106 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/geo/components/GeoShapeBody.mjs
  var import_jsx_runtime105 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/geo/geo-shape-helpers.mjs
  function getOvalPerimeter(h, w) {
    if (h > w) return (PI * (w / 2) + (h - w)) * 2;
    else return (PI * (h / 2) + (w - h)) * 2;
  }
  function getHeartPath(w, h) {
    return getHeartParts(w, h).map((c, i) => c.getSvgPathData(i === 0)).join(" ") + " Z";
  }
  function getDrawHeartPath(w, h, sw, id) {
    const o = w / 4;
    const k = h / 4;
    const random = rng(id);
    const mutDistance = sw * 0.75;
    const mut = (v) => v.addXY(random() * mutDistance, random() * mutDistance);
    const A = new Vec(w / 2, h);
    const B = new Vec(0, k * 1.2);
    const C = new Vec(w / 2, k * 0.9);
    const D = new Vec(w, k * 1.2);
    const Am = mut(new Vec(w / 2, h));
    const Bm = mut(new Vec(0, k * 1.2));
    const Cm = mut(new Vec(w / 2, k * 0.9));
    const Dm = mut(new Vec(w, k * 1.2));
    const parts = [
      new CubicBezier2d({
        start: A,
        cp1: new Vec(o * 1.5, k * 3),
        cp2: new Vec(0, k * 2.5),
        end: B
      }),
      new CubicBezier2d({
        start: B,
        cp1: new Vec(0, -k * 0.32),
        cp2: new Vec(o * 1.85, -k * 0.32),
        end: C
      }),
      new CubicBezier2d({
        start: C,
        cp1: new Vec(o * 2.15, -k * 0.32),
        cp2: new Vec(w, -k * 0.32),
        end: D
      }),
      new CubicBezier2d({
        start: D,
        cp1: new Vec(w, k * 2.5),
        cp2: new Vec(o * 2.5, k * 3),
        end: Am
      }),
      new CubicBezier2d({
        start: Am,
        cp1: new Vec(o * 1.5, k * 3),
        cp2: new Vec(0, k * 2.5),
        end: Bm
      }),
      new CubicBezier2d({
        start: Bm,
        cp1: new Vec(0, -k * 0.32),
        cp2: new Vec(o * 1.85, -k * 0.32),
        end: Cm
      }),
      new CubicBezier2d({
        start: Cm,
        cp1: new Vec(o * 2.15, -k * 0.32),
        cp2: new Vec(w, -k * 0.32),
        end: Dm
      }),
      new CubicBezier2d({
        start: Dm,
        cp1: new Vec(w, k * 2.5),
        cp2: new Vec(o * 2.5, k * 3),
        end: A
      })
    ];
    return parts.map((c, i) => c.getSvgPathData(i === 0)).join(" ") + " Z";
  }
  function getHeartParts(w, h) {
    const o = w / 4;
    const k = h / 4;
    return [
      new CubicBezier2d({
        start: new Vec(w / 2, h),
        cp1: new Vec(o * 1.5, k * 3),
        cp2: new Vec(0, k * 2.5),
        end: new Vec(0, k * 1.2)
      }),
      new CubicBezier2d({
        start: new Vec(0, k * 1.2),
        cp1: new Vec(0, -k * 0.32),
        cp2: new Vec(o * 1.85, -k * 0.32),
        end: new Vec(w / 2, k * 0.9)
      }),
      new CubicBezier2d({
        start: new Vec(w / 2, k * 0.9),
        cp1: new Vec(o * 2.15, -k * 0.32),
        cp2: new Vec(w, -k * 0.32),
        end: new Vec(w, k * 1.2)
      }),
      new CubicBezier2d({
        start: new Vec(w, k * 1.2),
        cp1: new Vec(w, k * 2.5),
        cp2: new Vec(o * 2.5, k * 3),
        end: new Vec(w / 2, h)
      })
    ];
  }
  function getEllipseStrokeOptions(strokeWidth) {
    return {
      size: 1 + strokeWidth,
      thinning: 0.25,
      end: { taper: strokeWidth },
      start: { taper: strokeWidth },
      streamline: 0,
      smoothing: 1,
      simulatePressure: false
    };
  }
  function getEllipseStrokePoints(id, width, height, strokeWidth) {
    const getRandom = rng(id);
    const rx = width / 2;
    const ry = height / 2;
    const perimeter = perimeterOfEllipse(rx, ry);
    const points = [];
    const start = PI2 * getRandom();
    const length = PI2 + HALF_PI / 2 + Math.abs(getRandom()) * HALF_PI;
    const count3 = Math.max(16, perimeter / 10);
    for (let i = 0; i < count3; i++) {
      const t2 = i / (count3 - 1);
      const r = start + t2 * length;
      const c = Math.cos(r);
      const s = Math.sin(r);
      points.push(
        new Vec(
          rx * c + width * 0.5 + 0.05 * getRandom(),
          ry * s + height / 2 + 0.05 * getRandom(),
          Math.min(
            1,
            0.5 + Math.abs(0.5 - (getRandom() > 0 ? EASINGS.easeInOutSine(t2) : EASINGS.easeInExpo(t2))) / 2
          )
        )
      );
    }
    return getStrokePoints(points, getEllipseStrokeOptions(strokeWidth));
  }
  function getEllipseDrawIndicatorPath(id, width, height, strokeWidth) {
    return getSvgPathFromStrokePoints(getEllipseStrokePoints(id, width, height, strokeWidth));
  }
  function getRoundedInkyPolygonPath(points) {
    let polylineA = `M`;
    const len = points.length;
    let p0;
    let p1;
    let p2;
    for (let i = 0, n = len; i < n; i += 3) {
      p0 = points[i];
      p1 = points[i + 1];
      p2 = points[i + 2];
      polylineA += `${precise(p0)}L${precise(p1)}Q${precise(p2)}`;
    }
    polylineA += `${precise(points[0])}`;
    return polylineA;
  }
  function getRoundedPolygonPoints(id, outline, offset4, roundness, passes) {
    const results = [];
    const random = rng(id);
    let p0 = outline[0];
    let p1;
    const len = outline.length;
    for (let i = 0, n = len * passes; i < n; i++) {
      p1 = Vec.AddXY(outline[(i + 1) % len], random() * offset4, random() * offset4);
      const delta = Vec.Sub(p1, p0);
      const distance = Vec.Len(delta);
      const vector = Vec.Div(delta, distance).mul(Math.min(distance / 4, roundness));
      results.push(Vec.Add(p0, vector), Vec.Add(p1, vector.neg()), p1);
      p0 = p1;
    }
    return results;
  }
  function getPillPoints(width, height, numPoints) {
    const radius = Math.min(width, height) / 2;
    const longSide = Math.max(width, height) - radius * 2;
    const circumference = Math.PI * (radius * 2) + 2 * longSide;
    const spacing = circumference / numPoints;
    const sections = width > height ? [
      {
        type: "straight",
        start: new Vec(radius, 0),
        delta: new Vec(1, 0)
      },
      {
        type: "arc",
        center: new Vec(width - radius, radius),
        startAngle: -PI / 2
      },
      {
        type: "straight",
        start: new Vec(width - radius, height),
        delta: new Vec(-1, 0)
      },
      {
        type: "arc",
        center: new Vec(radius, radius),
        startAngle: PI / 2
      }
    ] : [
      {
        type: "straight",
        start: new Vec(width, radius),
        delta: new Vec(0, 1)
      },
      {
        type: "arc",
        center: new Vec(radius, height - radius),
        startAngle: 0
      },
      {
        type: "straight",
        start: new Vec(0, height - radius),
        delta: new Vec(0, -1)
      },
      {
        type: "arc",
        center: new Vec(radius, radius),
        startAngle: PI
      }
    ];
    let sectionOffset = 0;
    const points = [];
    for (let i = 0; i < numPoints; i++) {
      const section = sections[0];
      if (section.type === "straight") {
        points.push(Vec.Add(section.start, Vec.Mul(section.delta, sectionOffset)));
      } else {
        points.push(
          getPointOnCircle(section.center, radius, section.startAngle + sectionOffset / radius)
        );
      }
      sectionOffset += spacing;
      let sectionLength = section.type === "straight" ? longSide : PI * radius;
      while (sectionOffset > sectionLength) {
        sectionOffset -= sectionLength;
        sections.push(sections.shift());
        sectionLength = sections[0].type === "straight" ? longSide : PI * radius;
      }
    }
    return points;
  }
  var SIZES = {
    s: 50,
    m: 70,
    l: 100,
    xl: 130
  };
  var BUMP_PROTRUSION = 0.2;
  function getCloudArcs(width, height, seed, size4, scale) {
    const getRandom = rng(seed);
    const pillCircumference = getOvalPerimeter(width, height);
    const numBumps = Math.max(
      Math.ceil(pillCircumference / SIZES[size4]),
      6,
      Math.ceil(pillCircumference / Math.min(width, height))
    );
    const targetBumpProtrusion = pillCircumference / numBumps * BUMP_PROTRUSION;
    const innerWidth = Math.max(width - targetBumpProtrusion * 2, 1);
    const innerHeight = Math.max(height - targetBumpProtrusion * 2, 1);
    const innerCircumference = getOvalPerimeter(innerWidth, innerHeight);
    const distanceBetweenPointsOnPerimeter = innerCircumference / numBumps;
    const paddingX = (width - innerWidth) / 2;
    const paddingY = (height - innerHeight) / 2;
    const bumpPoints = getPillPoints(innerWidth, innerHeight, numBumps).map((p) => {
      return p.addXY(paddingX, paddingY);
    });
    const maxWiggleX = width < 20 ? 0 : targetBumpProtrusion * 0.3;
    const maxWiggleY = height < 20 ? 0 : targetBumpProtrusion * 0.3;
    const wiggledPoints = bumpPoints.slice(0);
    for (let i = 0; i < Math.floor(numBumps / 2); i++) {
      wiggledPoints[i] = Vec.AddXY(
        wiggledPoints[i],
        getRandom() * maxWiggleX * scale,
        getRandom() * maxWiggleY * scale
      );
      wiggledPoints[numBumps - i - 1] = Vec.AddXY(
        wiggledPoints[numBumps - i - 1],
        getRandom() * maxWiggleX * scale,
        getRandom() * maxWiggleY * scale
      );
    }
    const arcs = [];
    for (let i = 0; i < wiggledPoints.length; i++) {
      const j = i === wiggledPoints.length - 1 ? 0 : i + 1;
      const leftWigglePoint = wiggledPoints[i];
      const rightWigglePoint = wiggledPoints[j];
      const leftPoint = bumpPoints[i];
      const rightPoint = bumpPoints[j];
      const distanceBetweenOriginalPoints = Vec.Dist(leftPoint, rightPoint);
      const curvatureOffset = distanceBetweenPointsOnPerimeter - distanceBetweenOriginalPoints;
      const distanceBetweenWigglePoints = Vec.Dist(leftWigglePoint, rightWigglePoint);
      const relativeSize = distanceBetweenWigglePoints / distanceBetweenOriginalPoints;
      const finalDistance = (Math.max(paddingX, paddingY) + curvatureOffset) * relativeSize;
      const arcPoint = Vec.Lrp(leftPoint, rightPoint, 0.5).add(
        Vec.Sub(rightPoint, leftPoint).uni().per().mul(finalDistance)
      );
      if (arcPoint.x < 0) {
        arcPoint.x = 0;
      } else if (arcPoint.x > width) {
        arcPoint.x = width;
      }
      if (arcPoint.y < 0) {
        arcPoint.y = 0;
      } else if (arcPoint.y > height) {
        arcPoint.y = height;
      }
      const center = centerOfCircleFromThreePoints(leftWigglePoint, rightWigglePoint, arcPoint);
      const radius = Vec.Dist(
        center ? center : Vec.Average([leftWigglePoint, rightWigglePoint]),
        leftWigglePoint
      );
      arcs.push({
        leftPoint: leftWigglePoint,
        rightPoint: rightWigglePoint,
        arcPoint,
        center,
        radius
      });
    }
    return arcs;
  }
  function cloudOutline(width, height, seed, size4, scale) {
    const path = [];
    const arcs = getCloudArcs(width, height, seed, size4, scale);
    for (const { center, radius, leftPoint, rightPoint } of arcs) {
      path.push(...getPointsOnArc(leftPoint, rightPoint, center, radius, 10));
    }
    return path;
  }
  function getCloudPath(width, height, seed, size4, scale) {
    const arcs = getCloudArcs(width, height, seed, size4, scale);
    let path = `M${arcs[0].leftPoint.toFixed()}`;
    for (const { leftPoint, rightPoint, radius, center } of arcs) {
      if (center === null) {
        path += ` L${rightPoint.toFixed()}`;
        continue;
      }
      const arc = Vec.Clockwise(leftPoint, rightPoint, center) ? "0" : "1";
      path += ` A${toDomPrecision(radius)},${toDomPrecision(radius)} 0 ${arc},1 ${rightPoint.toFixed()}`;
    }
    path += " Z";
    return path;
  }
  var DRAW_OFFSETS = {
    s: 0.5,
    m: 0.7,
    l: 0.9,
    xl: 1.6
  };
  function inkyCloudSvgPath(width, height, seed, size4, scale) {
    const getRandom = rng(seed);
    const mutMultiplier = DRAW_OFFSETS[size4] * scale;
    const arcs = getCloudArcs(width, height, seed, size4, scale);
    const avgArcLengthSquared = arcs.reduce((sum, arc) => sum + Vec.Dist2(arc.leftPoint, arc.rightPoint), 0) / arcs.length;
    const shouldMutatePoints = avgArcLengthSquared > (mutMultiplier * 15) ** 2;
    const mutPoint = shouldMutatePoints ? (p) => Vec.AddXY(p, getRandom() * mutMultiplier * 2, getRandom() * mutMultiplier * 2) : (p) => p;
    let pathA = `M${arcs[0].leftPoint.toFixed()}`;
    let leftMutPoint = mutPoint(arcs[0].leftPoint);
    let pathB = `M${leftMutPoint.toFixed()}`;
    for (const { leftPoint, center, rightPoint, radius, arcPoint } of arcs) {
      if (center === null) {
        pathA += ` L${rightPoint.toFixed()}`;
        const rightMutPoint2 = mutPoint(rightPoint);
        pathB += ` L${rightMutPoint2.toFixed()}`;
        leftMutPoint = rightMutPoint2;
        continue;
      }
      const arc = Vec.Clockwise(leftPoint, rightPoint, center) ? "0" : "1";
      pathA += ` A${toDomPrecision(radius)},${toDomPrecision(radius)} 0 ${arc},1 ${rightPoint.toFixed()}`;
      const rightMutPoint = mutPoint(rightPoint);
      const mutArcPoint = mutPoint(arcPoint);
      const mutCenter = centerOfCircleFromThreePoints(leftMutPoint, rightMutPoint, mutArcPoint);
      if (!mutCenter) {
        pathB += ` L${rightMutPoint.toFixed()}`;
        leftMutPoint = rightMutPoint;
        continue;
      }
      const mutRadius = Math.abs(Vec.Dist(mutCenter, leftMutPoint));
      pathB += ` A${toDomPrecision(mutRadius)},${toDomPrecision(
        mutRadius
      )} 0 ${arc},1 ${rightMutPoint.toFixed()}`;
      leftMutPoint = rightMutPoint;
    }
    return pathA + pathB + " Z";
  }

  // node_modules/tldraw/dist-esm/lib/shapes/geo/getLines.mjs
  function getLines(props, sw) {
    switch (props.geo) {
      case "x-box": {
        return getXBoxLines(props.w, props.h, sw, props.dash);
      }
      case "check-box": {
        return getCheckBoxLines(props.w, props.h);
      }
      default: {
        return void 0;
      }
    }
  }
  function getXBoxLines(w, h, sw, dash) {
    const inset = dash === "draw" ? 0.62 : 0;
    if (dash === "dashed") {
      return [
        [new Vec(0, 0), new Vec(w / 2, h / 2)],
        [new Vec(w, h), new Vec(w / 2, h / 2)],
        [new Vec(0, h), new Vec(w / 2, h / 2)],
        [new Vec(w, 0), new Vec(w / 2, h / 2)]
      ];
    }
    const clampX = (x) => Math.max(0, Math.min(w, x));
    const clampY = (y) => Math.max(0, Math.min(h, y));
    return [
      [
        new Vec(clampX(sw * inset), clampY(sw * inset)),
        new Vec(clampX(w - sw * inset), clampY(h - sw * inset))
      ],
      [
        new Vec(clampX(sw * inset), clampY(h - sw * inset)),
        new Vec(clampX(w - sw * inset), clampY(sw * inset))
      ]
    ];
  }
  function getCheckBoxLines(w, h) {
    const size4 = Math.min(w, h) * 0.82;
    const ox = (w - size4) / 2;
    const oy = (h - size4) / 2;
    const clampX = (x) => Math.max(0, Math.min(w, x));
    const clampY = (y) => Math.max(0, Math.min(h, y));
    return [
      [
        new Vec(clampX(ox + size4 * 0.25), clampY(oy + size4 * 0.52)),
        new Vec(clampX(ox + size4 * 0.45), clampY(oy + size4 * 0.82))
      ],
      [
        new Vec(clampX(ox + size4 * 0.45), clampY(oy + size4 * 0.82)),
        new Vec(clampX(ox + size4 * 0.82), clampY(oy + size4 * 0.22))
      ]
    ];
  }

  // node_modules/tldraw/dist-esm/lib/shapes/geo/components/GeoShapeBody.mjs
  function GeoShapeBody({
    shape,
    shouldScale,
    forceSolid
  }) {
    const scaleToUse = shouldScale ? shape.props.scale : 1;
    const editor = useEditor();
    const theme = useDefaultColorTheme();
    const { id, props } = shape;
    const { w, color, fill, dash, growY, size: size4, scale } = props;
    const strokeWidth = STROKE_SIZES2[size4] * scaleToUse;
    const h = props.h + growY;
    switch (props.geo) {
      case "cloud": {
        if (dash === "solid") {
          const d = getCloudPath(w, h, id, size4, scale);
          return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(ShapeFill, { theme, d, color, fill, scale: scaleToUse }),
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("path", { d, stroke: theme[color].solid, strokeWidth, fill: "none" })
          ] });
        } else if (dash === "draw") {
          const d = inkyCloudSvgPath(w, h, id, size4, scale);
          return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(ShapeFill, { theme, d, color, fill, scale: scaleToUse }),
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("path", { d, stroke: theme[color].solid, strokeWidth, fill: "none" })
          ] });
        } else {
          const d = getCloudPath(w, h, id, size4, scale);
          const arcs = getCloudArcs(w, h, id, size4, scale);
          return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(ShapeFill, { theme, d, color, fill, scale: scaleToUse }),
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
              "g",
              {
                strokeWidth,
                stroke: theme[color].solid,
                fill: "none",
                pointerEvents: "all",
                children: arcs.map(({ leftPoint, rightPoint, center, radius }, i) => {
                  const arcLength = center ? radius * canonicalizeRotation(
                    canonicalizeRotation(Vec.Angle(center, rightPoint)) - canonicalizeRotation(Vec.Angle(center, leftPoint))
                  ) : Vec.Dist(leftPoint, rightPoint);
                  const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
                    arcLength,
                    strokeWidth,
                    {
                      style: dash,
                      start: "outset",
                      end: "outset",
                      forceSolid
                    }
                  );
                  return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
                    "path",
                    {
                      d: center ? `M${leftPoint.x},${leftPoint.y}A${radius},${radius},0,0,1,${rightPoint.x},${rightPoint.y}` : `M${leftPoint.x},${leftPoint.y}L${rightPoint.x},${rightPoint.y}`,
                      strokeDasharray,
                      strokeDashoffset
                    },
                    i
                  );
                })
              }
            )
          ] });
        }
      }
      case "ellipse": {
        const geometry = shouldScale ? (
          // cached
          editor.getShapeGeometry(shape)
        ) : (
          // not cached
          editor.getShapeUtil(shape).getGeometry(shape)
        );
        const d = geometry.getSvgPathData(true);
        if (dash === "dashed" || dash === "dotted") {
          const perimeter = geometry.length;
          const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
            perimeter < 64 ? perimeter * 2 : perimeter,
            strokeWidth,
            {
              style: dash,
              snap: 4,
              closed: true,
              forceSolid
            }
          );
          return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(ShapeFill, { theme, d, color, fill, scale: scaleToUse }),
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
              "path",
              {
                d,
                strokeWidth,
                fill: "none",
                stroke: theme[color].solid,
                strokeDasharray,
                strokeDashoffset
              }
            )
          ] });
        } else {
          const geometry2 = shouldScale ? (
            // cached
            editor.getShapeGeometry(shape)
          ) : (
            // not cached
            editor.getShapeUtil(shape).getGeometry(shape)
          );
          const d2 = geometry2.getSvgPathData(true);
          return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(ShapeFill, { theme, d: d2, color, fill, scale: scaleToUse }),
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("path", { d: d2, stroke: theme[color].solid, strokeWidth, fill: "none" })
          ] });
        }
      }
      case "oval": {
        const geometry = shouldScale ? (
          // cached
          editor.getShapeGeometry(shape)
        ) : (
          // not cached
          editor.getShapeUtil(shape).getGeometry(shape)
        );
        const d = geometry.getSvgPathData(true);
        if (dash === "dashed" || dash === "dotted") {
          const perimeter = geometry.getLength();
          const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
            perimeter < 64 ? perimeter * 2 : perimeter,
            strokeWidth,
            {
              style: dash,
              snap: 4,
              start: "outset",
              end: "outset",
              closed: true,
              forceSolid
            }
          );
          return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(ShapeFill, { theme, d, color, fill, scale: scaleToUse }),
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
              "path",
              {
                d,
                strokeWidth,
                fill: "none",
                stroke: theme[color].solid,
                strokeDasharray,
                strokeDashoffset
              }
            )
          ] });
        } else {
          return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(ShapeFill, { theme, d, color, fill, scale: scaleToUse }),
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("path", { d, stroke: theme[color].solid, strokeWidth, fill: "none" })
          ] });
        }
      }
      case "heart": {
        if (dash === "dashed" || dash === "dotted" || dash === "solid") {
          const d = getHeartPath(w, h);
          const curves = getHeartParts(w, h);
          return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(ShapeFill, { theme, d, color, fill, scale: scaleToUse }),
            curves.map((c, i) => {
              const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
                c.length,
                strokeWidth,
                {
                  style: dash,
                  snap: 1,
                  start: "outset",
                  end: "outset",
                  closed: true,
                  forceSolid
                }
              );
              return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
                "path",
                {
                  d: c.getSvgPathData(),
                  strokeWidth,
                  fill: "none",
                  stroke: theme[color].solid,
                  strokeDasharray,
                  strokeDashoffset,
                  pointerEvents: "all"
                },
                `curve_${i}`
              );
            })
          ] });
        } else {
          const d = getDrawHeartPath(w, h, strokeWidth, shape.id);
          return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(ShapeFill, { theme, d, color, fill, scale: scaleToUse }),
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("path", { d, stroke: theme[color].solid, strokeWidth, fill: "none" })
          ] });
        }
      }
      default: {
        const geometry = shouldScale ? (
          // cached
          editor.getShapeGeometry(shape)
        ) : (
          // not cached
          editor.getShapeUtil(shape).getGeometry(shape)
        );
        const outline = geometry instanceof Group2d ? geometry.children[0].vertices : geometry.vertices;
        const lines = getLines(shape.props, strokeWidth);
        if (dash === "solid") {
          let d = "M" + outline[0] + "L" + outline.slice(1) + "Z";
          if (lines) {
            for (const [A, B] of lines) {
              d += `M${A.x},${A.y}L${B.x},${B.y}`;
            }
          }
          return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(ShapeFill, { theme, d, color, fill, scale: scaleToUse }),
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("path", { d, stroke: theme[color].solid, strokeWidth, fill: "none" })
          ] });
        } else if (dash === "dashed" || dash === "dotted") {
          const d = "M" + outline[0] + "L" + outline.slice(1) + "Z";
          return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(ShapeFill, { theme, d, color, fill, scale: scaleToUse }),
            /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(
              "g",
              {
                strokeWidth,
                stroke: theme[color].solid,
                fill: "none",
                pointerEvents: "all",
                children: [
                  Array.from(Array(outline.length)).map((_, i) => {
                    const A = Vec.ToFixed(outline[i]);
                    const B = Vec.ToFixed(outline[(i + 1) % outline.length]);
                    const dist = Vec.Dist(A, B);
                    const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
                      dist,
                      strokeWidth,
                      {
                        style: dash,
                        start: "outset",
                        end: "outset",
                        forceSolid
                      }
                    );
                    return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
                      "line",
                      {
                        x1: A.x,
                        y1: A.y,
                        x2: B.x,
                        y2: B.y,
                        strokeDasharray,
                        strokeDashoffset
                      },
                      i
                    );
                  }),
                  lines && lines.map(([A, B], i) => {
                    const dist = Vec.Dist(A, B);
                    const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
                      dist,
                      strokeWidth,
                      {
                        style: dash,
                        start: "skip",
                        end: "skip",
                        snap: dash === "dotted" ? 4 : void 0,
                        forceSolid
                      }
                    );
                    return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
                      "path",
                      {
                        d: `M${A.x},${A.y}L${B.x},${B.y}`,
                        stroke: theme[color].solid,
                        strokeWidth,
                        fill: "none",
                        strokeDasharray,
                        strokeDashoffset
                      },
                      `line_fg_${i}`
                    );
                  })
                ]
              }
            )
          ] });
        } else if (dash === "draw") {
          let d = getRoundedInkyPolygonPath(
            getRoundedPolygonPoints(id, outline, strokeWidth / 3, strokeWidth * 2, 2)
          );
          if (lines) {
            for (const [A, B] of lines) {
              d += `M${A.toFixed()}L${B.toFixed()}`;
            }
          }
          const innerPathData = getRoundedInkyPolygonPath(
            getRoundedPolygonPoints(id, outline, 0, strokeWidth * 2, 1)
          );
          return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
              ShapeFill,
              {
                theme,
                d: innerPathData,
                color,
                fill,
                scale: scaleToUse
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("path", { d, stroke: theme[color].solid, strokeWidth, fill: "none" })
          ] });
        }
      }
    }
  }

  // node_modules/tldraw/dist-esm/lib/shapes/geo/GeoShapeUtil.mjs
  var MIN_SIZE_WITH_LABEL = 17 * 3;
  var GeoShapeUtil = class extends BaseBoxShapeUtil {
    static type = "geo";
    static props = geoShapeProps;
    static migrations = geoShapeMigrations;
    canEdit() {
      return true;
    }
    getDefaultProps() {
      return {
        w: 100,
        h: 100,
        geo: "rectangle",
        color: "black",
        labelColor: "black",
        fill: "none",
        dash: "draw",
        size: "m",
        font: "draw",
        text: "",
        align: "middle",
        verticalAlign: "middle",
        growY: 0,
        url: "",
        scale: 1
      };
    }
    getGeometry(shape) {
      const w = Math.max(1, shape.props.w);
      const h = Math.max(1, shape.props.h + shape.props.growY);
      const cx = w / 2;
      const cy = h / 2;
      const isFilled = shape.props.fill !== "none";
      let body;
      switch (shape.props.geo) {
        case "cloud": {
          body = new Polygon2d({
            points: cloudOutline(w, h, shape.id, shape.props.size, shape.props.scale),
            isFilled
          });
          break;
        }
        case "triangle": {
          body = new Polygon2d({
            points: [new Vec(cx, 0), new Vec(w, h), new Vec(0, h)],
            isFilled
          });
          break;
        }
        case "diamond": {
          body = new Polygon2d({
            points: [new Vec(cx, 0), new Vec(w, cy), new Vec(cx, h), new Vec(0, cy)],
            isFilled
          });
          break;
        }
        case "pentagon": {
          body = new Polygon2d({
            points: getPolygonVertices(w, h, 5),
            isFilled
          });
          break;
        }
        case "hexagon": {
          body = new Polygon2d({
            points: getPolygonVertices(w, h, 6),
            isFilled
          });
          break;
        }
        case "octagon": {
          body = new Polygon2d({
            points: getPolygonVertices(w, h, 8),
            isFilled
          });
          break;
        }
        case "ellipse": {
          body = new Ellipse2d({
            width: w,
            height: h,
            isFilled
          });
          break;
        }
        case "oval": {
          body = new Stadium2d({
            width: w,
            height: h,
            isFilled
          });
          break;
        }
        case "star": {
          const sides2 = 5;
          const step = PI2 / sides2 / 2;
          const rightMostIndex = Math.floor(sides2 / 4) * 2;
          const leftMostIndex = sides2 * 2 - rightMostIndex;
          const topMostIndex = 0;
          const bottomMostIndex = Math.floor(sides2 / 2) * 2;
          const maxX = Math.cos(-HALF_PI + rightMostIndex * step) * w / 2;
          const minX = Math.cos(-HALF_PI + leftMostIndex * step) * w / 2;
          const minY = Math.sin(-HALF_PI + topMostIndex * step) * h / 2;
          const maxY = Math.sin(-HALF_PI + bottomMostIndex * step) * h / 2;
          const diffX = w - Math.abs(maxX - minX);
          const diffY = h - Math.abs(maxY - minY);
          const offsetX = w / 2 + minX - (w / 2 - maxX);
          const offsetY = h / 2 + minY - (h / 2 - maxY);
          const ratio = 1;
          const cx2 = (w - offsetX) / 2;
          const cy2 = (h - offsetY) / 2;
          const ox = (w + diffX) / 2;
          const oy = (h + diffY) / 2;
          const ix = ox * ratio / 2;
          const iy = oy * ratio / 2;
          body = new Polygon2d({
            points: Array.from(Array(sides2 * 2)).map((_, i) => {
              const theta = -HALF_PI + i * step;
              return new Vec(
                cx2 + (i % 2 ? ix : ox) * Math.cos(theta),
                cy2 + (i % 2 ? iy : oy) * Math.sin(theta)
              );
            }),
            isFilled
          });
          break;
        }
        case "rhombus": {
          const offset4 = Math.min(w * 0.38, h * 0.38);
          body = new Polygon2d({
            points: [new Vec(offset4, 0), new Vec(w, 0), new Vec(w - offset4, h), new Vec(0, h)],
            isFilled
          });
          break;
        }
        case "rhombus-2": {
          const offset4 = Math.min(w * 0.38, h * 0.38);
          body = new Polygon2d({
            points: [new Vec(0, 0), new Vec(w - offset4, 0), new Vec(w, h), new Vec(offset4, h)],
            isFilled
          });
          break;
        }
        case "trapezoid": {
          const offset4 = Math.min(w * 0.38, h * 0.38);
          body = new Polygon2d({
            points: [new Vec(offset4, 0), new Vec(w - offset4, 0), new Vec(w, h), new Vec(0, h)],
            isFilled
          });
          break;
        }
        case "arrow-right": {
          const ox = Math.min(w, h) * 0.38;
          const oy = h * 0.16;
          body = new Polygon2d({
            points: [
              new Vec(0, oy),
              new Vec(w - ox, oy),
              new Vec(w - ox, 0),
              new Vec(w, h / 2),
              new Vec(w - ox, h),
              new Vec(w - ox, h - oy),
              new Vec(0, h - oy)
            ],
            isFilled
          });
          break;
        }
        case "arrow-left": {
          const ox = Math.min(w, h) * 0.38;
          const oy = h * 0.16;
          body = new Polygon2d({
            points: [
              new Vec(ox, 0),
              new Vec(ox, oy),
              new Vec(w, oy),
              new Vec(w, h - oy),
              new Vec(ox, h - oy),
              new Vec(ox, h),
              new Vec(0, h / 2)
            ],
            isFilled
          });
          break;
        }
        case "arrow-up": {
          const ox = w * 0.16;
          const oy = Math.min(w, h) * 0.38;
          body = new Polygon2d({
            points: [
              new Vec(w / 2, 0),
              new Vec(w, oy),
              new Vec(w - ox, oy),
              new Vec(w - ox, h),
              new Vec(ox, h),
              new Vec(ox, oy),
              new Vec(0, oy)
            ],
            isFilled
          });
          break;
        }
        case "arrow-down": {
          const ox = w * 0.16;
          const oy = Math.min(w, h) * 0.38;
          body = new Polygon2d({
            points: [
              new Vec(ox, 0),
              new Vec(w - ox, 0),
              new Vec(w - ox, h - oy),
              new Vec(w, h - oy),
              new Vec(w / 2, h),
              new Vec(0, h - oy),
              new Vec(ox, h - oy)
            ],
            isFilled
          });
          break;
        }
        case "check-box":
        case "x-box":
        case "rectangle": {
          body = new Rectangle2d({
            width: w,
            height: h,
            isFilled
          });
          break;
        }
        case "heart": {
          const parts = getHeartParts(w, h);
          const points = parts.reduce((acc, part) => {
            acc.push(...part.vertices);
            return acc;
          }, []);
          body = new Polygon2d({
            points,
            isFilled
          });
          break;
        }
        default: {
          exhaustiveSwitchError(shape.props.geo);
        }
      }
      const unscaledlabelSize = getUnscaledLabelSize(this.editor, shape);
      const unscaledW = w / shape.props.scale;
      const unscaledH = h / shape.props.scale;
      const unscaledminWidth = Math.min(100, unscaledW / 2);
      const unscaledMinHeight = Math.min(
        LABEL_FONT_SIZES[shape.props.size] * TEXT_PROPS.lineHeight + LABEL_PADDING * 2,
        unscaledH / 2
      );
      const unscaledLabelWidth = Math.min(
        unscaledW,
        Math.max(unscaledlabelSize.w, Math.min(unscaledminWidth, Math.max(1, unscaledW - 8)))
      );
      const unscaledLabelHeight = Math.min(
        unscaledH,
        Math.max(unscaledlabelSize.h, Math.min(unscaledMinHeight, Math.max(1, unscaledH - 8)))
      );
      const lines = getLines(shape.props, STROKE_SIZES2[shape.props.size] * shape.props.scale);
      const edges = lines ? lines.map((line) => new Polyline2d({ points: line })) : [];
      return new Group2d({
        children: [
          body,
          new Rectangle2d({
            x: shape.props.align === "start" ? 0 : shape.props.align === "end" ? (unscaledW - unscaledLabelWidth) * shape.props.scale : (unscaledW - unscaledLabelWidth) / 2 * shape.props.scale,
            y: shape.props.verticalAlign === "start" ? 0 : shape.props.verticalAlign === "end" ? (unscaledH - unscaledLabelHeight) * shape.props.scale : (unscaledH - unscaledLabelHeight) / 2 * shape.props.scale,
            width: unscaledLabelWidth * shape.props.scale,
            height: unscaledLabelHeight * shape.props.scale,
            isFilled: true,
            isLabel: true
          }),
          ...edges
        ]
      });
    }
    getHandleSnapGeometry(shape) {
      const geometry = this.getGeometry(shape);
      const outline = geometry.children[0];
      switch (shape.props.geo) {
        case "arrow-down":
        case "arrow-left":
        case "arrow-right":
        case "arrow-up":
        case "check-box":
        case "diamond":
        case "hexagon":
        case "octagon":
        case "pentagon":
        case "rectangle":
        case "rhombus":
        case "rhombus-2":
        case "star":
        case "trapezoid":
        case "triangle":
        case "x-box":
          return { outline, points: [...outline.getVertices(), geometry.bounds.center] };
        case "cloud":
        case "ellipse":
        case "heart":
        case "oval":
          return { outline, points: [geometry.bounds.center] };
        default:
          exhaustiveSwitchError(shape.props.geo);
      }
    }
    getText(shape) {
      return shape.props.text;
    }
    onEditEnd(shape) {
      const {
        id,
        type,
        props: { text }
      } = shape;
      if (text.trimEnd() !== shape.props.text) {
        this.editor.updateShapes([
          {
            id,
            type,
            props: {
              text: text.trimEnd()
            }
          }
        ]);
      }
    }
    component(shape) {
      const { id, type, props } = shape;
      const { fill, font, align, verticalAlign, size: size4, text } = props;
      const theme = useDefaultColorTheme();
      const { editor } = this;
      const isOnlySelected = useValue(
        "isGeoOnlySelected",
        () => shape.id === editor.getOnlySelectedShapeId(),
        []
      );
      const isEditingAnything = editor.getEditingShapeId() !== null;
      const showHtmlContainer = isEditingAnything || shape.props.text;
      const isForceSolid = useValue(
        "force solid",
        () => {
          return editor.getZoomLevel() < 0.2;
        },
        [editor]
      );
      return /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)(import_jsx_runtime106.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(SVGContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(GeoShapeBody, { shape, shouldScale: true, forceSolid: isForceSolid }) }),
        showHtmlContainer && /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(
          HTMLContainer,
          {
            style: {
              overflow: "hidden",
              width: shape.props.w,
              height: shape.props.h + props.growY
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(
              TextLabel,
              {
                shapeId: id,
                type,
                font,
                fontSize: LABEL_FONT_SIZES[size4] * shape.props.scale,
                lineHeight: TEXT_PROPS.lineHeight,
                padding: LABEL_PADDING * shape.props.scale,
                fill,
                align,
                verticalAlign,
                text,
                isSelected: isOnlySelected,
                labelColor: theme[props.labelColor].solid,
                wrap: true
              }
            )
          }
        ),
        shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(HyperlinkButton, { url: shape.props.url })
      ] });
    }
    indicator(shape) {
      const { id, props } = shape;
      const { w, size: size4 } = props;
      const h = props.h + props.growY;
      const strokeWidth = STROKE_SIZES2[size4];
      const geometry = this.editor.getShapeGeometry(shape);
      switch (props.geo) {
        case "ellipse": {
          if (props.dash === "draw") {
            return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("path", { d: getEllipseDrawIndicatorPath(id, w, h, strokeWidth) });
          }
          return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("path", { d: geometry.getSvgPathData(true) });
        }
        case "heart": {
          return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("path", { d: getHeartPath(w, h) });
        }
        case "oval": {
          return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("path", { d: geometry.getSvgPathData(true) });
        }
        case "cloud": {
          return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("path", { d: getCloudPath(w, h, id, size4, shape.props.scale) });
        }
        default: {
          const geometry2 = this.editor.getShapeGeometry(shape);
          const outline = geometry2 instanceof Group2d ? geometry2.children[0].vertices : geometry2.vertices;
          let path;
          if (props.dash === "draw") {
            const polygonPoints = getRoundedPolygonPoints(
              id,
              outline,
              0,
              strokeWidth * 2 * shape.props.scale,
              1
            );
            path = getRoundedInkyPolygonPath(polygonPoints);
          } else {
            path = "M" + outline[0] + "L" + outline.slice(1) + "Z";
          }
          const lines = getLines(shape.props, strokeWidth);
          if (lines) {
            for (const [A, B] of lines) {
              path += `M${A.x},${A.y}L${B.x},${B.y}`;
            }
          }
          return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("path", { d: path });
        }
      }
    }
    toSvg(shape, ctx) {
      const newShape = {
        ...shape,
        props: {
          ...shape.props,
          w: shape.props.w / shape.props.scale,
          h: shape.props.h / shape.props.scale
        }
      };
      const props = newShape.props;
      ctx.addExportDef(getFillDefForExport(props.fill));
      let textEl;
      if (props.text) {
        ctx.addExportDef(getFontDefForExport(props.font));
        const theme = getDefaultColorTheme(ctx);
        const bounds = new Box(0, 0, props.w, props.h + props.growY);
        textEl = /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(
          SvgTextLabel,
          {
            fontSize: LABEL_FONT_SIZES[props.size],
            font: props.font,
            align: props.align,
            verticalAlign: props.verticalAlign,
            text: props.text,
            labelColor: theme[props.labelColor].solid,
            bounds,
            padding: 16
          }
        );
      }
      return /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)(import_jsx_runtime106.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(GeoShapeBody, { shouldScale: false, shape: newShape, forceSolid: false }),
        textEl
      ] });
    }
    getCanvasSvgDefs() {
      return [getFillDefForCanvas()];
    }
    onResize(shape, { handle, newPoint, scaleX, scaleY, initialShape }) {
      const unscaledInitialW = initialShape.props.w / initialShape.props.scale;
      const unscaledInitialH = initialShape.props.h / initialShape.props.scale;
      const unscaledGrowY = initialShape.props.growY / initialShape.props.scale;
      let unscaledW = unscaledInitialW * scaleX;
      let unscaledH = (unscaledInitialH + unscaledGrowY) * scaleY;
      let overShrinkX = 0;
      let overShrinkY = 0;
      const min3 = MIN_SIZE_WITH_LABEL;
      if (shape.props.text.trim()) {
        let newW = Math.max(Math.abs(unscaledW), min3);
        let newH = Math.max(Math.abs(unscaledH), min3);
        if (newW < min3 && newH === min3) newW = min3;
        if (newW === min3 && newH < min3) newH = min3;
        const unscaledLabelSize = getUnscaledLabelSize(this.editor, {
          ...shape,
          props: {
            ...shape.props,
            w: newW * shape.props.scale,
            h: newH * shape.props.scale
          }
        });
        const nextW = Math.max(Math.abs(unscaledW), unscaledLabelSize.w) * Math.sign(unscaledW);
        const nextH = Math.max(Math.abs(unscaledH), unscaledLabelSize.h) * Math.sign(unscaledH);
        overShrinkX = Math.abs(nextW) - Math.abs(unscaledW);
        overShrinkY = Math.abs(nextH) - Math.abs(unscaledH);
        unscaledW = nextW;
        unscaledH = nextH;
      }
      const scaledW = unscaledW * shape.props.scale;
      const scaledH = unscaledH * shape.props.scale;
      const offset4 = new Vec(0, 0);
      if (scaleX < 0) {
        offset4.x += scaledW;
      }
      if (handle === "left" || handle === "top_left" || handle === "bottom_left") {
        offset4.x += scaleX < 0 ? overShrinkX : -overShrinkX;
      }
      if (scaleY < 0) {
        offset4.y += scaledH;
      }
      if (handle === "top" || handle === "top_left" || handle === "top_right") {
        offset4.y += scaleY < 0 ? overShrinkY : -overShrinkY;
      }
      const { x, y } = offset4.rot(shape.rotation).add(newPoint);
      return {
        x,
        y,
        props: {
          w: Math.max(Math.abs(scaledW), 1),
          h: Math.max(Math.abs(scaledH), 1),
          growY: 0
        }
      };
    }
    onBeforeCreate(shape) {
      if (!shape.props.text) {
        if (shape.props.growY) {
          return {
            ...shape,
            props: {
              ...shape.props,
              growY: 0
            }
          };
        } else {
          return;
        }
      }
      const unscaledPrevHeight = shape.props.h / shape.props.scale;
      const unscaledNextHeight = getUnscaledLabelSize(this.editor, shape).h;
      let growY = null;
      if (unscaledNextHeight > unscaledPrevHeight) {
        growY = unscaledNextHeight - unscaledPrevHeight;
      } else {
        if (shape.props.growY) {
          growY = 0;
        }
      }
      if (growY !== null) {
        return {
          ...shape,
          props: {
            ...shape.props,
            // scale the growY
            growY: growY * shape.props.scale
          }
        };
      }
    }
    onBeforeUpdate(prev, next) {
      const prevText = prev.props.text;
      const nextText = next.props.text;
      if (prevText === nextText && prev.props.font === next.props.font && prev.props.size === next.props.size) {
        return;
      }
      if (prevText && !nextText) {
        return {
          ...next,
          props: {
            ...next.props,
            growY: 0
          }
        };
      }
      const unscaledPrevWidth = prev.props.w / prev.props.scale;
      const unscaledPrevHeight = prev.props.h / prev.props.scale;
      const unscaledPrevGrowY = prev.props.growY / prev.props.scale;
      const unscaledNextLabelSize = getUnscaledLabelSize(this.editor, next);
      if (!prevText && nextText && nextText.length === 1) {
        let unscaledW = Math.max(unscaledPrevWidth, unscaledNextLabelSize.w);
        let unscaledH = Math.max(unscaledPrevHeight, unscaledNextLabelSize.h);
        const min3 = MIN_SIZE_WITH_LABEL;
        if (unscaledPrevWidth < min3 && unscaledPrevHeight < min3) {
          unscaledW = Math.max(unscaledW, min3);
          unscaledH = Math.max(unscaledH, min3);
          unscaledW = Math.max(unscaledW, unscaledH);
          unscaledH = Math.max(unscaledW, unscaledH);
        }
        return {
          ...next,
          props: {
            ...next.props,
            // Scale the results
            w: unscaledW * next.props.scale,
            h: unscaledH * next.props.scale,
            growY: 0
          }
        };
      }
      let growY = null;
      if (unscaledNextLabelSize.h > unscaledPrevHeight) {
        growY = unscaledNextLabelSize.h - unscaledPrevHeight;
      } else {
        if (unscaledPrevGrowY) {
          growY = 0;
        }
      }
      if (growY !== null) {
        const unscaledNextWidth = next.props.w / next.props.scale;
        return {
          ...next,
          props: {
            ...next.props,
            // Scale the results
            growY: growY * next.props.scale,
            w: Math.max(unscaledNextWidth, unscaledNextLabelSize.w) * next.props.scale
          }
        };
      }
      if (unscaledNextLabelSize.w > unscaledPrevWidth) {
        return {
          ...next,
          props: {
            ...next.props,
            // Scale the results
            w: unscaledNextLabelSize.w * next.props.scale
          }
        };
      }
    }
    onDoubleClick(shape) {
      if (this.editor.inputs.altKey) {
        switch (shape.props.geo) {
          case "rectangle": {
            return {
              ...shape,
              props: {
                geo: "check-box"
              }
            };
          }
          case "check-box": {
            return {
              ...shape,
              props: {
                geo: "rectangle"
              }
            };
          }
        }
      }
      return;
    }
    getInterpolatedProps(startShape, endShape, t2) {
      return {
        ...t2 > 0.5 ? endShape.props : startShape.props,
        w: lerp(startShape.props.w, endShape.props.w, t2),
        h: lerp(startShape.props.h, endShape.props.h, t2),
        scale: lerp(startShape.props.scale, endShape.props.scale, t2)
      };
    }
  };
  function getUnscaledLabelSize(editor, shape) {
    const { text, font, size: size4, w } = shape.props;
    if (!text) {
      return { w: 0, h: 0 };
    }
    const minSize = editor.textMeasure.measureText("w", {
      ...TEXT_PROPS,
      fontFamily: FONT_FAMILIES[font],
      fontSize: LABEL_FONT_SIZES[size4],
      maxWidth: 100
      // ?
    });
    const sizes = {
      s: 2,
      m: 3.5,
      l: 5,
      xl: 10
    };
    const textSize = editor.textMeasure.measureText(text, {
      ...TEXT_PROPS,
      fontFamily: FONT_FAMILIES[font],
      fontSize: LABEL_FONT_SIZES[size4],
      minWidth: minSize.w,
      maxWidth: Math.max(
        // Guard because a DOM nodes can't be less 0
        0,
        // A 'w' width that we're setting as the min-width
        Math.ceil(minSize.w + sizes[size4]),
        // The actual text size
        Math.ceil(w / shape.props.scale - LABEL_PADDING * 2)
      )
    });
    return {
      w: textSize.w + LABEL_PADDING * 2,
      h: textSize.h + LABEL_PADDING * 2
    };
  }

  // node_modules/tldraw/dist-esm/lib/shapes/highlight/HighlightShapeUtil.mjs
  var import_jsx_runtime107 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/shared/useColorSpace.mjs
  var import_react81 = __toESM(require_react(), 1);
  function useColorSpace() {
    const [supportsP3, setSupportsP3] = (0, import_react81.useState)(false);
    (0, import_react81.useEffect)(() => {
      const supportsSyntax = CSS.supports("color", "color(display-p3 1 1 1)");
      const query = matchMedia("(color-gamut: p3)");
      setSupportsP3(supportsSyntax && query.matches);
      const onChange = () => setSupportsP3(supportsSyntax && query.matches);
      query.addEventListener("change", onChange);
      return () => query.removeEventListener("change", onChange);
    }, []);
    const forceSrgb = useValue(debugFlags.forceSrgb);
    return forceSrgb || !supportsP3 ? "srgb" : "p3";
  }

  // node_modules/tldraw/dist-esm/lib/shapes/highlight/HighlightShapeUtil.mjs
  var OVERLAY_OPACITY = 0.35;
  var UNDERLAY_OPACITY = 0.82;
  var HighlightShapeUtil = class extends ShapeUtil {
    static type = "highlight";
    static props = highlightShapeProps;
    static migrations = highlightShapeMigrations;
    hideResizeHandles(shape) {
      return getIsDot2(shape);
    }
    hideRotateHandle(shape) {
      return getIsDot2(shape);
    }
    hideSelectionBoundsFg(shape) {
      return getIsDot2(shape);
    }
    getDefaultProps() {
      return {
        segments: [],
        color: "black",
        size: "m",
        isComplete: false,
        isPen: false,
        scale: 1
      };
    }
    getGeometry(shape) {
      const strokeWidth = getStrokeWidth(shape);
      if (getIsDot2(shape)) {
        return new Circle2d({
          x: -strokeWidth / 2,
          y: -strokeWidth / 2,
          radius: strokeWidth / 2,
          isFilled: true
        });
      }
      const { strokePoints, sw } = getHighlightStrokePoints(shape, strokeWidth, true);
      const opts = getHighlightFreehandSettings({ strokeWidth: sw, showAsComplete: true });
      setStrokePointRadii(strokePoints, opts);
      return new Polygon2d({
        points: getStrokeOutlinePoints(strokePoints, opts),
        isFilled: true
      });
    }
    component(shape) {
      const forceSolid = useHighlightForceSolid(this.editor, shape);
      const strokeWidth = getStrokeWidth(shape);
      return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(SVGContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
        HighlightRenderer,
        {
          shape,
          forceSolid,
          strokeWidth,
          opacity: OVERLAY_OPACITY
        }
      ) });
    }
    backgroundComponent(shape) {
      const forceSolid = useHighlightForceSolid(this.editor, shape);
      const strokeWidth = getStrokeWidth(shape);
      return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(SVGContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
        HighlightRenderer,
        {
          shape,
          forceSolid,
          strokeWidth,
          opacity: UNDERLAY_OPACITY
        }
      ) });
    }
    indicator(shape) {
      const forceSolid = useHighlightForceSolid(this.editor, shape);
      const strokeWidth = getStrokeWidth(shape);
      const { strokePoints, sw } = getHighlightStrokePoints(shape, strokeWidth, forceSolid);
      const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
      let strokePath;
      if (strokePoints.length < 2) {
        strokePath = getIndicatorDot(allPointsFromSegments[0], sw);
      } else {
        strokePath = getSvgPathFromStrokePoints(strokePoints, false);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("path", { d: strokePath });
    }
    toSvg(shape) {
      const strokeWidth = getStrokeWidth(shape);
      const forceSolid = strokeWidth < 1.5;
      const scaleFactor = 1 / shape.props.scale;
      return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("g", { transform: `scale(${scaleFactor})`, children: /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
        HighlightRenderer,
        {
          forceSolid,
          strokeWidth,
          shape,
          opacity: OVERLAY_OPACITY
        }
      ) });
    }
    toBackgroundSvg(shape) {
      const strokeWidth = getStrokeWidth(shape);
      const forceSolid = strokeWidth < 1.5;
      const scaleFactor = 1 / shape.props.scale;
      return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("g", { transform: `scale(${scaleFactor})`, children: /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
        HighlightRenderer,
        {
          forceSolid,
          strokeWidth,
          shape,
          opacity: UNDERLAY_OPACITY
        }
      ) });
    }
    onResize(shape, info) {
      const { scaleX, scaleY } = info;
      const newSegments = [];
      for (const segment of shape.props.segments) {
        newSegments.push({
          ...segment,
          points: segment.points.map(({ x, y, z }) => {
            return {
              x: scaleX * x,
              y: scaleY * y,
              z
            };
          })
        });
      }
      return {
        props: {
          segments: newSegments
        }
      };
    }
    getInterpolatedProps(startShape, endShape, t2) {
      return {
        ...t2 > 0.5 ? endShape.props : startShape.props,
        ...endShape.props,
        segments: interpolateSegments(startShape.props.segments, endShape.props.segments, t2),
        scale: lerp(startShape.props.scale, endShape.props.scale, t2)
      };
    }
  };
  function getShapeDot(point) {
    const r = 0.1;
    return `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${r * 2},0`;
  }
  function getIndicatorDot(point, sw) {
    const r = sw / 2;
    return `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${r * 2},0`;
  }
  function getHighlightStrokePoints(shape, strokeWidth, forceSolid) {
    const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
    const showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === "straight";
    let sw = strokeWidth;
    if (!forceSolid && !shape.props.isPen && allPointsFromSegments.length === 1) {
      sw += rng(shape.id)() * (strokeWidth / 6);
    }
    const options = getHighlightFreehandSettings({
      strokeWidth: sw,
      showAsComplete
    });
    const strokePoints = getStrokePoints(allPointsFromSegments, options);
    return { strokePoints, sw };
  }
  function getStrokeWidth(shape) {
    return FONT_SIZES[shape.props.size] * 1.12 * shape.props.scale;
  }
  function getIsDot2(shape) {
    return shape.props.segments.length === 1 && shape.props.segments[0].points.length < 2;
  }
  function HighlightRenderer({
    strokeWidth,
    forceSolid,
    shape,
    opacity
  }) {
    const theme = useDefaultColorTheme();
    const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
    let sw = strokeWidth;
    if (!forceSolid && !shape.props.isPen && allPointsFromSegments.length === 1) {
      sw += rng(shape.id)() * (sw / 6);
    }
    const options = getHighlightFreehandSettings({
      strokeWidth: sw,
      showAsComplete: shape.props.isComplete || last(shape.props.segments)?.type === "straight"
    });
    const strokePoints = getStrokePoints(allPointsFromSegments, options);
    const solidStrokePath = strokePoints.length > 1 ? getSvgPathFromStrokePoints(strokePoints, false) : getShapeDot(shape.props.segments[0].points[0]);
    const colorSpace = useColorSpace();
    const color = theme[shape.props.color].highlight[colorSpace];
    return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
      "path",
      {
        d: solidStrokePath,
        strokeLinecap: "round",
        fill: "none",
        pointerEvents: "all",
        stroke: color,
        strokeWidth: sw,
        opacity
      }
    );
  }
  function useHighlightForceSolid(editor, shape) {
    return useValue(
      "forceSolid",
      () => {
        const sw = getStrokeWidth(shape);
        const zoomLevel = editor.getZoomLevel();
        if (sw / zoomLevel < 1.5) {
          return true;
        }
        return false;
      },
      [editor]
    );
  }

  // node_modules/tldraw/dist-esm/lib/shapes/image/ImageShapeUtil.mjs
  var import_jsx_runtime109 = __toESM(require_jsx_runtime(), 1);
  var import_classnames24 = __toESM(require_classnames(), 1);
  var import_react83 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/shared/BrokenAssetIcon.mjs
  var import_jsx_runtime108 = __toESM(require_jsx_runtime(), 1);
  function BrokenAssetIcon() {
    return /* @__PURE__ */ (0, import_jsx_runtime108.jsxs)(
      "svg",
      {
        width: "15",
        height: "15",
        viewBox: "0 0 30 30",
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("path", { d: "M3,11 L3,3 11,3", strokeWidth: "2" }),
          /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("path", { d: "M19,27 L27,27 L27,19", strokeWidth: "2" }),
          /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("path", { d: "M27,3 L3,27", strokeWidth: "2" })
        ]
      }
    );
  }

  // node_modules/tldraw/dist-esm/lib/shapes/shared/useImageOrVideoAsset.mjs
  var import_react82 = __toESM(require_react(), 1);
  function useImageOrVideoAsset({
    shapeId,
    assetId
  }) {
    const editor = useEditor();
    const isExport = !!useSvgExportContext();
    const isReady = useDelaySvgExport();
    const resolveAssetUrlDebounced = (0, import_react82.useMemo)(() => debounce(resolveAssetUrl, 500), []);
    const [result, setResult] = (0, import_react82.useState)(() => ({
      asset: assetId ? editor.getAsset(assetId) ?? null : null,
      url: null
    }));
    const didAlreadyResolve = (0, import_react82.useRef)(false);
    const previousUrl = (0, import_react82.useRef)(null);
    (0, import_react82.useEffect)(() => {
      if (!assetId) return;
      let isCancelled = false;
      let cancelDebounceFn;
      const cleanupEffectScheduler = react("update state", () => {
        if (!isExport && editor.getCulledShapes().has(shapeId)) return;
        const asset = editor.getAsset(assetId);
        if (!asset) return;
        const shape = editor.getShape(shapeId);
        if (!shape) return;
        if (!asset.props.src) {
          const preview = editor.getTemporaryAssetPreview(asset.id);
          if (preview) {
            if (previousUrl.current !== preview) {
              previousUrl.current = preview;
              setResult((prev) => ({ ...prev, isPlaceholder: true, url: preview }));
              isReady();
            }
            return;
          }
        }
        const screenScale = editor.getZoomLevel() * (shape.props.w / asset.props.w);
        function resolve(asset2, url) {
          if (isCancelled) return;
          if (previousUrl.current === url) return;
          didAlreadyResolve.current = true;
          previousUrl.current = url;
          setResult({ asset: asset2, url });
          isReady();
        }
        if (didAlreadyResolve.current) {
          resolveAssetUrlDebounced(
            editor,
            assetId,
            screenScale,
            isExport,
            (url) => resolve(asset, url)
          );
          cancelDebounceFn = resolveAssetUrlDebounced.cancel;
        } else {
          resolveAssetUrl(editor, assetId, screenScale, isExport, (url) => resolve(asset, url));
        }
      });
      return () => {
        cleanupEffectScheduler();
        cancelDebounceFn?.();
        isCancelled = true;
      };
    }, [editor, assetId, isExport, isReady, shapeId, resolveAssetUrlDebounced]);
    return result;
  }
  function resolveAssetUrl(editor, assetId, screenScale, isExport, callback) {
    editor.resolveAssetUrl(assetId, {
      screenScale,
      shouldResolveToOriginal: isExport
    }).then((url) => {
      callback(url);
    });
  }

  // node_modules/tldraw/dist-esm/lib/shapes/image/ImageShapeUtil.mjs
  async function getDataURIFromURL(url) {
    const response = await fetch(url);
    const blob = await response.blob();
    return FileHelpers.blobToDataUrl(blob);
  }
  var ImageShapeUtil = class extends BaseBoxShapeUtil {
    static type = "image";
    static props = imageShapeProps;
    static migrations = imageShapeMigrations;
    isAspectRatioLocked() {
      return true;
    }
    canCrop() {
      return true;
    }
    getDefaultProps() {
      return {
        w: 100,
        h: 100,
        assetId: null,
        playing: true,
        url: "",
        crop: null,
        flipX: false,
        flipY: false
      };
    }
    onResize(shape, info) {
      let resized = resizeBox(shape, info);
      const { flipX, flipY } = info.initialShape.props;
      const { scaleX, scaleY, mode } = info;
      resized = {
        ...resized,
        props: {
          ...resized.props,
          flipX: scaleX < 0 !== flipX,
          flipY: scaleY < 0 !== flipY
        }
      };
      if (!shape.props.crop) return resized;
      const flipCropHorizontally = (
        // We used the flip horizontally feature
        // We resized the shape past it's bounds, so it flipped
        mode === "scale_shape" && scaleX === -1 || mode === "resize_bounds" && flipX !== resized.props.flipX
      );
      const flipCropVertically = (
        // We used the flip vertically feature
        // We resized the shape past it's bounds, so it flipped
        mode === "scale_shape" && scaleY === -1 || mode === "resize_bounds" && flipY !== resized.props.flipY
      );
      const { topLeft, bottomRight } = shape.props.crop;
      resized.props.crop = {
        topLeft: {
          x: flipCropHorizontally ? 1 - bottomRight.x : topLeft.x,
          y: flipCropVertically ? 1 - bottomRight.y : topLeft.y
        },
        bottomRight: {
          x: flipCropHorizontally ? 1 - topLeft.x : bottomRight.x,
          y: flipCropVertically ? 1 - topLeft.y : bottomRight.y
        }
      };
      return resized;
    }
    component(shape) {
      return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(ImageShape, { shape });
    }
    indicator(shape) {
      const isCropping = this.editor.getCroppingShapeId() === shape.id;
      if (isCropping) return null;
      return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("rect", { width: toDomPrecision(shape.props.w), height: toDomPrecision(shape.props.h) });
    }
    async toSvg(shape) {
      if (!shape.props.assetId) return null;
      const asset = this.editor.getAsset(shape.props.assetId);
      if (!asset) return null;
      let src = await this.editor.resolveAssetUrl(shape.props.assetId, {
        shouldResolveToOriginal: true
      });
      if (!src) return null;
      if (src.startsWith("blob:") || src.startsWith("http") || src.startsWith("/") || src.startsWith("./")) {
        src = await getDataURIFromURL(src) || "";
      }
      return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(SvgImage, { shape, src });
    }
    onDoubleClickEdge(shape) {
      const props = shape.props;
      if (!props) return;
      if (this.editor.getCroppingShapeId() !== shape.id) {
        return;
      }
      const crop = structuredClone(props.crop) || {
        topLeft: { x: 0, y: 0 },
        bottomRight: { x: 1, y: 1 }
      };
      const w = 1 / (crop.bottomRight.x - crop.topLeft.x) * shape.props.w;
      const h = 1 / (crop.bottomRight.y - crop.topLeft.y) * shape.props.h;
      const pointDelta = new Vec(crop.topLeft.x * w, crop.topLeft.y * h).rot(shape.rotation);
      const partial = {
        id: shape.id,
        type: shape.type,
        x: shape.x - pointDelta.x,
        y: shape.y - pointDelta.y,
        props: {
          crop: {
            topLeft: { x: 0, y: 0 },
            bottomRight: { x: 1, y: 1 }
          },
          w,
          h
        }
      };
      this.editor.updateShapes([partial]);
    }
    getInterpolatedProps(startShape, endShape, t2) {
      function interpolateCrop(startShape2, endShape2) {
        if (startShape2.props.crop === null && endShape2.props.crop === null) return null;
        const startTL = startShape2.props.crop?.topLeft || { x: 0, y: 0 };
        const startBR = startShape2.props.crop?.bottomRight || { x: 1, y: 1 };
        const endTL = endShape2.props.crop?.topLeft || { x: 0, y: 0 };
        const endBR = endShape2.props.crop?.bottomRight || { x: 1, y: 1 };
        return {
          topLeft: { x: lerp(startTL.x, endTL.x, t2), y: lerp(startTL.y, endTL.y, t2) },
          bottomRight: { x: lerp(startBR.x, endBR.x, t2), y: lerp(startBR.y, endBR.y, t2) }
        };
      }
      return {
        ...t2 > 0.5 ? endShape.props : startShape.props,
        w: lerp(startShape.props.w, endShape.props.w, t2),
        h: lerp(startShape.props.h, endShape.props.h, t2),
        crop: interpolateCrop(startShape, endShape)
      };
    }
  };
  var ImageShape = (0, import_react83.memo)(function ImageShape2({ shape }) {
    const editor = useEditor();
    const { asset, url } = useImageOrVideoAsset({
      shapeId: shape.id,
      assetId: shape.props.assetId
    });
    const prefersReducedMotion = usePrefersReducedMotion();
    const [staticFrameSrc, setStaticFrameSrc] = (0, import_react83.useState)("");
    const [loadedUrl, setLoadedUrl] = (0, import_react83.useState)(null);
    const isAnimated = getIsAnimated(editor, shape);
    (0, import_react83.useEffect)(() => {
      if (url && isAnimated) {
        let cancelled = false;
        const image = Image();
        image.onload = () => {
          if (cancelled) return;
          const canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const ctx = canvas.getContext("2d");
          if (!ctx) return;
          ctx.drawImage(image, 0, 0);
          setStaticFrameSrc(canvas.toDataURL());
          setLoadedUrl(url);
        };
        image.crossOrigin = "anonymous";
        image.src = url;
        return () => {
          cancelled = true;
        };
      }
    }, [editor, isAnimated, prefersReducedMotion, url]);
    const showCropPreview = useValue(
      "show crop preview",
      () => shape.id === editor.getOnlySelectedShapeId() && editor.getCroppingShapeId() === shape.id && editor.isIn("select.crop"),
      [editor, shape.id]
    );
    const reduceMotion = prefersReducedMotion && (asset?.props.mimeType?.includes("video") || isAnimated);
    const containerStyle = getCroppedContainerStyle(shape);
    const nextSrc = url === loadedUrl ? null : url;
    const loadedSrc = reduceMotion ? staticFrameSrc : loadedUrl;
    if (!url && !asset?.props.src) {
      return /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(
        HTMLContainer,
        {
          id: shape.id,
          style: {
            overflow: "hidden",
            width: shape.props.w,
            height: shape.props.h,
            color: "var(--color-text-3)",
            backgroundColor: "var(--color-low)",
            border: "1px solid var(--color-low-border)"
          },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
              "div",
              {
                className: (0, import_classnames24.default)("tl-image-container", asset && "tl-image-container-loading"),
                style: containerStyle,
                children: asset ? null : /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(BrokenAssetIcon, {})
              }
            ),
            "url" in shape.props && shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(HyperlinkButton, { url: shape.props.url })
          ]
        }
      );
    }
    const crossOrigin = isAnimated ? "anonymous" : void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(import_jsx_runtime109.Fragment, { children: [
      showCropPreview && loadedSrc && /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("div", { style: containerStyle, children: /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
        "img",
        {
          className: "tl-image",
          style: { ...getFlipStyle(shape), opacity: 0.1 },
          crossOrigin,
          src: loadedSrc,
          referrerPolicy: "strict-origin-when-cross-origin",
          draggable: false
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(
        HTMLContainer,
        {
          id: shape.id,
          style: { overflow: "hidden", width: shape.props.w, height: shape.props.h },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)("div", { className: (0, import_classnames24.default)("tl-image-container"), style: containerStyle, children: [
              loadedSrc && /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
                "img",
                {
                  className: "tl-image",
                  style: getFlipStyle(shape),
                  crossOrigin,
                  src: loadedSrc,
                  referrerPolicy: "strict-origin-when-cross-origin",
                  draggable: false
                },
                loadedSrc
              ),
              nextSrc && /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
                "img",
                {
                  className: "tl-image",
                  style: getFlipStyle(shape),
                  crossOrigin,
                  src: nextSrc,
                  referrerPolicy: "strict-origin-when-cross-origin",
                  draggable: false,
                  onLoad: () => setLoadedUrl(nextSrc)
                },
                nextSrc
              )
            ] }),
            shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(HyperlinkButton, { url: shape.props.url })
          ]
        }
      )
    ] });
  });
  function getIsAnimated(editor, shape) {
    const asset = shape.props.assetId ? editor.getAsset(shape.props.assetId) : void 0;
    if (!asset) return false;
    return "mimeType" in asset.props && MediaHelpers.isAnimatedImageType(asset?.props.mimeType) || "isAnimated" in asset.props && asset.props.isAnimated;
  }
  function getCroppedContainerStyle(shape) {
    const crop = shape.props.crop;
    const topLeft = crop?.topLeft;
    if (!topLeft) {
      return {
        width: shape.props.w,
        height: shape.props.h
      };
    }
    const w = 1 / (crop.bottomRight.x - crop.topLeft.x) * shape.props.w;
    const h = 1 / (crop.bottomRight.y - crop.topLeft.y) * shape.props.h;
    const offsetX = -topLeft.x * w;
    const offsetY = -topLeft.y * h;
    return {
      transform: `translate(${offsetX}px, ${offsetY}px)`,
      width: w,
      height: h
    };
  }
  function getFlipStyle(shape, size4) {
    const { flipX, flipY } = shape.props;
    if (!flipX && !flipY) return void 0;
    const scale = `scale(${flipX ? -1 : 1}, ${flipY ? -1 : 1})`;
    const translate = size4 ? `translate(${flipX ? size4.width : 0}px, ${flipY ? size4.height : 0}px)` : "";
    return {
      transform: `${translate} ${scale}`,
      // in SVG, flipping around the center doesn't work so we use explicit width/height
      transformOrigin: size4 ? "0 0" : "center center"
    };
  }
  function SvgImage({ shape, src }) {
    const cropClipId = useUniqueSafeId();
    const containerStyle = getCroppedContainerStyle(shape);
    const crop = shape.props.crop;
    if (containerStyle.transform && crop) {
      const { transform: cropTransform, width, height } = containerStyle;
      const croppedWidth = (crop.bottomRight.x - crop.topLeft.x) * width;
      const croppedHeight = (crop.bottomRight.y - crop.topLeft.y) * height;
      const points = [
        new Vec(0, 0),
        new Vec(croppedWidth, 0),
        new Vec(croppedWidth, croppedHeight),
        new Vec(0, croppedHeight)
      ];
      const flip4 = getFlipStyle(shape, { width, height });
      return /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(import_jsx_runtime109.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("clipPath", { id: cropClipId, children: /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("polygon", { points: points.map((p) => `${p.x},${p.y}`).join(" ") }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("g", { clipPath: `url(#${cropClipId})`, children: /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
          "image",
          {
            href: src,
            width,
            height,
            style: flip4 ? { ...flip4, transform: `${cropTransform} ${flip4.transform}` } : { transform: cropTransform }
          }
        ) })
      ] });
    } else {
      return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
        "image",
        {
          href: src,
          width: shape.props.w,
          height: shape.props.h,
          style: getFlipStyle(shape, { width: shape.props.w, height: shape.props.h })
        }
      );
    }
  }

  // node_modules/tldraw/dist-esm/lib/shapes/line/LineShapeUtil.mjs
  var import_jsx_runtime110 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/line/components/getLinePath.mjs
  function getLineDrawFreehandOptions(strokeWidth) {
    return {
      size: strokeWidth,
      thinning: 0.4,
      streamline: 0,
      smoothing: 0.5,
      simulatePressure: true,
      last: true
    };
  }
  function getLineStrokePoints(shape, spline, strokeWidth) {
    const points = spline.vertices;
    const options = getLineDrawFreehandOptions(strokeWidth);
    return getStrokePoints(points, options);
  }
  function getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth) {
    const options = getLineDrawFreehandOptions(strokeWidth);
    return getStrokeOutlinePoints(
      setStrokePointRadii(getLineStrokePoints(shape, spline, strokeWidth), options),
      options
    );
  }
  function getLineDrawPath(shape, spline, strokeWidth) {
    const stroke = getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth);
    return getSvgPathFromPoints(stroke);
  }
  function getLineIndicatorPath(shape, spline, strokeWidth) {
    if (shape.props.dash === "draw") {
      const strokePoints = getLineStrokePoints(shape, spline, strokeWidth);
      return getSvgPathFromStrokePoints(strokePoints);
    }
    return spline.getSvgPathData();
  }

  // node_modules/tldraw/dist-esm/lib/shapes/line/line-helpers.mjs
  function getDrawLinePathData(id, outline, strokeWidth) {
    let innerPathData = `M ${precise(outline[0])}L`;
    let outerPathData2 = `M ${precise(outline[0])}L`;
    const offset4 = strokeWidth / 3;
    const roundness = strokeWidth * 2;
    const random = rng(id);
    let p0 = outline[0];
    let p1;
    let s0 = outline[0];
    let s1;
    const len = outline.length;
    for (let i = 0, n = len - 1; i < n; i++) {
      p1 = outline[i + 1];
      s1 = Vec.AddXY(outline[i + 1], random() * offset4, random() * offset4);
      const delta = Vec.Sub(p1, p0);
      const distance = Vec.Len(delta);
      const vector = Vec.Div(delta, distance).mul(Math.min(distance / 4, roundness));
      const q0 = Vec.Add(p0, vector);
      const q1 = Vec.Add(p1, vector.neg());
      const sDelta = Vec.Sub(s1, s0);
      const sDistance = Vec.Len(sDelta);
      const sVector = Vec.Div(sDelta, sDistance).mul(Math.min(sDistance / 4, roundness));
      const sq0 = Vec.Add(s0, sVector);
      const sq1 = Vec.Add(s1, sVector.neg());
      if (i === n - 1) {
        innerPathData += `${precise(q0)}L ${precise(p1)}`;
        outerPathData2 += `${precise(sq0)}L ${precise(s1)}`;
      } else {
        innerPathData += `${precise(q0)}L ${precise(q1)}Q ${precise(p1)}`;
        outerPathData2 += `${precise(sq0)}L ${precise(sq1)}Q ${precise(s1)}`;
        p0 = p1;
        s0 = s1;
      }
    }
    return [innerPathData, innerPathData + outerPathData2];
  }

  // node_modules/tldraw/dist-esm/lib/shapes/line/LineShapeUtil.mjs
  var handlesCache = new WeakCache();
  var LineShapeUtil = class extends ShapeUtil {
    static type = "line";
    static props = lineShapeProps;
    static migrations = lineShapeMigrations;
    hideResizeHandles() {
      return true;
    }
    hideRotateHandle() {
      return true;
    }
    hideSelectionBoundsFg() {
      return true;
    }
    hideSelectionBoundsBg() {
      return true;
    }
    getDefaultProps() {
      const [start, end] = getIndices(2);
      return {
        dash: "draw",
        size: "m",
        color: "black",
        spline: "line",
        points: {
          [start]: { id: start, index: start, x: 0, y: 0 },
          [end]: { id: end, index: end, x: 0.1, y: 0.1 }
        },
        scale: 1
      };
    }
    getGeometry(shape) {
      return getGeometryForLineShape(shape);
    }
    getHandles(shape) {
      return handlesCache.get(shape.props, () => {
        const spline = getGeometryForLineShape(shape);
        const points = linePointsToArray(shape);
        const results = points.map((point) => ({
          ...point,
          id: point.index,
          type: "vertex",
          canSnap: true
        }));
        for (let i = 0; i < points.length - 1; i++) {
          const index2 = getIndexBetween(points[i].index, points[i + 1].index);
          const segment = spline.segments[i];
          const point = segment.midPoint();
          results.push({
            id: index2,
            type: "create",
            index: index2,
            x: point.x,
            y: point.y,
            canSnap: true
          });
        }
        return results.sort(sortByIndex);
      });
    }
    //   Events
    onResize(shape, info) {
      const { scaleX, scaleY } = info;
      return {
        props: {
          points: mapObjectMapValues(shape.props.points, (_, { id, index: index2, x, y }) => ({
            id,
            index: index2,
            x: x * scaleX,
            y: y * scaleY
          }))
        }
      };
    }
    onBeforeCreate(next) {
      const {
        props: { points }
      } = next;
      const pointKeys = Object.keys(points);
      if (pointKeys.length < 2) {
        return;
      }
      const firstPoint = points[pointKeys[0]];
      const allSame = pointKeys.every((key) => {
        const point = points[key];
        return point.x === firstPoint.x && point.y === firstPoint.y;
      });
      if (allSame) {
        const lastKey = pointKeys[pointKeys.length - 1];
        points[lastKey] = {
          ...points[lastKey],
          x: points[lastKey].x + 0.1,
          y: points[lastKey].y + 0.1
        };
        return next;
      }
      return;
    }
    onHandleDrag(shape, { handle }) {
      if (handle.type !== "vertex") return;
      const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor);
      return {
        ...shape,
        props: {
          ...shape.props,
          points: {
            ...shape.props.points,
            [handle.id]: { id: handle.id, index: handle.index, x: newPoint.x, y: newPoint.y }
          }
        }
      };
    }
    component(shape) {
      return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(SVGContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(LineShapeSvg, { shape }) });
    }
    indicator(shape) {
      const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale;
      const spline = getGeometryForLineShape(shape);
      const { dash } = shape.props;
      let path;
      if (shape.props.spline === "line") {
        const outline = spline.points;
        if (dash === "solid" || dash === "dotted" || dash === "dashed") {
          path = "M" + outline[0] + "L" + outline.slice(1);
        } else {
          const [innerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth);
          path = innerPathData;
        }
      } else {
        path = getLineIndicatorPath(shape, spline, strokeWidth);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)("path", { d: path });
    }
    toSvg(shape) {
      return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(LineShapeSvg, { shouldScale: true, shape });
    }
    getHandleSnapGeometry(shape) {
      const points = linePointsToArray(shape);
      return {
        points,
        getSelfSnapPoints: (handle) => {
          const index2 = this.getHandles(shape).filter((h) => h.type === "vertex").findIndex((h) => h.id === handle.id);
          return points.filter((_, i) => Math.abs(i - index2) > 1).map(Vec.From);
        },
        getSelfSnapOutline: (handle) => {
          const index2 = this.getHandles(shape).filter((h) => h.type === "vertex").findIndex((h) => h.id === handle.id);
          const segments = getGeometryForLineShape(shape).segments.filter(
            (_, i) => i !== index2 - 1 && i !== index2
          );
          if (!segments.length) return null;
          return new Group2d({ children: segments });
        }
      };
    }
    getInterpolatedProps(startShape, endShape, t2) {
      const startPoints = linePointsToArray(startShape);
      const endPoints = linePointsToArray(endShape);
      const pointsToUseStart = [];
      const pointsToUseEnd = [];
      let index2 = ZERO_INDEX_KEY;
      if (startPoints.length > endPoints.length) {
        for (let i = 0; i < startPoints.length; i++) {
          pointsToUseStart[i] = { ...startPoints[i] };
          if (endPoints[i] === void 0) {
            pointsToUseEnd[i] = { ...endPoints[endPoints.length - 1], id: index2 };
          } else {
            pointsToUseEnd[i] = { ...endPoints[i], id: index2 };
          }
          index2 = getIndexAbove(index2);
        }
      } else if (endPoints.length > startPoints.length) {
        for (let i = 0; i < endPoints.length; i++) {
          pointsToUseEnd[i] = { ...endPoints[i] };
          if (startPoints[i] === void 0) {
            pointsToUseStart[i] = {
              ...startPoints[startPoints.length - 1],
              id: index2
            };
          } else {
            pointsToUseStart[i] = { ...startPoints[i], id: index2 };
          }
          index2 = getIndexAbove(index2);
        }
      } else {
        for (let i = 0; i < endPoints.length; i++) {
          pointsToUseStart[i] = startPoints[i];
          pointsToUseEnd[i] = endPoints[i];
        }
      }
      return {
        ...t2 > 0.5 ? endShape.props : startShape.props,
        points: Object.fromEntries(
          pointsToUseStart.map((point, i) => {
            const endPoint = pointsToUseEnd[i];
            return [
              point.id,
              {
                ...point,
                x: lerp(point.x, endPoint.x, t2),
                y: lerp(point.y, endPoint.y, t2)
              }
            ];
          })
        ),
        scale: lerp(startShape.props.scale, endShape.props.scale, t2)
      };
    }
  };
  function linePointsToArray(shape) {
    return Object.values(shape.props.points).sort(sortByIndex);
  }
  function getGeometryForLineShape(shape) {
    const points = linePointsToArray(shape).map(Vec.From);
    switch (shape.props.spline) {
      case "cubic": {
        return new CubicSpline2d({ points });
      }
      case "line": {
        return new Polyline2d({ points });
      }
    }
  }
  function LineShapeSvg({
    shape,
    shouldScale = false,
    forceSolid = false
  }) {
    const theme = useDefaultColorTheme();
    const spline = getGeometryForLineShape(shape);
    const { dash, color, size: size4 } = shape.props;
    const scaleFactor = 1 / shape.props.scale;
    const scale = shouldScale ? scaleFactor : 1;
    const strokeWidth = STROKE_SIZES[size4] * shape.props.scale;
    if (shape.props.spline === "line") {
      if (dash === "solid") {
        const outline = spline.points;
        const pathData = "M" + outline[0] + "L" + outline.slice(1);
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          "path",
          {
            d: pathData,
            stroke: theme[color].solid,
            strokeWidth,
            fill: "none",
            transform: `scale(${scale})`
          }
        );
      }
      if (dash === "dashed" || dash === "dotted") {
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)("g", { stroke: theme[color].solid, strokeWidth, transform: `scale(${scale})`, children: spline.segments.map((segment, i) => {
          const { strokeDasharray, strokeDashoffset } = forceSolid ? { strokeDasharray: "none", strokeDashoffset: "none" } : getPerfectDashProps(segment.length, strokeWidth, {
            style: dash,
            start: i > 0 ? "outset" : "none",
            end: i < spline.segments.length - 1 ? "outset" : "none"
          });
          return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
            "path",
            {
              strokeDasharray,
              strokeDashoffset,
              d: segment.getSvgPathData(true),
              fill: "none"
            },
            i
          );
        }) });
      }
      if (dash === "draw") {
        const outline = spline.points;
        const [_, outerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth);
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          "path",
          {
            d: outerPathData,
            stroke: theme[color].solid,
            strokeWidth,
            fill: "none",
            transform: `scale(${scale})`
          }
        );
      }
    }
    if (shape.props.spline === "cubic") {
      const splinePath = spline.getSvgPathData();
      if (dash === "solid") {
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          "path",
          {
            strokeWidth,
            stroke: theme[color].solid,
            fill: "none",
            d: splinePath,
            transform: `scale(${scale})`
          }
        );
      }
      if (dash === "dashed" || dash === "dotted") {
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)("g", { stroke: theme[color].solid, strokeWidth, transform: `scale(${scale})`, children: spline.segments.map((segment, i) => {
          const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
            segment.length,
            strokeWidth,
            {
              style: dash,
              start: i > 0 ? "outset" : "none",
              end: i < spline.segments.length - 1 ? "outset" : "none",
              forceSolid
            }
          );
          return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
            "path",
            {
              strokeDasharray,
              strokeDashoffset,
              d: segment.getSvgPathData(),
              fill: "none"
            },
            i
          );
        }) });
      }
      if (dash === "draw") {
        return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          "path",
          {
            d: getLineDrawPath(shape, spline, strokeWidth),
            strokeWidth: 1,
            stroke: theme[color].solid,
            fill: theme[color].solid,
            transform: `scale(${scale})`
          }
        );
      }
    }
  }

  // node_modules/tldraw/dist-esm/lib/shapes/note/NoteShapeUtil.mjs
  var import_jsx_runtime111 = __toESM(require_jsx_runtime(), 1);
  var import_react84 = __toESM(require_react(), 1);
  var NoteShapeUtil = class extends ShapeUtil {
    static type = "note";
    static props = noteShapeProps;
    static migrations = noteShapeMigrations;
    canEdit() {
      return true;
    }
    hideResizeHandles() {
      return true;
    }
    hideSelectionBoundsFg() {
      return false;
    }
    getDefaultProps() {
      return {
        color: "black",
        size: "m",
        text: "",
        font: "draw",
        align: "middle",
        verticalAlign: "middle",
        labelColor: "black",
        growY: 0,
        fontSizeAdjustment: 0,
        url: "",
        scale: 1
      };
    }
    getGeometry(shape) {
      const { labelHeight, labelWidth } = getLabelSize(this.editor, shape);
      const { scale } = shape.props;
      const lh = labelHeight * scale;
      const lw = labelWidth * scale;
      const nw = NOTE_SIZE * scale;
      const nh = getNoteHeight(shape);
      return new Group2d({
        children: [
          new Rectangle2d({ width: nw, height: nh, isFilled: true }),
          new Rectangle2d({
            x: shape.props.align === "start" ? 0 : shape.props.align === "end" ? nw - lw : (nw - lw) / 2,
            y: shape.props.verticalAlign === "start" ? 0 : shape.props.verticalAlign === "end" ? nh - lh : (nh - lh) / 2,
            width: lw,
            height: lh,
            isFilled: true,
            isLabel: true
          })
        ]
      });
    }
    getHandles(shape) {
      const { scale } = shape.props;
      const isCoarsePointer = this.editor.getInstanceState().isCoarsePointer;
      if (isCoarsePointer) return [];
      const zoom = this.editor.getZoomLevel();
      if (zoom * scale < 0.25) return [];
      const nh = getNoteHeight(shape);
      const nw = NOTE_SIZE * scale;
      const offset4 = CLONE_HANDLE_MARGIN / zoom * scale;
      if (zoom * scale < 0.5) {
        return [
          {
            id: "bottom",
            index: "a3",
            type: "clone",
            x: nw / 2,
            y: nh + offset4
          }
        ];
      }
      return [
        {
          id: "top",
          index: "a1",
          type: "clone",
          x: nw / 2,
          y: -offset4
        },
        {
          id: "right",
          index: "a2",
          type: "clone",
          x: nw + offset4,
          y: nh / 2
        },
        {
          id: "bottom",
          index: "a3",
          type: "clone",
          x: nw / 2,
          y: nh + offset4
        },
        {
          id: "left",
          index: "a4",
          type: "clone",
          x: -offset4,
          y: nh / 2
        }
      ];
    }
    getText(shape) {
      return shape.props.text;
    }
    component(shape) {
      const {
        id,
        type,
        props: {
          labelColor,
          scale,
          color,
          font,
          size: size4,
          align,
          text,
          verticalAlign,
          fontSizeAdjustment
        }
      } = shape;
      const handleKeyDown = useNoteKeydownHandler(id);
      const theme = useDefaultColorTheme();
      const nw = NOTE_SIZE * scale;
      const nh = getNoteHeight(shape);
      const rotation = useValue(
        "shape rotation",
        () => this.editor.getShapePageTransform(id)?.rotation() ?? 0,
        [this.editor]
      );
      const hideShadows = useValue("zoom", () => this.editor.getZoomLevel() < 0.35 / scale, [
        scale,
        this.editor
      ]);
      const isDarkMode = useValue("dark mode", () => this.editor.user.getIsDarkMode(), [this.editor]);
      const isSelected = shape.id === this.editor.getOnlySelectedShapeId();
      return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(import_jsx_runtime111.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
          "div",
          {
            id,
            className: "tl-note__container",
            style: {
              width: nw,
              height: nh,
              backgroundColor: theme[color].note.fill,
              borderBottom: hideShadows ? isDarkMode ? `${2 * scale}px solid rgb(20, 20, 20)` : `${2 * scale}px solid rgb(144, 144, 144)` : "none",
              boxShadow: hideShadows ? "none" : getNoteShadow(shape.id, rotation, scale)
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
              TextLabel,
              {
                shapeId: id,
                type,
                font,
                fontSize: (fontSizeAdjustment || LABEL_FONT_SIZES[size4]) * scale,
                lineHeight: TEXT_PROPS.lineHeight,
                align,
                verticalAlign,
                text,
                isNote: true,
                isSelected,
                labelColor: labelColor === "black" ? theme[color].note.text : theme[labelColor].fill,
                wrap: true,
                padding: 16 * scale,
                onKeyDown: handleKeyDown
              }
            )
          }
        ),
        "url" in shape.props && shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(HyperlinkButton, { url: shape.props.url })
      ] });
    }
    indicator(shape) {
      const { scale } = shape.props;
      return /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
        "rect",
        {
          rx: scale,
          width: toDomPrecision(NOTE_SIZE * scale),
          height: toDomPrecision(getNoteHeight(shape))
        }
      );
    }
    toSvg(shape, ctx) {
      if (shape.props.text) ctx.addExportDef(getFontDefForExport(shape.props.font));
      const theme = getDefaultColorTheme({ isDarkMode: ctx.isDarkMode });
      const bounds = getBoundsForSVG(shape);
      return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(import_jsx_runtime111.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("rect", { x: 5, y: 5, rx: 1, width: NOTE_SIZE - 10, height: bounds.h, fill: "rgba(0,0,0,.1)" }),
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
          "rect",
          {
            rx: 1,
            width: NOTE_SIZE,
            height: bounds.h,
            fill: theme[shape.props.color].note.fill
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
          SvgTextLabel,
          {
            fontSize: shape.props.fontSizeAdjustment || LABEL_FONT_SIZES[shape.props.size],
            font: shape.props.font,
            align: shape.props.align,
            verticalAlign: shape.props.verticalAlign,
            text: shape.props.text,
            labelColor: theme[shape.props.color].note.text,
            bounds,
            stroke: false
          }
        )
      ] });
    }
    onBeforeCreate(next) {
      return getNoteSizeAdjustments(this.editor, next);
    }
    onBeforeUpdate(prev, next) {
      if (prev.props.text === next.props.text && prev.props.font === next.props.font && prev.props.size === next.props.size) {
        return;
      }
      return getNoteSizeAdjustments(this.editor, next);
    }
    onEditEnd(shape) {
      const {
        id,
        type,
        props: { text }
      } = shape;
      if (text.trimEnd() !== shape.props.text) {
        this.editor.updateShapes([
          {
            id,
            type,
            props: {
              text: text.trimEnd()
            }
          }
        ]);
      }
    }
    getInterpolatedProps(startShape, endShape, t2) {
      return {
        ...t2 > 0.5 ? endShape.props : startShape.props,
        scale: lerp(startShape.props.scale, endShape.props.scale, t2)
      };
    }
  };
  function getNoteSizeAdjustments(editor, shape) {
    const { labelHeight, fontSizeAdjustment } = getLabelSize(editor, shape);
    const growY = Math.max(0, labelHeight - NOTE_SIZE);
    if (growY !== shape.props.growY || fontSizeAdjustment !== shape.props.fontSizeAdjustment) {
      return {
        ...shape,
        props: {
          ...shape.props,
          growY,
          fontSizeAdjustment
        }
      };
    }
  }
  function getNoteLabelSize(editor, shape) {
    const { text } = shape.props;
    if (!text) {
      const minHeight = LABEL_FONT_SIZES[shape.props.size] * TEXT_PROPS.lineHeight + LABEL_PADDING * 2;
      return { labelHeight: minHeight, labelWidth: 100, fontSizeAdjustment: 0 };
    }
    const unadjustedFontSize = LABEL_FONT_SIZES[shape.props.size];
    let fontSizeAdjustment = 0;
    let iterations = 0;
    let labelHeight = NOTE_SIZE;
    let labelWidth = NOTE_SIZE;
    const FUZZ = 1;
    do {
      fontSizeAdjustment = Math.min(unadjustedFontSize, unadjustedFontSize - iterations);
      const nextTextSize = editor.textMeasure.measureText(text, {
        ...TEXT_PROPS,
        fontFamily: FONT_FAMILIES[shape.props.font],
        fontSize: fontSizeAdjustment,
        maxWidth: NOTE_SIZE - LABEL_PADDING * 2 - FUZZ,
        disableOverflowWrapBreaking: true
      });
      labelHeight = nextTextSize.h + LABEL_PADDING * 2;
      labelWidth = nextTextSize.w + LABEL_PADDING * 2;
      if (fontSizeAdjustment <= 14) {
        const nextTextSizeWithOverflowBreak = editor.textMeasure.measureText(text, {
          ...TEXT_PROPS,
          fontFamily: FONT_FAMILIES[shape.props.font],
          fontSize: fontSizeAdjustment,
          maxWidth: NOTE_SIZE - LABEL_PADDING * 2 - FUZZ
        });
        labelHeight = nextTextSizeWithOverflowBreak.h + LABEL_PADDING * 2;
        labelWidth = nextTextSizeWithOverflowBreak.w + LABEL_PADDING * 2;
        break;
      }
      if (nextTextSize.scrollWidth.toFixed(0) === nextTextSize.w.toFixed(0)) {
        break;
      }
    } while (iterations++ < 50);
    return {
      labelHeight,
      labelWidth,
      fontSizeAdjustment
    };
  }
  var labelSizesForNote = new WeakCache();
  function getLabelSize(editor, shape) {
    return labelSizesForNote.get(shape, () => getNoteLabelSize(editor, shape));
  }
  function useNoteKeydownHandler(id) {
    const editor = useEditor();
    const translation = useCurrentTranslation();
    return (0, import_react84.useCallback)(
      (e) => {
        const shape = editor.getShape(id);
        if (!shape) return;
        const isTab = e.key === "Tab";
        const isCmdEnter = (e.metaKey || e.ctrlKey) && e.key === "Enter";
        if (isTab || isCmdEnter) {
          e.preventDefault();
          const pageTransform = editor.getShapePageTransform(id);
          const pageRotation = pageTransform.rotation();
          const isRTL2 = !!(translation.dir === "rtl" || isRightToLeftLanguage(shape.props.text));
          const offsetLength = (NOTE_SIZE + editor.options.adjacentShapeMargin + // If we're growing down, we need to account for the current shape's growY
          (isCmdEnter && !e.shiftKey ? shape.props.growY : 0)) * shape.props.scale;
          const adjacentCenter = new Vec(
            isTab ? e.shiftKey != isRTL2 ? -1 : 1 : 0,
            isCmdEnter ? e.shiftKey ? -1 : 1 : 0
          ).mul(offsetLength).add(NOTE_CENTER_OFFSET.clone().mul(shape.props.scale)).rot(pageRotation).add(pageTransform.point());
          const newNote = getNoteShapeForAdjacentPosition(editor, shape, adjacentCenter, pageRotation);
          if (newNote) {
            editor.markHistoryStoppingPoint("editing adjacent shape");
            startEditingShapeWithLabel(
              editor,
              newNote,
              true
              /* selectAll */
            );
          }
        }
      },
      [id, editor, translation.dir]
    );
  }
  function getNoteHeight(shape) {
    return (NOTE_SIZE + shape.props.growY) * shape.props.scale;
  }
  function getNoteShadow(id, rotation, scale) {
    const random = rng(id);
    const lift = Math.abs(random()) + 0.5;
    const oy = Math.cos(rotation);
    const a = 5 * scale;
    const b = 4 * scale;
    const c = 6 * scale;
    const d = 7 * scale;
    return `0px ${a - lift}px ${a}px -${a}px rgba(15, 23, 31, .6),
	0px ${(b + lift * d) * Math.max(0, oy)}px ${c + lift * d}px -${b + lift * c}px rgba(15, 23, 31, ${(0.3 + lift * 0.1).toFixed(2)}), 
	0px ${48 * scale}px ${10 * scale}px -${10 * scale}px inset rgba(15, 23, 44, ${((0.022 + random() * 5e-3) * ((1 + oy) / 2)).toFixed(2)})`;
  }
  function getBoundsForSVG(shape) {
    return new Box(0, 0, NOTE_SIZE, NOTE_SIZE + shape.props.growY);
  }

  // node_modules/tldraw/dist-esm/lib/shapes/text/TextShapeUtil.mjs
  var import_jsx_runtime112 = __toESM(require_jsx_runtime(), 1);
  var import_react85 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/shapes/shared/resizeScaled.mjs
  function resizeScaled(shape, {
    initialBounds,
    scaleX,
    scaleY,
    newPoint
  }) {
    const scaleDelta = Math.max(0.01, Math.min(Math.abs(scaleX), Math.abs(scaleY)));
    const offset4 = new Vec(0, 0);
    if (scaleX < 0) {
      offset4.x = -(initialBounds.width * scaleDelta);
    }
    if (scaleY < 0) {
      offset4.y = -(initialBounds.height * scaleDelta);
    }
    const { x, y } = Vec.Add(newPoint, offset4.rot(shape.rotation));
    return {
      x,
      y,
      props: {
        scale: scaleDelta * shape.props.scale
      }
    };
  }

  // node_modules/tldraw/dist-esm/lib/shapes/text/TextShapeUtil.mjs
  var sizeCache = new WeakCache();
  var TextShapeUtil = class extends ShapeUtil {
    static type = "text";
    static props = textShapeProps;
    static migrations = textShapeMigrations;
    getDefaultProps() {
      return {
        color: "black",
        size: "m",
        w: 8,
        text: "",
        font: "draw",
        textAlign: "start",
        autoSize: true,
        scale: 1
      };
    }
    getMinDimensions(shape) {
      return sizeCache.get(shape.props, (props) => getTextSize(this.editor, props));
    }
    getGeometry(shape) {
      const { scale } = shape.props;
      const { width, height } = this.getMinDimensions(shape);
      return new Rectangle2d({
        width: width * scale,
        height: height * scale,
        isFilled: true,
        isLabel: true
      });
    }
    getText(shape) {
      return shape.props.text;
    }
    canEdit() {
      return true;
    }
    isAspectRatioLocked() {
      return true;
    }
    // WAIT NO THIS IS HARD CODED IN THE RESIZE HANDLER
    component(shape) {
      const {
        id,
        props: { font, size: size4, text, color, scale, textAlign }
      } = shape;
      const { width, height } = this.getMinDimensions(shape);
      const isSelected = shape.id === this.editor.getOnlySelectedShapeId();
      const theme = useDefaultColorTheme();
      const handleKeyDown = useTextShapeKeydownHandler(id);
      return /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(
        TextLabel,
        {
          shapeId: id,
          classNamePrefix: "tl-text-shape",
          type: "text",
          font,
          fontSize: FONT_SIZES[size4],
          lineHeight: TEXT_PROPS.lineHeight,
          align: textAlign,
          verticalAlign: "middle",
          text,
          labelColor: theme[color].solid,
          isSelected,
          textWidth: width,
          textHeight: height,
          style: {
            transform: `scale(${scale})`,
            transformOrigin: "top left"
          },
          wrap: true,
          onKeyDown: handleKeyDown
        }
      );
    }
    indicator(shape) {
      const bounds = this.editor.getShapeGeometry(shape).bounds;
      const editor = useEditor();
      if (shape.props.autoSize && editor.getEditingShapeId() === shape.id) return null;
      return /* @__PURE__ */ (0, import_jsx_runtime112.jsx)("rect", { width: toDomPrecision(bounds.width), height: toDomPrecision(bounds.height) });
    }
    toSvg(shape, ctx) {
      if (shape.props.text) ctx.addExportDef(getFontDefForExport(shape.props.font));
      const bounds = this.editor.getShapeGeometry(shape).bounds;
      const width = bounds.width / (shape.props.scale ?? 1);
      const height = bounds.height / (shape.props.scale ?? 1);
      const theme = getDefaultColorTheme(ctx);
      return /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(
        SvgTextLabel,
        {
          fontSize: FONT_SIZES[shape.props.size],
          font: shape.props.font,
          align: shape.props.textAlign,
          verticalAlign: "middle",
          text: shape.props.text,
          labelColor: theme[shape.props.color].solid,
          bounds: new Box(0, 0, width, height),
          padding: 0
        }
      );
    }
    onResize(shape, info) {
      const { newPoint, initialBounds, initialShape, scaleX, handle } = info;
      if (info.mode === "scale_shape" || handle !== "right" && handle !== "left") {
        return {
          id: shape.id,
          type: shape.type,
          ...resizeScaled(shape, info)
        };
      } else {
        const nextWidth = Math.max(1, Math.abs(initialBounds.width * scaleX));
        const { x, y } = scaleX < 0 ? Vec.Sub(newPoint, Vec.FromAngle(shape.rotation).mul(nextWidth)) : newPoint;
        return {
          id: shape.id,
          type: shape.type,
          x,
          y,
          props: {
            w: nextWidth / initialShape.props.scale,
            autoSize: false
          }
        };
      }
    }
    onEditEnd(shape) {
      const {
        id,
        type,
        props: { text }
      } = shape;
      const trimmedText = shape.props.text.trimEnd();
      if (trimmedText.length === 0) {
        this.editor.deleteShapes([shape.id]);
      } else {
        if (trimmedText !== shape.props.text) {
          this.editor.updateShapes([
            {
              id,
              type,
              props: {
                text: text.trimEnd()
              }
            }
          ]);
        }
      }
    }
    onBeforeUpdate(prev, next) {
      if (!next.props.autoSize) return;
      const styleDidChange = prev.props.size !== next.props.size || prev.props.textAlign !== next.props.textAlign || prev.props.font !== next.props.font || prev.props.scale !== 1 && next.props.scale === 1;
      const textDidChange = prev.props.text !== next.props.text;
      if (!styleDidChange && !textDidChange) return;
      const boundsA = this.getMinDimensions(prev);
      const boundsB = getTextSize(this.editor, next.props);
      const wA = boundsA.width * prev.props.scale;
      const hA = boundsA.height * prev.props.scale;
      const wB = boundsB.width * next.props.scale;
      const hB = boundsB.height * next.props.scale;
      let delta;
      switch (next.props.textAlign) {
        case "middle": {
          delta = new Vec((wB - wA) / 2, textDidChange ? 0 : (hB - hA) / 2);
          break;
        }
        case "end": {
          delta = new Vec(wB - wA, textDidChange ? 0 : (hB - hA) / 2);
          break;
        }
        default: {
          if (textDidChange) break;
          delta = new Vec(0, (hB - hA) / 2);
          break;
        }
      }
      if (delta) {
        delta.rot(next.rotation);
        const { x, y } = next;
        return {
          ...next,
          x: x - delta.x,
          y: y - delta.y,
          props: { ...next.props, w: wB }
        };
      } else {
        return {
          ...next,
          props: { ...next.props, w: wB }
        };
      }
    }
    // 	todo: The edge doubleclicking feels like a mistake more often than
    //  not, especially on multiline text. Removed June 16 2024
    // override onDoubleClickEdge = (shape: TLTextShape) => {
    // 	// If the shape has a fixed width, set it to autoSize.
    // 	if (!shape.props.autoSize) {
    // 		return {
    // 			id: shape.id,
    // 			type: shape.type,
    // 			props: {
    // 				autoSize: true,
    // 			},
    // 		}
    // 	}
    // 	// If the shape is scaled, reset the scale to 1.
    // 	if (shape.props.scale !== 1) {
    // 		return {
    // 			id: shape.id,
    // 			type: shape.type,
    // 			props: {
    // 				scale: 1,
    // 			},
    // 		}
    // 	}
    // }
  };
  function getTextSize(editor, props) {
    const { font, text, autoSize, size: size4, w } = props;
    const minWidth = autoSize ? 16 : Math.max(16, w);
    const fontSize = FONT_SIZES[size4];
    const cw = autoSize ? null : (
      // `measureText` floors the number so we need to do the same here to avoid issues.
      Math.floor(Math.max(minWidth, w))
    );
    const result = editor.textMeasure.measureText(text, {
      ...TEXT_PROPS,
      fontFamily: FONT_FAMILIES[font],
      fontSize,
      maxWidth: cw
    });
    if (autoSize) {
      result.w += 1;
    }
    return {
      width: Math.max(minWidth, result.w),
      height: Math.max(fontSize, result.h)
    };
  }
  function useTextShapeKeydownHandler(id) {
    const editor = useEditor();
    return (0, import_react85.useCallback)(
      (e) => {
        if (editor.getEditingShapeId() !== id) return;
        switch (e.key) {
          case "Enter": {
            if (e.ctrlKey || e.metaKey) {
              editor.complete();
            }
            break;
          }
          case "Tab": {
            preventDefault(e);
            if (e.shiftKey) {
              TextHelpers.unindent(e.currentTarget);
            } else {
              TextHelpers.indent(e.currentTarget);
            }
            break;
          }
        }
      },
      [editor, id]
    );
  }

  // node_modules/tldraw/dist-esm/lib/shapes/video/VideoShapeUtil.mjs
  var import_jsx_runtime113 = __toESM(require_jsx_runtime(), 1);
  var import_classnames25 = __toESM(require_classnames(), 1);
  var import_react86 = __toESM(require_react(), 1);
  var VideoShapeUtil = class extends BaseBoxShapeUtil {
    static type = "video";
    static props = videoShapeProps;
    static migrations = videoShapeMigrations;
    canEdit() {
      return true;
    }
    isAspectRatioLocked() {
      return true;
    }
    getDefaultProps() {
      return {
        w: 100,
        h: 100,
        assetId: null,
        time: 0,
        playing: true,
        url: ""
      };
    }
    component(shape) {
      return /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(VideoShape, { shape });
    }
    indicator(shape) {
      return /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("rect", { width: toDomPrecision(shape.props.w), height: toDomPrecision(shape.props.h) });
    }
    async toSvg(shape) {
      const image = await serializeVideo(this.editor, shape);
      if (!image) return null;
      return /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("image", { href: image, width: shape.props.w, height: shape.props.h });
    }
  };
  var VideoShape = (0, import_react86.memo)(function VideoShape2({ shape }) {
    const editor = useEditor();
    const showControls = editor.getShapeGeometry(shape).bounds.w * editor.getZoomLevel() >= 110;
    const isEditing = useIsEditing(shape.id);
    const prefersReducedMotion = usePrefersReducedMotion();
    const { Spinner: Spinner2 } = useEditorComponents();
    const { asset, url } = useImageOrVideoAsset({
      shapeId: shape.id,
      assetId: shape.props.assetId
    });
    const rVideo = (0, import_react86.useRef)(null);
    const [isLoaded, setIsLoaded] = (0, import_react86.useState)(false);
    const [isFullscreen, setIsFullscreen] = (0, import_react86.useState)(false);
    (0, import_react86.useEffect)(() => {
      const fullscreenChange = () => setIsFullscreen(document.fullscreenElement === rVideo.current);
      document.addEventListener("fullscreenchange", fullscreenChange);
      return () => document.removeEventListener("fullscreenchange", fullscreenChange);
    });
    const handleLoadedData = (0, import_react86.useCallback)((e) => {
      const video = e.currentTarget;
      if (!video) return;
      setIsLoaded(true);
    }, []);
    (0, import_react86.useEffect)(() => {
      const video = rVideo.current;
      if (!video) return;
      if (isEditing) {
        if (document.activeElement !== video) {
          video.focus();
        }
      }
    }, [isEditing, isLoaded]);
    (0, import_react86.useEffect)(() => {
      if (prefersReducedMotion) {
        const video = rVideo.current;
        if (!video) return;
        video.pause();
        video.currentTime = 0;
      }
    }, [rVideo, prefersReducedMotion]);
    return /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)(import_jsx_runtime113.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
        HTMLContainer,
        {
          id: shape.id,
          style: {
            color: "var(--color-text-3)",
            backgroundColor: asset ? "transparent" : "var(--color-low)",
            border: asset ? "none" : "1px solid var(--color-low-border)"
          },
          children: /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("div", { className: "tl-counter-scaled", children: /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("div", { className: "tl-video-container", children: !asset ? /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(BrokenAssetIcon, {}) : Spinner2 && !asset.props.src ? /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(Spinner2, {}) : url ? /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)(import_jsx_runtime113.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
              "video",
              {
                ref: rVideo,
                style: isEditing ? { pointerEvents: "all" } : !isLoaded ? { display: "none" } : void 0,
                className: (0, import_classnames25.default)("tl-video", `tl-video-shape-${shape.id.split(":")[1]}`, {
                  "tl-video-is-fullscreen": isFullscreen
                }),
                width: "100%",
                height: "100%",
                draggable: false,
                playsInline: true,
                autoPlay: true,
                muted: true,
                loop: true,
                disableRemotePlayback: true,
                disablePictureInPicture: true,
                controls: isEditing && showControls,
                onLoadedData: handleLoadedData,
                hidden: !isLoaded,
                children: /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("source", { src: url })
              }
            ),
            !isLoaded && Spinner2 && /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(Spinner2, {})
          ] }) : null }) })
        }
      ),
      "url" in shape.props && shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(HyperlinkButton, { url: shape.props.url })
    ] });
  });
  async function serializeVideo(editor, shape) {
    const assetUrl = await editor.resolveAssetUrl(shape.props.assetId, {
      shouldResolveToOriginal: true
    });
    if (!assetUrl) return null;
    const video = await MediaHelpers.loadVideo(assetUrl);
    return MediaHelpers.getVideoFrameAsDataUrl(video, 0);
  }

  // node_modules/tldraw/dist-esm/lib/defaultShapeUtils.mjs
  var defaultShapeUtils = [
    TextShapeUtil,
    BookmarkShapeUtil,
    DrawShapeUtil,
    GeoShapeUtil,
    NoteShapeUtil,
    LineShapeUtil,
    FrameShapeUtil,
    ArrowShapeUtil,
    HighlightShapeUtil,
    EmbedShapeUtil,
    ImageShapeUtil,
    VideoShapeUtil
  ];

  // node_modules/tldraw/dist-esm/lib/defaultSideEffects.mjs
  function registerDefaultSideEffects(editor) {
    return editor.sideEffects.register({
      instance_page_state: {
        afterChange: (prev, next) => {
          if (prev.croppingShapeId !== next.croppingShapeId) {
            const isInCroppingState = editor.isIn("select.crop");
            if (!prev.croppingShapeId && next.croppingShapeId) {
              if (!isInCroppingState) {
                editor.setCurrentTool("select.crop.idle");
              }
            } else if (prev.croppingShapeId && !next.croppingShapeId) {
              if (isInCroppingState) {
                editor.setCurrentTool("select.idle");
              }
            }
          }
          if (prev.editingShapeId !== next.editingShapeId) {
            if (!prev.editingShapeId && next.editingShapeId) {
              if (!editor.isIn("select.editing_shape")) {
                const shape = editor.getEditingShape();
                if (shape && shape.type === "text" && editor.isInAny("text.pointing", "select.resizing") && editor.getInstanceState().isToolLocked) {
                  editor.setCurrentTool("select.editing_shape", {
                    isCreatingTextWhileToolLocked: true
                  });
                } else {
                  editor.setCurrentTool("select.editing_shape");
                }
              }
            } else if (prev.editingShapeId && !next.editingShapeId) {
              if (editor.isIn("select.editing_shape")) {
                editor.setCurrentTool("select.idle");
              }
            }
          }
        }
      }
    });
  }

  // node_modules/tldraw/dist-esm/lib/tools/EraserTool/childStates/Erasing.mjs
  var Erasing = class extends StateNode {
    static id = "erasing";
    info = {};
    scribbleId = "id";
    markId = "";
    excludedShapeIds = /* @__PURE__ */ new Set();
    onEnter(info) {
      this.markId = this.editor.markHistoryStoppingPoint("erase scribble begin");
      this.info = info;
      const { originPagePoint } = this.editor.inputs;
      this.excludedShapeIds = new Set(
        this.editor.getCurrentPageShapes().filter((shape) => {
          if (this.editor.isShapeOrAncestorLocked(shape)) return true;
          if (this.editor.isShapeOfType(shape, "group") || this.editor.isShapeOfType(shape, "frame")) {
            const pointInShapeShape = this.editor.getPointInShapeSpace(shape, originPagePoint);
            const geometry = this.editor.getShapeGeometry(shape);
            return geometry.bounds.containsPoint(pointInShapeShape);
          }
          return false;
        }).map((shape) => shape.id)
      );
      const scribble = this.editor.scribbles.addScribble({
        color: "muted-1",
        size: 12
      });
      this.scribbleId = scribble.id;
      this.update();
    }
    pushPointToScribble() {
      const { x, y } = this.editor.inputs.currentPagePoint;
      this.editor.scribbles.addPoint(this.scribbleId, x, y);
    }
    onExit() {
      this.editor.setErasingShapes([]);
      this.editor.scribbles.stop(this.scribbleId);
    }
    onPointerMove() {
      this.update();
    }
    onPointerUp() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.complete();
    }
    update() {
      const { editor, excludedShapeIds } = this;
      const erasingShapeIds = editor.getErasingShapeIds();
      const zoomLevel = editor.getZoomLevel();
      const currentPageShapes = editor.getCurrentPageRenderingShapesSorted();
      const {
        inputs: { currentPagePoint, previousPagePoint }
      } = editor;
      this.pushPointToScribble();
      const erasing = new Set(erasingShapeIds);
      const minDist = this.editor.options.hitTestMargin / zoomLevel;
      for (const shape of currentPageShapes) {
        if (editor.isShapeOfType(shape, "group")) continue;
        const pageMask = editor.getShapeMask(shape.id);
        if (pageMask && !pointInPolygon(currentPagePoint, pageMask)) {
          continue;
        }
        const geometry = editor.getShapeGeometry(shape);
        const pageTransform = editor.getShapePageTransform(shape);
        if (!geometry || !pageTransform) continue;
        const pt = pageTransform.clone().invert();
        const A = pt.applyToPoint(previousPagePoint);
        const B = pt.applyToPoint(currentPagePoint);
        const { bounds } = geometry;
        if (bounds.minX - minDist > Math.max(A.x, B.x) || bounds.minY - minDist > Math.max(A.y, B.y) || bounds.maxX + minDist < Math.min(A.x, B.x) || bounds.maxY + minDist < Math.min(A.y, B.y)) {
          continue;
        }
        if (geometry.hitTestLineSegment(A, B, minDist)) {
          erasing.add(editor.getOutermostSelectableShape(shape).id);
        }
      }
      this.editor.setErasingShapes([...erasing].filter((id) => !excludedShapeIds.has(id)));
    }
    complete() {
      const { editor } = this;
      editor.deleteShapes(editor.getCurrentPageState().erasingShapeIds);
      this.parent.transition("idle");
    }
    cancel() {
      const { editor } = this;
      editor.bailToMark(this.markId);
      this.parent.transition("idle", this.info);
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/EraserTool/childStates/Idle.mjs
  var Idle8 = class extends StateNode {
    static id = "idle";
    onPointerDown(info) {
      this.parent.transition("pointing", info);
    }
    onCancel() {
      this.editor.setCurrentTool("select");
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/EraserTool/childStates/Pointing.mjs
  var Pointing7 = class extends StateNode {
    static id = "pointing";
    onEnter() {
      const zoomLevel = this.editor.getZoomLevel();
      const currentPageShapesSorted = this.editor.getCurrentPageRenderingShapesSorted();
      const {
        inputs: { currentPagePoint }
      } = this.editor;
      const erasing = /* @__PURE__ */ new Set();
      const initialSize = erasing.size;
      for (let n = currentPageShapesSorted.length, i = n - 1; i >= 0; i--) {
        const shape = currentPageShapesSorted[i];
        if (this.editor.isShapeOrAncestorLocked(shape) || this.editor.isShapeOfType(shape, "group")) {
          continue;
        }
        if (this.editor.isPointInShape(shape, currentPagePoint, {
          hitInside: false,
          margin: this.editor.options.hitTestMargin / zoomLevel
        })) {
          const hitShape = this.editor.getOutermostSelectableShape(shape);
          if (this.editor.isShapeOfType(hitShape, "frame") && erasing.size > initialSize) {
            break;
          }
          erasing.add(hitShape.id);
        }
      }
      this.editor.setErasingShapes([...erasing]);
    }
    onLongPress(info) {
      this.startErasing(info);
    }
    onExit(_info, to) {
      if (to !== "erasing") {
        this.editor.setErasingShapes([]);
      }
    }
    onPointerMove(info) {
      if (this.editor.inputs.isDragging) {
        this.startErasing(info);
      }
    }
    onPointerUp() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.complete();
    }
    onInterrupt() {
      this.cancel();
    }
    startErasing(info) {
      this.parent.transition("erasing", info);
    }
    complete() {
      const erasingShapeIds = this.editor.getErasingShapeIds();
      if (erasingShapeIds.length) {
        this.editor.markHistoryStoppingPoint("erase end");
        this.editor.deleteShapes(erasingShapeIds);
      }
      this.parent.transition("idle");
    }
    cancel() {
      this.parent.transition("idle");
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/EraserTool/EraserTool.mjs
  var EraserTool = class extends StateNode {
    static id = "eraser";
    static initial = "idle";
    static isLockable = false;
    static children() {
      return [Idle8, Pointing7, Erasing];
    }
    onEnter() {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/HandTool/childStates/Dragging.mjs
  var Dragging = class extends StateNode {
    static id = "dragging";
    initialCamera = new Vec();
    onEnter() {
      this.initialCamera = Vec.From(this.editor.getCamera());
      this.update();
    }
    onPointerMove() {
      this.update();
    }
    onPointerUp() {
      this.complete();
    }
    onCancel() {
      this.parent.transition("idle");
    }
    onComplete() {
      this.complete();
    }
    update() {
      const { initialCamera, editor } = this;
      const { currentScreenPoint, originScreenPoint } = editor.inputs;
      const delta = Vec.Sub(currentScreenPoint, originScreenPoint).div(editor.getZoomLevel());
      if (delta.len2() === 0) return;
      editor.setCamera(initialCamera.clone().add(delta));
    }
    complete() {
      const { editor } = this;
      const { pointerVelocity } = editor.inputs;
      const velocityAtPointerUp = Math.min(pointerVelocity.len(), 2);
      if (velocityAtPointerUp > 0.1) {
        this.editor.slideCamera({ speed: velocityAtPointerUp, direction: pointerVelocity });
      }
      this.parent.transition("idle");
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/HandTool/childStates/Idle.mjs
  var Idle9 = class extends StateNode {
    static id = "idle";
    onEnter() {
      this.editor.setCursor({ type: "grab", rotation: 0 });
    }
    onPointerDown(info) {
      this.parent.transition("pointing", info);
    }
    onCancel() {
      this.editor.setCurrentTool("select");
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/HandTool/childStates/Pointing.mjs
  var Pointing8 = class extends StateNode {
    static id = "pointing";
    onEnter() {
      this.editor.stopCameraAnimation();
      this.editor.setCursor({ type: "grabbing", rotation: 0 });
    }
    onLongPress() {
      this.startDragging();
    }
    onPointerMove() {
      if (this.editor.inputs.isDragging) {
        this.startDragging();
      }
    }
    startDragging() {
      this.parent.transition("dragging");
    }
    onPointerUp() {
      this.complete();
    }
    onCancel() {
      this.complete();
    }
    onComplete() {
      this.complete();
    }
    onInterrupt() {
      this.complete();
    }
    complete() {
      this.parent.transition("idle");
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/HandTool/HandTool.mjs
  var HandTool = class extends StateNode {
    static id = "hand";
    static initial = "idle";
    static isLockable = false;
    static children() {
      return [Idle9, Pointing8, Dragging];
    }
    onDoubleClick(info) {
      if (info.phase === "settle") {
        const { currentScreenPoint } = this.editor.inputs;
        this.editor.zoomIn(currentScreenPoint, {
          animation: { duration: 220, easing: EASINGS.easeOutQuint }
        });
      }
    }
    onTripleClick(info) {
      if (info.phase === "settle") {
        const { currentScreenPoint } = this.editor.inputs;
        this.editor.zoomOut(currentScreenPoint, {
          animation: { duration: 320, easing: EASINGS.easeOutQuint }
        });
      }
    }
    onQuadrupleClick(info) {
      if (info.phase === "settle") {
        const zoomLevel = this.editor.getZoomLevel();
        const {
          inputs: { currentScreenPoint }
        } = this.editor;
        if (zoomLevel === 1) {
          this.editor.zoomToFit({ animation: { duration: 400, easing: EASINGS.easeOutQuint } });
        } else {
          this.editor.resetZoom(currentScreenPoint, {
            animation: { duration: 320, easing: EASINGS.easeOutQuint }
          });
        }
      }
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/LaserTool/childStates/Idle.mjs
  var Idle10 = class extends StateNode {
    static id = "idle";
    onPointerDown(info) {
      this.parent.transition("lasering", info);
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/LaserTool/childStates/Lasering.mjs
  var Lasering = class extends StateNode {
    static id = "lasering";
    scribbleId = "id";
    onEnter() {
      const scribble = this.editor.scribbles.addScribble({
        color: "laser",
        opacity: 0.7,
        size: 4,
        delay: this.editor.options.laserDelayMs,
        shrink: 0.05,
        taper: true
      });
      this.scribbleId = scribble.id;
      this.pushPointToScribble();
    }
    onExit() {
      this.editor.scribbles.stop(this.scribbleId);
    }
    onPointerMove() {
      this.pushPointToScribble();
    }
    onPointerUp() {
      this.complete();
    }
    pushPointToScribble() {
      const { x, y } = this.editor.inputs.currentPagePoint;
      this.editor.scribbles.addPoint(this.scribbleId, x, y);
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.complete();
    }
    complete() {
      this.parent.transition("idle");
    }
    cancel() {
      this.parent.transition("idle");
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/LaserTool/LaserTool.mjs
  var LaserTool = class extends StateNode {
    static id = "laser";
    static initial = "idle";
    static children() {
      return [Idle10, Lasering];
    }
    static isLockable = false;
    onEnter() {
      this.editor.setCursor({ type: "cross", rotation: 0 });
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Brushing.mjs
  var Brushing = class extends StateNode {
    static id = "brushing";
    info = {};
    initialSelectedShapeIds = [];
    excludedShapeIds = /* @__PURE__ */ new Set();
    isWrapMode = false;
    // The shape that the brush started on
    initialStartShape = null;
    onEnter(info) {
      const { altKey: altKey2, currentPagePoint } = this.editor.inputs;
      this.isWrapMode = this.editor.user.getIsWrapMode();
      if (altKey2) {
        this.parent.transition("scribble_brushing", info);
        return;
      }
      this.excludedShapeIds = new Set(
        this.editor.getCurrentPageShapes().filter(
          (shape) => this.editor.isShapeOfType(shape, "group") || this.editor.isShapeOrAncestorLocked(shape)
        ).map((shape) => shape.id)
      );
      this.info = info;
      this.initialSelectedShapeIds = this.editor.getSelectedShapeIds().slice();
      this.initialStartShape = this.editor.getShapesAtPoint(currentPagePoint)[0];
      this.hitTestShapes();
    }
    onExit() {
      this.initialSelectedShapeIds = [];
      this.editor.updateInstanceState({ brush: null });
    }
    onTick({ elapsed }) {
      const { editor } = this;
      editor.edgeScrollManager.updateEdgeScrolling(elapsed);
    }
    onPointerMove() {
      this.hitTestShapes();
    }
    onPointerUp() {
      this.complete();
    }
    onComplete() {
      this.complete();
    }
    onCancel(info) {
      this.editor.setSelectedShapes(this.initialSelectedShapeIds);
      this.parent.transition("idle", info);
    }
    onKeyDown(info) {
      if (this.editor.inputs.altKey) {
        this.parent.transition("scribble_brushing", info);
      } else {
        this.hitTestShapes();
      }
    }
    onKeyUp() {
      this.hitTestShapes();
    }
    complete() {
      this.hitTestShapes();
      this.parent.transition("idle");
    }
    hitTestShapes() {
      const { editor, excludedShapeIds, isWrapMode } = this;
      const {
        inputs: { originPagePoint, currentPagePoint, shiftKey, ctrlKey }
      } = editor;
      const results = new Set(shiftKey ? this.initialSelectedShapeIds : []);
      const isWrapping = isWrapMode ? !ctrlKey : ctrlKey;
      const brush = Box.FromPoints([originPagePoint, currentPagePoint]);
      const { corners } = brush;
      let A, B, shape, pageBounds, pageTransform, localCorners;
      const currentPageShapes = editor.getCurrentPageRenderingShapesSorted();
      const currentPageId = editor.getCurrentPageId();
      testAllShapes: for (let i = 0, n = currentPageShapes.length; i < n; i++) {
        shape = currentPageShapes[i];
        if (excludedShapeIds.has(shape.id) || results.has(shape.id)) continue testAllShapes;
        pageBounds = editor.getShapePageBounds(shape);
        if (!pageBounds) continue testAllShapes;
        if (brush.contains(pageBounds)) {
          this.handleHit(shape, currentPagePoint, currentPageId, results, corners);
          continue testAllShapes;
        }
        if (isWrapping || editor.isShapeOfType(shape, "frame")) {
          continue testAllShapes;
        }
        if (brush.collides(pageBounds)) {
          pageTransform = editor.getShapePageTransform(shape);
          if (!pageTransform) continue testAllShapes;
          localCorners = pageTransform.clone().invert().applyToPoints(corners);
          const geometry = editor.getShapeGeometry(shape);
          hitTestBrushEdges: for (let i2 = 0; i2 < 4; i2++) {
            A = localCorners[i2];
            B = localCorners[(i2 + 1) % 4];
            if (geometry.hitTestLineSegment(A, B, 0)) {
              this.handleHit(shape, currentPagePoint, currentPageId, results, corners);
              break hitTestBrushEdges;
            }
          }
        }
      }
      const currentBrush = editor.getInstanceState().brush;
      if (!currentBrush || !brush.equals(currentBrush)) {
        editor.updateInstanceState({ brush: { ...brush.toJson() } });
      }
      const current = editor.getSelectedShapeIds();
      if (current.length !== results.size || current.some((id) => !results.has(id))) {
        editor.setSelectedShapes(Array.from(results));
      }
    }
    onInterrupt() {
      this.editor.updateInstanceState({ brush: null });
    }
    handleHit(shape, currentPagePoint, currentPageId, results, corners) {
      if (shape.parentId === currentPageId) {
        results.add(shape.id);
        return;
      }
      const selectedShape = this.editor.getOutermostSelectableShape(shape);
      const pageMask = this.editor.getShapeMask(selectedShape.id);
      if (pageMask && !polygonsIntersect(pageMask, corners) && !pointInPolygon(currentPagePoint, pageMask)) {
        return;
      }
      results.add(selectedShape.id);
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingResizeHandle.mjs
  var CursorTypeMap = {
    bottom: "ns-resize",
    top: "ns-resize",
    left: "ew-resize",
    right: "ew-resize",
    bottom_left: "nesw-resize",
    bottom_right: "nwse-resize",
    top_left: "nwse-resize",
    top_right: "nesw-resize",
    bottom_left_rotate: "swne-rotate",
    bottom_right_rotate: "senw-rotate",
    top_left_rotate: "nwse-rotate",
    top_right_rotate: "nesw-rotate",
    mobile_rotate: "grabbing"
  };
  var PointingResizeHandle = class extends StateNode {
    static id = "pointing_resize_handle";
    info = {};
    updateCursor() {
      const selected = this.editor.getSelectedShapes();
      const cursorType = CursorTypeMap[this.info.handle];
      this.editor.setCursor({
        type: cursorType,
        rotation: selected.length === 1 ? this.editor.getSelectionRotation() : 0
      });
    }
    onEnter(info) {
      this.info = info;
      this.updateCursor();
    }
    onPointerMove() {
      if (this.editor.inputs.isDragging) {
        this.startResizing();
      }
    }
    onLongPress() {
      this.startResizing();
    }
    startResizing() {
      if (this.editor.getIsReadonly()) return;
      this.parent.transition("resizing", this.info);
    }
    onPointerUp() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.cancel();
    }
    onInterrupt() {
      this.cancel();
    }
    complete() {
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, {});
      } else {
        this.parent.transition("idle");
      }
    }
    cancel() {
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, {});
      } else {
        this.parent.transition("idle");
      }
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/crop-constants.mjs
  var MIN_CROP_SIZE = 8;

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/Cropping.mjs
  var Cropping = class extends StateNode {
    static id = "cropping";
    info = {};
    markId = "";
    snapshot = {};
    onEnter(info) {
      this.info = info;
      this.markId = this.editor.markHistoryStoppingPoint("cropping");
      this.snapshot = this.createSnapshot();
      this.updateShapes();
    }
    onPointerMove() {
      this.updateShapes();
    }
    onPointerUp() {
      this.complete();
    }
    onComplete() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    updateCursor() {
      const selectedShape = this.editor.getSelectedShapes()[0];
      if (!selectedShape) return;
      const cursorType = CursorTypeMap[this.info.handle];
      this.editor.setCursor({ type: cursorType, rotation: this.editor.getSelectionRotation() });
    }
    getDefaultCrop() {
      return {
        topLeft: { x: 0, y: 0 },
        bottomRight: { x: 1, y: 1 }
      };
    }
    updateShapes() {
      const { shape, cursorHandleOffset } = this.snapshot;
      if (!shape) return;
      const util = this.editor.getShapeUtil("image");
      if (!util) return;
      const props = shape.props;
      const currentPagePoint = this.editor.inputs.currentPagePoint.clone().sub(cursorHandleOffset);
      const originPagePoint = this.editor.inputs.originPagePoint.clone().sub(cursorHandleOffset);
      const change = currentPagePoint.clone().sub(originPagePoint).rot(-shape.rotation);
      const crop = props.crop ?? this.getDefaultCrop();
      const newCrop = structuredClone(crop);
      const newPoint = new Vec(shape.x, shape.y);
      const pointDelta = new Vec(0, 0);
      const w = 1 / (crop.bottomRight.x - crop.topLeft.x) * props.w;
      const h = 1 / (crop.bottomRight.y - crop.topLeft.y) * props.h;
      let hasCropChanged = false;
      switch (this.info.handle) {
        case "top":
        case "top_left":
        case "top_right": {
          if (h < MIN_CROP_SIZE) break;
          hasCropChanged = true;
          newCrop.topLeft.y = newCrop.topLeft.y + change.y / h;
          const heightAfterCrop = h * (newCrop.bottomRight.y - newCrop.topLeft.y);
          if (heightAfterCrop < MIN_CROP_SIZE) {
            newCrop.topLeft.y = newCrop.bottomRight.y - MIN_CROP_SIZE / h;
            pointDelta.y = (newCrop.topLeft.y - crop.topLeft.y) * h;
          } else {
            if (newCrop.topLeft.y <= 0) {
              newCrop.topLeft.y = 0;
              pointDelta.y = (newCrop.topLeft.y - crop.topLeft.y) * h;
            } else {
              pointDelta.y = change.y;
            }
          }
          break;
        }
        case "bottom":
        case "bottom_left":
        case "bottom_right": {
          if (h < MIN_CROP_SIZE) break;
          hasCropChanged = true;
          newCrop.bottomRight.y = Math.min(1, newCrop.bottomRight.y + change.y / h);
          const heightAfterCrop = h * (newCrop.bottomRight.y - newCrop.topLeft.y);
          if (heightAfterCrop < MIN_CROP_SIZE) {
            newCrop.bottomRight.y = newCrop.topLeft.y + MIN_CROP_SIZE / h;
          }
          break;
        }
      }
      switch (this.info.handle) {
        case "left":
        case "top_left":
        case "bottom_left": {
          if (w < MIN_CROP_SIZE) break;
          hasCropChanged = true;
          newCrop.topLeft.x = newCrop.topLeft.x + change.x / w;
          const widthAfterCrop = w * (newCrop.bottomRight.x - newCrop.topLeft.x);
          if (widthAfterCrop < MIN_CROP_SIZE) {
            newCrop.topLeft.x = newCrop.bottomRight.x - MIN_CROP_SIZE / w;
            pointDelta.x = (newCrop.topLeft.x - crop.topLeft.x) * w;
          } else {
            if (newCrop.topLeft.x <= 0) {
              newCrop.topLeft.x = 0;
              pointDelta.x = (newCrop.topLeft.x - crop.topLeft.x) * w;
            } else {
              pointDelta.x = change.x;
            }
          }
          break;
        }
        case "right":
        case "top_right":
        case "bottom_right": {
          if (w < MIN_CROP_SIZE) break;
          hasCropChanged = true;
          newCrop.bottomRight.x = Math.min(1, newCrop.bottomRight.x + change.x / w);
          const widthAfterCrop = w * (newCrop.bottomRight.x - newCrop.topLeft.x);
          if (widthAfterCrop < MIN_CROP_SIZE) {
            newCrop.bottomRight.x = newCrop.topLeft.x + MIN_CROP_SIZE / w;
          }
          break;
        }
      }
      if (!hasCropChanged) return;
      newPoint.add(pointDelta.rot(shape.rotation));
      const partial = {
        id: shape.id,
        type: shape.type,
        x: newPoint.x,
        y: newPoint.y,
        props: {
          crop: newCrop,
          w: (newCrop.bottomRight.x - newCrop.topLeft.x) * w,
          h: (newCrop.bottomRight.y - newCrop.topLeft.y) * h
        }
      };
      this.editor.updateShapes([partial]);
      this.updateCursor();
    }
    complete() {
      this.updateShapes();
      kickoutOccludedShapes(this.editor, [this.snapshot.shape.id]);
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
      } else {
        this.editor.setCroppingShape(null);
        this.editor.setCurrentTool("select.idle");
      }
    }
    cancel() {
      this.editor.bailToMark(this.markId);
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
      } else {
        this.editor.setCroppingShape(null);
        this.editor.setCurrentTool("select.idle");
      }
    }
    createSnapshot() {
      const selectionRotation = this.editor.getSelectionRotation();
      const {
        inputs: { originPagePoint }
      } = this.editor;
      const shape = this.editor.getOnlySelectedShape();
      const selectionBounds = this.editor.getSelectionRotatedPageBounds();
      const dragHandlePoint = Vec.RotWith(
        selectionBounds.getHandlePoint(this.info.handle),
        selectionBounds.point,
        selectionRotation
      );
      const cursorHandleOffset = Vec.Sub(originPagePoint, dragHandlePoint);
      return {
        shape,
        cursorHandleOffset
      };
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/selection-logic/getHitShapeOnCanvasPointerDown.mjs
  function getHitShapeOnCanvasPointerDown(editor, hitLabels = false) {
    const zoomLevel = editor.getZoomLevel();
    const {
      inputs: { currentPagePoint }
    } = editor;
    return (
      // hovered shape at point
      // selected shape at point
      editor.getShapeAtPoint(currentPagePoint, {
        hitInside: false,
        hitLabels,
        margin: editor.options.hitTestMargin / zoomLevel,
        renderingOnly: true
      }) ?? editor.getSelectedShapeAtPoint(currentPagePoint)
    );
  }

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/crop_helpers.mjs
  function getTranslateCroppedImageChange(editor, shape, delta) {
    if (!shape) {
      throw Error("Needs to translate a cropped shape!");
    }
    const { crop: oldCrop } = shape.props;
    if (!oldCrop) {
      return;
    }
    const flatten = editor.inputs.shiftKey ? Math.abs(delta.x) < Math.abs(delta.y) ? "x" : "y" : null;
    if (flatten === "x") {
      delta.x = 0;
    } else if (flatten === "y") {
      delta.y = 0;
    }
    delta.rot(-shape.rotation);
    const w = 1 / (oldCrop.bottomRight.x - oldCrop.topLeft.x) * shape.props.w;
    const h = 1 / (oldCrop.bottomRight.y - oldCrop.topLeft.y) * shape.props.h;
    const yCrop = oldCrop.bottomRight.y - oldCrop.topLeft.y;
    const xCrop = oldCrop.bottomRight.x - oldCrop.topLeft.x;
    const newCrop = structuredClone(oldCrop);
    newCrop.topLeft.x = Math.min(1 - xCrop, Math.max(0, newCrop.topLeft.x - delta.x / w));
    newCrop.topLeft.y = Math.min(1 - yCrop, Math.max(0, newCrop.topLeft.y - delta.y / h));
    newCrop.bottomRight.x = newCrop.topLeft.x + xCrop;
    newCrop.bottomRight.y = newCrop.topLeft.y + yCrop;
    const partial = {
      id: shape.id,
      type: shape.type,
      props: {
        crop: newCrop
      }
    };
    return partial;
  }

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/Idle.mjs
  var Idle11 = class extends StateNode {
    static id = "idle";
    onEnter() {
      this.editor.setCursor({ type: "default", rotation: 0 });
      const onlySelectedShape = this.editor.getOnlySelectedShape();
      if (onlySelectedShape) {
        this.editor.setCroppingShape(onlySelectedShape.id);
      }
    }
    onExit() {
      this.editor.setCursor({ type: "default", rotation: 0 });
    }
    onCancel() {
      this.editor.setCroppingShape(null);
      this.editor.setCurrentTool("select.idle", {});
    }
    onPointerDown(info) {
      if (info.accelKey) {
        this.cancel();
        this.editor.root.handleEvent(info);
        return;
      }
      switch (info.target) {
        case "canvas": {
          const hitShape = getHitShapeOnCanvasPointerDown(this.editor);
          if (hitShape && !this.editor.isShapeOfType(hitShape, "group")) {
            this.onPointerDown({
              ...info,
              shape: hitShape,
              target: "shape"
            });
            return;
          }
          this.cancel();
          this.editor.root.handleEvent(info);
          break;
        }
        case "shape": {
          if (info.shape.id === this.editor.getCroppingShapeId()) {
            this.editor.setCurrentTool("select.crop.pointing_crop", info);
            return;
          } else {
            if (this.editor.getShapeUtil(info.shape)?.canCrop(info.shape)) {
              this.editor.setCroppingShape(info.shape.id);
              this.editor.setSelectedShapes([info.shape.id]);
              this.editor.setCurrentTool("select.crop.pointing_crop", info);
            } else {
              this.cancel();
              this.editor.root.handleEvent(info);
            }
          }
          break;
        }
        case "selection": {
          switch (info.handle) {
            case "mobile_rotate":
            case "top_left_rotate":
            case "top_right_rotate":
            case "bottom_left_rotate":
            case "bottom_right_rotate": {
              this.editor.setCurrentTool("select.pointing_rotate_handle", {
                ...info,
                onInteractionEnd: "select.crop.idle"
              });
              break;
            }
            case "top":
            case "right":
            case "bottom":
            case "left":
            case "top_left":
            case "top_right":
            case "bottom_left":
            case "bottom_right": {
              this.editor.setCurrentTool("select.crop.pointing_crop_handle", {
                ...info,
                onInteractionEnd: "select.crop.idle"
              });
              break;
            }
            default: {
              this.cancel();
            }
          }
          break;
        }
      }
    }
    onDoubleClick(info) {
      if (this.editor.inputs.shiftKey || info.phase !== "up") return;
      const croppingShapeId = this.editor.getCroppingShapeId();
      if (!croppingShapeId) return;
      const shape = this.editor.getShape(croppingShapeId);
      if (!shape) return;
      const util = this.editor.getShapeUtil(shape);
      if (!util) return;
      if (info.target === "selection") {
        util.onDoubleClickEdge?.(shape);
        return;
      }
      this.cancel();
      this.editor.root.handleEvent(info);
    }
    onKeyDown() {
      this.nudgeCroppingImage(false);
    }
    onKeyRepeat() {
      this.nudgeCroppingImage(true);
    }
    onKeyUp(info) {
      switch (info.code) {
        case "Enter": {
          this.editor.setCroppingShape(null);
          this.editor.setCurrentTool("select.idle", {});
          break;
        }
      }
    }
    cancel() {
      this.editor.setCroppingShape(null);
      this.editor.setCurrentTool("select.idle", {});
    }
    nudgeCroppingImage(ephemeral = false) {
      const {
        editor: {
          inputs: { keys }
        }
      } = this;
      const shiftKey = keys.has("ShiftLeft");
      const delta = new Vec(0, 0);
      if (keys.has("ArrowLeft")) delta.x += 1;
      if (keys.has("ArrowRight")) delta.x -= 1;
      if (keys.has("ArrowUp")) delta.y += 1;
      if (keys.has("ArrowDown")) delta.y -= 1;
      if (delta.equals(new Vec(0, 0))) return;
      if (shiftKey) delta.mul(10);
      const shape = this.editor.getShape(this.editor.getCroppingShapeId());
      if (!shape) return;
      const partial = getTranslateCroppedImageChange(this.editor, shape, delta);
      if (partial) {
        if (!ephemeral) {
          this.editor.markHistoryStoppingPoint("translate crop");
        }
        this.editor.updateShapes([partial]);
      }
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/PointingCrop.mjs
  var PointingCrop = class extends StateNode {
    static id = "pointing_crop";
    onCancel() {
      this.editor.setCurrentTool("select.crop.idle", {});
    }
    onPointerMove(info) {
      if (this.editor.inputs.isDragging) {
        this.editor.setCurrentTool("select.crop.translating_crop", info);
      }
    }
    onPointerUp(info) {
      this.editor.setCurrentTool("select.crop.idle", info);
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/PointingCropHandle.mjs
  var PointingCropHandle = class extends StateNode {
    static id = "pointing_crop_handle";
    info = {};
    onEnter(info) {
      this.info = info;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      const selectedShape = this.editor.getSelectedShapes()[0];
      if (!selectedShape) return;
      const cursorType = CursorTypeMap[this.info.handle];
      this.editor.setCursor({ type: cursorType, rotation: this.editor.getSelectionRotation() });
      this.editor.setCroppingShape(selectedShape.id);
    }
    onExit() {
      this.editor.setCursor({ type: "default", rotation: 0 });
      this.parent.setCurrentToolIdMask(void 0);
    }
    onPointerMove() {
      if (this.editor.inputs.isDragging) {
        this.startCropping();
      }
    }
    onLongPress() {
      this.startCropping();
    }
    startCropping() {
      if (this.editor.getIsReadonly()) return;
      this.parent.transition("cropping", {
        ...this.info,
        onInteractionEnd: this.info.onInteractionEnd
      });
    }
    onPointerUp() {
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
      } else {
        this.editor.setCroppingShape(null);
        this.editor.setCurrentTool("select.idle");
      }
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.cancel();
    }
    onInterrupt() {
      this.cancel();
    }
    cancel() {
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
      } else {
        this.editor.setCroppingShape(null);
        this.editor.setCurrentTool("select.idle");
      }
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/TranslatingCrop.mjs
  var TranslatingCrop = class extends StateNode {
    static id = "translating_crop";
    info = {};
    markId = "";
    snapshot = {};
    onEnter(info) {
      this.info = info;
      this.snapshot = this.createSnapshot();
      this.markId = this.editor.markHistoryStoppingPoint("translating_crop");
      this.editor.setCursor({ type: "move", rotation: 0 });
      this.updateShapes();
    }
    onExit() {
      this.editor.setCursor({ type: "default", rotation: 0 });
    }
    onPointerMove() {
      this.updateShapes();
    }
    onPointerUp() {
      this.complete();
    }
    onComplete() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    onKeyDown(info) {
      switch (info.key) {
        case "Alt":
        case "Shift": {
          this.updateShapes();
          return;
        }
      }
    }
    onKeyUp(info) {
      switch (info.key) {
        case "Enter": {
          this.complete();
          return;
        }
        case "Alt":
        case "Shift": {
          this.updateShapes();
        }
      }
    }
    complete() {
      this.updateShapes();
      this.editor.setCurrentTool("select.crop.idle", this.info);
    }
    cancel() {
      this.editor.bailToMark(this.markId);
      this.editor.setCurrentTool("select.crop.idle", this.info);
    }
    createSnapshot() {
      const shape = this.editor.getOnlySelectedShape();
      return { shape };
    }
    updateShapes() {
      const shape = this.snapshot.shape;
      if (!shape) return;
      const { originPagePoint, currentPagePoint } = this.editor.inputs;
      const delta = currentPagePoint.clone().sub(originPagePoint);
      const partial = getTranslateCroppedImageChange(this.editor, shape, delta);
      if (partial) {
        this.editor.updateShapes([partial]);
      }
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/Crop.mjs
  var Crop = class extends StateNode {
    static id = "crop";
    static initial = "idle";
    static children() {
      return [Idle11, TranslatingCrop, PointingCrop, PointingCropHandle, Cropping];
    }
    markId = "";
    onEnter() {
      this.didExit = false;
      this.markId = this.editor.markHistoryStoppingPoint("crop");
    }
    didExit = false;
    onExit() {
      if (!this.didExit) {
        this.didExit = true;
        this.editor.squashToMark(this.markId);
      }
    }
    onCancel() {
      if (!this.didExit) {
        this.didExit = true;
        this.editor.bailToMark(this.markId);
      }
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/DraggingHandle.mjs
  var DraggingHandle = class extends StateNode {
    static id = "dragging_handle";
    shapeId = "";
    initialHandle = {};
    initialAdjacentHandle = null;
    initialPagePoint = {};
    markId = "";
    initialPageTransform;
    initialPageRotation;
    info = {};
    isPrecise = false;
    isPreciseId = null;
    pointingId = null;
    onEnter(info) {
      const { shape, isCreating, creatingMarkId, handle } = info;
      this.info = info;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.shapeId = shape.id;
      this.markId = "";
      if (isCreating) {
        if (creatingMarkId) {
          this.markId = creatingMarkId;
        } else {
          const markId = this.editor.getMarkIdMatching(
            `creating:${this.editor.getOnlySelectedShapeId()}`
          );
          if (markId) {
            this.markId = markId;
          }
        }
      } else {
        this.markId = this.editor.markHistoryStoppingPoint("dragging handle");
      }
      this.initialHandle = structuredClone(handle);
      if (this.editor.isShapeOfType(shape, "line")) {
        if (this.initialHandle.type === "create") {
          this.editor.updateShape({
            ...shape,
            props: {
              points: {
                ...shape.props.points,
                [handle.index]: { id: handle.index, index: handle.index, x: handle.x, y: handle.y }
              }
            }
          });
          const handlesAfter = this.editor.getShapeHandles(shape);
          const handleAfter = handlesAfter.find((h) => h.index === handle.index);
          this.initialHandle = structuredClone(handleAfter);
        }
      }
      this.initialPageTransform = this.editor.getShapePageTransform(shape);
      this.initialPageRotation = this.initialPageTransform.rotation();
      this.initialPagePoint = this.editor.inputs.originPagePoint.clone();
      this.editor.setCursor({ type: isCreating ? "cross" : "grabbing", rotation: 0 });
      const handles = this.editor.getShapeHandles(shape).sort(sortByIndex);
      const index2 = handles.findIndex((h) => h.id === info.handle.id);
      this.initialAdjacentHandle = null;
      for (let i = index2 + 1; i < handles.length; i++) {
        const handle2 = handles[i];
        if (handle2.type === "vertex" && handle2.id !== "middle" && handle2.id !== info.handle.id) {
          this.initialAdjacentHandle = handle2;
          break;
        }
      }
      if (!this.initialAdjacentHandle) {
        for (let i = handles.length - 1; i >= 0; i--) {
          const handle2 = handles[i];
          if (handle2.type === "vertex" && handle2.id !== "middle" && handle2.id !== info.handle.id) {
            this.initialAdjacentHandle = handle2;
            break;
          }
        }
      }
      if (this.editor.isShapeOfType(shape, "arrow")) {
        const initialBinding = getArrowBindings(this.editor, shape)[info.handle.id];
        this.isPrecise = false;
        if (initialBinding) {
          this.editor.setHintingShapes([initialBinding.toId]);
          this.isPrecise = initialBinding.props.isPrecise;
          if (this.isPrecise) {
            this.isPreciseId = initialBinding.toId;
          } else {
            this.resetExactTimeout();
          }
        } else {
          this.editor.setHintingShapes([]);
        }
      }
      this.update();
      this.editor.select(this.shapeId);
    }
    // Only relevant to arrows
    exactTimeout = -1;
    // Only relevant to arrows
    resetExactTimeout() {
      if (this.exactTimeout !== -1) {
        this.clearExactTimeout();
      }
      this.exactTimeout = this.editor.timers.setTimeout(() => {
        if (this.getIsActive() && !this.isPrecise) {
          this.isPrecise = true;
          this.isPreciseId = this.pointingId;
          this.update();
        }
        this.exactTimeout = -1;
      }, 750);
    }
    // Only relevant to arrows
    clearExactTimeout() {
      if (this.exactTimeout !== -1) {
        clearTimeout(this.exactTimeout);
        this.exactTimeout = -1;
      }
    }
    onPointerMove() {
      this.update();
    }
    onKeyDown() {
      this.update();
    }
    onKeyUp() {
      this.update();
    }
    onPointerUp() {
      this.complete();
    }
    onComplete() {
      this.update();
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    onExit() {
      this.parent.setCurrentToolIdMask(void 0);
      this.editor.setHintingShapes([]);
      this.editor.snaps.clearIndicators();
      this.editor.setCursor({ type: "default", rotation: 0 });
    }
    complete() {
      this.editor.snaps.clearIndicators();
      kickoutOccludedShapes(this.editor, [this.shapeId]);
      const { onInteractionEnd } = this.info;
      if (this.editor.getInstanceState().isToolLocked && onInteractionEnd) {
        this.editor.setCurrentTool(onInteractionEnd, { shapeId: this.shapeId });
        return;
      }
      this.parent.transition("idle");
    }
    cancel() {
      this.editor.bailToMark(this.markId);
      this.editor.snaps.clearIndicators();
      const { onInteractionEnd } = this.info;
      if (onInteractionEnd) {
        this.editor.setCurrentTool(onInteractionEnd, { shapeId: this.shapeId });
        return;
      }
      this.parent.transition("idle");
    }
    update() {
      const { editor, shapeId, initialPagePoint } = this;
      const { initialHandle, initialPageRotation, initialAdjacentHandle } = this;
      const hintingShapeIds = this.editor.getHintingShapeIds();
      const isSnapMode = this.editor.user.getIsSnapMode();
      const {
        snaps,
        inputs: { currentPagePoint, shiftKey, ctrlKey, altKey: altKey2, pointerVelocity }
      } = editor;
      const initial = this.info.shape;
      const shape = editor.getShape(shapeId);
      if (!shape) return;
      const util = editor.getShapeUtil(shape);
      let point = currentPagePoint.clone().sub(initialPagePoint).rot(-initialPageRotation).add(initialHandle);
      if (shiftKey && initialAdjacentHandle && initialHandle.id !== "middle") {
        const angle = Vec.Angle(initialAdjacentHandle, point);
        const snappedAngle = snapAngle(angle, 24);
        const angleDifference = snappedAngle - angle;
        point = Vec.RotWith(point, initialAdjacentHandle, angleDifference);
      }
      editor.snaps.clearIndicators();
      let nextHandle = { ...initialHandle, x: point.x, y: point.y };
      if (initialHandle.canSnap && (isSnapMode ? !ctrlKey : ctrlKey)) {
        const pageTransform = editor.getShapePageTransform(shape.id);
        if (!pageTransform) throw Error("Expected a page transform");
        const snap = snaps.handles.snapHandle({ currentShapeId: shapeId, handle: nextHandle });
        if (snap) {
          snap.nudge.rot(-editor.getShapeParentTransform(shape).rotation());
          point.add(snap.nudge);
          nextHandle = { ...initialHandle, x: point.x, y: point.y };
        }
      }
      const changes = util.onHandleDrag?.(shape, {
        handle: nextHandle,
        isPrecise: this.isPrecise || altKey2,
        initial
      });
      const next = { id: shape.id, type: shape.type, ...changes };
      if (initialHandle.type === "vertex" && this.editor.isShapeOfType(shape, "arrow")) {
        const bindingAfter = getArrowBindings(editor, shape)[initialHandle.id];
        if (bindingAfter) {
          if (hintingShapeIds[0] !== bindingAfter.toId) {
            editor.setHintingShapes([bindingAfter.toId]);
            this.pointingId = bindingAfter.toId;
            this.isPrecise = pointerVelocity.len() < 0.5 || altKey2;
            this.isPreciseId = this.isPrecise ? bindingAfter.toId : null;
            this.resetExactTimeout();
          }
        } else {
          if (hintingShapeIds.length > 0) {
            editor.setHintingShapes([]);
            this.pointingId = null;
            this.isPrecise = false;
            this.isPreciseId = null;
            this.resetExactTimeout();
          }
        }
      }
      if (changes) {
        editor.updateShapes([next]);
      }
    }
  };

  // node_modules/tldraw/dist-esm/lib/utils/shapes/shapes.mjs
  function getTextLabels(geometry) {
    if (geometry.isLabel) {
      return [geometry];
    }
    if (geometry instanceof Group2d) {
      return geometry.children.filter((child) => child.isLabel);
    }
    return [];
  }

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/EditingShape.mjs
  var EditingShape = class extends StateNode {
    static id = "editing_shape";
    hitShapeForPointerUp = null;
    info = {};
    onEnter(info) {
      const editingShape = this.editor.getEditingShape();
      if (!editingShape) throw Error("Entered editing state without an editing shape");
      this.hitShapeForPointerUp = null;
      this.info = info;
      if (info.isCreatingTextWhileToolLocked) {
        this.parent.setCurrentToolIdMask("text");
      }
      updateHoveredShapeId(this.editor);
      this.editor.select(editingShape);
    }
    onExit() {
      const { editingShapeId } = this.editor.getCurrentPageState();
      if (!editingShapeId) return;
      this.editor.setEditingShape(null);
      updateHoveredShapeId.cancel();
      const shape = this.editor.getShape(editingShapeId);
      const util = this.editor.getShapeUtil(shape);
      util.onEditEnd?.(shape);
      if (this.info.isCreatingTextWhileToolLocked) {
        this.parent.setCurrentToolIdMask(void 0);
        this.editor.setCurrentTool("text", {});
      }
    }
    onPointerMove(info) {
      if (this.hitShapeForPointerUp && this.editor.inputs.isDragging) {
        if (this.editor.getIsReadonly()) return;
        if (this.hitShapeForPointerUp.isLocked) return;
        this.editor.select(this.hitShapeForPointerUp);
        this.parent.transition("translating", info);
        this.hitShapeForPointerUp = null;
        return;
      }
      switch (info.target) {
        case "shape":
        case "canvas": {
          updateHoveredShapeId(this.editor);
          return;
        }
      }
    }
    onPointerDown(info) {
      this.hitShapeForPointerUp = null;
      switch (info.target) {
        case "shape": {
          const { shape: selectingShape } = info;
          const editingShape = this.editor.getEditingShape();
          if (!editingShape) {
            throw Error("Expected an editing shape!");
          }
          const geometry = this.editor.getShapeUtil(selectingShape).getGeometry(selectingShape);
          const textLabels = getTextLabels(geometry);
          const textLabel = textLabels.length === 1 ? textLabels[0] : void 0;
          const isEmptyTextShape = this.editor.isShapeOfType(editingShape, "text") && editingShape.props.text.trim() === "";
          if (textLabel && !isEmptyTextShape) {
            const pointInShapeSpace = this.editor.getPointInShapeSpace(
              selectingShape,
              this.editor.inputs.currentPagePoint
            );
            if (textLabel.bounds.containsPoint(pointInShapeSpace, 0) && textLabel.hitTestPoint(pointInShapeSpace)) {
              if (selectingShape.id === editingShape.id) {
                return;
              } else {
                this.hitShapeForPointerUp = selectingShape;
                this.editor.markHistoryStoppingPoint("editing on pointer up");
                this.editor.select(selectingShape.id);
                return;
              }
            }
          } else {
            if (selectingShape.id === editingShape.id) {
              if (this.editor.isShapeOfType(selectingShape, "frame")) {
                this.editor.setEditingShape(null);
                this.parent.transition("idle", info);
              }
            } else {
              this.parent.transition("pointing_shape", info);
              return;
            }
            return;
          }
          break;
        }
      }
      this.parent.transition("idle", info);
      this.editor.root.handleEvent(info);
    }
    onPointerUp(info) {
      const hitShape = this.hitShapeForPointerUp;
      if (!hitShape) return;
      this.hitShapeForPointerUp = null;
      const util = this.editor.getShapeUtil(hitShape);
      if (hitShape.isLocked) return;
      if (this.editor.getIsReadonly()) {
        if (!util.canEditInReadOnly(hitShape)) {
          this.parent.transition("pointing_shape", info);
          return;
        }
      }
      this.editor.select(hitShape.id);
      this.editor.setEditingShape(hitShape.id);
      updateHoveredShapeId(this.editor);
    }
    onComplete(info) {
      this.parent.transition("idle", info);
    }
    onCancel(info) {
      this.parent.transition("idle", info);
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/selection-logic/getShouldEnterCropModeOnPointerDown.mjs
  function getShouldEnterCropMode(editor) {
    const onlySelectedShape = editor.getOnlySelectedShape();
    return !!(onlySelectedShape && !editor.isShapeOrAncestorLocked(onlySelectedShape) && editor.getShapeUtil(onlySelectedShape).canCrop(onlySelectedShape));
  }

  // node_modules/tldraw/dist-esm/lib/tools/selection-logic/selectOnCanvasPointerUp.mjs
  function selectOnCanvasPointerUp(editor, info) {
    const selectedShapeIds = editor.getSelectedShapeIds();
    const { currentPagePoint } = editor.inputs;
    const { shiftKey, altKey: altKey2, accelKey } = info;
    const additiveSelectionKey = shiftKey || accelKey;
    const hitShape = editor.getShapeAtPoint(currentPagePoint, {
      hitInside: false,
      margin: editor.options.hitTestMargin / editor.getZoomLevel(),
      hitLabels: true,
      renderingOnly: true,
      filter: (shape) => !shape.isLocked
    });
    if (hitShape) {
      const outermostSelectableShape = editor.getOutermostSelectableShape(hitShape);
      if (additiveSelectionKey && !altKey2) {
        editor.cancelDoubleClick();
        if (selectedShapeIds.includes(outermostSelectableShape.id)) {
          editor.markHistoryStoppingPoint("deselecting shape");
          editor.deselect(outermostSelectableShape);
        } else {
          editor.markHistoryStoppingPoint("shift selecting shape");
          editor.setSelectedShapes([...selectedShapeIds, outermostSelectableShape.id]);
        }
      } else {
        let shapeToSelect = void 0;
        if (outermostSelectableShape === hitShape) {
          shapeToSelect = hitShape;
        } else {
          if (outermostSelectableShape.id === editor.getFocusedGroupId() || selectedShapeIds.includes(outermostSelectableShape.id)) {
            shapeToSelect = hitShape;
          } else {
            shapeToSelect = outermostSelectableShape;
          }
        }
        if (shapeToSelect && !selectedShapeIds.includes(shapeToSelect.id)) {
          editor.markHistoryStoppingPoint("selecting shape");
          editor.select(shapeToSelect.id);
        }
      }
    } else {
      if (additiveSelectionKey) {
        return;
      } else {
        if (selectedShapeIds.length > 0) {
          editor.markHistoryStoppingPoint("selecting none");
          editor.selectNone();
        }
        const focusedGroupId = editor.getFocusedGroupId();
        if (isShapeId(focusedGroupId)) {
          const groupShape = editor.getShape(focusedGroupId);
          if (!editor.isPointInShape(groupShape, currentPagePoint, { margin: 0, hitInside: true })) {
            editor.setFocusedGroup(null);
          }
        }
      }
    }
  }

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Idle.mjs
  var SKIPPED_KEYS_FOR_AUTO_EDITING = [
    "Delete",
    "Backspace",
    "[",
    "]",
    "Enter",
    " ",
    "Shift",
    "Tab"
  ];
  var Idle12 = class extends StateNode {
    static id = "idle";
    onEnter() {
      this.parent.setCurrentToolIdMask(void 0);
      updateHoveredShapeId(this.editor);
      this.editor.setCursor({ type: "default", rotation: 0 });
    }
    onExit() {
      updateHoveredShapeId.cancel();
    }
    onPointerMove() {
      updateHoveredShapeId(this.editor);
    }
    onPointerDown(info) {
      const shouldEnterCropMode = info.ctrlKey && getShouldEnterCropMode(this.editor);
      switch (info.target) {
        case "canvas": {
          const hitShape = getHitShapeOnCanvasPointerDown(this.editor);
          if (hitShape && !hitShape.isLocked) {
            this.onPointerDown({
              ...info,
              shape: hitShape,
              target: "shape"
            });
            return;
          }
          const selectedShapeIds = this.editor.getSelectedShapeIds();
          const onlySelectedShape = this.editor.getOnlySelectedShape();
          const {
            inputs: { currentPagePoint }
          } = this.editor;
          if (selectedShapeIds.length > 1 || onlySelectedShape && !this.editor.getShapeUtil(onlySelectedShape).hideSelectionBoundsBg(onlySelectedShape)) {
            if (isPointInRotatedSelectionBounds(this.editor, currentPagePoint)) {
              this.onPointerDown({
                ...info,
                target: "selection"
              });
              return;
            }
          }
          this.parent.transition("pointing_canvas", info);
          break;
        }
        case "shape": {
          const { shape } = info;
          if (this.isOverArrowLabelTest(shape)) {
            this.parent.transition("pointing_arrow_label", info);
            break;
          }
          if (this.editor.isShapeOrAncestorLocked(shape)) {
            this.parent.transition("pointing_canvas", info);
            break;
          }
          this.parent.transition("pointing_shape", info);
          break;
        }
        case "handle": {
          if (this.editor.getIsReadonly()) break;
          if (this.editor.inputs.altKey) {
            this.parent.transition("pointing_shape", info);
          } else {
            this.parent.transition("pointing_handle", info);
          }
          break;
        }
        case "selection": {
          switch (info.handle) {
            case "mobile_rotate":
            case "top_left_rotate":
            case "top_right_rotate":
            case "bottom_left_rotate":
            case "bottom_right_rotate": {
              if (info.accelKey) {
                this.parent.transition("brushing", info);
                break;
              }
              this.parent.transition("pointing_rotate_handle", info);
              break;
            }
            case "top":
            case "right":
            case "bottom":
            case "left":
            case "top_left":
            case "top_right":
            case "bottom_left":
            case "bottom_right": {
              if (shouldEnterCropMode) {
                this.parent.transition("crop.pointing_crop_handle", info);
              } else {
                if (info.accelKey) {
                  this.parent.transition("brushing", info);
                  break;
                }
                this.parent.transition("pointing_resize_handle", info);
              }
              break;
            }
            default: {
              const hoveredShape = this.editor.getHoveredShape();
              if (hoveredShape && !this.editor.getSelectedShapeIds().includes(hoveredShape.id) && !hoveredShape.isLocked) {
                this.onPointerDown({
                  ...info,
                  shape: hoveredShape,
                  target: "shape"
                });
                return;
              }
              this.parent.transition("pointing_selection", info);
            }
          }
          break;
        }
      }
    }
    onDoubleClick(info) {
      if (this.editor.inputs.shiftKey || info.phase !== "up") return;
      if (info.ctrlKey || info.shiftKey) return;
      switch (info.target) {
        case "canvas": {
          const hoveredShape = this.editor.getHoveredShape();
          const hitShape = hoveredShape && !this.editor.isShapeOfType(hoveredShape, "group") ? hoveredShape : this.editor.getSelectedShapeAtPoint(this.editor.inputs.currentPagePoint) ?? this.editor.getShapeAtPoint(this.editor.inputs.currentPagePoint, {
            margin: this.editor.options.hitTestMargin / this.editor.getZoomLevel(),
            hitInside: false
          });
          const focusedGroupId = this.editor.getFocusedGroupId();
          if (hitShape) {
            if (this.editor.isShapeOfType(hitShape, "group")) {
              selectOnCanvasPointerUp(this.editor, info);
              return;
            } else {
              const parent = this.editor.getShape(hitShape.parentId);
              if (parent && this.editor.isShapeOfType(parent, "group")) {
                if (focusedGroupId && parent.id === focusedGroupId) {
                } else {
                  selectOnCanvasPointerUp(this.editor, info);
                  return;
                }
              }
            }
            this.onDoubleClick({
              ...info,
              shape: hitShape,
              target: "shape"
            });
            return;
          }
          if (!this.editor.inputs.shiftKey) {
            this.handleDoubleClickOnCanvas(info);
          }
          break;
        }
        case "selection": {
          if (this.editor.getIsReadonly()) break;
          const onlySelectedShape = this.editor.getOnlySelectedShape();
          if (onlySelectedShape) {
            const util = this.editor.getShapeUtil(onlySelectedShape);
            if (!this.canInteractWithShapeInReadOnly(onlySelectedShape)) {
              return;
            }
            if (info.handle === "right" || info.handle === "left" || info.handle === "top" || info.handle === "bottom") {
              const change = util.onDoubleClickEdge?.(onlySelectedShape);
              if (change) {
                this.editor.markHistoryStoppingPoint("double click edge");
                this.editor.updateShapes([change]);
                kickoutOccludedShapes(this.editor, [onlySelectedShape.id]);
                return;
              }
            }
            if (util.canCrop(onlySelectedShape) && !this.editor.isShapeOrAncestorLocked(onlySelectedShape)) {
              this.parent.transition("crop", info);
              return;
            }
            if (this.shouldStartEditingShape(onlySelectedShape)) {
              this.startEditingShape(
                onlySelectedShape,
                info,
                true
                /* select all */
              );
            }
          }
          break;
        }
        case "shape": {
          const { shape } = info;
          const util = this.editor.getShapeUtil(shape);
          if (shape.type !== "video" && shape.type !== "embed" && this.editor.getIsReadonly()) break;
          if (util.onDoubleClick) {
            const change = util.onDoubleClick?.(shape);
            if (change) {
              this.editor.updateShapes([change]);
              return;
            }
          }
          if (util.canCrop(shape) && !this.editor.isShapeOrAncestorLocked(shape)) {
            this.editor.markHistoryStoppingPoint("select and crop");
            this.editor.select(info.shape?.id);
            this.parent.transition("crop", info);
            return;
          }
          if (this.shouldStartEditingShape(shape)) {
            this.startEditingShape(
              shape,
              info,
              true
              /* select all */
            );
          } else {
            this.handleDoubleClickOnCanvas(info);
          }
          break;
        }
        case "handle": {
          if (this.editor.getIsReadonly()) break;
          const { shape, handle } = info;
          const util = this.editor.getShapeUtil(shape);
          const changes = util.onDoubleClickHandle?.(shape, handle);
          if (changes) {
            this.editor.updateShapes([changes]);
          } else {
            if (this.shouldStartEditingShape(shape)) {
              this.startEditingShape(
                shape,
                info,
                true
                /* select all */
              );
            }
          }
        }
      }
    }
    onRightClick(info) {
      switch (info.target) {
        case "canvas": {
          const hoveredShape = this.editor.getHoveredShape();
          const hitShape = hoveredShape && !this.editor.isShapeOfType(hoveredShape, "group") ? hoveredShape : this.editor.getShapeAtPoint(this.editor.inputs.currentPagePoint, {
            margin: this.editor.options.hitTestMargin / this.editor.getZoomLevel(),
            hitInside: false,
            hitLabels: true,
            hitLocked: true,
            hitFrameInside: true,
            renderingOnly: true
          });
          if (hitShape) {
            this.onRightClick({
              ...info,
              shape: hitShape,
              target: "shape"
            });
            return;
          }
          const selectedShapeIds = this.editor.getSelectedShapeIds();
          const onlySelectedShape = this.editor.getOnlySelectedShape();
          const {
            inputs: { currentPagePoint }
          } = this.editor;
          if (selectedShapeIds.length > 1 || onlySelectedShape && !this.editor.getShapeUtil(onlySelectedShape).hideSelectionBoundsBg(onlySelectedShape)) {
            if (isPointInRotatedSelectionBounds(this.editor, currentPagePoint)) {
              this.onRightClick({
                ...info,
                target: "selection"
              });
              return;
            }
          }
          this.editor.selectNone();
          break;
        }
        case "shape": {
          const { selectedShapeIds } = this.editor.getCurrentPageState();
          const { shape } = info;
          const targetShape = this.editor.getOutermostSelectableShape(
            shape,
            (parent) => !selectedShapeIds.includes(parent.id)
          );
          if (!selectedShapeIds.includes(targetShape.id) && !this.editor.findShapeAncestor(
            targetShape,
            (shape2) => selectedShapeIds.includes(shape2.id)
          )) {
            this.editor.markHistoryStoppingPoint("selecting shape");
            this.editor.setSelectedShapes([targetShape.id]);
          }
          break;
        }
      }
    }
    onCancel() {
      if (this.editor.getFocusedGroupId() !== this.editor.getCurrentPageId() && this.editor.getSelectedShapeIds().length > 0) {
        this.editor.popFocusedGroupId();
      } else {
        this.editor.markHistoryStoppingPoint("clearing selection");
        this.editor.selectNone();
      }
    }
    onKeyDown(info) {
      switch (info.code) {
        case "ArrowLeft":
        case "ArrowRight":
        case "ArrowUp":
        case "ArrowDown": {
          this.nudgeSelectedShapes(false);
          return;
        }
      }
      if (debugFlags["editOnType"].get()) {
        if (!SKIPPED_KEYS_FOR_AUTO_EDITING.includes(info.key) && !info.altKey && !info.ctrlKey) {
          const onlySelectedShape = this.editor.getOnlySelectedShape();
          if (onlySelectedShape && // If it's a note shape, then edit on type
          this.editor.isShapeOfType(onlySelectedShape, "note") && // If it's not locked or anything
          this.shouldStartEditingShape(onlySelectedShape)) {
            this.startEditingShape(
              onlySelectedShape,
              {
                ...info,
                target: "shape",
                shape: onlySelectedShape
              },
              true
              /* select all */
            );
            return;
          }
        }
      }
    }
    onKeyRepeat(info) {
      switch (info.code) {
        case "ArrowLeft":
        case "ArrowRight":
        case "ArrowUp":
        case "ArrowDown": {
          this.nudgeSelectedShapes(true);
          break;
        }
      }
    }
    onKeyUp(info) {
      switch (info.code) {
        case "Enter": {
          const selectedShapes = this.editor.getSelectedShapes();
          if (selectedShapes.every((shape) => this.editor.isShapeOfType(shape, "group"))) {
            this.editor.setSelectedShapes(
              selectedShapes.flatMap((shape) => this.editor.getSortedChildIdsForParent(shape.id))
            );
            return;
          }
          const onlySelectedShape = this.editor.getOnlySelectedShape();
          if (onlySelectedShape && this.shouldStartEditingShape(onlySelectedShape)) {
            this.startEditingShape(
              onlySelectedShape,
              {
                ...info,
                target: "shape",
                shape: onlySelectedShape
              },
              true
              /* select all */
            );
            return;
          }
          if (getShouldEnterCropMode(this.editor)) {
            this.parent.transition("crop", info);
          }
          break;
        }
      }
    }
    shouldStartEditingShape(shape = this.editor.getOnlySelectedShape()) {
      if (!shape) return false;
      if (this.editor.isShapeOrAncestorLocked(shape) && shape.type !== "embed") return false;
      if (!this.canInteractWithShapeInReadOnly(shape)) return false;
      return this.editor.getShapeUtil(shape).canEdit(shape);
    }
    startEditingShape(shape, info, shouldSelectAll) {
      if (this.editor.isShapeOrAncestorLocked(shape) && shape.type !== "embed") return;
      this.editor.markHistoryStoppingPoint("editing shape");
      startEditingShapeWithLabel(this.editor, shape, shouldSelectAll);
      this.parent.transition("editing_shape", info);
    }
    isOverArrowLabelTest(shape) {
      if (!shape) return false;
      const pointInShapeSpace = this.editor.getPointInShapeSpace(
        shape,
        this.editor.inputs.currentPagePoint
      );
      if (this.editor.isShapeOfType(shape, "arrow")) {
        const labelGeometry = this.editor.getShapeGeometry(shape).children[1];
        if (labelGeometry && pointInPolygon(pointInShapeSpace, labelGeometry.vertices)) {
          return true;
        }
      }
      return false;
    }
    handleDoubleClickOnCanvas(info) {
      if (this.editor.getIsReadonly()) return;
      if (!this.editor.options.createTextOnCanvasDoubleClick) return;
      this.editor.markHistoryStoppingPoint("creating text shape");
      const id = createShapeId();
      const { x, y } = this.editor.inputs.currentPagePoint;
      this.editor.createShapes([
        {
          id,
          type: "text",
          x,
          y,
          props: {
            text: "",
            autoSize: true
          }
        }
      ]);
      const shape = this.editor.getShape(id);
      if (!shape) return;
      const util = this.editor.getShapeUtil(shape);
      if (this.editor.getIsReadonly()) {
        if (!util.canEditInReadOnly(shape)) {
          return;
        }
      }
      this.editor.setEditingShape(id);
      this.editor.select(id);
      this.parent.transition("editing_shape", info);
    }
    nudgeSelectedShapes(ephemeral = false) {
      const {
        editor: {
          inputs: { keys }
        }
      } = this;
      const shiftKey = keys.has("ShiftLeft");
      const delta = new Vec(0, 0);
      if (keys.has("ArrowLeft")) delta.x -= 1;
      if (keys.has("ArrowRight")) delta.x += 1;
      if (keys.has("ArrowUp")) delta.y -= 1;
      if (keys.has("ArrowDown")) delta.y += 1;
      if (delta.equals(new Vec(0, 0))) return;
      if (!ephemeral) this.editor.markHistoryStoppingPoint("nudge shapes");
      const { gridSize } = this.editor.getDocumentSettings();
      const step = this.editor.getInstanceState().isGridMode ? shiftKey ? gridSize * GRID_INCREMENT : gridSize : shiftKey ? MAJOR_NUDGE_FACTOR : MINOR_NUDGE_FACTOR;
      const selectedShapeIds = this.editor.getSelectedShapeIds();
      this.editor.nudgeShapes(selectedShapeIds, delta.mul(step));
      kickoutOccludedShapes(this.editor, selectedShapeIds);
    }
    canInteractWithShapeInReadOnly(shape) {
      if (!this.editor.getIsReadonly()) return true;
      const util = this.editor.getShapeUtil(shape);
      if (util.canEditInReadOnly(shape)) return true;
      return false;
    }
  };
  var MAJOR_NUDGE_FACTOR = 10;
  var MINOR_NUDGE_FACTOR = 1;
  var GRID_INCREMENT = 5;
  function isPointInRotatedSelectionBounds(editor, point) {
    const selectionBounds = editor.getSelectionRotatedPageBounds();
    if (!selectionBounds) return false;
    const selectionRotation = editor.getSelectionRotation();
    if (!selectionRotation) return selectionBounds.containsPoint(point);
    return pointInPolygon(
      point,
      selectionBounds.corners.map((c) => Vec.RotWith(c, selectionBounds.point, selectionRotation))
    );
  }

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingArrowLabel.mjs
  var PointingArrowLabel = class extends StateNode {
    static id = "pointing_arrow_label";
    shapeId = "";
    markId = "";
    wasAlreadySelected = false;
    didDrag = false;
    didCtrlOnEnter = false;
    info = {};
    updateCursor() {
      this.editor.setCursor({ type: "grabbing", rotation: 0 });
    }
    onEnter(info) {
      const { shape } = info;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.info = info;
      this.shapeId = shape.id;
      this.didDrag = false;
      this.didCtrlOnEnter = info.accelKey;
      this.wasAlreadySelected = this.editor.getOnlySelectedShapeId() === shape.id;
      this.updateCursor();
      const geometry = this.editor.getShapeGeometry(shape);
      const labelGeometry = geometry.children[1];
      if (!labelGeometry) {
        throw Error(`Expected to find an arrow label geometry for shape: ${shape.id}`);
      }
      const { currentPagePoint } = this.editor.inputs;
      const pointInShapeSpace = this.editor.getPointInShapeSpace(shape, currentPagePoint);
      this._labelDragOffset = Vec.Sub(labelGeometry.center, pointInShapeSpace);
      this.markId = this.editor.markHistoryStoppingPoint("label-drag start");
      this.editor.setSelectedShapes([this.shapeId]);
    }
    onExit() {
      this.parent.setCurrentToolIdMask(void 0);
      this.editor.setCursor({ type: "default", rotation: 0 });
    }
    _labelDragOffset = new Vec(0, 0);
    onPointerMove() {
      const { isDragging } = this.editor.inputs;
      if (!isDragging) return;
      if (this.didCtrlOnEnter) {
        this.parent.transition("brushing", this.info);
        return;
      }
      const shape = this.editor.getShape(this.shapeId);
      if (!shape) return;
      const info = getArrowInfo(this.editor, shape);
      const groupGeometry = this.editor.getShapeGeometry(shape);
      const bodyGeometry = groupGeometry.children[0];
      const pointInShapeSpace = this.editor.getPointInShapeSpace(
        shape,
        this.editor.inputs.currentPagePoint
      );
      const nearestPoint = bodyGeometry.nearestPoint(
        Vec.Add(pointInShapeSpace, this._labelDragOffset)
      );
      let nextLabelPosition;
      if (info.isStraight) {
        const lineLength = Vec.Dist(info.start.point, info.end.point);
        const segmentLength = Vec.Dist(info.end.point, nearestPoint);
        nextLabelPosition = 1 - segmentLength / lineLength;
      } else {
        const { _center, measure, angleEnd, angleStart } = groupGeometry.children[0];
        nextLabelPosition = getPointInArcT(measure, angleStart, angleEnd, _center.angle(nearestPoint));
      }
      if (isNaN(nextLabelPosition)) {
        nextLabelPosition = 0.5;
      }
      this.didDrag = true;
      this.editor.updateShape({
        id: shape.id,
        type: shape.type,
        props: { labelPosition: nextLabelPosition }
      });
    }
    onPointerUp() {
      const shape = this.editor.getShape(this.shapeId);
      if (!shape) return;
      if (this.didDrag || !this.wasAlreadySelected) {
        this.complete();
      } else if (!this.editor.getIsReadonly()) {
        this.editor.setEditingShape(shape.id);
        this.editor.setCurrentTool("select.editing_shape");
      }
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.cancel();
    }
    onInterrupt() {
      this.cancel();
    }
    complete() {
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, {});
      } else {
        this.parent.transition("idle");
      }
    }
    cancel() {
      this.editor.bailToMark(this.markId);
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, {});
      } else {
        this.parent.transition("idle");
      }
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingCanvas.mjs
  var PointingCanvas = class extends StateNode {
    static id = "pointing_canvas";
    onEnter(info) {
      const additiveSelectionKey = info.shiftKey || info.accelKey;
      if (!additiveSelectionKey) {
        if (this.editor.getSelectedShapeIds().length > 0) {
          this.editor.markHistoryStoppingPoint("selecting none");
          this.editor.selectNone();
        }
      }
    }
    onPointerMove(info) {
      if (this.editor.inputs.isDragging) {
        this.parent.transition("brushing", info);
      }
    }
    onPointerUp(info) {
      selectOnCanvasPointerUp(this.editor, info);
      this.complete();
    }
    onComplete() {
      this.complete();
    }
    onInterrupt() {
      this.parent.transition("idle");
    }
    complete() {
      this.parent.transition("idle");
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingHandle.mjs
  var PointingHandle = class extends StateNode {
    static id = "pointing_handle";
    didCtrlOnEnter = false;
    info = {};
    onEnter(info) {
      this.info = info;
      this.didCtrlOnEnter = info.accelKey;
      const { shape } = info;
      if (this.editor.isShapeOfType(shape, "arrow")) {
        const initialBinding = getArrowBindings(this.editor, shape)[info.handle.id];
        if (initialBinding) {
          this.editor.setHintingShapes([initialBinding.toId]);
        }
      }
      this.editor.setCursor({ type: "grabbing", rotation: 0 });
    }
    onExit() {
      this.editor.setHintingShapes([]);
      this.editor.setCursor({ type: "default", rotation: 0 });
    }
    onPointerUp() {
      const { shape, handle } = this.info;
      if (this.editor.isShapeOfType(shape, "note")) {
        const { editor } = this;
        const nextNote = getNoteForPit(editor, shape, handle, false);
        if (nextNote) {
          startEditingShapeWithLabel(
            editor,
            nextNote,
            true
            /* selectAll */
          );
          return;
        }
      }
      this.parent.transition("idle", this.info);
    }
    onPointerMove(info) {
      const { editor } = this;
      if (editor.inputs.isDragging) {
        if (this.didCtrlOnEnter) {
          this.parent.transition("brushing", info);
        } else {
          this.startDraggingHandle();
        }
      }
    }
    onLongPress() {
      this.startDraggingHandle();
    }
    startDraggingHandle() {
      const { editor } = this;
      if (editor.getIsReadonly()) return;
      const { shape, handle } = this.info;
      if (editor.isShapeOfType(shape, "note")) {
        const nextNote = getNoteForPit(editor, shape, handle, true);
        if (nextNote) {
          const centeredOnPointer = editor.getPointInParentSpace(nextNote, editor.inputs.originPagePoint).sub(Vec.Rot(NOTE_CENTER_OFFSET.clone().mul(shape.props.scale), nextNote.rotation));
          editor.updateShape({ ...nextNote, x: centeredOnPointer.x, y: centeredOnPointer.y });
          editor.setHoveredShape(nextNote.id).select(nextNote.id).setCurrentTool("select.translating", {
            ...this.info,
            target: "shape",
            shape: editor.getShape(nextNote),
            onInteractionEnd: "note",
            isCreating: true,
            onCreate: () => {
              startEditingShapeWithLabel(
                editor,
                nextNote,
                true
                /* selectAll */
              );
            }
          });
          return;
        }
      }
      this.parent.transition("dragging_handle", this.info);
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.cancel();
    }
    onInterrupt() {
      this.cancel();
    }
    cancel() {
      this.parent.transition("idle");
    }
  };
  function getNoteForPit(editor, shape, handle, forceNew) {
    const pageTransform = editor.getShapePageTransform(shape.id);
    const pagePoint = pageTransform.point();
    const pageRotation = pageTransform.rotation();
    const pits = getNoteAdjacentPositions(
      editor,
      pagePoint,
      pageRotation,
      shape.props.growY,
      0,
      shape.props.scale
    );
    const pit = pits[handle.index];
    if (pit) {
      return getNoteShapeForAdjacentPosition(editor, shape, pit, pageRotation, forceNew);
    }
  }

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingRotateHandle.mjs
  var PointingRotateHandle = class extends StateNode {
    static id = "pointing_rotate_handle";
    info = {};
    updateCursor() {
      this.editor.setCursor({
        type: CursorTypeMap[this.info.handle],
        rotation: this.editor.getSelectionRotation()
      });
    }
    onEnter(info) {
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.info = info;
      this.updateCursor();
    }
    onExit() {
      this.parent.setCurrentToolIdMask(void 0);
      this.editor.setCursor({ type: "default", rotation: 0 });
    }
    onPointerMove() {
      if (this.editor.inputs.isDragging) {
        this.startRotating();
      }
    }
    onLongPress() {
      this.startRotating();
    }
    startRotating() {
      if (this.editor.getIsReadonly()) return;
      this.parent.transition("rotating", this.info);
    }
    onPointerUp() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.cancel();
    }
    onInterrupt() {
      this.cancel();
    }
    complete() {
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, {});
      } else {
        this.parent.transition("idle");
      }
    }
    cancel() {
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, {});
      } else {
        this.parent.transition("idle");
      }
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingSelection.mjs
  var PointingSelection = class extends StateNode {
    static id = "pointing_selection";
    info = {};
    onEnter(info) {
      this.info = info;
    }
    onPointerUp(info) {
      selectOnCanvasPointerUp(this.editor, info);
      this.parent.transition("idle", info);
    }
    onPointerMove(info) {
      if (this.editor.inputs.isDragging) {
        this.startTranslating(info);
      }
    }
    onLongPress(info) {
      this.startTranslating(info);
    }
    startTranslating(info) {
      if (this.editor.getIsReadonly()) return;
      this.parent.transition("translating", info);
    }
    onDoubleClick(info) {
      const hoveredShape = this.editor.getHoveredShape();
      const hitShape = hoveredShape && !this.editor.isShapeOfType(hoveredShape, "group") ? hoveredShape : this.editor.getShapeAtPoint(this.editor.inputs.currentPagePoint, {
        hitInside: true,
        margin: 0,
        renderingOnly: true
      });
      if (hitShape) {
        this.parent.transition("idle");
        this.parent.onDoubleClick?.({
          ...info,
          target: "shape",
          shape: this.editor.getShape(hitShape)
        });
        return;
      }
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.cancel();
    }
    onInterrupt() {
      this.cancel();
    }
    cancel() {
      this.parent.transition("idle");
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingShape.mjs
  var PointingShape = class extends StateNode {
    static id = "pointing_shape";
    hitShape = {};
    hitShapeForPointerUp = {};
    isDoubleClick = false;
    didCtrlOnEnter = false;
    didSelectOnEnter = false;
    onEnter(info) {
      const selectedShapeIds = this.editor.getSelectedShapeIds();
      const selectionBounds = this.editor.getSelectionRotatedPageBounds();
      const focusedGroupId = this.editor.getFocusedGroupId();
      const {
        inputs: { currentPagePoint }
      } = this.editor;
      const { shiftKey, altKey: altKey2, accelKey } = info;
      this.hitShape = info.shape;
      this.isDoubleClick = false;
      this.didCtrlOnEnter = accelKey;
      const outermostSelectingShape = this.editor.getOutermostSelectableShape(info.shape);
      const selectedAncestor = this.editor.findShapeAncestor(
        outermostSelectingShape,
        (parent) => selectedShapeIds.includes(parent.id)
      );
      if (this.didCtrlOnEnter || // If the shape has an onClick handler
      this.editor.getShapeUtil(info.shape).onClick || // ...or if the shape is the focused layer (e.g. group)
      outermostSelectingShape.id === focusedGroupId || // ...or if the shape is within the selection
      selectedShapeIds.includes(outermostSelectingShape.id) || // ...or if an ancestor of the shape is selected
      selectedAncestor || // ...or if the current point is NOT within the selection bounds
      selectedShapeIds.length > 1 && selectionBounds?.containsPoint(currentPagePoint)) {
        this.didSelectOnEnter = false;
        this.hitShapeForPointerUp = outermostSelectingShape;
        return;
      }
      this.didSelectOnEnter = true;
      if (shiftKey && !altKey2) {
        this.editor.cancelDoubleClick();
        if (!selectedShapeIds.includes(outermostSelectingShape.id)) {
          this.editor.markHistoryStoppingPoint("shift selecting shape");
          this.editor.setSelectedShapes([...selectedShapeIds, outermostSelectingShape.id]);
        }
      } else {
        this.editor.markHistoryStoppingPoint("selecting shape");
        this.editor.setSelectedShapes([outermostSelectingShape.id]);
      }
    }
    onPointerUp(info) {
      const selectedShapeIds = this.editor.getSelectedShapeIds();
      const focusedGroupId = this.editor.getFocusedGroupId();
      const zoomLevel = this.editor.getZoomLevel();
      const {
        inputs: { currentPagePoint }
      } = this.editor;
      const additiveSelectionKey = info.shiftKey || info.accelKey;
      const hitShape = this.editor.getShapeAtPoint(currentPagePoint, {
        margin: this.editor.options.hitTestMargin / zoomLevel,
        hitInside: true,
        renderingOnly: true
      }) ?? this.hitShape;
      const selectingShape = hitShape ? this.editor.getOutermostSelectableShape(hitShape) : this.hitShapeForPointerUp;
      if (selectingShape) {
        const util = this.editor.getShapeUtil(selectingShape);
        if (util.onClick) {
          const change = util.onClick?.(selectingShape);
          if (change) {
            this.editor.markHistoryStoppingPoint("shape on click");
            this.editor.updateShapes([change]);
            this.parent.transition("idle", info);
            return;
          }
        }
        if (selectingShape.id === focusedGroupId) {
          if (selectedShapeIds.length > 0) {
            this.editor.markHistoryStoppingPoint("clearing shape ids");
            this.editor.setSelectedShapes([]);
          } else {
            this.editor.popFocusedGroupId();
          }
          this.parent.transition("idle", info);
          return;
        }
      }
      if (!this.didSelectOnEnter) {
        const outermostSelectableShape = this.editor.getOutermostSelectableShape(
          hitShape,
          // if a group is selected, we want to stop before reaching that group
          // so we can drill down into the group
          (parent) => !selectedShapeIds.includes(parent.id)
        );
        if (selectedShapeIds.includes(outermostSelectableShape.id)) {
          if (additiveSelectionKey) {
            this.editor.markHistoryStoppingPoint("deselecting on pointer up");
            this.editor.deselect(selectingShape);
          } else {
            if (selectedShapeIds.includes(selectingShape.id)) {
              if (selectedShapeIds.length === 1) {
                const geometry = this.editor.getShapeUtil(selectingShape).getGeometry(selectingShape);
                const textLabels = getTextLabels(geometry);
                const textLabel = textLabels.length === 1 ? textLabels[0] : void 0;
                if (textLabel) {
                  const pointInShapeSpace = this.editor.getPointInShapeSpace(
                    selectingShape,
                    currentPagePoint
                  );
                  if (textLabel.bounds.containsPoint(pointInShapeSpace, 0) && textLabel.hitTestPoint(pointInShapeSpace)) {
                    this.editor.run(() => {
                      this.editor.markHistoryStoppingPoint("editing on pointer up");
                      this.editor.select(selectingShape.id);
                      const util = this.editor.getShapeUtil(selectingShape);
                      if (this.editor.getIsReadonly()) {
                        if (!util.canEditInReadOnly(selectingShape)) {
                          return;
                        }
                      }
                      this.editor.setEditingShape(selectingShape.id);
                      this.editor.setCurrentTool("select.editing_shape");
                      if (this.isDoubleClick) {
                        this.editor.emit("select-all-text", { shapeId: selectingShape.id });
                      }
                    });
                    return;
                  }
                }
              }
              this.editor.markHistoryStoppingPoint("selecting on pointer up");
              this.editor.select(selectingShape.id);
            } else {
              this.editor.markHistoryStoppingPoint("selecting on pointer up");
              this.editor.select(selectingShape);
            }
          }
        } else if (additiveSelectionKey) {
          const ancestors = this.editor.getShapeAncestors(outermostSelectableShape);
          this.editor.markHistoryStoppingPoint("shift deselecting on pointer up");
          this.editor.setSelectedShapes([
            ...this.editor.getSelectedShapeIds().filter((id) => !ancestors.find((a) => a.id === id)),
            outermostSelectableShape.id
          ]);
        } else {
          this.editor.markHistoryStoppingPoint("selecting on pointer up");
          this.editor.setSelectedShapes([outermostSelectableShape.id]);
        }
      }
      this.parent.transition("idle", info);
    }
    onDoubleClick() {
      this.isDoubleClick = true;
    }
    onPointerMove(info) {
      if (this.editor.inputs.isDragging) {
        if (this.didCtrlOnEnter) {
          this.parent.transition("brushing", info);
        } else {
          this.startTranslating(info);
        }
      }
    }
    onLongPress(info) {
      this.startTranslating(info);
    }
    startTranslating(info) {
      if (this.editor.getIsReadonly()) return;
      this.editor.focus();
      this.parent.transition("translating", info);
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.cancel();
    }
    onInterrupt() {
      this.cancel();
    }
    cancel() {
      this.parent.transition("idle");
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Resizing.mjs
  var Resizing = class extends StateNode {
    static id = "resizing";
    info = {};
    markId = "";
    // A switch to detect when the user is holding ctrl
    didHoldCommand = false;
    // we transition into the resizing state from the geo pointing state, which starts with a shape of size w: 1, h: 1,
    // so if the user drags x: +50, y: +50 after mouseDown, the shape will be w: 51, h: 51, which is too many pixels, alas
    // so we allow passing a further offset into this state to negate such issues
    creationCursorOffset = { x: 0, y: 0 };
    snapshot = {};
    onEnter(info) {
      const { isCreating = false, creatingMarkId, creationCursorOffset = { x: 0, y: 0 } } = info;
      this.info = info;
      this.didHoldCommand = false;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.creationCursorOffset = creationCursorOffset;
      this.snapshot = this._createSnapshot();
      this.markId = "";
      if (isCreating) {
        if (creatingMarkId) {
          this.markId = creatingMarkId;
        } else {
          const markId = this.editor.getMarkIdMatching(
            `creating:${this.editor.getOnlySelectedShapeId()}`
          );
          if (markId) {
            this.markId = markId;
          }
        }
      } else {
        this.markId = this.editor.markHistoryStoppingPoint("starting resizing");
      }
      if (isCreating) {
        this.editor.setCursor({ type: "cross", rotation: 0 });
      }
      this.handleResizeStart();
      this.updateShapes();
    }
    onTick({ elapsed }) {
      const { editor } = this;
      editor.edgeScrollManager.updateEdgeScrolling(elapsed);
    }
    onPointerMove() {
      this.updateShapes();
    }
    onKeyDown() {
      this.updateShapes();
    }
    onKeyUp() {
      this.updateShapes();
    }
    onPointerUp() {
      this.complete();
    }
    onComplete() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    cancel() {
      this.editor.bailToMark(this.markId);
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, {});
      } else {
        this.parent.transition("idle");
      }
    }
    complete() {
      kickoutOccludedShapes(this.editor, this.snapshot.selectedShapeIds);
      this.handleResizeEnd();
      if (this.info.isCreating && this.info.onCreate) {
        this.info.onCreate?.(this.editor.getOnlySelectedShape());
        return;
      }
      if (this.editor.getInstanceState().isToolLocked && this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, {});
        return;
      }
      this.parent.transition("idle");
    }
    handleResizeStart() {
      const { shapeSnapshots } = this.snapshot;
      const changes = [];
      shapeSnapshots.forEach(({ shape }) => {
        const util = this.editor.getShapeUtil(shape);
        const change = util.onResizeStart?.(shape);
        if (change) {
          changes.push(change);
        }
      });
      if (changes.length > 0) {
        this.editor.updateShapes(changes);
      }
    }
    handleResizeEnd() {
      const { shapeSnapshots } = this.snapshot;
      const changes = [];
      shapeSnapshots.forEach(({ shape }) => {
        const current = this.editor.getShape(shape.id);
        const util = this.editor.getShapeUtil(shape);
        const change = util.onResizeEnd?.(shape, current);
        if (change) {
          changes.push(change);
        }
      });
      if (changes.length > 0) {
        this.editor.updateShapes(changes);
      }
    }
    updateShapes() {
      const { altKey: altKey2, shiftKey } = this.editor.inputs;
      const {
        frames,
        shapeSnapshots,
        selectionBounds,
        cursorHandleOffset,
        selectedShapeIds,
        selectionRotation,
        canShapesDeform
      } = this.snapshot;
      let isAspectRatioLocked = shiftKey || !canShapesDeform;
      if (shapeSnapshots.size === 1) {
        const onlySnapshot = [...shapeSnapshots.values()][0];
        if (this.editor.isShapeOfType(onlySnapshot.shape, "text")) {
          isAspectRatioLocked = !(this.info.handle === "left" || this.info.handle === "right");
        }
      }
      const { ctrlKey } = this.editor.inputs;
      const currentPagePoint = this.editor.inputs.currentPagePoint.clone().sub(cursorHandleOffset).sub(this.creationCursorOffset);
      const originPagePoint = this.editor.inputs.originPagePoint.clone().sub(cursorHandleOffset);
      if (this.editor.getInstanceState().isGridMode && !ctrlKey) {
        const { gridSize } = this.editor.getDocumentSettings();
        currentPagePoint.snapToGrid(gridSize);
      }
      const dragHandle = this.info.handle;
      const scaleOriginHandle = rotateSelectionHandle2(dragHandle, Math.PI);
      this.editor.snaps.clearIndicators();
      const shouldSnap = this.editor.user.getIsSnapMode() ? !ctrlKey : ctrlKey;
      if (shouldSnap && selectionRotation % HALF_PI === 0) {
        const { nudge } = this.editor.snaps.shapeBounds.snapResizeShapes({
          dragDelta: Vec.Sub(currentPagePoint, originPagePoint),
          initialSelectionPageBounds: this.snapshot.initialSelectionPageBounds,
          handle: rotateSelectionHandle2(dragHandle, selectionRotation),
          isAspectRatioLocked,
          isResizingFromCenter: altKey2
        });
        currentPagePoint.add(nudge);
      }
      const scaleOriginPage = Vec.RotWith(
        altKey2 ? selectionBounds.center : selectionBounds.getHandlePoint(scaleOriginHandle),
        selectionBounds.point,
        selectionRotation
      );
      const distanceFromScaleOriginNow = Vec.Sub(currentPagePoint, scaleOriginPage).rot(
        -selectionRotation
      );
      const distanceFromScaleOriginAtStart = Vec.Sub(originPagePoint, scaleOriginPage).rot(
        -selectionRotation
      );
      const scale = Vec.DivV(distanceFromScaleOriginNow, distanceFromScaleOriginAtStart);
      if (!Number.isFinite(scale.x)) scale.x = 1;
      if (!Number.isFinite(scale.y)) scale.y = 1;
      const isXLocked = dragHandle === "top" || dragHandle === "bottom";
      const isYLocked = dragHandle === "left" || dragHandle === "right";
      if (isAspectRatioLocked) {
        if (isYLocked) {
          scale.y = Math.abs(scale.x);
        } else if (isXLocked) {
          scale.x = Math.abs(scale.y);
        } else if (Math.abs(scale.x) > Math.abs(scale.y)) {
          scale.y = Math.abs(scale.x) * (scale.y < 0 ? -1 : 1);
        } else {
          scale.x = Math.abs(scale.y) * (scale.x < 0 ? -1 : 1);
        }
      } else {
        if (isXLocked) {
          scale.x = 1;
        }
        if (isYLocked) {
          scale.y = 1;
        }
      }
      if (!this.info.isCreating) {
        this.updateCursor({
          dragHandle,
          isFlippedX: scale.x < 0,
          isFlippedY: scale.y < 0,
          rotation: selectionRotation
        });
      }
      for (const id of shapeSnapshots.keys()) {
        const snapshot = shapeSnapshots.get(id);
        this.editor.resizeShape(id, scale, {
          initialShape: snapshot.shape,
          initialBounds: snapshot.bounds,
          initialPageTransform: snapshot.pageTransform,
          dragHandle,
          mode: selectedShapeIds.length === 1 && id === selectedShapeIds[0] ? "resize_bounds" : "scale_shape",
          scaleOrigin: scaleOriginPage,
          isAspectRatioLocked,
          scaleAxisRotation: selectionRotation,
          skipStartAndEndCallbacks: true
        });
      }
      if (this.editor.inputs.ctrlKey) {
        this.didHoldCommand = true;
        for (const { id, children } of frames) {
          if (!children.length) continue;
          const initial = shapeSnapshots.get(id).shape;
          const current = this.editor.getShape(id);
          if (!(initial && current)) continue;
          const dx = current.x - initial.x;
          const dy = current.y - initial.y;
          const delta = new Vec(dx, dy).rot(-initial.rotation);
          if (delta.x !== 0 || delta.y !== 0) {
            for (const child of children) {
              this.editor.updateShape({
                id: child.id,
                type: child.type,
                x: child.x - delta.x,
                y: child.y - delta.y
              });
            }
          }
        }
      } else if (this.didHoldCommand) {
        this.didHoldCommand = false;
        for (const { children } of frames) {
          if (!children.length) continue;
          for (const child of children) {
            this.editor.updateShape({
              id: child.id,
              type: child.type,
              x: child.x,
              y: child.y
            });
          }
        }
      }
    }
    // ---
    updateCursor({
      dragHandle,
      isFlippedX,
      isFlippedY,
      rotation
    }) {
      const nextCursor = { ...this.editor.getInstanceState().cursor };
      switch (dragHandle) {
        case "top_left":
        case "bottom_right": {
          nextCursor.type = "nwse-resize";
          if (isFlippedX !== isFlippedY) {
            nextCursor.type = "nesw-resize";
          }
          break;
        }
        case "top_right":
        case "bottom_left": {
          nextCursor.type = "nesw-resize";
          if (isFlippedX !== isFlippedY) {
            nextCursor.type = "nwse-resize";
          }
          break;
        }
      }
      nextCursor.rotation = rotation;
      this.editor.setCursor(nextCursor);
    }
    onExit() {
      this.parent.setCurrentToolIdMask(void 0);
      this.editor.setCursor({ type: "default", rotation: 0 });
      this.editor.snaps.clearIndicators();
    }
    _createSnapshot() {
      const selectedShapeIds = this.editor.getSelectedShapeIds();
      const selectionRotation = this.editor.getSelectionRotation();
      const {
        inputs: { originPagePoint }
      } = this.editor;
      const selectionBounds = this.editor.getSelectionRotatedPageBounds();
      const dragHandlePoint = Vec.RotWith(
        selectionBounds.getHandlePoint(this.info.handle),
        selectionBounds.point,
        selectionRotation
      );
      const cursorHandleOffset = Vec.Sub(originPagePoint, dragHandlePoint);
      const shapeSnapshots = /* @__PURE__ */ new Map();
      const frames = [];
      selectedShapeIds.forEach((id) => {
        const shape = this.editor.getShape(id);
        if (shape) {
          if (shape.type === "frame") {
            frames.push({
              id,
              children: compact(
                this.editor.getSortedChildIdsForParent(shape).map((id2) => this.editor.getShape(id2))
              )
            });
          }
          shapeSnapshots.set(shape.id, this._createShapeSnapshot(shape));
          if (this.editor.isShapeOfType(shape, "frame") && selectedShapeIds.length === 1)
            return;
          this.editor.visitDescendants(shape.id, (descendantId) => {
            const descendent = this.editor.getShape(descendantId);
            if (descendent) {
              shapeSnapshots.set(descendent.id, this._createShapeSnapshot(descendent));
              if (this.editor.isShapeOfType(descendent, "frame")) {
                return false;
              }
            }
          });
        }
      });
      const canShapesDeform = ![...shapeSnapshots.values()].some(
        (shape) => !areAnglesCompatible(shape.pageRotation, selectionRotation) || shape.isAspectRatioLocked
      );
      return {
        shapeSnapshots,
        selectionBounds,
        cursorHandleOffset,
        selectionRotation,
        selectedShapeIds,
        canShapesDeform,
        initialSelectionPageBounds: this.editor.getSelectionPageBounds(),
        frames
      };
    }
    _createShapeSnapshot(shape) {
      const pageTransform = this.editor.getShapePageTransform(shape);
      const util = this.editor.getShapeUtil(shape);
      return {
        shape,
        bounds: this.editor.getShapeGeometry(shape).bounds,
        pageTransform,
        pageRotation: Mat.Decompose(pageTransform).rotation,
        isAspectRatioLocked: util.isAspectRatioLocked(shape)
      };
    }
  };
  var ORDERED_SELECTION_HANDLES = [
    "top",
    "top_right",
    "right",
    "bottom_right",
    "bottom",
    "bottom_left",
    "left",
    "top_left"
  ];
  function rotateSelectionHandle2(handle, rotation) {
    rotation = rotation % PI2;
    const numSteps = Math.round(rotation / (PI / 4));
    const currentIndex = ORDERED_SELECTION_HANDLES.indexOf(handle);
    return ORDERED_SELECTION_HANDLES[(currentIndex + numSteps) % ORDERED_SELECTION_HANDLES.length];
  }

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Rotating.mjs
  var ONE_DEGREE = Math.PI / 180;
  var Rotating = class extends StateNode {
    static id = "rotating";
    snapshot = {};
    info = {};
    markId = "";
    onEnter(info) {
      this.info = info;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.markId = this.editor.markHistoryStoppingPoint("rotate start");
      const snapshot = getRotationSnapshot({
        editor: this.editor,
        ids: this.editor.getSelectedShapeIds()
      });
      if (!snapshot) return this.parent.transition("idle", this.info);
      this.snapshot = snapshot;
      const newSelectionRotation = this._getRotationFromPointerPosition({
        snapToNearestDegree: false
      });
      applyRotationToSnapshotShapes({
        editor: this.editor,
        delta: this._getRotationFromPointerPosition({ snapToNearestDegree: false }),
        snapshot: this.snapshot,
        stage: "start"
      });
      this.editor.setCursor({
        type: CursorTypeMap[this.info.handle],
        rotation: newSelectionRotation + this.snapshot.initialShapesRotation
      });
    }
    onExit() {
      this.editor.setCursor({ type: "default", rotation: 0 });
      this.parent.setCurrentToolIdMask(void 0);
      this.snapshot = {};
    }
    onPointerMove() {
      this.update();
    }
    onKeyDown() {
      this.update();
    }
    onKeyUp() {
      this.update();
    }
    onPointerUp() {
      this.complete();
    }
    onComplete() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    // ---
    update() {
      const newSelectionRotation = this._getRotationFromPointerPosition({
        snapToNearestDegree: false
      });
      applyRotationToSnapshotShapes({
        editor: this.editor,
        delta: newSelectionRotation,
        snapshot: this.snapshot,
        stage: "update"
      });
      this.editor.setCursor({
        type: CursorTypeMap[this.info.handle],
        rotation: newSelectionRotation + this.snapshot.initialShapesRotation
      });
    }
    cancel() {
      this.editor.bailToMark(this.markId);
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
      } else {
        this.parent.transition("idle", this.info);
      }
    }
    complete() {
      applyRotationToSnapshotShapes({
        editor: this.editor,
        delta: this._getRotationFromPointerPosition({ snapToNearestDegree: true }),
        snapshot: this.snapshot,
        stage: "end"
      });
      kickoutOccludedShapes(
        this.editor,
        this.snapshot.shapeSnapshots.map((s) => s.shape.id)
      );
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
      } else {
        this.parent.transition("idle", this.info);
      }
    }
    _getRotationFromPointerPosition({ snapToNearestDegree }) {
      const selectionRotation = this.editor.getSelectionRotation();
      const selectionBounds = this.editor.getSelectionRotatedPageBounds();
      const {
        inputs: { shiftKey, currentPagePoint }
      } = this.editor;
      const { initialCursorAngle, initialShapesRotation } = this.snapshot;
      if (!selectionBounds) return initialShapesRotation;
      const selectionPageCenter = selectionBounds.center.clone().rotWith(selectionBounds.point, selectionRotation);
      const preSnapRotationDelta = selectionPageCenter.angle(currentPagePoint) - initialCursorAngle;
      let newSelectionRotation = initialShapesRotation + preSnapRotationDelta;
      if (shiftKey) {
        newSelectionRotation = snapAngle(newSelectionRotation, 24);
      } else if (snapToNearestDegree) {
        newSelectionRotation = Math.round(newSelectionRotation / ONE_DEGREE) * ONE_DEGREE;
        if (this.editor.getInstanceState().isCoarsePointer) {
          const snappedToRightAngle = snapAngle(newSelectionRotation, 4);
          const angleToRightAngle = shortAngleDist(newSelectionRotation, snappedToRightAngle);
          if (Math.abs(angleToRightAngle) < degreesToRadians(5)) {
            newSelectionRotation = snappedToRightAngle;
          }
        }
      }
      return newSelectionRotation - initialShapesRotation;
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/ScribbleBrushing.mjs
  var ScribbleBrushing = class extends StateNode {
    static id = "scribble_brushing";
    hits = /* @__PURE__ */ new Set();
    size = 0;
    scribbleId = "id";
    initialSelectedShapeIds = /* @__PURE__ */ new Set();
    newlySelectedShapeIds = /* @__PURE__ */ new Set();
    onEnter() {
      this.initialSelectedShapeIds = new Set(
        this.editor.inputs.shiftKey ? this.editor.getSelectedShapeIds() : []
      );
      this.newlySelectedShapeIds = /* @__PURE__ */ new Set();
      this.size = 0;
      this.hits.clear();
      const scribbleItem = this.editor.scribbles.addScribble({
        color: "selection-stroke",
        opacity: 0.32,
        size: 12
      });
      this.scribbleId = scribbleItem.id;
      this.updateScribbleSelection(true);
      this.editor.updateInstanceState({ brush: null });
    }
    onExit() {
      this.editor.scribbles.stop(this.scribbleId);
    }
    onPointerMove() {
      this.updateScribbleSelection(true);
    }
    onPointerUp() {
      this.complete();
    }
    onKeyDown() {
      this.updateScribbleSelection(false);
    }
    onKeyUp() {
      if (!this.editor.inputs.altKey) {
        this.parent.transition("brushing");
      } else {
        this.updateScribbleSelection(false);
      }
    }
    onCancel() {
      this.cancel();
    }
    onComplete() {
      this.complete();
    }
    pushPointToScribble() {
      const { x, y } = this.editor.inputs.currentPagePoint;
      this.editor.scribbles.addPoint(this.scribbleId, x, y);
    }
    updateScribbleSelection(addPoint) {
      const { editor } = this;
      const currentPageShapes = this.editor.getCurrentPageRenderingShapesSorted();
      const {
        inputs: { shiftKey, originPagePoint, previousPagePoint, currentPagePoint }
      } = this.editor;
      const { newlySelectedShapeIds, initialSelectedShapeIds } = this;
      if (addPoint) {
        this.pushPointToScribble();
      }
      const shapes = currentPageShapes;
      let shape, geometry, A, B;
      const minDist = 0;
      for (let i = 0, n = shapes.length; i < n; i++) {
        shape = shapes[i];
        if (editor.isShapeOfType(shape, "group") || newlySelectedShapeIds.has(shape.id) || editor.isShapeOrAncestorLocked(shape)) {
          continue;
        }
        geometry = editor.getShapeGeometry(shape);
        if (editor.isShapeOfType(shape, "frame") && geometry.bounds.containsPoint(editor.getPointInShapeSpace(shape, originPagePoint))) {
          continue;
        }
        const pageTransform = editor.getShapePageTransform(shape);
        if (!geometry || !pageTransform) continue;
        const pt = pageTransform.clone().invert();
        A = pt.applyToPoint(previousPagePoint);
        B = pt.applyToPoint(currentPagePoint);
        const { bounds } = geometry;
        if (bounds.minX - minDist > Math.max(A.x, B.x) || bounds.minY - minDist > Math.max(A.y, B.y) || bounds.maxX + minDist < Math.min(A.x, B.x) || bounds.maxY + minDist < Math.min(A.y, B.y)) {
          continue;
        }
        if (geometry.hitTestLineSegment(A, B, minDist)) {
          const outermostShape = this.editor.getOutermostSelectableShape(shape);
          const pageMask = this.editor.getShapeMask(outermostShape.id);
          if (pageMask) {
            const intersection = intersectLineSegmentPolygon(
              previousPagePoint,
              currentPagePoint,
              pageMask
            );
            if (intersection !== null) {
              const isInMask = pointInPolygon(currentPagePoint, pageMask);
              if (!isInMask) continue;
            }
          }
          newlySelectedShapeIds.add(outermostShape.id);
        }
      }
      const current = editor.getSelectedShapeIds();
      const next = new Set(
        shiftKey ? [...newlySelectedShapeIds, ...initialSelectedShapeIds] : [...newlySelectedShapeIds]
      );
      if (current.length !== next.size || current.some((id) => !next.has(id))) {
        this.editor.setSelectedShapes(Array.from(next));
      }
    }
    complete() {
      this.updateScribbleSelection(true);
      this.parent.transition("idle");
    }
    cancel() {
      this.editor.setSelectedShapes([...this.initialSelectedShapeIds]);
      this.parent.transition("idle");
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/DragAndDropManager.mjs
  var __create11 = Object.create;
  var __defProp11 = Object.defineProperty;
  var __getOwnPropDesc11 = Object.getOwnPropertyDescriptor;
  var __knownSymbol10 = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError10 = (msg2) => {
    throw TypeError(msg2);
  };
  var __defNormalProp10 = (obj, key, value) => key in obj ? __defProp11(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name10 = (target, value) => __defProp11(target, "name", { value, configurable: true });
  var __decoratorStart10 = (base) => [, , , __create11(base?.[__knownSymbol10("metadata")] ?? null)];
  var __decoratorStrings10 = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
  var __expectFn10 = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError10("Function expected") : fn;
  var __decoratorContext10 = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings10[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError10("Already initialized") : fns.push(__expectFn10(fn || null)) });
  var __decoratorMetadata10 = (array2, target) => __defNormalProp10(target, __knownSymbol10("metadata"), array2[3]);
  var __runInitializers10 = (array2, flags, self2, value) => {
    for (var i = 0, fns = array2[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self2) : value = fns[i].call(self2, value);
    return value;
  };
  var __decorateElement10 = (array2, flags, name, decorators, target, extra) => {
    var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
    var j = k > 3 ? array2.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings10[k + 5];
    var initializers = k > 3 && (array2[j - 1] = []), extraInitializers = array2[j] || (array2[j] = []);
    var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc11(k < 4 ? target : { get [name]() {
      return __privateGet10(this, extra);
    }, set [name](x) {
      return __privateSet10(this, extra, x);
    } }, name));
    k ? p && k < 4 && __name10(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name10(target, name);
    for (var i = decorators.length - 1; i >= 0; i--) {
      ctx = __decoratorContext10(k, name, done = {}, array2[3], extraInitializers);
      if (k) {
        ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn10(target, x) : (x) => name in x };
        if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet10 : __privateMethod10)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
        if (k > 2) access.set = p ? (x, y) => __privateSet10(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
      }
      it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
      if (k ^ 4 || it === void 0) __expectFn10(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
      else if (typeof it !== "object" || it === null) __typeError10("Object expected");
      else __expectFn10(fn = it.get) && (desc.get = fn), __expectFn10(fn = it.set) && (desc.set = fn), __expectFn10(fn = it.init) && initializers.unshift(fn);
    }
    return k || __decoratorMetadata10(array2, target), desc && __defProp11(target, name, desc), p ? k ^ 4 ? extra : desc : target;
  };
  var __publicField10 = (obj, key, value) => __defNormalProp10(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck10 = (obj, member, msg2) => member.has(obj) || __typeError10("Cannot " + msg2);
  var __privateIn10 = (member, obj) => Object(obj) !== obj ? __typeError10('Cannot use the "in" operator on this value') : member.has(obj);
  var __privateGet10 = (obj, member, getter) => (__accessCheck10(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateSet10 = (obj, member, value, setter) => (__accessCheck10(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod10 = (obj, member, method) => (__accessCheck10(obj, member, "access private method"), method);
  var _dispose_dec2;
  var _init10;
  var INITIAL_POINTER_LAG_DURATION = 20;
  var FAST_POINTER_LAG_DURATION = 100;
  _dispose_dec2 = [bind];
  var DragAndDropManager = class {
    constructor(editor) {
      this.editor = editor;
      __runInitializers10(_init10, 5, this);
      __publicField10(this, "prevDroppingShapeId", null);
      __publicField10(this, "droppingNodeTimer", null);
      __publicField10(this, "first", true);
      editor.disposables.add(this.dispose);
    }
    updateDroppingNode(movingShapes, cb) {
      if (this.first) {
        this.editor.setHintingShapes(
          movingShapes.map((s) => this.editor.findShapeAncestor(s, (v) => v.type !== "group")).filter((s) => s)
        );
        this.prevDroppingShapeId = this.editor.getDroppingOverShape(this.editor.inputs.originPagePoint, movingShapes)?.id ?? null;
        this.first = false;
      }
      if (this.droppingNodeTimer === null) {
        this.setDragTimer(movingShapes, INITIAL_POINTER_LAG_DURATION, cb);
      } else if (this.editor.inputs.pointerVelocity.len() > 0.5) {
        clearTimeout(this.droppingNodeTimer);
        this.setDragTimer(movingShapes, FAST_POINTER_LAG_DURATION, cb);
      }
    }
    setDragTimer(movingShapes, duration, cb) {
      this.droppingNodeTimer = this.editor.timers.setTimeout(() => {
        this.editor.run(() => {
          this.handleDrag(this.editor.inputs.currentPagePoint, movingShapes, cb);
        });
        this.droppingNodeTimer = null;
      }, duration);
    }
    handleDrag(point, movingShapes, cb) {
      movingShapes = compact(movingShapes.map((shape) => this.editor.getShape(shape.id)));
      const nextDroppingShapeId = this.editor.getDroppingOverShape(point, movingShapes)?.id ?? null;
      if (nextDroppingShapeId === this.prevDroppingShapeId) {
        this.hintParents(movingShapes);
        return;
      }
      const { prevDroppingShapeId } = this;
      const prevDroppingShape = prevDroppingShapeId && this.editor.getShape(prevDroppingShapeId);
      const nextDroppingShape = nextDroppingShapeId && this.editor.getShape(nextDroppingShapeId);
      if (prevDroppingShape) {
        this.editor.getShapeUtil(prevDroppingShape).onDragShapesOut?.(prevDroppingShape, movingShapes);
      }
      if (nextDroppingShape) {
        this.editor.getShapeUtil(nextDroppingShape).onDragShapesOver?.(nextDroppingShape, movingShapes);
      }
      this.hintParents(movingShapes);
      cb?.();
      this.prevDroppingShapeId = nextDroppingShapeId;
    }
    hintParents(movingShapes) {
      const shapesGroupedByAncestor = /* @__PURE__ */ new Map();
      for (const shape of movingShapes) {
        const ancestor = this.editor.findShapeAncestor(shape, (v) => v.type !== "group");
        if (!ancestor) continue;
        if (!shapesGroupedByAncestor.has(ancestor.id)) {
          shapesGroupedByAncestor.set(ancestor.id, []);
        }
        shapesGroupedByAncestor.get(ancestor.id).push(shape.id);
      }
      const hintingShapes = [];
      for (const [ancestorId, shapeIds] of shapesGroupedByAncestor) {
        const ancestor = this.editor.getShape(ancestorId);
        if (!ancestor) continue;
        if (getOccludedChildren(this.editor, ancestor).length < shapeIds.length) {
          hintingShapes.push(ancestor.id);
        }
      }
      this.editor.setHintingShapes(hintingShapes);
    }
    dropShapes(shapes) {
      const { prevDroppingShapeId } = this;
      this.handleDrag(this.editor.inputs.currentPagePoint, shapes);
      if (prevDroppingShapeId) {
        const shape = this.editor.getShape(prevDroppingShapeId);
        if (!shape) return;
        this.editor.getShapeUtil(shape).onDropShapesOver?.(shape, shapes);
      }
    }
    clear() {
      this.prevDroppingShapeId = null;
      if (this.droppingNodeTimer !== null) {
        clearTimeout(this.droppingNodeTimer);
      }
      this.droppingNodeTimer = null;
      this.editor.setHintingShapes([]);
      this.first = true;
    }
    dispose() {
      this.clear();
    }
  };
  _init10 = __decoratorStart10(null);
  __decorateElement10(_init10, 1, "dispose", _dispose_dec2, DragAndDropManager);
  __decoratorMetadata10(_init10, DragAndDropManager);

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Translating.mjs
  var __create12 = Object.create;
  var __defProp12 = Object.defineProperty;
  var __getOwnPropDesc12 = Object.getOwnPropertyDescriptor;
  var __knownSymbol11 = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError11 = (msg2) => {
    throw TypeError(msg2);
  };
  var __defNormalProp11 = (obj, key, value) => key in obj ? __defProp12(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name11 = (target, value) => __defProp12(target, "name", { value, configurable: true });
  var __decoratorStart11 = (base) => [, , , __create12(base?.[__knownSymbol11("metadata")] ?? null)];
  var __decoratorStrings11 = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
  var __expectFn11 = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError11("Function expected") : fn;
  var __decoratorContext11 = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings11[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError11("Already initialized") : fns.push(__expectFn11(fn || null)) });
  var __decoratorMetadata11 = (array2, target) => __defNormalProp11(target, __knownSymbol11("metadata"), array2[3]);
  var __runInitializers11 = (array2, flags, self2, value) => {
    for (var i = 0, fns = array2[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self2) : value = fns[i].call(self2, value);
    return value;
  };
  var __decorateElement11 = (array2, flags, name, decorators, target, extra) => {
    var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
    var j = k > 3 ? array2.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings11[k + 5];
    var initializers = k > 3 && (array2[j - 1] = []), extraInitializers = array2[j] || (array2[j] = []);
    var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc12(k < 4 ? target : { get [name]() {
      return __privateGet11(this, extra);
    }, set [name](x) {
      return __privateSet11(this, extra, x);
    } }, name));
    k ? p && k < 4 && __name11(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name11(target, name);
    for (var i = decorators.length - 1; i >= 0; i--) {
      ctx = __decoratorContext11(k, name, done = {}, array2[3], extraInitializers);
      if (k) {
        ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn11(target, x) : (x) => name in x };
        if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet11 : __privateMethod11)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
        if (k > 2) access.set = p ? (x, y) => __privateSet11(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
      }
      it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
      if (k ^ 4 || it === void 0) __expectFn11(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
      else if (typeof it !== "object" || it === null) __typeError11("Object expected");
      else __expectFn11(fn = it.get) && (desc.get = fn), __expectFn11(fn = it.set) && (desc.set = fn), __expectFn11(fn = it.init) && initializers.unshift(fn);
    }
    return k || __decoratorMetadata11(array2, target), desc && __defProp12(target, name, desc), p ? k ^ 4 ? extra : desc : target;
  };
  var __publicField11 = (obj, key, value) => __defNormalProp11(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck11 = (obj, member, msg2) => member.has(obj) || __typeError11("Cannot " + msg2);
  var __privateIn11 = (member, obj) => Object(obj) !== obj ? __typeError11('Cannot use the "in" operator on this value') : member.has(obj);
  var __privateGet11 = (obj, member, getter) => (__accessCheck11(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateSet11 = (obj, member, value, setter) => (__accessCheck11(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod11 = (obj, member, method) => (__accessCheck11(obj, member, "access private method"), method);
  var _updateParentTransforms_dec;
  var _a2;
  var _init11;
  var Translating = class extends (_a2 = StateNode, _updateParentTransforms_dec = [bind], _a2) {
    constructor() {
      super(...arguments);
      __runInitializers11(_init11, 5, this);
      __publicField11(this, "info", {});
      __publicField11(this, "selectionSnapshot", {});
      __publicField11(this, "snapshot", {});
      __publicField11(this, "markId", "");
      __publicField11(this, "isCloning", false);
      __publicField11(this, "isCreating", false);
      __publicField11(this, "dragAndDropManager", new DragAndDropManager(this.editor));
    }
    onCreate(_shape) {
      return;
    }
    onEnter(info) {
      const { isCreating = false, creatingMarkId, onCreate = () => void 0 } = info;
      if (!this.editor.getSelectedShapeIds()?.length) {
        this.parent.transition("idle");
        return;
      }
      this.info = info;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.isCreating = isCreating;
      this.markId = "";
      if (isCreating) {
        if (creatingMarkId) {
          this.markId = creatingMarkId;
        } else {
          const markId = this.editor.getMarkIdMatching(
            `creating:${this.editor.getOnlySelectedShapeId()}`
          );
          if (markId) {
            this.markId = markId;
          }
        }
      } else {
        this.markId = this.editor.markHistoryStoppingPoint("translating");
      }
      this.onCreate = onCreate;
      this.isCloning = false;
      this.info = info;
      this.editor.setCursor({ type: "move", rotation: 0 });
      this.selectionSnapshot = getTranslatingSnapshot(this.editor);
      if (!this.isCreating) {
        if (this.editor.inputs.altKey) {
          this.startCloning();
          return;
        }
      }
      this.snapshot = this.selectionSnapshot;
      this.handleStart();
      this.updateShapes();
    }
    onExit() {
      this.parent.setCurrentToolIdMask(void 0);
      this.selectionSnapshot = {};
      this.snapshot = {};
      this.editor.snaps.clearIndicators();
      this.editor.setCursor({ type: "default", rotation: 0 });
      this.dragAndDropManager.clear();
    }
    onTick({ elapsed }) {
      const { editor } = this;
      this.dragAndDropManager.updateDroppingNode(
        this.snapshot.movingShapes,
        this.updateParentTransforms
      );
      editor.edgeScrollManager.updateEdgeScrolling(elapsed);
    }
    onPointerMove() {
      this.updateShapes();
    }
    onKeyDown() {
      if (this.editor.inputs.altKey && !this.isCloning) {
        this.startCloning();
        return;
      }
      this.updateShapes();
    }
    onKeyUp() {
      if (!this.editor.inputs.altKey && this.isCloning) {
        this.stopCloning();
        return;
      }
      this.updateShapes();
    }
    onPointerUp() {
      this.complete();
    }
    onComplete() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    startCloning() {
      if (this.isCreating) return;
      this.isCloning = true;
      this.reset();
      this.markId = this.editor.markHistoryStoppingPoint("translate cloning");
      this.editor.duplicateShapes(Array.from(this.editor.getSelectedShapeIds()));
      this.snapshot = getTranslatingSnapshot(this.editor);
      this.handleStart();
      this.updateShapes();
    }
    stopCloning() {
      this.isCloning = false;
      this.snapshot = this.selectionSnapshot;
      this.reset();
      this.markId = this.editor.markHistoryStoppingPoint("translate");
      this.updateShapes();
    }
    reset() {
      this.editor.bailToMark(this.markId);
    }
    complete() {
      this.updateShapes();
      this.dragAndDropManager.dropShapes(this.snapshot.movingShapes);
      kickoutOccludedShapes(
        this.editor,
        this.snapshot.movingShapes.map((s) => s.id)
      );
      this.handleEnd();
      if (this.editor.getInstanceState().isToolLocked && this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd);
      } else {
        if (this.isCreating) {
          this.onCreate?.(this.editor.getOnlySelectedShape());
        } else {
          this.parent.transition("idle");
        }
      }
    }
    cancel() {
      this.reset();
      if (this.info.onInteractionEnd) {
        this.editor.setCurrentTool(this.info.onInteractionEnd);
      } else {
        this.parent.transition("idle", this.info);
      }
    }
    handleStart() {
      const { movingShapes } = this.snapshot;
      const changes = [];
      movingShapes.forEach((shape) => {
        const util = this.editor.getShapeUtil(shape);
        const change = util.onTranslateStart?.(shape);
        if (change) {
          changes.push(change);
        }
      });
      if (changes.length > 0) {
        this.editor.updateShapes(changes);
      }
      this.editor.setHoveredShape(null);
    }
    handleEnd() {
      const { movingShapes } = this.snapshot;
      if (this.isCloning && movingShapes.length > 0) {
        const currentAveragePagePoint = Vec.Average(
          movingShapes.map((s) => this.editor.getShapePageTransform(s.id).point())
        );
        const offset4 = Vec.Sub(currentAveragePagePoint, this.selectionSnapshot.averagePagePoint);
        if (!Vec.IsNaN(offset4)) {
          this.editor.updateInstanceState({
            duplicateProps: {
              shapeIds: movingShapes.map((s) => s.id),
              offset: { x: offset4.x, y: offset4.y }
            }
          });
        }
      }
      const changes = [];
      movingShapes.forEach((shape) => {
        const current = this.editor.getShape(shape.id);
        const util = this.editor.getShapeUtil(shape);
        const change = util.onTranslateEnd?.(shape, current);
        if (change) {
          changes.push(change);
        }
      });
      if (changes.length > 0) {
        this.editor.updateShapes(changes);
      }
    }
    updateShapes() {
      const { snapshot } = this;
      this.dragAndDropManager.updateDroppingNode(snapshot.movingShapes, this.updateParentTransforms);
      moveShapesToPoint({
        editor: this.editor,
        snapshot
      });
      const { movingShapes } = snapshot;
      const changes = [];
      movingShapes.forEach((shape) => {
        const current = this.editor.getShape(shape.id);
        const util = this.editor.getShapeUtil(shape);
        const change = util.onTranslate?.(shape, current);
        if (change) {
          changes.push(change);
        }
      });
      if (changes.length > 0) {
        this.editor.updateShapes(changes);
      }
    }
    updateParentTransforms() {
      const {
        editor,
        snapshot: { shapeSnapshots }
      } = this;
      const movingShapes = [];
      shapeSnapshots.forEach((shapeSnapshot) => {
        const shape = editor.getShape(shapeSnapshot.shape.id);
        if (!shape) return null;
        movingShapes.push(shape);
        const parentTransform = isPageId(shape.parentId) ? null : Mat.Inverse(editor.getShapePageTransform(shape.parentId));
        shapeSnapshot.parentTransform = parentTransform;
      });
    }
  };
  _init11 = __decoratorStart11(_a2);
  __decorateElement11(_init11, 1, "updateParentTransforms", _updateParentTransforms_dec, Translating);
  __decoratorMetadata11(_init11, Translating);
  __publicField11(Translating, "id", "translating");
  function getTranslatingSnapshot(editor) {
    const movingShapes = [];
    const pagePoints = [];
    const selectedShapeIds = editor.getSelectedShapeIds();
    const shapeSnapshots = compact(
      selectedShapeIds.map((id) => {
        const shape = editor.getShape(id);
        if (!shape) return null;
        movingShapes.push(shape);
        const pageTransform = editor.getShapePageTransform(id);
        const pagePoint = pageTransform.point();
        const pageRotation = pageTransform.rotation();
        pagePoints.push(pagePoint);
        const parentTransform = PageRecordType.isId(shape.parentId) ? null : Mat.Inverse(editor.getShapePageTransform(shape.parentId));
        return {
          shape,
          pagePoint,
          pageRotation,
          parentTransform
        };
      })
    );
    const onlySelectedShape = editor.getOnlySelectedShape();
    let initialSnapPoints = [];
    if (onlySelectedShape) {
      initialSnapPoints = editor.snaps.shapeBounds.getSnapPoints(onlySelectedShape.id);
    } else {
      const selectionPageBounds = editor.getSelectionPageBounds();
      if (selectionPageBounds) {
        initialSnapPoints = selectionPageBounds.cornersAndCenter.map((p, i) => ({
          id: "selection:" + i,
          x: p.x,
          y: p.y
        }));
      }
    }
    let noteAdjacentPositions;
    let noteSnapshot;
    const { originPagePoint } = editor.inputs;
    const allHoveredNotes = shapeSnapshots.filter(
      (s) => editor.isShapeOfType(s.shape, "note") && editor.isPointInShape(s.shape, originPagePoint)
    );
    if (allHoveredNotes.length === 0) {
    } else if (allHoveredNotes.length === 1) {
      noteSnapshot = allHoveredNotes[0];
    } else {
      const allShapesSorted = editor.getCurrentPageShapesSorted();
      noteSnapshot = allHoveredNotes.map((s) => ({
        snapshot: s,
        index: allShapesSorted.findIndex((shape) => shape.id === s.shape.id)
      })).sort((a, b) => b.index - a.index)[0]?.snapshot;
    }
    if (noteSnapshot) {
      noteAdjacentPositions = getAvailableNoteAdjacentPositions(
        editor,
        noteSnapshot.pageRotation,
        noteSnapshot.shape.props.scale,
        noteSnapshot.shape.props.growY ?? 0
      );
    }
    return {
      averagePagePoint: Vec.Average(pagePoints),
      movingShapes,
      shapeSnapshots,
      initialPageBounds: editor.getSelectionPageBounds(),
      initialSnapPoints,
      noteAdjacentPositions,
      noteSnapshot
    };
  }
  function moveShapesToPoint({
    editor,
    snapshot
  }) {
    const { inputs } = editor;
    const {
      noteSnapshot,
      noteAdjacentPositions,
      initialPageBounds,
      initialSnapPoints,
      shapeSnapshots,
      averagePagePoint
    } = snapshot;
    const isGridMode = editor.getInstanceState().isGridMode;
    const gridSize = editor.getDocumentSettings().gridSize;
    const delta = Vec.Sub(inputs.currentPagePoint, inputs.originPagePoint);
    const flatten = editor.inputs.shiftKey ? Math.abs(delta.x) < Math.abs(delta.y) ? "x" : "y" : null;
    if (flatten === "x") {
      delta.x = 0;
    } else if (flatten === "y") {
      delta.y = 0;
    }
    editor.snaps.clearIndicators();
    const isSnapping = editor.user.getIsSnapMode() ? !inputs.ctrlKey : inputs.ctrlKey;
    let snappedToPit = false;
    if (isSnapping && editor.inputs.pointerVelocity.len() < 0.5) {
      const { nudge } = editor.snaps.shapeBounds.snapTranslateShapes({
        dragDelta: delta,
        initialSelectionPageBounds: initialPageBounds,
        lockedAxis: flatten,
        initialSelectionSnapPoints: initialSnapPoints
      });
      delta.add(nudge);
    } else {
      if (noteSnapshot && noteAdjacentPositions) {
        const { scale } = noteSnapshot.shape.props;
        const pageCenter = noteSnapshot.pagePoint.clone().add(delta).add(NOTE_CENTER_OFFSET.clone().mul(scale).rot(noteSnapshot.pageRotation));
        let min3 = NOTE_ADJACENT_POSITION_SNAP_RADIUS / editor.getZoomLevel();
        let offset4 = new Vec(0, 0);
        for (const pit of noteAdjacentPositions) {
          const deltaToPit = Vec.Sub(pageCenter, pit);
          const dist = deltaToPit.len();
          if (dist < min3) {
            snappedToPit = true;
            min3 = dist;
            offset4 = deltaToPit;
          }
        }
        delta.sub(offset4);
      }
    }
    const averageSnappedPoint = Vec.Add(averagePagePoint, delta);
    const snapIndicators = editor.snaps.getIndicators();
    if (isGridMode && !inputs.ctrlKey && !snappedToPit && snapIndicators.length === 0) {
      averageSnappedPoint.snapToGrid(gridSize);
    }
    const averageSnap = Vec.Sub(averageSnappedPoint, averagePagePoint);
    editor.updateShapes(
      compact(
        shapeSnapshots.map(({ shape, pagePoint, parentTransform }) => {
          const newPagePoint = Vec.Add(pagePoint, averageSnap);
          const newLocalPoint = parentTransform ? Mat.applyToPoint(parentTransform, newPagePoint) : newPagePoint;
          return {
            id: shape.id,
            type: shape.type,
            x: newLocalPoint.x,
            y: newLocalPoint.y
          };
        })
      )
    );
  }

  // node_modules/tldraw/dist-esm/lib/tools/SelectTool/SelectTool.mjs
  var SelectTool = class extends StateNode {
    static id = "select";
    static initial = "idle";
    static isLockable = false;
    reactor = void 0;
    static children() {
      return [
        Crop,
        Cropping,
        Idle12,
        PointingCanvas,
        PointingShape,
        Translating,
        Brushing,
        ScribbleBrushing,
        PointingCropHandle,
        PointingSelection,
        PointingResizeHandle,
        EditingShape,
        Resizing,
        Rotating,
        PointingRotateHandle,
        PointingArrowLabel,
        PointingHandle,
        DraggingHandle
      ];
    }
    // We want to clean up the duplicate props when the selection changes
    cleanUpDuplicateProps() {
      const selectedShapeIds = this.editor.getSelectedShapeIds();
      const instance = this.editor.getInstanceState();
      if (!instance.duplicateProps) return;
      const duplicatedShapes = new Set(instance.duplicateProps.shapeIds);
      if (selectedShapeIds.length === duplicatedShapes.size && selectedShapeIds.every((shapeId) => duplicatedShapes.has(shapeId))) {
        return;
      }
      this.editor.updateInstanceState({
        duplicateProps: null
      });
    }
    onEnter() {
      this.reactor = react("clean duplicate props", () => {
        try {
          this.cleanUpDuplicateProps();
        } catch (e) {
          if (typeof process !== "undefined" && false) {
          } else {
            console.error(e);
          }
        }
      });
    }
    onExit() {
      this.reactor?.();
      if (this.editor.getCurrentPageState().editingShapeId) {
        this.editor.setEditingShape(null);
      }
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/ZoomTool/childStates/Idle.mjs
  var Idle13 = class extends StateNode {
    static id = "idle";
    info = {};
    onEnter(info) {
      this.info = info;
    }
    onPointerDown() {
      this.parent.transition("pointing", this.info);
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/ZoomTool/childStates/Pointing.mjs
  var Pointing9 = class extends StateNode {
    static id = "pointing";
    info = {};
    onEnter(info) {
      this.info = info;
    }
    onPointerUp() {
      this.complete();
    }
    onPointerMove() {
      if (this.editor.inputs.isDragging) {
        this.parent.transition("zoom_brushing", this.info);
      }
    }
    onCancel() {
      this.cancel();
    }
    complete() {
      const { currentScreenPoint } = this.editor.inputs;
      if (this.editor.inputs.altKey) {
        this.editor.zoomOut(currentScreenPoint, { animation: { duration: 220 } });
      } else {
        this.editor.zoomIn(currentScreenPoint, { animation: { duration: 220 } });
      }
      this.parent.transition("idle", this.info);
    }
    cancel() {
      this.parent.transition("idle", this.info);
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/ZoomTool/childStates/ZoomBrushing.mjs
  var ZoomBrushing = class extends StateNode {
    static id = "zoom_brushing";
    info = {};
    zoomBrush = new Box();
    onEnter(info) {
      this.info = info;
      this.update();
    }
    onExit() {
      this.editor.updateInstanceState({ zoomBrush: null });
    }
    onPointerMove() {
      this.update();
    }
    onPointerUp() {
      this.complete();
    }
    onCancel() {
      this.cancel();
    }
    update() {
      const {
        inputs: { originPagePoint, currentPagePoint }
      } = this.editor;
      this.zoomBrush.setTo(Box.FromPoints([originPagePoint, currentPagePoint]));
      this.editor.updateInstanceState({ zoomBrush: this.zoomBrush.toJson() });
    }
    cancel() {
      this.parent.transition("idle", this.info);
    }
    complete() {
      const { zoomBrush } = this;
      const threshold = 8 / this.editor.getZoomLevel();
      if (zoomBrush.width < threshold && zoomBrush.height < threshold) {
        const point = this.editor.inputs.currentScreenPoint;
        if (this.editor.inputs.altKey) {
          this.editor.zoomOut(point, { animation: { duration: 220 } });
        } else {
          this.editor.zoomIn(point, { animation: { duration: 220 } });
        }
      } else {
        const targetZoom = this.editor.inputs.altKey ? this.editor.getZoomLevel() / 2 : void 0;
        this.editor.zoomToBounds(zoomBrush, { targetZoom, animation: { duration: 220 } });
      }
      this.parent.transition("idle", this.info);
    }
  };

  // node_modules/tldraw/dist-esm/lib/tools/ZoomTool/ZoomTool.mjs
  var ZoomTool = class extends StateNode {
    static id = "zoom";
    static initial = "idle";
    static children() {
      return [Idle13, ZoomBrushing, Pointing9];
    }
    static isLockable = false;
    info = {};
    onEnter(info) {
      this.info = info;
      this.parent.setCurrentToolIdMask(info.onInteractionEnd);
      this.updateCursor();
    }
    onExit() {
      this.parent.setCurrentToolIdMask(void 0);
      this.editor.updateInstanceState({ zoomBrush: null, cursor: { type: "default", rotation: 0 } });
      this.parent.setCurrentToolIdMask(void 0);
    }
    onKeyDown() {
      this.updateCursor();
    }
    onKeyUp(info) {
      this.updateCursor();
      if (info.code === "KeyZ") {
        this.complete();
      }
    }
    onInterrupt() {
      this.complete();
    }
    complete() {
      if (this.info.onInteractionEnd && this.info.onInteractionEnd !== "select") {
        this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
      } else {
        this.parent.transition("select");
      }
    }
    updateCursor() {
      if (this.editor.inputs.altKey) {
        this.editor.setCursor({ type: "zoom-out", rotation: 0 });
      } else {
        this.editor.setCursor({ type: "zoom-in", rotation: 0 });
      }
    }
  };

  // node_modules/tldraw/dist-esm/lib/defaultTools.mjs
  var defaultTools = [EraserTool, HandTool, LaserTool, ZoomTool, SelectTool];

  // node_modules/tldraw/dist-esm/lib/ui/TldrawUi.mjs
  var import_jsx_runtime172 = __toESM(require_jsx_runtime(), 1);
  var import_classnames32 = __toESM(require_classnames(), 1);
  var import_react119 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/FollowingIndicator.mjs
  var import_jsx_runtime114 = __toESM(require_jsx_runtime(), 1);
  function FollowingIndicator() {
    const editor = useEditor();
    const followingUserId = useValue("follow", () => editor.getInstanceState().followingUserId, [
      editor
    ]);
    if (!followingUserId) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(FollowingIndicatorInner, { userId: followingUserId });
  }
  function FollowingIndicatorInner({ userId }) {
    const presence = usePresence(userId);
    if (!presence) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("div", { className: "tlui-following-indicator", style: { borderColor: presence.color } });
  }

  // node_modules/tldraw/dist-esm/lib/ui/context/TldrawUiContextProvider.mjs
  var import_jsx_runtime171 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/utils/static-assets/assetUrls.mjs
  var import_react87 = __toESM(require_react(), 1);
  var defaultEditorAssetUrls = {
    fonts: {
      draw: `${getDefaultCdnBaseUrl()}/fonts/Shantell_Sans-Tldrawish.woff2`,
      serif: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexSerif-Medium.woff2`,
      sansSerif: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexSans-Medium.woff2`,
      monospace: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexMono-Medium.woff2`
    }
  };
  function useDefaultEditorAssetsWithOverrides(overrides) {
    return (0, import_react87.useMemo)(() => {
      if (!overrides) return defaultEditorAssetUrls;
      return {
        fonts: { ...defaultEditorAssetUrls.fonts, ...overrides?.fonts }
      };
    }, [overrides]);
  }

  // node_modules/tldraw/dist-esm/lib/ui/icon-types.mjs
  var iconTypes = [
    "align-bottom",
    "align-center-horizontal",
    "align-center-vertical",
    "align-left",
    "align-right",
    "align-top",
    "arrow-left",
    "arrowhead-arrow",
    "arrowhead-bar",
    "arrowhead-diamond",
    "arrowhead-dot",
    "arrowhead-none",
    "arrowhead-square",
    "arrowhead-triangle-inverted",
    "arrowhead-triangle",
    "blob",
    "bring-forward",
    "bring-to-front",
    "broken",
    "check-circle",
    "check",
    "chevron-down",
    "chevron-left",
    "chevron-right",
    "chevron-up",
    "chevrons-ne",
    "chevrons-sw",
    "clipboard-copied",
    "clipboard-copy",
    "color",
    "cross-2",
    "cross-circle",
    "dash-dashed",
    "dash-dotted",
    "dash-draw",
    "dash-solid",
    "disconnected",
    "discord",
    "distribute-horizontal",
    "distribute-vertical",
    "dot",
    "dots-horizontal",
    "dots-vertical",
    "drag-handle-dots",
    "duplicate",
    "edit",
    "external-link",
    "fill-fill",
    "fill-none",
    "fill-pattern",
    "fill-semi",
    "fill-solid",
    "follow",
    "following",
    "font-draw",
    "font-mono",
    "font-sans",
    "font-serif",
    "geo-arrow-down",
    "geo-arrow-left",
    "geo-arrow-right",
    "geo-arrow-up",
    "geo-check-box",
    "geo-cloud",
    "geo-diamond",
    "geo-ellipse",
    "geo-heart",
    "geo-hexagon",
    "geo-octagon",
    "geo-oval",
    "geo-pentagon",
    "geo-rectangle",
    "geo-rhombus-2",
    "geo-rhombus",
    "geo-star",
    "geo-trapezoid",
    "geo-triangle",
    "geo-x-box",
    "github",
    "group",
    "horizontal-align-end",
    "horizontal-align-middle",
    "horizontal-align-start",
    "info-circle",
    "leading",
    "link",
    "lock",
    "menu",
    "minus",
    "mixed",
    "pack",
    "plus",
    "question-mark-circle",
    "question-mark",
    "redo",
    "reset-zoom",
    "rotate-ccw",
    "rotate-cw",
    "send-backward",
    "send-to-back",
    "share-1",
    "size-extra-large",
    "size-large",
    "size-medium",
    "size-small",
    "spline-cubic",
    "spline-line",
    "stack-horizontal",
    "stack-vertical",
    "status-offline",
    "stretch-horizontal",
    "stretch-vertical",
    "text-align-center",
    "text-align-left",
    "text-align-right",
    "toggle-off",
    "toggle-on",
    "tool-arrow",
    "tool-eraser",
    "tool-frame",
    "tool-hand",
    "tool-highlight",
    "tool-laser",
    "tool-line",
    "tool-media",
    "tool-note",
    "tool-pencil",
    "tool-pointer",
    "tool-screenshot",
    "tool-text",
    "trash",
    "twitter",
    "undo",
    "ungroup",
    "unlock",
    "vertical-align-end",
    "vertical-align-middle",
    "vertical-align-start",
    "warning-triangle",
    "zoom-in",
    "zoom-out"
  ];

  // node_modules/tldraw/dist-esm/lib/ui/assetUrls.mjs
  var defaultUiAssetUrls = {
    ...defaultEditorAssetUrls,
    icons: Object.fromEntries(
      iconTypes.map((name) => [name, `${getDefaultCdnBaseUrl()}/icons/icon/0_merged.svg#${name}`])
    ),
    translations: Object.fromEntries(
      LANGUAGES.map((lang) => [
        lang.locale,
        `${getDefaultCdnBaseUrl()}/translations/${lang.locale}.json`
      ])
    ),
    embedIcons: Object.fromEntries(
      DEFAULT_EMBED_DEFINITIONS.map((def) => [
        def.type,
        `${getDefaultCdnBaseUrl()}/embed-icons/${def.type}.png`
      ])
    )
  };
  function useDefaultUiAssetUrlsWithOverrides(overrides) {
    if (!overrides) return defaultUiAssetUrls;
    return {
      fonts: Object.assign({ ...defaultUiAssetUrls.fonts }, { ...overrides?.fonts }),
      icons: Object.assign({ ...defaultUiAssetUrls.icons }, { ...overrides?.icons }),
      embedIcons: Object.assign({ ...defaultUiAssetUrls.embedIcons }, { ...overrides?.embedIcons }),
      translations: Object.assign(
        { ...defaultUiAssetUrls.translations },
        { ...overrides?.translations }
      )
    };
  }

  // node_modules/tldraw/dist-esm/lib/ui/context/components.mjs
  var import_jsx_runtime170 = __toESM(require_jsx_runtime(), 1);
  var import_react117 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/ActionsMenu/DefaultActionsMenu.mjs
  var import_jsx_runtime118 = __toESM(require_jsx_runtime(), 1);
  var import_react88 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiPopover.mjs
  var import_jsx_runtime116 = __toESM(require_jsx_runtime(), 1);

  // node_modules/@radix-ui/react-popover/dist/index.mjs
  var React56 = __toESM(require_react(), 1);
  var import_jsx_runtime115 = __toESM(require_jsx_runtime(), 1);
  var POPOVER_NAME = "Popover";
  var [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [
    createPopperScope
  ]);
  var usePopperScope2 = createPopperScope();
  var [PopoverProvider, usePopoverContext] = createPopoverContext(POPOVER_NAME);
  var Popover = (props) => {
    const {
      __scopePopover,
      children,
      open: openProp,
      defaultOpen,
      onOpenChange,
      modal = false
    } = props;
    const popperScope = usePopperScope2(__scopePopover);
    const triggerRef = React56.useRef(null);
    const [hasCustomAnchor, setHasCustomAnchor] = React56.useState(false);
    const [open = false, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(Root22, { ...popperScope, children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
      PopoverProvider,
      {
        scope: __scopePopover,
        contentId: useId2(),
        triggerRef,
        open,
        onOpenChange: setOpen,
        onOpenToggle: React56.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
        hasCustomAnchor,
        onCustomAnchorAdd: React56.useCallback(() => setHasCustomAnchor(true), []),
        onCustomAnchorRemove: React56.useCallback(() => setHasCustomAnchor(false), []),
        modal,
        children
      }
    ) });
  };
  Popover.displayName = POPOVER_NAME;
  var ANCHOR_NAME3 = "PopoverAnchor";
  var PopoverAnchor = React56.forwardRef(
    (props, forwardedRef) => {
      const { __scopePopover, ...anchorProps } = props;
      const context = usePopoverContext(ANCHOR_NAME3, __scopePopover);
      const popperScope = usePopperScope2(__scopePopover);
      const { onCustomAnchorAdd, onCustomAnchorRemove } = context;
      React56.useEffect(() => {
        onCustomAnchorAdd();
        return () => onCustomAnchorRemove();
      }, [onCustomAnchorAdd, onCustomAnchorRemove]);
      return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(Anchor, { ...popperScope, ...anchorProps, ref: forwardedRef });
    }
  );
  PopoverAnchor.displayName = ANCHOR_NAME3;
  var TRIGGER_NAME4 = "PopoverTrigger";
  var PopoverTrigger = React56.forwardRef(
    (props, forwardedRef) => {
      const { __scopePopover, ...triggerProps } = props;
      const context = usePopoverContext(TRIGGER_NAME4, __scopePopover);
      const popperScope = usePopperScope2(__scopePopover);
      const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
      const trigger2 = /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
        Primitive.button,
        {
          type: "button",
          "aria-haspopup": "dialog",
          "aria-expanded": context.open,
          "aria-controls": context.contentId,
          "data-state": getState2(context.open),
          ...triggerProps,
          ref: composedTriggerRef,
          onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
        }
      );
      return context.hasCustomAnchor ? trigger2 : /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(Anchor, { asChild: true, ...popperScope, children: trigger2 });
    }
  );
  PopoverTrigger.displayName = TRIGGER_NAME4;
  var PORTAL_NAME6 = "PopoverPortal";
  var [PortalProvider3, usePortalContext3] = createPopoverContext(PORTAL_NAME6, {
    forceMount: void 0
  });
  var PopoverPortal = (props) => {
    const { __scopePopover, forceMount, children, container } = props;
    const context = usePopoverContext(PORTAL_NAME6, __scopePopover);
    return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(PortalProvider3, { scope: __scopePopover, forceMount, children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(Portal, { asChild: true, container, children }) }) });
  };
  PopoverPortal.displayName = PORTAL_NAME6;
  var CONTENT_NAME6 = "PopoverContent";
  var PopoverContent = React56.forwardRef(
    (props, forwardedRef) => {
      const portalContext = usePortalContext3(CONTENT_NAME6, props.__scopePopover);
      const { forceMount = portalContext.forceMount, ...contentProps } = props;
      const context = usePopoverContext(CONTENT_NAME6, props.__scopePopover);
      return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(Presence, { present: forceMount || context.open, children: context.modal ? /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(PopoverContentModal, { ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(PopoverContentNonModal, { ...contentProps, ref: forwardedRef }) });
    }
  );
  PopoverContent.displayName = CONTENT_NAME6;
  var PopoverContentModal = React56.forwardRef(
    (props, forwardedRef) => {
      const context = usePopoverContext(CONTENT_NAME6, props.__scopePopover);
      const contentRef = React56.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, contentRef);
      const isRightClickOutsideRef = React56.useRef(false);
      React56.useEffect(() => {
        const content = contentRef.current;
        if (content) return hideOthers(content);
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(Combination_default, { as: Slot, allowPinchZoom: true, children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
        PopoverContentImpl,
        {
          ...props,
          ref: composedRefs,
          trapFocus: context.open,
          disableOutsidePointerEvents: true,
          onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
            event.preventDefault();
            if (!isRightClickOutsideRef.current) context.triggerRef.current?.focus();
          }),
          onPointerDownOutside: composeEventHandlers(
            props.onPointerDownOutside,
            (event) => {
              const originalEvent = event.detail.originalEvent;
              const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
              const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
              isRightClickOutsideRef.current = isRightClick;
            },
            { checkForDefaultPrevented: false }
          ),
          onFocusOutside: composeEventHandlers(
            props.onFocusOutside,
            (event) => event.preventDefault(),
            { checkForDefaultPrevented: false }
          )
        }
      ) });
    }
  );
  var PopoverContentNonModal = React56.forwardRef(
    (props, forwardedRef) => {
      const context = usePopoverContext(CONTENT_NAME6, props.__scopePopover);
      const hasInteractedOutsideRef = React56.useRef(false);
      const hasPointerDownOutsideRef = React56.useRef(false);
      return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
        PopoverContentImpl,
        {
          ...props,
          ref: forwardedRef,
          trapFocus: false,
          disableOutsidePointerEvents: false,
          onCloseAutoFocus: (event) => {
            props.onCloseAutoFocus?.(event);
            if (!event.defaultPrevented) {
              if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();
              event.preventDefault();
            }
            hasInteractedOutsideRef.current = false;
            hasPointerDownOutsideRef.current = false;
          },
          onInteractOutside: (event) => {
            props.onInteractOutside?.(event);
            if (!event.defaultPrevented) {
              hasInteractedOutsideRef.current = true;
              if (event.detail.originalEvent.type === "pointerdown") {
                hasPointerDownOutsideRef.current = true;
              }
            }
            const target = event.target;
            const targetIsTrigger = context.triggerRef.current?.contains(target);
            if (targetIsTrigger) event.preventDefault();
            if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
              event.preventDefault();
            }
          }
        }
      );
    }
  );
  var PopoverContentImpl = React56.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopePopover,
        trapFocus,
        onOpenAutoFocus,
        onCloseAutoFocus,
        disableOutsidePointerEvents,
        onEscapeKeyDown,
        onPointerDownOutside,
        onFocusOutside,
        onInteractOutside,
        ...contentProps
      } = props;
      const context = usePopoverContext(CONTENT_NAME6, __scopePopover);
      const popperScope = usePopperScope2(__scopePopover);
      useFocusGuards();
      return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
        FocusScope,
        {
          asChild: true,
          loop: true,
          trapped: trapFocus,
          onMountAutoFocus: onOpenAutoFocus,
          onUnmountAutoFocus: onCloseAutoFocus,
          children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
            DismissableLayer,
            {
              asChild: true,
              disableOutsidePointerEvents,
              onInteractOutside,
              onEscapeKeyDown,
              onPointerDownOutside,
              onFocusOutside,
              onDismiss: () => context.onOpenChange(false),
              children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
                Content,
                {
                  "data-state": getState2(context.open),
                  role: "dialog",
                  id: context.contentId,
                  ...popperScope,
                  ...contentProps,
                  ref: forwardedRef,
                  style: {
                    ...contentProps.style,
                    // re-namespace exposed content custom properties
                    ...{
                      "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
                      "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
                      "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
                      "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
                      "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
                    }
                  }
                }
              )
            }
          )
        }
      );
    }
  );
  var CLOSE_NAME3 = "PopoverClose";
  var PopoverClose = React56.forwardRef(
    (props, forwardedRef) => {
      const { __scopePopover, ...closeProps } = props;
      const context = usePopoverContext(CLOSE_NAME3, __scopePopover);
      return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
        Primitive.button,
        {
          type: "button",
          ...closeProps,
          ref: forwardedRef,
          onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))
        }
      );
    }
  );
  PopoverClose.displayName = CLOSE_NAME3;
  var ARROW_NAME5 = "PopoverArrow";
  var PopoverArrow = React56.forwardRef(
    (props, forwardedRef) => {
      const { __scopePopover, ...arrowProps } = props;
      const popperScope = usePopperScope2(__scopePopover);
      return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(Arrow2, { ...popperScope, ...arrowProps, ref: forwardedRef });
    }
  );
  PopoverArrow.displayName = ARROW_NAME5;
  function getState2(open) {
    return open ? "open" : "closed";
  }
  var Root26 = Popover;
  var Trigger3 = PopoverTrigger;
  var Portal4 = PopoverPortal;
  var Content24 = PopoverContent;

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiPopover.mjs
  function TldrawUiPopover({ id, children, onOpenChange, open }) {
    const [isOpen, handleOpenChange] = useMenuIsOpen(id, onOpenChange);
    return /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
      Root26,
      {
        onOpenChange: handleOpenChange,
        open: open || isOpen,
        children: /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("div", { className: "tlui-popover", children })
      }
    );
  }
  function TldrawUiPopoverTrigger({ children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(Trigger3, { asChild: true, dir: "ltr", children });
  }
  function TldrawUiPopoverContent({
    side,
    children,
    align = "center",
    sideOffset = 8,
    alignOffset = 0,
    disableEscapeKeyDown = false
  }) {
    const container = useContainer();
    return /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(Portal4, { container, children: /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
      Content24,
      {
        className: "tlui-popover__content",
        side,
        sideOffset,
        align,
        alignOffset,
        dir: "ltr",
        onEscapeKeyDown: (e) => disableEscapeKeyDown && e.preventDefault(),
        children
      }
    ) });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/ActionsMenu/DefaultActionsMenuContent.mjs
  var import_jsx_runtime117 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/hooks/menu-hooks.mjs
  function shapesWithUnboundArrows(editor) {
    const selectedShapeIds = editor.getSelectedShapeIds();
    const selectedShapes = selectedShapeIds.map((id) => {
      return editor.getShape(id);
    });
    return selectedShapes.filter((shape) => {
      if (!shape) return false;
      if (editor.isShapeOfType(shape, "arrow")) {
        const bindings = getArrowBindings(editor, shape);
        if (bindings.start || bindings.end) return false;
      }
      return true;
    });
  }
  var useThreeStackableItems = () => {
    const editor = useEditor();
    return useValue("threeStackableItems", () => shapesWithUnboundArrows(editor).length > 2, [editor]);
  };
  var useIsInSelectState = () => {
    const editor = useEditor();
    return useValue("isInSelectState", () => editor.isIn("select"), [editor]);
  };
  var useAllowGroup = () => {
    const editor = useEditor();
    return useValue(
      "allow group",
      () => {
        const selectedShapes = editor.getSelectedShapes();
        if (selectedShapes.length < 2) return false;
        for (const shape of selectedShapes) {
          if (editor.isShapeOfType(shape, "arrow")) {
            const bindings = getArrowBindings(editor, shape);
            if (bindings.start) {
              if (!selectedShapes.some((s) => s.id === bindings.start.toId)) {
                return false;
              }
            }
            if (bindings.end) {
              if (!selectedShapes.some((s) => s.id === bindings.end.toId)) {
                return false;
              }
            }
          }
        }
        return true;
      },
      [editor]
    );
  };
  var useAllowUngroup = () => {
    const editor = useEditor();
    return useValue(
      "allowUngroup",
      () => editor.getSelectedShapeIds().some((id) => editor.getShape(id)?.type === "group"),
      [editor]
    );
  };
  var showMenuPaste = typeof window !== "undefined" && "navigator" in window && Boolean(navigator.clipboard) && Boolean(navigator.clipboard.read);
  function useAnySelectedShapesCount(min3, max2) {
    const editor = useEditor();
    return useValue(
      "selectedShapes",
      () => {
        const len = editor.getSelectedShapes().length;
        if (min3 === void 0) {
          if (max2 === void 0) {
            return len;
          } else {
            return len <= max2;
          }
        } else {
          if (max2 === void 0) {
            return len >= min3;
          } else {
            return len >= min3 && len <= max2;
          }
        }
      },
      [editor, min3, max2]
    );
  }
  function useUnlockedSelectedShapesCount(min3, max2) {
    const editor = useEditor();
    return useValue(
      "selectedShapes",
      () => {
        const len = editor.getSelectedShapes().filter((s) => !editor.isShapeOrAncestorLocked(s)).length;
        if (min3 === void 0) {
          if (max2 === void 0) {
            return len;
          } else {
            return len <= max2;
          }
        } else {
          if (max2 === void 0) {
            return len >= min3;
          } else {
            return len >= min3 && len <= max2;
          }
        }
      },
      [editor]
    );
  }
  function useShowAutoSizeToggle() {
    const editor = useEditor();
    return useValue(
      "showAutoSizeToggle",
      () => {
        const selectedShapes = editor.getSelectedShapes();
        return selectedShapes.length === 1 && editor.isShapeOfType(selectedShapes[0], "text") && selectedShapes[0].props.autoSize === false;
      },
      [editor]
    );
  }
  function useHasLinkShapeSelected() {
    const editor = useEditor();
    return useValue(
      "hasLinkShapeSelected",
      () => {
        const onlySelectedShape = editor.getOnlySelectedShape();
        return !!(onlySelectedShape && onlySelectedShape.type !== "embed" && "url" in onlySelectedShape.props && !onlySelectedShape.isLocked);
      },
      [editor]
    );
  }
  function useOnlyFlippableShape() {
    const editor = useEditor();
    return useValue(
      "onlyFlippableShape",
      () => {
        const shape = editor.getOnlySelectedShape();
        return shape && (editor.isShapeOfType(shape, "group") || editor.isShapeOfType(shape, "image") || editor.isShapeOfType(shape, "arrow") || editor.isShapeOfType(shape, "line") || editor.isShapeOfType(shape, "draw"));
      },
      [editor]
    );
  }
  function useCanRedo() {
    const editor = useEditor();
    return useValue("useCanRedo", () => editor.getCanRedo(), [editor]);
  }
  function useCanUndo() {
    const editor = useEditor();
    return useValue("useCanUndo", () => editor.getCanUndo(), [editor]);
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/ActionsMenu/DefaultActionsMenuContent.mjs
  function DefaultActionsMenuContent() {
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(import_jsx_runtime117.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(AlignMenuItems, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(DistributeMenuItems, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(StackMenuItems, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ReorderMenuItems, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ZoomOrRotateMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(RotateCWMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(EditLinkMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(GroupOrUngroupMenuItem, {})
    ] });
  }
  function AlignMenuItems() {
    const twoSelected = useUnlockedSelectedShapesCount(2);
    const isInSelectState = useIsInSelectState();
    const enabled = twoSelected && isInSelectState;
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(import_jsx_runtime117.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "align-left", disabled: !enabled }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "align-center-horizontal", disabled: !enabled }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "align-right", disabled: !enabled }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "stretch-horizontal", disabled: !enabled }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "align-top", disabled: !enabled }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "align-center-vertical", disabled: !enabled }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "align-bottom", disabled: !enabled }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "stretch-vertical", disabled: !enabled })
    ] });
  }
  function DistributeMenuItems() {
    const threeSelected = useUnlockedSelectedShapesCount(3);
    const isInSelectState = useIsInSelectState();
    const enabled = threeSelected && isInSelectState;
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(import_jsx_runtime117.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "distribute-horizontal", disabled: !enabled }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "distribute-vertical", disabled: !enabled })
    ] });
  }
  function StackMenuItems() {
    const threeStackableItems = useThreeStackableItems();
    const isInSelectState = useIsInSelectState();
    const enabled = threeStackableItems && isInSelectState;
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(import_jsx_runtime117.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "stack-horizontal", disabled: !enabled }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "stack-vertical", disabled: !enabled })
    ] });
  }
  function ReorderMenuItems() {
    const oneSelected = useUnlockedSelectedShapesCount(1);
    const isInSelectState = useIsInSelectState();
    const enabled = oneSelected && isInSelectState;
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(import_jsx_runtime117.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "send-to-back", disabled: !enabled }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "send-backward", disabled: !enabled }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "bring-forward", disabled: !enabled }),
      /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "bring-to-front", disabled: !enabled })
    ] });
  }
  function ZoomOrRotateMenuItem() {
    const breakpoint = useBreakpoint();
    return breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM ? /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(ZoomTo100MenuItem, {}) : /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(RotateCCWMenuItem, {});
  }
  function ZoomTo100MenuItem() {
    const editor = useEditor();
    const isZoomedTo100 = useValue("zoom is 1", () => editor.getZoomLevel() === 1, [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "zoom-to-100", disabled: isZoomedTo100 });
  }
  function RotateCCWMenuItem() {
    const oneSelected = useUnlockedSelectedShapesCount(1);
    const isInSelectState = useIsInSelectState();
    const enabled = oneSelected && isInSelectState;
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "rotate-ccw", disabled: !enabled });
  }
  function RotateCWMenuItem() {
    const oneSelected = useUnlockedSelectedShapesCount(1);
    const isInSelectState = useIsInSelectState();
    const enabled = oneSelected && isInSelectState;
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "rotate-cw", disabled: !enabled });
  }
  function EditLinkMenuItem() {
    const showEditLink = useHasLinkShapeSelected();
    const isInSelectState = useIsInSelectState();
    const enabled = showEditLink && isInSelectState;
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "edit-link", disabled: !enabled });
  }
  function GroupOrUngroupMenuItem() {
    const allowGroup = useAllowGroup();
    const allowUngroup = useAllowUngroup();
    return allowGroup ? /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(GroupMenuItem, {}) : allowUngroup ? /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(UngroupMenuItem, {}) : /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(GroupMenuItem, {});
  }
  function GroupMenuItem() {
    const twoSelected = useUnlockedSelectedShapesCount(2);
    const isInSelectState = useIsInSelectState();
    const enabled = twoSelected && isInSelectState;
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "group", disabled: !enabled });
  }
  function UngroupMenuItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(TldrawUiMenuActionItem, { actionId: "ungroup" });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/ActionsMenu/DefaultActionsMenu.mjs
  var DefaultActionsMenu = (0, import_react88.memo)(function DefaultActionsMenu2({
    children
  }) {
    const msg2 = useTranslation();
    const breakpoint = useBreakpoint();
    const isReadonlyMode = useReadonly();
    const ref = (0, import_react88.useRef)(null);
    usePassThroughWheelEvents(ref);
    const editor = useEditor();
    const isInAcceptableReadonlyState = useValue(
      "should display quick actions when in readonly",
      () => editor.isInAny("hand", "zoom"),
      [editor]
    );
    const content = children ?? /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(DefaultActionsMenuContent, {});
    if (isReadonlyMode && !isInAcceptableReadonlyState) return;
    return /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(TldrawUiPopover, { id: "actions-menu", children: [
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(TldrawUiPopoverTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
        TldrawUiButton,
        {
          type: "icon",
          "data-testid": "actions-menu.button",
          title: msg2("actions-menu.title"),
          children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(TldrawUiButtonIcon, { icon: "dots-vertical", small: true })
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
        TldrawUiPopoverContent,
        {
          side: breakpoint >= PORTRAIT_BREAKPOINT.TABLET ? "bottom" : "top",
          sideOffset: 6,
          children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
            "div",
            {
              ref,
              className: "tlui-actions-menu tlui-buttons__grid",
              "data-testid": "actions-menu.content",
              children: /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(TldrawUiMenuContextProvider, { type: "icons", sourceId: "actions-menu", children: content })
            }
          )
        }
      )
    ] });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/ContextMenu/DefaultContextMenu.mjs
  var import_jsx_runtime121 = __toESM(require_jsx_runtime(), 1);
  var import_react89 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/ContextMenu/DefaultContextMenuContent.mjs
  var import_jsx_runtime120 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/menu-items.mjs
  var import_jsx_runtime119 = __toESM(require_jsx_runtime(), 1);
  function ToggleAutoSizeMenuItem() {
    const shouldDisplay = useShowAutoSizeToggle();
    if (!shouldDisplay) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "toggle-auto-size" });
  }
  function EditLinkMenuItem2() {
    const shouldDisplay = useHasLinkShapeSelected();
    if (!shouldDisplay) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "edit-link" });
  }
  function DuplicateMenuItem() {
    const shouldDisplay = useUnlockedSelectedShapesCount(1);
    if (!shouldDisplay) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "duplicate" });
  }
  function FlattenMenuItem() {
    const editor = useEditor();
    const shouldDisplay = useValue(
      "should display flatten option",
      () => {
        const selectedShapeIds = editor.getSelectedShapeIds();
        if (selectedShapeIds.length === 0) return false;
        const onlySelectedShape = editor.getOnlySelectedShape();
        if (onlySelectedShape && editor.isShapeOfType(onlySelectedShape, "image")) {
          return false;
        }
        return true;
      },
      [editor]
    );
    if (!shouldDisplay) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "flatten-to-image" });
  }
  function GroupMenuItem2() {
    const shouldDisplay = useAllowGroup();
    if (!shouldDisplay) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "group" });
  }
  function UngroupMenuItem2() {
    const shouldDisplay = useAllowUngroup();
    if (!shouldDisplay) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "ungroup" });
  }
  function RemoveFrameMenuItem() {
    const editor = useEditor();
    const shouldDisplay = useValue(
      "allow unframe",
      () => {
        const selectedShapes = editor.getSelectedShapes();
        if (selectedShapes.length === 0) return false;
        return selectedShapes.every((shape) => editor.isShapeOfType(shape, "frame"));
      },
      [editor]
    );
    if (!shouldDisplay) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "remove-frame" });
  }
  function FitFrameToContentMenuItem() {
    const editor = useEditor();
    const shouldDisplay = useValue(
      "allow fit frame to content",
      () => {
        const onlySelectedShape = editor.getOnlySelectedShape();
        if (!onlySelectedShape) return false;
        return editor.isShapeOfType(onlySelectedShape, "frame") && editor.getSortedChildIdsForParent(onlySelectedShape).length > 0;
      },
      [editor]
    );
    if (!shouldDisplay) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "fit-frame-to-content" });
  }
  function ToggleLockMenuItem() {
    const editor = useEditor();
    const shouldDisplay = useValue("selected shapes", () => editor.getSelectedShapes().length > 0, [
      editor
    ]);
    if (!shouldDisplay) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "toggle-lock" });
  }
  function ToggleTransparentBgMenuItem() {
    const editor = useEditor();
    const isTransparentBg = useValue(
      "isTransparentBg",
      () => !editor.getInstanceState().exportBackground,
      [editor]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
      TldrawUiMenuActionCheckboxItem,
      {
        actionId: "toggle-transparent",
        checked: isTransparentBg,
        toggle: true
      }
    );
  }
  function UnlockAllMenuItem() {
    const editor = useEditor();
    const shouldDisplay = useValue("any shapes", () => editor.getCurrentPageShapeIds().size > 0, [
      editor
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "unlock-all", disabled: !shouldDisplay });
  }
  function ZoomTo100MenuItem2() {
    const editor = useEditor();
    const isZoomedTo100 = useValue("zoomed to 100", () => editor.getZoomLevel() === 1, [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "zoom-to-100", noClose: true, disabled: isZoomedTo100 });
  }
  function ZoomToFitMenuItem() {
    const editor = useEditor();
    const hasShapes = useValue("has shapes", () => editor.getCurrentPageShapeIds().size > 0, [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
      TldrawUiMenuActionItem,
      {
        actionId: "zoom-to-fit",
        disabled: !hasShapes,
        "data-testid": "minimap.zoom-menu.zoom-to-fit",
        noClose: true
      }
    );
  }
  function ZoomToSelectionMenuItem() {
    const editor = useEditor();
    const hasSelected = useValue("has shapes", () => editor.getSelectedShapeIds().length > 0, [
      editor
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
      TldrawUiMenuActionItem,
      {
        actionId: "zoom-to-selection",
        disabled: !hasSelected,
        "data-testid": "minimap.zoom-menu.zoom-to-selection",
        noClose: true
      }
    );
  }
  function ClipboardMenuGroup() {
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuGroup, { id: "clipboard", children: [
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(CutMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(CopyMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(PasteMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(DuplicateMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(DeleteMenuItem, {})
    ] });
  }
  function CopyAsMenuGroup() {
    const editor = useEditor();
    const atLeastOneShapeOnPage = useValue(
      "atLeastOneShapeOnPage",
      () => editor.getCurrentPageShapeIds().size > 0,
      [editor]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(
      TldrawUiMenuSubmenu,
      {
        id: "copy-as",
        label: "context-menu.copy-as",
        size: "small",
        disabled: !atLeastOneShapeOnPage,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuGroup, { id: "copy-as-group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "copy-as-svg" }),
            Boolean(window.navigator.clipboard?.write) && /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "copy-as-png" }),
            /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "copy-as-json" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuGroup, { id: "copy-as-bg", children: /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(ToggleTransparentBgMenuItem, {}) })
        ]
      }
    );
  }
  function CutMenuItem() {
    const shouldDisplay = useUnlockedSelectedShapesCount(1);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "cut", disabled: !shouldDisplay });
  }
  function CopyMenuItem() {
    const shouldDisplay = useAnySelectedShapesCount(1);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "copy", disabled: !shouldDisplay });
  }
  function PasteMenuItem() {
    const shouldDisplay = showMenuPaste;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "paste", disabled: !shouldDisplay });
  }
  function ConversionsMenuGroup() {
    const editor = useEditor();
    const atLeastOneShapeOnPage = useValue(
      "atLeastOneShapeOnPage",
      () => editor.getCurrentPageShapeIds().size > 0,
      [editor]
    );
    if (!atLeastOneShapeOnPage) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuGroup, { id: "conversions", children: [
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(CopyAsMenuGroup, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuSubmenu, { id: "export-as", label: "context-menu.export-as", size: "small", children: [
        /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuGroup, { id: "export-as-group", children: [
          /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "export-as-svg" }),
          /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "export-as-png" }),
          /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "export-as-json" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuGroup, { id: "export-as-bg", children: /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(ToggleTransparentBgMenuItem, {}) })
      ] })
    ] });
  }
  function SelectAllMenuItem() {
    const editor = useEditor();
    const atLeastOneShapeOnPage = useValue(
      "atLeastOneShapeOnPage",
      () => editor.getCurrentPageShapeIds().size > 0,
      [editor]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "select-all", disabled: !atLeastOneShapeOnPage });
  }
  function DeleteMenuItem() {
    const oneSelected = useUnlockedSelectedShapesCount(1);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "delete", disabled: !oneSelected });
  }
  function EditMenuSubmenu() {
    const isReadonlyMode = useReadonly();
    if (!useAnySelectedShapesCount(1)) return null;
    if (isReadonlyMode) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuSubmenu, { id: "edit", label: "context-menu.edit", size: "small", children: [
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(GroupMenuItem2, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(UngroupMenuItem2, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(FlattenMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(EditLinkMenuItem2, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(FitFrameToContentMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(RemoveFrameMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(ConvertToEmbedMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(ConvertToBookmarkMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(ToggleAutoSizeMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(ToggleLockMenuItem, {})
    ] });
  }
  function ArrangeMenuSubmenu() {
    const twoSelected = useUnlockedSelectedShapesCount(2);
    const onlyFlippableShapeSelected = useOnlyFlippableShape();
    const isReadonlyMode = useReadonly();
    if (isReadonlyMode) return null;
    if (!(twoSelected || onlyFlippableShapeSelected)) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuSubmenu, { id: "arrange", label: "context-menu.arrange", size: "small", children: [
      twoSelected && /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuGroup, { id: "align", children: [
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "align-left" }),
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "align-center-horizontal" }),
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "align-right" }),
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "align-top" }),
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "align-center-vertical" }),
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "align-bottom" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(DistributeMenuGroup, {}),
      twoSelected && /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuGroup, { id: "stretch", children: [
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "stretch-horizontal" }),
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "stretch-vertical" })
      ] }),
      (twoSelected || onlyFlippableShapeSelected) && /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuGroup, { id: "flip", children: [
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "flip-horizontal" }),
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "flip-vertical" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(OrderMenuGroup, {})
    ] });
  }
  function DistributeMenuGroup() {
    const threeSelected = useUnlockedSelectedShapesCount(3);
    if (!threeSelected) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuGroup, { id: "distribute", children: [
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "distribute-horizontal" }),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "distribute-vertical" })
    ] });
  }
  function OrderMenuGroup() {
    const twoSelected = useUnlockedSelectedShapesCount(2);
    const threeStackableItems = useThreeStackableItems();
    if (!twoSelected) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuGroup, { id: "order", children: [
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "pack" }),
      threeStackableItems && /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "stack-horizontal" }),
      threeStackableItems && /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "stack-vertical" })
    ] });
  }
  function ReorderMenuSubmenu() {
    const isReadonlyMode = useReadonly();
    const oneSelected = useUnlockedSelectedShapesCount(1);
    if (isReadonlyMode) return null;
    if (!oneSelected) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuSubmenu, { id: "reorder", label: "context-menu.reorder", size: "small", children: /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuGroup, { id: "reorder", children: [
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "bring-to-front" }),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "bring-forward" }),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "send-backward" }),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "send-to-back" })
    ] }) });
  }
  function MoveToPageMenu() {
    const editor = useEditor();
    const pages = useValue("pages", () => editor.getPages(), [editor]);
    const currentPageId = useValue("current page id", () => editor.getCurrentPageId(), [editor]);
    const { addToast } = useToasts();
    const trackEvent = useUiEvents();
    const isReadonlyMode = useReadonly();
    const oneSelected = useUnlockedSelectedShapesCount(1);
    if (!oneSelected) return null;
    if (isReadonlyMode) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(TldrawUiMenuSubmenu, { id: "move-to-page", label: "context-menu.move-to-page", size: "small", children: [
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuGroup, { id: "pages", children: pages.map((page) => /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
        TldrawUiMenuItem,
        {
          id: page.id,
          disabled: currentPageId === page.id,
          label: page.name.length > 30 ? `${page.name.slice(0, 30)}\u2026` : page.name,
          onSelect: () => {
            editor.markHistoryStoppingPoint("move_shapes_to_page");
            editor.moveShapesToPage(editor.getSelectedShapeIds(), page.id);
            const toPage = editor.getPage(page.id);
            if (toPage) {
              addToast({
                title: "Changed Page",
                description: `Moved to ${toPage.name}.`,
                actions: [
                  {
                    label: "Go Back",
                    type: "primary",
                    onClick: () => {
                      editor.markHistoryStoppingPoint("change-page");
                      editor.setCurrentPage(currentPageId);
                    }
                  }
                ]
              });
            }
            trackEvent("move-to-page", { source: "context-menu" });
          }
        },
        page.id
      )) }),
      /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuGroup, { id: "new-page", children: /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "move-to-new-page" }) })
    ] });
  }
  function ConvertToBookmarkMenuItem() {
    const editor = useEditor();
    const oneEmbedSelected = useValue(
      "oneEmbedSelected",
      () => {
        const onlySelectedShape = editor.getOnlySelectedShape();
        if (!onlySelectedShape) return false;
        return !!(editor.isShapeOfType(onlySelectedShape, "embed") && onlySelectedShape.props.url && !editor.isShapeOrAncestorLocked(onlySelectedShape));
      },
      [editor]
    );
    if (!oneEmbedSelected) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "convert-to-bookmark" });
  }
  function ConvertToEmbedMenuItem() {
    const editor = useEditor();
    const getEmbedDefinition = useGetEmbedDefinition();
    const oneEmbeddableBookmarkSelected = useValue(
      "oneEmbeddableBookmarkSelected",
      () => {
        const onlySelectedShape = editor.getOnlySelectedShape();
        if (!onlySelectedShape) return false;
        return !!(editor.isShapeOfType(onlySelectedShape, "bookmark") && onlySelectedShape.props.url && getEmbedDefinition(onlySelectedShape.props.url) && !editor.isShapeOrAncestorLocked(onlySelectedShape));
      },
      [editor]
    );
    if (!oneEmbeddableBookmarkSelected) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "convert-to-embed" });
  }
  function ToggleSnapModeItem() {
    const editor = useEditor();
    const isSnapMode = useValue("isSnapMode", () => editor.user.getIsSnapMode(), [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionCheckboxItem, { actionId: "toggle-snap-mode", checked: isSnapMode });
  }
  function ToggleToolLockItem() {
    const editor = useEditor();
    const isToolLock = useValue("isToolLock", () => editor.getInstanceState().isToolLocked, [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionCheckboxItem, { actionId: "toggle-tool-lock", checked: isToolLock });
  }
  function ToggleGridItem() {
    const editor = useEditor();
    const isGridMode = useValue("isGridMode", () => editor.getInstanceState().isGridMode, [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionCheckboxItem, { actionId: "toggle-grid", checked: isGridMode });
  }
  function ToggleWrapModeItem() {
    const editor = useEditor();
    const isWrapMode = useValue("isWrapMode", () => editor.user.getIsWrapMode(), [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionCheckboxItem, { actionId: "toggle-wrap-mode", checked: isWrapMode });
  }
  function ToggleFocusModeItem() {
    const editor = useEditor();
    const isFocusMode = useValue("isFocusMode", () => editor.getInstanceState().isFocusMode, [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionCheckboxItem, { actionId: "toggle-focus-mode", checked: isFocusMode });
  }
  function ToggleEdgeScrollingItem() {
    const editor = useEditor();
    const edgeScrollSpeed = useValue("edgeScrollSpeed", () => editor.user.getEdgeScrollSpeed(), [
      editor
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
      TldrawUiMenuActionCheckboxItem,
      {
        actionId: "toggle-edge-scrolling",
        checked: edgeScrollSpeed === 1
      }
    );
  }
  function ToggleReduceMotionItem() {
    const editor = useEditor();
    const animationSpeed = useValue("animationSpeed", () => editor.user.getAnimationSpeed(), [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
      TldrawUiMenuActionCheckboxItem,
      {
        actionId: "toggle-reduce-motion",
        checked: animationSpeed === 0
      }
    );
  }
  function ToggleDebugModeItem() {
    const editor = useEditor();
    const isDebugMode = useValue("isDebugMode", () => editor.getInstanceState().isDebugMode, [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionCheckboxItem, { actionId: "toggle-debug-mode", checked: isDebugMode });
  }
  function ToggleDynamicSizeModeItem() {
    const editor = useEditor();
    const isDynamicResizeMode = useValue(
      "dynamic resize",
      () => editor.user.getIsDynamicResizeMode(),
      [editor]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
      TldrawUiMenuActionCheckboxItem,
      {
        actionId: "toggle-dynamic-size-mode",
        checked: isDynamicResizeMode
      }
    );
  }
  function TogglePasteAtCursorItem() {
    const editor = useEditor();
    const pasteAtCursor = useValue("paste at cursor", () => editor.user.getIsPasteAtCursorMode(), [
      editor
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionCheckboxItem, { actionId: "toggle-paste-at-cursor", checked: pasteAtCursor });
  }
  function CursorChatItem() {
    const editor = useEditor();
    const shouldShow = useValue(
      "show cursor chat",
      () => editor.getCurrentToolId() === "select" && !editor.getInstanceState().isCoarsePointer,
      [editor]
    );
    if (!shouldShow) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TldrawUiMenuActionItem, { actionId: "open-cursor-chat" });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/ContextMenu/DefaultContextMenuContent.mjs
  function DefaultContextMenuContent() {
    const editor = useEditor();
    const showCollaborationUi = useShowCollaborationUi();
    const selectToolActive = useValue(
      "isSelectToolActive",
      () => editor.getCurrentToolId() === "select",
      [editor]
    );
    const isSinglePageMode = useValue("isSinglePageMode", () => editor.options.maxPages <= 1, [
      editor
    ]);
    if (!selectToolActive) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(import_jsx_runtime120.Fragment, { children: [
      showCollaborationUi && /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(CursorChatItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(TldrawUiMenuGroup, { id: "modify", children: [
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(EditMenuSubmenu, {}),
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(ArrangeMenuSubmenu, {}),
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(ReorderMenuSubmenu, {}),
        !isSinglePageMode && /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(MoveToPageMenu, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(ClipboardMenuGroup, {}),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(ConversionsMenuGroup, {}),
      /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(TldrawUiMenuGroup, { id: "select-all", children: /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(SelectAllMenuItem, {}) })
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/ContextMenu/DefaultContextMenu.mjs
  var DefaultContextMenu = (0, import_react89.memo)(function DefaultContextMenu2({
    children,
    disabled = false
  }) {
    const editor = useEditor();
    const { Canvas } = useEditorComponents();
    const cb = (0, import_react89.useCallback)(
      (isOpen2) => {
        if (!isOpen2) {
          const onlySelectedShape = editor.getOnlySelectedShape();
          if (onlySelectedShape && editor.isShapeOrAncestorLocked(onlySelectedShape)) {
            editor.setSelectedShapes([]);
          }
        } else {
          if (editor.getInstanceState().isCoarsePointer) {
            const selectedShapes = editor.getSelectedShapes();
            const {
              inputs: { currentPagePoint }
            } = editor;
            const shapesAtPoint = editor.getShapesAtPoint(currentPagePoint);
            if (
              // if there are no selected shapes
              !editor.getSelectedShapes().length || // OR if none of the shapes at the point include the selected shape
              !shapesAtPoint.some((s) => selectedShapes.includes(s))
            ) {
              const lockedShapes = shapesAtPoint.filter((s) => editor.isShapeOrAncestorLocked(s));
              if (lockedShapes.length) {
                editor.select(...lockedShapes.map((s) => s.id));
              }
            }
          }
        }
      },
      [editor]
    );
    const container = useContainer();
    const [isOpen, handleOpenChange] = useMenuIsOpen("context menu", cb);
    const content = children ?? /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(DefaultContextMenuContent, {});
    return /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)(Root23, { dir: "ltr", onOpenChange: handleOpenChange, modal: false, children: [
      /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(Trigger, { onContextMenu: void 0, dir: "ltr", disabled, children: Canvas ? /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(Canvas, {}) : null }),
      isOpen && /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(Portal22, { container, children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(
        Content22,
        {
          className: "tlui-menu scrollable",
          "data-testid": "context-menu",
          alignOffset: -4,
          collisionPadding: 4,
          onContextMenu: preventDefault,
          children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(TldrawUiMenuContextProvider, { type: "context-menu", sourceId: "context-menu", children: content })
        }
      ) })
    ] });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/CursorChatBubble.mjs
  var import_jsx_runtime122 = __toESM(require_jsx_runtime(), 1);
  var import_react90 = __toESM(require_react(), 1);
  var CHAT_MESSAGE_TIMEOUT_CLOSING = 2e3;
  var CHAT_MESSAGE_TIMEOUT_CHATTING = 5e3;
  var CursorChatBubble = track(function CursorChatBubble2() {
    const editor = useEditor();
    const { isChatting, chatMessage } = editor.getInstanceState();
    const rTimeout = (0, import_react90.useRef)(-1);
    const [value, setValue] = (0, import_react90.useState)("");
    (0, import_react90.useEffect)(() => {
      const closingUp = !isChatting && chatMessage;
      if (closingUp || isChatting) {
        const duration = isChatting ? CHAT_MESSAGE_TIMEOUT_CHATTING : CHAT_MESSAGE_TIMEOUT_CLOSING;
        rTimeout.current = editor.timers.setTimeout(() => {
          editor.updateInstanceState({ chatMessage: "", isChatting: false });
          setValue("");
          editor.focus();
        }, duration);
      }
      return () => {
        clearTimeout(rTimeout.current);
      };
    }, [editor, chatMessage, isChatting]);
    if (isChatting)
      return /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(CursorChatInput, { value, setValue, chatMessage });
    return chatMessage.trim() ? /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(NotEditingChatMessage, { chatMessage }) : null;
  });
  function usePositionBubble(ref) {
    const editor = useEditor();
    (0, import_react90.useLayoutEffect)(() => {
      const elm = ref.current;
      if (!elm) return;
      const { x, y } = editor.inputs.currentScreenPoint;
      ref.current?.style.setProperty("transform", `translate(${x}px, ${y}px)`);
      function positionChatBubble(e) {
        const { minX, minY } = editor.getViewportScreenBounds();
        ref.current?.style.setProperty(
          "transform",
          `translate(${e.clientX - minX}px, ${e.clientY - minY}px)`
        );
      }
      window.addEventListener("pointermove", positionChatBubble);
      return () => {
        window.removeEventListener("pointermove", positionChatBubble);
      };
    }, [ref, editor]);
  }
  var NotEditingChatMessage = ({ chatMessage }) => {
    const editor = useEditor();
    const ref = (0, import_react90.useRef)(null);
    usePositionBubble(ref);
    return /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(
      "div",
      {
        ref,
        className: "tl-cursor-chat tl-cursor-chat__bubble",
        style: { backgroundColor: editor.user.getColor() },
        children: chatMessage
      }
    );
  };
  var CursorChatInput = track(function CursorChatInput2({
    chatMessage,
    value,
    setValue
  }) {
    const editor = useEditor();
    const msg2 = useTranslation();
    const ref = (0, import_react90.useRef)(null);
    const placeholder = chatMessage || msg2("cursor-chat.type-to-chat");
    usePositionBubble(ref);
    (0, import_react90.useLayoutEffect)(() => {
      const elm = ref.current;
      if (!elm) return;
      const textMeasurement = editor.textMeasure.measureText(value || placeholder, {
        fontFamily: "var(--font-body)",
        fontSize: 12,
        fontWeight: "500",
        fontStyle: "normal",
        maxWidth: null,
        lineHeight: 1,
        padding: "6px"
      });
      elm.style.setProperty("width", textMeasurement.w + "px");
    }, [editor, value, placeholder]);
    (0, import_react90.useLayoutEffect)(() => {
      const raf = editor.timers.requestAnimationFrame(() => {
        ref.current?.focus();
      });
      return () => {
        cancelAnimationFrame(raf);
      };
    }, [editor]);
    const stopChatting = (0, import_react90.useCallback)(() => {
      editor.updateInstanceState({ isChatting: false });
      editor.focus();
    }, [editor]);
    const handleChange = (0, import_react90.useCallback)(
      (e) => {
        const { value: value2 } = e.target;
        setValue(value2.slice(0, 64));
        editor.updateInstanceState({ chatMessage: value2 });
      },
      [editor, setValue]
    );
    const handleKeyDown = (0, import_react90.useCallback)(
      (e) => {
        const elm = ref.current;
        if (!elm) return;
        const { value: currentValue } = elm;
        switch (e.key) {
          case "Enter": {
            preventDefault(e);
            e.stopPropagation();
            if (!currentValue) {
              stopChatting();
              return;
            }
            setValue("");
            break;
          }
          case "Escape": {
            preventDefault(e);
            e.stopPropagation();
            stopChatting();
            break;
          }
        }
      },
      [stopChatting, setValue]
    );
    const handlePaste = (0, import_react90.useCallback)((e) => {
      e.stopPropagation();
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(
      "input",
      {
        ref,
        className: `tl-cursor-chat`,
        style: { backgroundColor: editor.user.getColor() },
        onBlur: stopChatting,
        onChange: handleChange,
        onKeyDown: handleKeyDown,
        onPaste: handlePaste,
        value,
        placeholder,
        spellCheck: false
      }
    );
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/DebugMenu/DefaultDebugMenu.mjs
  var import_jsx_runtime125 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/DebugMenu/DefaultDebugMenuContent.mjs
  var import_jsx_runtime124 = __toESM(require_jsx_runtime(), 1);
  var import_react91 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/Button/TldrawUiButtonCheck.mjs
  var import_jsx_runtime123 = __toESM(require_jsx_runtime(), 1);
  function TldrawUiButtonCheck({ checked }) {
    return /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(TldrawUiIcon, { icon: checked ? "check" : "none", className: "tlui-button__icon", small: true });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/DebugMenu/DefaultDebugMenuContent.mjs
  function DefaultDebugMenuContent() {
    const editor = useEditor();
    const { addToast } = useToasts();
    const { addDialog } = useDialogs();
    const [error, setError] = import_react91.default.useState(false);
    return /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(import_jsx_runtime124.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(TldrawUiMenuGroup, { id: "items", children: [
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
          TldrawUiMenuItem,
          {
            id: "add-toast",
            onSelect: () => {
              addToast({
                id: uniqueId(),
                title: "Something good happened",
                description: "Hey, attend to this thing over here. It might be important!",
                keepOpen: true,
                severity: "success"
                // icon?: string
                // title?: string
                // description?: string
                // actions?: TLUiToastAction[]
              });
              addToast({
                id: uniqueId(),
                title: "Something happened",
                description: "Hey, attend to this thing over here. It might be important!",
                keepOpen: true,
                severity: "info",
                actions: [
                  {
                    label: "Primary",
                    type: "primary",
                    onClick: () => {
                    }
                  },
                  {
                    label: "Normal",
                    type: "normal",
                    onClick: () => {
                    }
                  },
                  {
                    label: "Danger",
                    type: "danger",
                    onClick: () => {
                    }
                  }
                ]
                // icon?: string
                // title?: string
                // description?: string
                // actions?: TLUiToastAction[]
              });
              addToast({
                id: uniqueId(),
                title: "Something maybe bad happened",
                description: "Hey, attend to this thing over here. It might be important!",
                keepOpen: true,
                severity: "warning",
                actions: [
                  {
                    label: "Primary",
                    type: "primary",
                    onClick: () => {
                    }
                  },
                  {
                    label: "Normal",
                    type: "normal",
                    onClick: () => {
                    }
                  },
                  {
                    label: "Danger",
                    type: "danger",
                    onClick: () => {
                    }
                  }
                ]
              });
              addToast({
                id: uniqueId(),
                title: "Something bad happened",
                severity: "error",
                keepOpen: true
              });
            },
            label: untranslated("Show toast")
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
          TldrawUiMenuItem,
          {
            id: "show-dialog",
            label: "Show dialog",
            onSelect: () => {
              addDialog({
                component: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
                  ExampleDialog,
                  {
                    displayDontShowAgain: true,
                    onCancel: () => onClose(),
                    onContinue: () => onClose()
                  }
                ),
                onClose: () => {
                }
              });
            }
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
          TldrawUiMenuItem,
          {
            id: "create-shapes",
            label: "Create 100 shapes",
            onSelect: () => createNShapes(editor, 100)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
          TldrawUiMenuItem,
          {
            id: "count-nodes",
            label: "Count shapes / nodes",
            onSelect: () => {
              const selectedShapes = editor.getSelectedShapes();
              const shapes = selectedShapes.length === 0 ? editor.getRenderingShapes() : selectedShapes;
              window.alert(
                `Shapes ${shapes.length}, DOM nodes:${document.querySelector(".tl-shapes").querySelectorAll("*")?.length}`
              );
            }
          }
        ),
        (() => {
          if (error) throw Error("oh no!");
          return null;
        })(),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiMenuItem, { id: "throw-error", onSelect: () => setError(true), label: "Throw error" }),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiMenuItem, { id: "hard-reset", onSelect: hardResetEditor, label: "Hard reset" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(TldrawUiMenuGroup, { id: "flags", children: [
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(DebugFlags, {}),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(FeatureFlags, {})
      ] })
    ] });
  }
  function DebugFlags() {
    const items = Object.values(debugFlags);
    if (!items.length) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiMenuSubmenu, { id: "debug flags", label: "Debug Flags", children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiMenuGroup, { id: "debug flags", children: items.map((flag) => /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(DebugFlagToggle, { flag }, flag.name)) }) });
  }
  function FeatureFlags() {
    const items = Object.values(featureFlags);
    if (!items.length) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiMenuSubmenu, { id: "feature flags", label: "Feature Flags", children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiMenuGroup, { id: "feature flags", children: items.map((flag) => /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(DebugFlagToggle, { flag }, flag.name)) }) });
  }
  function ExampleDialog({
    title = "title",
    body = "hello hello hello",
    cancel = "Cancel",
    confirm = "Continue",
    displayDontShowAgain = false,
    onCancel,
    onContinue
  }) {
    const [dontShowAgain, setDontShowAgain] = import_react91.default.useState(false);
    return /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(import_jsx_runtime124.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(TldrawUiDialogHeader, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiDialogTitle, { children: title }),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiDialogCloseButton, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiDialogBody, { style: { maxWidth: 350 }, children: body }),
      /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(TldrawUiDialogFooter, { className: "tlui-dialog__footer__actions", children: [
        displayDontShowAgain && /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(
          TldrawUiButton,
          {
            type: "normal",
            onClick: () => setDontShowAgain(!dontShowAgain),
            style: { marginRight: "auto" },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButtonCheck, { checked: dontShowAgain }),
              /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButtonLabel, { children: "Don\u2019t show again" })
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButton, { type: "normal", onClick: onCancel, children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButtonLabel, { children: cancel }) }),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButton, { type: "primary", onClick: async () => onContinue(), children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(TldrawUiButtonLabel, { children: confirm }) })
      ] })
    ] });
  }
  var DebugFlagToggle = track(function DebugFlagToggle2({
    flag,
    onChange
  }) {
    const value = flag.get();
    return /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
      TldrawUiMenuCheckboxItem,
      {
        id: flag.name,
        title: flag.name,
        label: flag.name.replace(/([a-z0-9])([A-Z])/g, (m) => `${m[0]} ${m[1].toLowerCase()}`).replace(/^[a-z]/, (m) => m.toUpperCase()),
        checked: value,
        onSelect: () => {
          flag.set(!value);
          onChange?.(!value);
        }
      }
    );
  });
  var t = 0;
  function createNShapes(editor, n) {
    const shapesToCreate = Array(n);
    const cols = Math.floor(Math.sqrt(n));
    for (let i = 0; i < n; i++) {
      t++;
      shapesToCreate[i] = {
        id: createShapeId("box" + t),
        type: "geo",
        x: i % cols * 132,
        y: Math.floor(i / cols) * 132
      };
    }
    editor.run(() => {
      editor.createShapes(shapesToCreate).setSelectedShapes(shapesToCreate.map((s) => s.id));
    });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/DebugMenu/DefaultDebugMenu.mjs
  function DefaultDebugMenu({ children }) {
    const content = children ?? /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(DefaultDebugMenuContent, {});
    return /* @__PURE__ */ (0, import_jsx_runtime125.jsxs)(TldrawUiDropdownMenuRoot, { id: "debug", children: [
      /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(TldrawUiButton, { type: "icon", title: "Debug menu", children: /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(TldrawUiButtonIcon, { icon: "dots-horizontal" }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(TldrawUiDropdownMenuContent, { side: "top", align: "end", alignOffset: 0, children: /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "debug-panel", children: content }) })
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/DefaultDebugPanel.mjs
  var import_jsx_runtime126 = __toESM(require_jsx_runtime(), 1);
  var import_react92 = __toESM(require_react(), 1);
  var DefaultDebugPanel = (0, import_react92.memo)(function DefaultDebugPanel2() {
    const { DebugMenu } = useTldrawUiComponents();
    const ref = (0, import_react92.useRef)(null);
    usePassThroughWheelEvents(ref);
    return /* @__PURE__ */ (0, import_jsx_runtime126.jsxs)("div", { ref, className: "tlui-debug-panel", children: [
      /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(CurrentState, {}),
      /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(FPS, {}),
      DebugMenu && /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(DebugMenu, {})
    ] });
  });
  function useTick2(isEnabled = true) {
    const [_, setTick] = (0, import_react92.useState)(0);
    const editor = useEditor();
    (0, import_react92.useEffect)(() => {
      if (!isEnabled) return;
      const update = () => setTick((tick2) => tick2 + 1);
      editor.on("tick", update);
      return () => {
        editor.off("tick", update);
      };
    }, [editor, isEnabled]);
  }
  var CurrentState = track(function CurrentState2() {
    useTick2();
    const editor = useEditor();
    const path = editor.getPath();
    const hoverShape = editor.getHoveredShape();
    const selectedShape = editor.getOnlySelectedShape();
    const shape = path === "select.idle" || !path.includes("select.") ? hoverShape : selectedShape;
    const shapeInfo = shape && path.includes("select.") ? ` / ${shape.type || ""}${"geo" in shape.props ? " / " + shape.props.geo : ""} / [${Vec.ToInt(editor.getPointInShapeSpace(shape, editor.inputs.currentPagePoint))}]` : "";
    const ruler = path.startsWith("select.") && !path.includes(".idle") ? ` / [${Vec.ToInt(editor.inputs.originPagePoint)}] \u2192 [${Vec.ToInt(
      editor.inputs.currentPagePoint
    )}] = ${Vec.Dist(editor.inputs.originPagePoint, editor.inputs.currentPagePoint).toFixed(0)}` : "";
    return /* @__PURE__ */ (0, import_jsx_runtime126.jsx)("div", { className: "tlui-debug-panel__current-state", children: `${path}${shapeInfo}${ruler}` });
  });
  function FPS() {
    const editor = useEditor();
    const showFps = useValue("show_fps", () => debugFlags.showFps.get(), [debugFlags]);
    const fpsRef = (0, import_react92.useRef)(null);
    (0, import_react92.useEffect)(() => {
      if (!showFps) return;
      const TICK_LENGTH = 250;
      let maxKnownFps = 0;
      let raf = -1;
      let start = performance.now();
      let currentTickLength = 0;
      let framesInCurrentTick = 0;
      let isSlow = false;
      function loop() {
        framesInCurrentTick++;
        currentTickLength = performance.now() - start;
        if (currentTickLength > TICK_LENGTH) {
          const fps = Math.round(
            framesInCurrentTick * (TICK_LENGTH / currentTickLength) * (1e3 / TICK_LENGTH)
          );
          if (fps > maxKnownFps) {
            maxKnownFps = fps;
          }
          const slowFps = maxKnownFps * 0.75;
          if (fps < slowFps && !isSlow || fps >= slowFps && isSlow) {
            isSlow = !isSlow;
          }
          fpsRef.current.innerHTML = `FPS ${fps.toString()}`;
          fpsRef.current.className = `tlui-debug-panel__fps` + (isSlow ? ` tlui-debug-panel__fps__slow` : ``);
          currentTickLength -= TICK_LENGTH;
          framesInCurrentTick = 0;
          start = performance.now();
        }
        raf = editor.timers.requestAnimationFrame(loop);
      }
      loop();
      return () => {
        cancelAnimationFrame(raf);
      };
    }, [showFps, editor]);
    if (!showFps) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime126.jsx)("div", { ref: fpsRef });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/DefaultMenuPanel.mjs
  var import_jsx_runtime127 = __toESM(require_jsx_runtime(), 1);
  var import_react93 = __toESM(require_react(), 1);
  var DefaultMenuPanel = (0, import_react93.memo)(function MenuPanel() {
    const breakpoint = useBreakpoint();
    const ref = (0, import_react93.useRef)(null);
    usePassThroughWheelEvents(ref);
    const { MainMenu, QuickActions, ActionsMenu, PageMenu } = useTldrawUiComponents();
    const editor = useEditor();
    const isSinglePageMode = useValue("isSinglePageMode", () => editor.options.maxPages <= 1, [
      editor
    ]);
    const showQuickActions = editor.options.actionShortcutsLocation === "menu" ? true : editor.options.actionShortcutsLocation === "toolbar" ? false : breakpoint >= PORTRAIT_BREAKPOINT.TABLET;
    if (!MainMenu && !PageMenu && !showQuickActions) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime127.jsx)("div", { ref, className: "tlui-menu-zone", children: /* @__PURE__ */ (0, import_jsx_runtime127.jsxs)("div", { className: "tlui-buttons__horizontal", children: [
      MainMenu && /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(MainMenu, {}),
      PageMenu && !isSinglePageMode && /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(PageMenu, {}),
      showQuickActions ? /* @__PURE__ */ (0, import_jsx_runtime127.jsxs)(import_jsx_runtime127.Fragment, { children: [
        QuickActions && /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(QuickActions, {}),
        ActionsMenu && /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(ActionsMenu, {})
      ] }) : null
    ] }) });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/DefaultHelperButtons.mjs
  var import_jsx_runtime132 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/DefaultHelperButtonsContent.mjs
  var import_jsx_runtime131 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/BackToContent.mjs
  var import_jsx_runtime128 = __toESM(require_jsx_runtime(), 1);
  var import_react94 = __toESM(require_react(), 1);
  function BackToContent() {
    const editor = useEditor();
    const actions = useActions();
    const [showBackToContent, setShowBackToContent] = (0, import_react94.useState)(false);
    const rIsShowing = (0, import_react94.useRef)(false);
    useQuickReactor(
      "toggle showback to content",
      () => {
        const showBackToContentPrev = rIsShowing.current;
        const shapeIds = editor.getCurrentPageShapeIds();
        let showBackToContentNow = false;
        if (shapeIds.size) {
          showBackToContentNow = shapeIds.size === editor.getCulledShapes().size;
        }
        if (showBackToContentPrev !== showBackToContentNow) {
          setShowBackToContent(showBackToContentNow);
          rIsShowing.current = showBackToContentNow;
        }
      },
      [editor]
    );
    if (!showBackToContent) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(
      TldrawUiMenuActionItem,
      {
        actionId: "back-to-content",
        onSelect: () => {
          actions["back-to-content"].onSelect("helper-buttons");
          setShowBackToContent(false);
        }
      }
    );
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/ExitPenMode.mjs
  var import_jsx_runtime129 = __toESM(require_jsx_runtime(), 1);
  function ExitPenMode() {
    const editor = useEditor();
    const isPenMode = useValue("is pen mode", () => editor.getInstanceState().isPenMode, [editor]);
    if (!isPenMode) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(TldrawUiMenuActionItem, { actionId: "exit-pen-mode" });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/StopFollowing.mjs
  var import_jsx_runtime130 = __toESM(require_jsx_runtime(), 1);
  function StopFollowing() {
    const editor = useEditor();
    const actions = useActions();
    const followingUser = useValue(
      "is following user",
      () => !!editor.getInstanceState().followingUserId,
      [editor]
    );
    if (!followingUser) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(TldrawUiMenuItem, { ...actions["stop-following"] });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/DefaultHelperButtonsContent.mjs
  function DefaultHelperButtonsContent() {
    return /* @__PURE__ */ (0, import_jsx_runtime131.jsxs)(import_jsx_runtime131.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(ExitPenMode, {}),
      /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(BackToContent, {}),
      /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(StopFollowing, {})
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/DefaultHelperButtons.mjs
  function DefaultHelperButtons({ children }) {
    const content = children ?? /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(DefaultHelperButtonsContent, {});
    return /* @__PURE__ */ (0, import_jsx_runtime132.jsx)("div", { className: "tlui-helper-buttons", children: /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(TldrawUiMenuContextProvider, { type: "helper-buttons", sourceId: "helper-buttons", children: content }) });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/KeyboardShortcutsDialog/DefaultKeyboardShortcutsDialog.mjs
  var import_jsx_runtime134 = __toESM(require_jsx_runtime(), 1);
  var import_classnames26 = __toESM(require_classnames(), 1);
  var import_react95 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/KeyboardShortcutsDialog/DefaultKeyboardShortcutsDialogContent.mjs
  var import_jsx_runtime133 = __toESM(require_jsx_runtime(), 1);
  function DefaultKeyboardShortcutsDialogContent() {
    const showCollaborationUi = useShowCollaborationUi();
    return /* @__PURE__ */ (0, import_jsx_runtime133.jsxs)(import_jsx_runtime133.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime133.jsxs)(TldrawUiMenuGroup, { label: "shortcuts-dialog.tools", id: "tools", children: [
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "toggle-tool-lock" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "insert-media" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuToolItem, { toolId: "select" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuToolItem, { toolId: "draw" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuToolItem, { toolId: "eraser" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuToolItem, { toolId: "hand" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuToolItem, { toolId: "rectangle" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuToolItem, { toolId: "ellipse" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuToolItem, { toolId: "arrow" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuToolItem, { toolId: "line" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuToolItem, { toolId: "text" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuToolItem, { toolId: "frame" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuToolItem, { toolId: "note" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuToolItem, { toolId: "laser" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(
          TldrawUiMenuItem,
          {
            id: "pointer-down",
            label: "tool.pointer-down",
            kbd: ",",
            onSelect: () => {
            }
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime133.jsxs)(TldrawUiMenuGroup, { label: "shortcuts-dialog.preferences", id: "preferences", children: [
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "toggle-dark-mode" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "toggle-focus-mode" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "toggle-grid" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime133.jsxs)(TldrawUiMenuGroup, { label: "shortcuts-dialog.edit", id: "edit", children: [
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "undo" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "redo" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "cut" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "copy" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "paste" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "select-all" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "delete" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "duplicate" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime133.jsxs)(TldrawUiMenuGroup, { label: "shortcuts-dialog.view", id: "view", children: [
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "zoom-in" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "zoom-out" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "zoom-to-100" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "zoom-to-fit" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "zoom-to-selection" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime133.jsxs)(TldrawUiMenuGroup, { label: "shortcuts-dialog.transform", id: "transform", children: [
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "bring-to-front" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "bring-forward" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "send-backward" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "send-to-back" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "group" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "ungroup" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "flip-horizontal" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "flip-vertical" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "align-top" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "align-center-vertical" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "align-bottom" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "align-left" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "align-center-horizontal" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "align-right" })
      ] }),
      showCollaborationUi && /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuGroup, { label: "shortcuts-dialog.collaboration", id: "collaboration", children: /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(TldrawUiMenuActionItem, { actionId: "open-cursor-chat" }) })
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/KeyboardShortcutsDialog/DefaultKeyboardShortcutsDialog.mjs
  var DefaultKeyboardShortcutsDialog = (0, import_react95.memo)(function DefaultKeyboardShortcutsDialog2({
    children
  }) {
    const msg2 = useTranslation();
    const breakpoint = useBreakpoint();
    const content = children ?? /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(DefaultKeyboardShortcutsDialogContent, {});
    return /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(import_jsx_runtime134.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(TldrawUiDialogHeader, { className: "tlui-shortcuts-dialog__header", children: [
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiDialogTitle, { children: msg2("shortcuts-dialog.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiDialogCloseButton, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(
        TldrawUiDialogBody,
        {
          className: (0, import_classnames26.default)("tlui-shortcuts-dialog__body", {
            "tlui-shortcuts-dialog__body__mobile": breakpoint <= PORTRAIT_BREAKPOINT.MOBILE_XS,
            "tlui-shortcuts-dialog__body__tablet": breakpoint <= PORTRAIT_BREAKPOINT.TABLET
          }),
          children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TldrawUiMenuContextProvider, { type: "keyboard-shortcuts", sourceId: "kbd", children: content })
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime134.jsx)("div", { className: "tlui-dialog__scrim" })
    ] });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/MainMenu/DefaultMainMenu.mjs
  var import_jsx_runtime138 = __toESM(require_jsx_runtime(), 1);
  var import_react97 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/MainMenu/DefaultMainMenuContent.mjs
  var import_jsx_runtime137 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/HelpMenu/DefaultHelpMenuContent.mjs
  var import_jsx_runtime136 = __toESM(require_jsx_runtime(), 1);
  var import_react96 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/LanguageMenu.mjs
  var import_jsx_runtime135 = __toESM(require_jsx_runtime(), 1);
  function LanguageMenu() {
    const editor = useMaybeEditor();
    const trackEvent = useUiEvents();
    const currentLanguage = useValue("locale", () => editor?.user.getLocale(), [editor]);
    if (!editor) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(TldrawUiMenuSubmenu, { id: "help menu language", label: "menu.language", children: /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(TldrawUiMenuGroup, { id: "languages", children: LANGUAGES.map(({ locale, label }) => /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(
      TldrawUiMenuCheckboxItem,
      {
        id: `language-${locale}`,
        title: locale,
        label,
        checked: locale === currentLanguage,
        readonlyOk: true,
        onSelect: () => {
          editor.user.updateUserPreferences({ locale });
          trackEvent("change-language", { source: "menu", locale });
        }
      },
      locale
    )) }) });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/HelpMenu/DefaultHelpMenuContent.mjs
  function DefaultHelpMenuContent() {
    return /* @__PURE__ */ (0, import_jsx_runtime136.jsxs)(import_jsx_runtime136.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(LanguageMenu, {}),
      /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(KeyboardShortcutsMenuItem, {})
    ] });
  }
  function KeyboardShortcutsMenuItem() {
    const { KeyboardShortcutsDialog } = useTldrawUiComponents();
    const { addDialog } = useDialogs();
    const handleSelect = (0, import_react96.useCallback)(() => {
      if (KeyboardShortcutsDialog) addDialog({ component: KeyboardShortcutsDialog });
    }, [addDialog, KeyboardShortcutsDialog]);
    if (!KeyboardShortcutsDialog) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(
      TldrawUiMenuItem,
      {
        id: "keyboard-shortcuts-button",
        label: "help-menu.keyboard-shortcuts",
        readonlyOk: true,
        onSelect: handleSelect
      }
    );
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/MainMenu/DefaultMainMenuContent.mjs
  function DefaultMainMenuContent() {
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(import_jsx_runtime137.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(TldrawUiMenuGroup, { id: "basic", children: [
        /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(EditSubmenu, {}),
        /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ViewSubmenu, {}),
        /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ExportFileContentSubMenu, {}),
        /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ExtrasGroup, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(PreferencesGroup, {})
    ] });
  }
  function ExportFileContentSubMenu() {
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(TldrawUiMenuSubmenu, { id: "export-all-as", label: "context-menu.export-all-as", size: "small", children: [
      /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(TldrawUiMenuGroup, { id: "export-all-as-group", children: [
        /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TldrawUiMenuActionItem, { actionId: "export-all-as-svg" }),
        /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TldrawUiMenuActionItem, { actionId: "export-all-as-png" }),
        /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TldrawUiMenuActionItem, { actionId: "export-all-as-json" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TldrawUiMenuGroup, { id: "export-all-as-bg", children: /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ToggleTransparentBgMenuItem, {}) })
    ] });
  }
  function EditSubmenu() {
    const editor = useEditor();
    const selectToolActive = useValue(
      "isSelectToolActive",
      () => editor.getCurrentToolId() === "select",
      [editor]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(TldrawUiMenuSubmenu, { id: "edit", label: "menu.edit", disabled: !selectToolActive, children: [
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(UndoRedoGroup, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ClipboardMenuGroup, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ConversionsMenuGroup, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(MiscMenuGroup, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(LockGroup, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TldrawUiMenuGroup, { id: "select-all", children: /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(SelectAllMenuItem, {}) })
    ] });
  }
  function MiscMenuGroup() {
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(TldrawUiMenuGroup, { id: "misc", children: [
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(GroupMenuItem2, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(UngroupMenuItem2, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(EditLinkMenuItem2, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ToggleAutoSizeMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(RemoveFrameMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(FitFrameToContentMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ConvertToEmbedMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ConvertToBookmarkMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(FlattenMenuItem, {})
    ] });
  }
  function LockGroup() {
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(TldrawUiMenuGroup, { id: "lock", children: [
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ToggleLockMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(UnlockAllMenuItem, {})
    ] });
  }
  function UndoRedoGroup() {
    const canUndo = useCanUndo();
    const canRedo = useCanRedo();
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(TldrawUiMenuGroup, { id: "undo-redo", children: [
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TldrawUiMenuActionItem, { actionId: "undo", disabled: !canUndo }),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TldrawUiMenuActionItem, { actionId: "redo", disabled: !canRedo })
    ] });
  }
  function ViewSubmenu() {
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TldrawUiMenuSubmenu, { id: "view", label: "menu.view", children: /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(TldrawUiMenuGroup, { id: "view-actions", children: [
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TldrawUiMenuActionItem, { actionId: "zoom-in" }),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TldrawUiMenuActionItem, { actionId: "zoom-out" }),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ZoomTo100MenuItem2, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ZoomToFitMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ZoomToSelectionMenuItem, {})
    ] }) });
  }
  function ExtrasGroup() {
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(import_jsx_runtime137.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TldrawUiMenuActionItem, { actionId: "insert-embed" }),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TldrawUiMenuActionItem, { actionId: "insert-media" })
    ] });
  }
  function PreferencesGroup() {
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(TldrawUiMenuGroup, { id: "preferences", children: [
      /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(TldrawUiMenuSubmenu, { id: "preferences", label: "menu.preferences", children: [
        /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(TldrawUiMenuGroup, { id: "preferences-actions", children: [
          /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ToggleSnapModeItem, {}),
          /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ToggleToolLockItem, {}),
          /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ToggleGridItem, {}),
          /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ToggleWrapModeItem, {}),
          /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ToggleFocusModeItem, {}),
          /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ToggleEdgeScrollingItem, {}),
          /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ToggleReduceMotionItem, {}),
          /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ToggleDynamicSizeModeItem, {}),
          /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TogglePasteAtCursorItem, {}),
          /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ToggleDebugModeItem, {})
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(TldrawUiMenuGroup, { id: "color-scheme", children: /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(ColorSchemeMenu, {}) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(LanguageMenu, {}),
      /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(KeyboardShortcutsMenuItem, {})
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/MainMenu/DefaultMainMenu.mjs
  var DefaultMainMenu = (0, import_react97.memo)(function DefaultMainMenu2({ children }) {
    const container = useContainer();
    const [isOpen, onOpenChange] = useMenuIsOpen("main menu");
    const msg2 = useTranslation();
    const content = children ?? /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(DefaultMainMenuContent, {});
    return /* @__PURE__ */ (0, import_jsx_runtime138.jsxs)(Root24, { dir: "ltr", open: isOpen, onOpenChange, modal: false, children: [
      /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(Trigger2, { asChild: true, dir: "ltr", children: /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(TldrawUiButton, { type: "icon", "data-testid": "main-menu.button", title: msg2("menu.title"), children: /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(TldrawUiButtonIcon, { icon: "menu", small: true }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(Portal23, { container, children: /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(
        Content23,
        {
          className: "tlui-menu",
          side: "bottom",
          align: "start",
          collisionPadding: 4,
          alignOffset: 0,
          sideOffset: 6,
          children: /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "main-menu", children: content })
        }
      ) })
    ] });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/Minimap/DefaultMinimap.mjs
  var import_jsx_runtime139 = __toESM(require_jsx_runtime(), 1);
  var React58 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/Minimap/getRgba.mjs
  var memo19 = {};
  function getRgba(colorString) {
    if (memo19[colorString]) {
      return memo19[colorString];
    }
    const canvas = document.createElement("canvas");
    const context = canvas.getContext("2d");
    context.fillStyle = colorString;
    context.fillRect(0, 0, 1, 1);
    const [r, g, b, a] = context.getImageData(0, 0, 1, 1).data;
    const result = new Float32Array([r / 255, g / 255, b / 255, a / 255]);
    memo19[colorString] = result;
    return result;
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/Minimap/minimap-webgl-shapes.mjs
  var numArcSegmentsPerCorner = 10;
  var roundedRectangleDataSize = (
    // num triangles in corners
    // num triangles in outer rects
    4 * 6 * numArcSegmentsPerCorner + // num triangles in center rect
    12 + 4 * 12
  );
  function pie(array2, {
    center,
    radius,
    numArcSegments = 20,
    startAngle = 0,
    endAngle = PI2,
    offset: offset4 = 0
  }) {
    const angle = (endAngle - startAngle) / numArcSegments;
    let i = offset4;
    for (let a = startAngle; a < endAngle; a += angle) {
      array2[i++] = center.x;
      array2[i++] = center.y;
      array2[i++] = center.x + Math.cos(a) * radius;
      array2[i++] = center.y + Math.sin(a) * radius;
      array2[i++] = center.x + Math.cos(a + angle) * radius;
      array2[i++] = center.y + Math.sin(a + angle) * radius;
    }
    return array2;
  }
  function rectangle(array2, offset4, x, y, w, h) {
    array2[offset4++] = x;
    array2[offset4++] = y;
    array2[offset4++] = x;
    array2[offset4++] = y + h;
    array2[offset4++] = x + w;
    array2[offset4++] = y;
    array2[offset4++] = x + w;
    array2[offset4++] = y;
    array2[offset4++] = x;
    array2[offset4++] = y + h;
    array2[offset4++] = x + w;
    array2[offset4++] = y + h;
  }
  function roundedRectangle(data, box, radius) {
    const numArcSegments = numArcSegmentsPerCorner;
    radius = Math.min(radius, Math.min(box.w, box.h) / 2);
    const innerBox = Box.ExpandBy(box, -radius);
    if (innerBox.w <= 0 || innerBox.h <= 0) {
      pie(data, { center: box.center, radius, numArcSegments: numArcSegmentsPerCorner * 4 });
      return numArcSegmentsPerCorner * 4 * 6;
    }
    let offset4 = 0;
    rectangle(data, offset4, innerBox.minX, innerBox.minY, innerBox.w, innerBox.h);
    offset4 += 12;
    rectangle(data, offset4, innerBox.minX, box.minY, innerBox.w, radius);
    offset4 += 12;
    rectangle(data, offset4, innerBox.maxX, innerBox.minY, radius, innerBox.h);
    offset4 += 12;
    rectangle(data, offset4, innerBox.minX, innerBox.maxY, innerBox.w, radius);
    offset4 += 12;
    rectangle(data, offset4, box.minX, innerBox.minY, radius, innerBox.h);
    offset4 += 12;
    pie(data, {
      numArcSegments,
      offset: offset4,
      center: innerBox.point,
      radius,
      startAngle: PI,
      endAngle: PI * 1.5
    });
    offset4 += numArcSegments * 6;
    pie(data, {
      numArcSegments,
      offset: offset4,
      center: Vec.Add(innerBox.point, new Vec(innerBox.w, 0)),
      radius,
      startAngle: PI * 1.5,
      endAngle: PI2
    });
    offset4 += numArcSegments * 6;
    pie(data, {
      numArcSegments,
      offset: offset4,
      center: Vec.Add(innerBox.point, innerBox.size),
      radius,
      startAngle: 0,
      endAngle: HALF_PI
    });
    offset4 += numArcSegments * 6;
    pie(data, {
      numArcSegments,
      offset: offset4,
      center: Vec.Add(innerBox.point, new Vec(0, innerBox.h)),
      radius,
      startAngle: HALF_PI,
      endAngle: PI
    });
    return roundedRectangleDataSize;
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/Minimap/minimap-webgl-setup.mjs
  function setupWebGl(canvas) {
    if (!canvas) throw new Error("Canvas element not found");
    const context = canvas.getContext("webgl2", {
      premultipliedAlpha: false
    });
    if (!context) throw new Error("Failed to get webgl2 context");
    const vertexShaderSourceCode = `#version 300 es
  precision mediump float;
  
  in vec2 shapeVertexPosition;

	uniform vec4 canvasPageBounds;

	// taken (with thanks) from
	// https://webglfundamentals.org/webgl/lessons/webgl-2d-matrices.html
  void main() {
		// convert the position from pixels to 0.0 to 1.0
		vec2 zeroToOne = (shapeVertexPosition - canvasPageBounds.xy) / canvasPageBounds.zw;
	
		// convert from 0->1 to 0->2
		vec2 zeroToTwo = zeroToOne * 2.0;
	
		// convert from 0->2 to -1->+1 (clipspace)
		vec2 clipSpace = zeroToTwo - 1.0;
	
		gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);
  }`;
    const vertexShader = context.createShader(context.VERTEX_SHADER);
    if (!vertexShader) {
      throw new Error("Failed to create vertex shader");
    }
    context.shaderSource(vertexShader, vertexShaderSourceCode);
    context.compileShader(vertexShader);
    if (!context.getShaderParameter(vertexShader, context.COMPILE_STATUS)) {
      throw new Error("Failed to compile vertex shader");
    }
    const fragmentShaderSourceCode = `#version 300 es
  precision mediump float;
  
	uniform vec4 fillColor;
  out vec4 outputColor;

  void main() {
	outputColor = fillColor;
  }`;
    const fragmentShader = context.createShader(context.FRAGMENT_SHADER);
    if (!fragmentShader) {
      throw new Error("Failed to create fragment shader");
    }
    context.shaderSource(fragmentShader, fragmentShaderSourceCode);
    context.compileShader(fragmentShader);
    if (!context.getShaderParameter(fragmentShader, context.COMPILE_STATUS)) {
      throw new Error("Failed to compile fragment shader");
    }
    const program = context.createProgram();
    if (!program) {
      throw new Error("Failed to create program");
    }
    context.attachShader(program, vertexShader);
    context.attachShader(program, fragmentShader);
    context.linkProgram(program);
    if (!context.getProgramParameter(program, context.LINK_STATUS)) {
      throw new Error("Failed to link program");
    }
    context.useProgram(program);
    const shapeVertexPositionAttributeLocation = context.getAttribLocation(
      program,
      "shapeVertexPosition"
    );
    if (shapeVertexPositionAttributeLocation < 0) {
      throw new Error("Failed to get shapeVertexPosition attribute location");
    }
    context.enableVertexAttribArray(shapeVertexPositionAttributeLocation);
    const canvasPageBoundsLocation = context.getUniformLocation(program, "canvasPageBounds");
    const fillColorLocation = context.getUniformLocation(program, "fillColor");
    const selectedShapesBuffer = context.createBuffer();
    if (!selectedShapesBuffer) throw new Error("Failed to create buffer");
    const unselectedShapesBuffer = context.createBuffer();
    if (!unselectedShapesBuffer) throw new Error("Failed to create buffer");
    return {
      context,
      selectedShapes: allocateBuffer(context, 1024),
      unselectedShapes: allocateBuffer(context, 4096),
      viewport: allocateBuffer(context, roundedRectangleDataSize),
      collaborators: allocateBuffer(context, 1024),
      prepareTriangles(stuff, len) {
        context.bindBuffer(context.ARRAY_BUFFER, stuff.buffer);
        context.bufferData(context.ARRAY_BUFFER, stuff.vertices, context.STATIC_DRAW, 0, len);
        context.enableVertexAttribArray(shapeVertexPositionAttributeLocation);
        context.vertexAttribPointer(
          shapeVertexPositionAttributeLocation,
          2,
          context.FLOAT,
          false,
          0,
          0
        );
      },
      drawTrianglesTransparently(len) {
        context.enable(context.BLEND);
        context.blendFunc(context.SRC_ALPHA, context.ONE_MINUS_SRC_ALPHA);
        context.drawArrays(context.TRIANGLES, 0, len / 2);
        context.disable(context.BLEND);
      },
      drawTriangles(len) {
        context.drawArrays(context.TRIANGLES, 0, len / 2);
      },
      setFillColor(color) {
        context.uniform4fv(fillColorLocation, color);
      },
      setCanvasPageBounds(bounds) {
        context.uniform4fv(canvasPageBoundsLocation, bounds);
      }
    };
  }
  function allocateBuffer(context, size4) {
    const buffer = context.createBuffer();
    if (!buffer) throw new Error("Failed to create buffer");
    return { buffer, vertices: new Float32Array(size4) };
  }
  function appendVertices(bufferStuff, offset4, data) {
    let len = bufferStuff.vertices.length;
    while (len < offset4 + data.length) {
      len *= 2;
    }
    if (len != bufferStuff.vertices.length) {
      const newVertices = new Float32Array(len);
      newVertices.set(bufferStuff.vertices);
      bufferStuff.vertices = newVertices;
    }
    bufferStuff.vertices.set(data, offset4);
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/Minimap/MinimapManager.mjs
  var __create13 = Object.create;
  var __defProp13 = Object.defineProperty;
  var __getOwnPropDesc13 = Object.getOwnPropertyDescriptor;
  var __knownSymbol12 = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
  var __typeError12 = (msg2) => {
    throw TypeError(msg2);
  };
  var __defNormalProp12 = (obj, key, value) => key in obj ? __defProp13(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name12 = (target, value) => __defProp13(target, "name", { value, configurable: true });
  var __decoratorStart12 = (base) => [, , , __create13(base?.[__knownSymbol12("metadata")] ?? null)];
  var __decoratorStrings12 = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
  var __expectFn12 = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError12("Function expected") : fn;
  var __decoratorContext12 = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings12[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError12("Already initialized") : fns.push(__expectFn12(fn || null)) });
  var __decoratorMetadata12 = (array2, target) => __defNormalProp12(target, __knownSymbol12("metadata"), array2[3]);
  var __runInitializers12 = (array2, flags, self2, value) => {
    for (var i = 0, fns = array2[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self2) : value = fns[i].call(self2, value);
    return value;
  };
  var __decorateElement12 = (array2, flags, name, decorators, target, extra) => {
    var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
    var j = k > 3 ? array2.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings12[k + 5];
    var initializers = k > 3 && (array2[j - 1] = []), extraInitializers = array2[j] || (array2[j] = []);
    var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc13(k < 4 ? target : { get [name]() {
      return __privateGet12(this, extra);
    }, set [name](x) {
      return __privateSet12(this, extra, x);
    } }, name));
    k ? p && k < 4 && __name12(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name12(target, name);
    for (var i = decorators.length - 1; i >= 0; i--) {
      ctx = __decoratorContext12(k, name, done = {}, array2[3], extraInitializers);
      if (k) {
        ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn12(target, x) : (x) => name in x };
        if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet12 : __privateMethod12)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
        if (k > 2) access.set = p ? (x, y) => __privateSet12(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
      }
      it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
      if (k ^ 4 || it === void 0) __expectFn12(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
      else if (typeof it !== "object" || it === null) __typeError12("Object expected");
      else __expectFn12(fn = it.get) && (desc.get = fn), __expectFn12(fn = it.set) && (desc.set = fn), __expectFn12(fn = it.init) && initializers.unshift(fn);
    }
    return k || __decoratorMetadata12(array2, target), desc && __defProp13(target, name, desc), p ? k ^ 4 ? extra : desc : target;
  };
  var __publicField12 = (obj, key, value) => __defNormalProp12(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck12 = (obj, member, msg2) => member.has(obj) || __typeError12("Cannot " + msg2);
  var __privateIn12 = (member, obj) => Object(obj) !== obj ? __typeError12('Cannot use the "in" operator on this value') : member.has(obj);
  var __privateGet12 = (obj, member, getter) => (__accessCheck12(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateSet12 = (obj, member, value, setter) => (__accessCheck12(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod12 = (obj, member, method) => (__accessCheck12(obj, member, "access private method"), method);
  var _render_dec;
  var _getCanvasPageBoundsArray_dec;
  var _getZoom_dec;
  var _getCanvasPageBounds_dec;
  var _getCanvasClientPosition_dec;
  var _getCanvasSize_dec;
  var _getContentScreenBounds_dec;
  var _getContentPageBounds_dec;
  var _getDpr_dec;
  var _close_dec;
  var _init12;
  _close_dec = [bind], _getDpr_dec = [computed], _getContentPageBounds_dec = [computed], _getContentScreenBounds_dec = [computed], _getCanvasSize_dec = [computed], _getCanvasClientPosition_dec = [computed], _getCanvasPageBounds_dec = [computed], _getZoom_dec = [computed], _getCanvasPageBoundsArray_dec = [computed], _render_dec = [bind];
  var MinimapManager = class {
    constructor(editor, elem, container) {
      this.editor = editor;
      this.elem = elem;
      this.container = container;
      __runInitializers12(_init12, 5, this);
      __publicField12(this, "disposables", []);
      __publicField12(this, "gl");
      __publicField12(this, "shapeGeometryCache");
      __publicField12(this, "colors");
      __publicField12(this, "id", uniqueId());
      __publicField12(this, "canvasBoundingClientRect", atom("canvasBoundingClientRect", new Box()));
      __publicField12(this, "originPagePoint", new Vec());
      __publicField12(this, "originPageCenter", new Vec());
      __publicField12(this, "isInViewport", false);
      this.gl = setupWebGl(elem);
      this.shapeGeometryCache = editor.store.createComputedCache("webgl-geometry", (r) => {
        const bounds = editor.getShapeMaskedPageBounds(r.id);
        if (!bounds) return null;
        const arr = new Float32Array(12);
        rectangle(arr, 0, bounds.x, bounds.y, bounds.w, bounds.h);
        return arr;
      });
      this.colors = this._getColors();
      this.disposables.push(this._listenForCanvasResize(), react("minimap render", this.render));
    }
    close() {
      return this.disposables.forEach((d) => d());
    }
    _getColors() {
      const style = getComputedStyle(this.editor.getContainer());
      return {
        shapeFill: getRgba(style.getPropertyValue("--color-text-3").trim()),
        selectFill: getRgba(style.getPropertyValue("--color-selected").trim()),
        viewportFill: getRgba(style.getPropertyValue("--color-muted-1").trim()),
        background: getRgba(style.getPropertyValue("--color-low").trim())
      };
    }
    // this should be called after dark/light mode changes have propagated to the dom
    updateColors() {
      this.colors = this._getColors();
    }
    getDpr() {
      return this.editor.getInstanceState().devicePixelRatio;
    }
    getContentPageBounds() {
      const viewportPageBounds = this.editor.getViewportPageBounds();
      const commonShapeBounds = this.editor.getCurrentPageBounds();
      return commonShapeBounds ? Box.Expand(commonShapeBounds, viewportPageBounds) : viewportPageBounds;
    }
    getContentScreenBounds() {
      const contentPageBounds = this.getContentPageBounds();
      const topLeft = this.editor.pageToScreen(contentPageBounds.point);
      const bottomRight = this.editor.pageToScreen(
        new Vec(contentPageBounds.maxX, contentPageBounds.maxY)
      );
      return new Box(topLeft.x, topLeft.y, bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);
    }
    _getCanvasBoundingRect() {
      const { x, y, width, height } = this.elem.getBoundingClientRect();
      return new Box(x, y, width, height);
    }
    getCanvasScreenBounds() {
      return this.canvasBoundingClientRect.get();
    }
    _listenForCanvasResize() {
      const observer = new ResizeObserver(() => {
        const rect = this._getCanvasBoundingRect();
        this.canvasBoundingClientRect.set(rect);
      });
      observer.observe(this.elem);
      observer.observe(this.container);
      return () => observer.disconnect();
    }
    getCanvasSize() {
      const rect = this.canvasBoundingClientRect.get();
      const dpr = this.getDpr();
      return new Vec(rect.width * dpr, rect.height * dpr);
    }
    getCanvasClientPosition() {
      return this.canvasBoundingClientRect.get().point;
    }
    getCanvasPageBounds() {
      const canvasScreenBounds = this.getCanvasScreenBounds();
      const contentPageBounds = this.getContentPageBounds();
      const aspectRatio = canvasScreenBounds.width / canvasScreenBounds.height;
      let targetWidth = contentPageBounds.width;
      let targetHeight = targetWidth / aspectRatio;
      if (targetHeight < contentPageBounds.height) {
        targetHeight = contentPageBounds.height;
        targetWidth = targetHeight * aspectRatio;
      }
      const box = new Box(0, 0, targetWidth, targetHeight);
      box.center = contentPageBounds.center;
      return box;
    }
    getZoom() {
      return this.getCanvasPageBounds().width / this.getCanvasScreenBounds().width;
    }
    getCanvasPageBoundsArray() {
      const { x, y, w, h } = this.getCanvasPageBounds();
      return new Float32Array([x, y, w, h]);
    }
    getMinimapPagePoint(clientX, clientY) {
      const canvasPageBounds = this.getCanvasPageBounds();
      const canvasScreenBounds = this.getCanvasScreenBounds();
      let x = clientX - canvasScreenBounds.x;
      let y = clientY - canvasScreenBounds.y;
      x *= canvasPageBounds.width / canvasScreenBounds.width;
      y *= canvasPageBounds.height / canvasScreenBounds.height;
      x += canvasPageBounds.minX;
      y += canvasPageBounds.minY;
      return new Vec(x, y, 1);
    }
    minimapScreenPointToPagePoint(x, y, shiftKey = false, clampToBounds = false) {
      const { editor } = this;
      const vpPageBounds = editor.getViewportPageBounds();
      let { x: px, y: py } = this.getMinimapPagePoint(x, y);
      if (clampToBounds) {
        const shapesPageBounds = this.editor.getCurrentPageBounds() ?? new Box();
        const minX = shapesPageBounds.minX - vpPageBounds.width / 2;
        const maxX = shapesPageBounds.maxX + vpPageBounds.width / 2;
        const minY = shapesPageBounds.minY - vpPageBounds.height / 2;
        const maxY = shapesPageBounds.maxY + vpPageBounds.height / 2;
        const lx = Math.max(0, minX + vpPageBounds.width - px);
        const rx = Math.max(0, -(maxX - vpPageBounds.width - px));
        const ly = Math.max(0, minY + vpPageBounds.height - py);
        const ry = Math.max(0, -(maxY - vpPageBounds.height - py));
        px += (lx - rx) / 2;
        py += (ly - ry) / 2;
        px = clamp(px, minX, maxX);
        py = clamp(py, minY, maxY);
      }
      if (shiftKey) {
        const { originPagePoint } = this;
        const dx = Math.abs(px - originPagePoint.x);
        const dy = Math.abs(py - originPagePoint.y);
        if (dx > dy) {
          py = originPagePoint.y;
        } else {
          px = originPagePoint.x;
        }
      }
      return new Vec(px, py);
    }
    render() {
      const context = this.gl.context;
      const canvasSize2 = this.getCanvasSize();
      this.gl.setCanvasPageBounds(this.getCanvasPageBoundsArray());
      this.elem.width = canvasSize2.x;
      this.elem.height = canvasSize2.y;
      context.viewport(0, 0, canvasSize2.x, canvasSize2.y);
      context.clearColor(
        this.colors.background[0],
        this.colors.background[1],
        this.colors.background[2],
        1
      );
      context.clear(context.COLOR_BUFFER_BIT);
      const selectedShapes = new Set(this.editor.getSelectedShapeIds());
      const colors = this.colors;
      let selectedShapeOffset = 0;
      let unselectedShapeOffset = 0;
      const ids = this.editor.getCurrentPageShapeIdsSorted();
      for (let i = 0, len = ids.length; i < len; i++) {
        const shapeId = ids[i];
        const geometry = this.shapeGeometryCache.get(shapeId);
        if (!geometry) continue;
        const len2 = geometry.length;
        if (selectedShapes.has(shapeId)) {
          appendVertices(this.gl.selectedShapes, selectedShapeOffset, geometry);
          selectedShapeOffset += len2;
        } else {
          appendVertices(this.gl.unselectedShapes, unselectedShapeOffset, geometry);
          unselectedShapeOffset += len2;
        }
      }
      this.drawShapes(this.gl.unselectedShapes, unselectedShapeOffset, colors.shapeFill);
      this.drawShapes(this.gl.selectedShapes, selectedShapeOffset, colors.selectFill);
      this.drawViewport();
      this.drawCollaborators();
    }
    drawShapes(stuff, len, color) {
      this.gl.prepareTriangles(stuff, len);
      this.gl.setFillColor(color);
      this.gl.drawTriangles(len);
    }
    drawViewport() {
      const viewport = this.editor.getViewportPageBounds();
      const len = roundedRectangle(this.gl.viewport.vertices, viewport, 4 * this.getZoom());
      this.gl.prepareTriangles(this.gl.viewport, len);
      this.gl.setFillColor(this.colors.viewportFill);
      this.gl.drawTrianglesTransparently(len);
      if (tlenv.isSafari) {
        this.gl.drawTrianglesTransparently(len);
        this.gl.drawTrianglesTransparently(len);
        this.gl.drawTrianglesTransparently(len);
      }
    }
    drawCollaborators() {
      const collaborators = this.editor.getCollaboratorsOnCurrentPage();
      if (!collaborators.length) return;
      const numSegmentsPerCircle = 20;
      const dataSizePerCircle = numSegmentsPerCircle * 6;
      const totalSize = dataSizePerCircle * collaborators.length;
      if (this.gl.collaborators.vertices.length < totalSize) {
        this.gl.collaborators.vertices = new Float32Array(totalSize);
      }
      const vertices = this.gl.collaborators.vertices;
      let offset4 = 0;
      const zoom = this.getZoom();
      for (const { cursor } of collaborators) {
        if (!cursor) continue;
        pie(vertices, {
          center: Vec.From(cursor),
          radius: 3 * zoom,
          offset: offset4,
          numArcSegments: numSegmentsPerCircle
        });
        offset4 += dataSizePerCircle;
      }
      this.gl.prepareTriangles(this.gl.collaborators, totalSize);
      offset4 = 0;
      for (const { color } of collaborators) {
        this.gl.setFillColor(getRgba(color));
        this.gl.context.drawArrays(this.gl.context.TRIANGLES, offset4 / 2, dataSizePerCircle / 2);
        offset4 += dataSizePerCircle;
      }
    }
  };
  _init12 = __decoratorStart12(null);
  __decorateElement12(_init12, 1, "close", _close_dec, MinimapManager);
  __decorateElement12(_init12, 1, "getDpr", _getDpr_dec, MinimapManager);
  __decorateElement12(_init12, 1, "getContentPageBounds", _getContentPageBounds_dec, MinimapManager);
  __decorateElement12(_init12, 1, "getContentScreenBounds", _getContentScreenBounds_dec, MinimapManager);
  __decorateElement12(_init12, 1, "getCanvasSize", _getCanvasSize_dec, MinimapManager);
  __decorateElement12(_init12, 1, "getCanvasClientPosition", _getCanvasClientPosition_dec, MinimapManager);
  __decorateElement12(_init12, 1, "getCanvasPageBounds", _getCanvasPageBounds_dec, MinimapManager);
  __decorateElement12(_init12, 1, "getZoom", _getZoom_dec, MinimapManager);
  __decorateElement12(_init12, 1, "getCanvasPageBoundsArray", _getCanvasPageBoundsArray_dec, MinimapManager);
  __decorateElement12(_init12, 1, "render", _render_dec, MinimapManager);
  __decoratorMetadata12(_init12, MinimapManager);

  // node_modules/tldraw/dist-esm/lib/ui/components/Minimap/DefaultMinimap.mjs
  function DefaultMinimap() {
    const editor = useEditor();
    const container = useContainer();
    const rCanvas = React58.useRef(null);
    const rPointing = React58.useRef(false);
    const minimapRef = React58.useRef();
    React58.useEffect(() => {
      try {
        const minimap = new MinimapManager(editor, rCanvas.current, container);
        minimapRef.current = minimap;
        return minimapRef.current.close;
      } catch (e) {
        editor.annotateError(e, {
          origin: "minimap",
          willCrashApp: false
        });
        editor.timers.setTimeout(() => {
          throw e;
        });
      }
    }, [editor, container]);
    const onDoubleClick = React58.useCallback(
      (e) => {
        if (!editor.getCurrentPageShapeIds().size) return;
        if (!minimapRef.current) return;
        const point = minimapRef.current.minimapScreenPointToPagePoint(
          e.clientX,
          e.clientY,
          false,
          false
        );
        const clampedPoint = minimapRef.current.minimapScreenPointToPagePoint(
          e.clientX,
          e.clientY,
          false,
          true
        );
        minimapRef.current.originPagePoint.setTo(clampedPoint);
        minimapRef.current.originPageCenter.setTo(editor.getViewportPageBounds().center);
        editor.centerOnPoint(point, { animation: { duration: editor.options.animationMediumMs } });
      },
      [editor]
    );
    const onPointerDown = React58.useCallback(
      (e) => {
        if (!minimapRef.current) return;
        const elm = e.currentTarget;
        setPointerCapture(elm, e);
        if (!editor.getCurrentPageShapeIds().size) return;
        rPointing.current = true;
        minimapRef.current.isInViewport = false;
        const point = minimapRef.current.minimapScreenPointToPagePoint(
          e.clientX,
          e.clientY,
          false,
          false
        );
        const _vpPageBounds = editor.getViewportPageBounds();
        const commonBounds = minimapRef.current.getContentPageBounds();
        const allowedBounds = new Box(
          commonBounds.x - _vpPageBounds.width / 2,
          commonBounds.y - _vpPageBounds.height / 2,
          commonBounds.width + _vpPageBounds.width,
          commonBounds.height + _vpPageBounds.height
        );
        if (allowedBounds.containsPoint(point) && !_vpPageBounds.containsPoint(point)) {
          minimapRef.current.isInViewport = _vpPageBounds.containsPoint(point);
          const delta = Vec.Sub(_vpPageBounds.center, _vpPageBounds.point);
          const pagePoint = Vec.Add(point, delta);
          minimapRef.current.originPagePoint.setTo(pagePoint);
          minimapRef.current.originPageCenter.setTo(point);
          editor.centerOnPoint(point, { animation: { duration: editor.options.animationMediumMs } });
        } else {
          const clampedPoint = minimapRef.current.minimapScreenPointToPagePoint(
            e.clientX,
            e.clientY,
            false,
            true
          );
          minimapRef.current.isInViewport = _vpPageBounds.containsPoint(clampedPoint);
          minimapRef.current.originPagePoint.setTo(clampedPoint);
          minimapRef.current.originPageCenter.setTo(_vpPageBounds.center);
        }
        function release(e2) {
          if (elm) {
            releasePointerCapture(elm, e2);
          }
          rPointing.current = false;
          document.body.removeEventListener("pointerup", release);
        }
        document.body.addEventListener("pointerup", release);
      },
      [editor]
    );
    const onPointerMove = React58.useCallback(
      (e) => {
        if (!minimapRef.current) return;
        const point = minimapRef.current.minimapScreenPointToPagePoint(
          e.clientX,
          e.clientY,
          e.shiftKey,
          true
        );
        if (rPointing.current) {
          if (minimapRef.current.isInViewport) {
            const delta = minimapRef.current.originPagePoint.clone().sub(minimapRef.current.originPageCenter);
            editor.centerOnPoint(Vec.Sub(point, delta));
            return;
          }
          editor.centerOnPoint(point);
        }
        const pagePoint = minimapRef.current.getMinimapPagePoint(e.clientX, e.clientY);
        const screenPoint = editor.pageToScreen(pagePoint);
        const info = {
          type: "pointer",
          target: "canvas",
          name: "pointer_move",
          ...getPointerInfo(e),
          point: screenPoint,
          isPen: editor.getInstanceState().isPenMode
        };
        editor.dispatch(info);
      },
      [editor]
    );
    const onWheel = React58.useCallback(
      (e) => {
        const offset4 = normalizeWheel(e);
        editor.dispatch({
          type: "wheel",
          name: "wheel",
          delta: offset4,
          point: new Vec(e.clientX, e.clientY),
          shiftKey: e.shiftKey,
          altKey: e.altKey,
          ctrlKey: e.metaKey || e.ctrlKey,
          metaKey: e.metaKey,
          accelKey: isAccelKey(e)
        });
      },
      [editor]
    );
    const isDarkMode = useIsDarkMode();
    React58.useEffect(() => {
      editor.timers.setTimeout(() => {
        minimapRef.current?.updateColors();
        minimapRef.current?.render();
      });
    }, [isDarkMode, editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)("div", { className: "tlui-minimap", children: /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(
      "canvas",
      {
        role: "img",
        "aria-label": "minimap",
        ref: rCanvas,
        className: "tlui-minimap__canvas",
        onDoubleClick,
        onPointerMove,
        onPointerDown,
        onWheelCapture: onWheel
      }
    ) });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/NavigationPanel/DefaultNavigationPanel.mjs
  var import_jsx_runtime140 = __toESM(require_jsx_runtime(), 1);
  var import_react99 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useLocalStorageState.mjs
  var import_react98 = __toESM(require_react(), 1);
  function useLocalStorageState(key, defaultValue) {
    const [state, setState] = import_react98.default.useState(defaultValue);
    import_react98.default.useLayoutEffect(() => {
      const value = getFromLocalStorage(key);
      if (value) {
        try {
          setState(JSON.parse(value));
        } catch {
          console.error(`Could not restore value ${key} from local storage.`);
        }
      }
    }, [key]);
    const updateValue = import_react98.default.useCallback(
      (setter) => {
        setState((s) => {
          const value = typeof setter === "function" ? setter(s) : setter;
          setInLocalStorage(key, JSON.stringify(value));
          return value;
        });
      },
      [key]
    );
    return [state, updateValue];
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/NavigationPanel/DefaultNavigationPanel.mjs
  var DefaultNavigationPanel = (0, import_react99.memo)(function DefaultNavigationPanel2() {
    const actions = useActions();
    const msg2 = useTranslation();
    const breakpoint = useBreakpoint();
    const ref = (0, import_react99.useRef)(null);
    usePassThroughWheelEvents(ref);
    const [collapsed, setCollapsed] = useLocalStorageState("minimap", true);
    const toggleMinimap = (0, import_react99.useCallback)(() => {
      setCollapsed((s) => !s);
    }, [setCollapsed]);
    const { ZoomMenu, Minimap } = useTldrawUiComponents();
    if (breakpoint < PORTRAIT_BREAKPOINT.MOBILE) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime140.jsxs)("div", { ref, className: "tlui-navigation-panel", children: [
      /* @__PURE__ */ (0, import_jsx_runtime140.jsx)("div", { className: "tlui-buttons__horizontal", children: ZoomMenu && breakpoint < PORTRAIT_BREAKPOINT.TABLET ? /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(ZoomMenu, {}) : collapsed ? /* @__PURE__ */ (0, import_jsx_runtime140.jsxs)(import_jsx_runtime140.Fragment, { children: [
        ZoomMenu && /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(ZoomMenu, {}),
        Minimap && /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(
          TldrawUiButton,
          {
            type: "icon",
            "data-testid": "minimap.toggle-button",
            title: msg2("navigation-zone.toggle-minimap"),
            className: "tlui-navigation-panel__toggle",
            onClick: toggleMinimap,
            children: /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(TldrawUiButtonIcon, { icon: collapsed ? "chevrons-ne" : "chevrons-sw" })
          }
        )
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime140.jsxs)(import_jsx_runtime140.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(
          TldrawUiButton,
          {
            type: "icon",
            "data-testid": "minimap.zoom-out",
            title: `${msg2(unwrapLabel(actions["zoom-out"].label))} ${kbdStr(actions["zoom-out"].kbd)}`,
            onClick: () => actions["zoom-out"].onSelect("navigation-zone"),
            children: /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(TldrawUiButtonIcon, { icon: "minus" })
          }
        ),
        ZoomMenu && /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(ZoomMenu, {}),
        /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(
          TldrawUiButton,
          {
            type: "icon",
            "data-testid": "minimap.zoom-in",
            title: `${msg2(unwrapLabel(actions["zoom-in"].label))} ${kbdStr(actions["zoom-in"].kbd)}`,
            onClick: () => actions["zoom-in"].onSelect("navigation-zone"),
            children: /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(TldrawUiButtonIcon, { icon: "plus" })
          }
        ),
        Minimap && /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(
          TldrawUiButton,
          {
            type: "icon",
            "data-testid": "minimap.toggle-button",
            title: msg2("navigation-zone.toggle-minimap"),
            className: "tlui-navigation-panel__toggle",
            onClick: toggleMinimap,
            children: /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(TldrawUiButtonIcon, { icon: collapsed ? "chevrons-ne" : "chevrons-sw" })
          }
        )
      ] }) }),
      Minimap && breakpoint >= PORTRAIT_BREAKPOINT.TABLET && !collapsed && /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(Minimap, {})
    ] });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/DefaultPageMenu.mjs
  var import_jsx_runtime143 = __toESM(require_jsx_runtime(), 1);
  var import_react102 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/PageItemInput.mjs
  var import_jsx_runtime141 = __toESM(require_jsx_runtime(), 1);
  var import_react100 = __toESM(require_react(), 1);
  var PageItemInput = function PageItemInput2({
    name,
    id,
    isCurrentPage,
    onCancel
  }) {
    const editor = useEditor();
    const trackEvent = useUiEvents();
    const rInput = (0, import_react100.useRef)(null);
    const rMark = (0, import_react100.useRef)(null);
    const handleFocus = (0, import_react100.useCallback)(() => {
      rMark.current = editor.markHistoryStoppingPoint("rename page");
    }, [editor]);
    const handleChange = (0, import_react100.useCallback)(
      (value) => {
        editor.renamePage(id, value || "New Page");
        trackEvent("rename-page", { source: "page-menu" });
      },
      [editor, id, trackEvent]
    );
    const handleCancel = (0, import_react100.useCallback)(() => {
      if (rMark.current) {
        editor.bailToMark(rMark.current);
      }
      onCancel();
    }, [editor, onCancel]);
    return /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
      TldrawUiInput,
      {
        className: "tlui-page-menu__item__input",
        ref: (el) => rInput.current = el,
        defaultValue: name,
        onValueChange: handleChange,
        onCancel: handleCancel,
        onFocus: handleFocus,
        shouldManuallyMaintainScrollPositionWhenFocused: true,
        autoFocus: isCurrentPage,
        autoSelect: true
      }
    );
  };

  // node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/PageItemSubmenu.mjs
  var import_jsx_runtime142 = __toESM(require_jsx_runtime(), 1);
  var import_react101 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/edit-pages-shared.mjs
  var onMovePage = (editor, id, from, to, trackEvent) => {
    let index2;
    const pages = editor.getPages();
    const below = from > to ? pages[to - 1] : pages[to];
    const above = from > to ? pages[to] : pages[to + 1];
    if (below && !above) {
      index2 = getIndexAbove(below.index);
    } else if (!below && above) {
      index2 = getIndexBelow(pages[0].index);
    } else {
      index2 = getIndexBetween(below.index, above.index);
    }
    if (index2 !== pages[from].index) {
      editor.markHistoryStoppingPoint("moving page");
      editor.updatePage({
        id,
        index: index2
      });
      trackEvent("move-page", { source: "page-menu" });
    }
  };

  // node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/PageItemSubmenu.mjs
  var PageItemSubmenu = track(function PageItemSubmenu2({
    index: index2,
    listSize,
    item,
    onRename
  }) {
    const editor = useEditor();
    const msg2 = useTranslation();
    const pages = editor.getPages();
    const trackEvent = useUiEvents();
    const onDuplicate = (0, import_react101.useCallback)(() => {
      editor.markHistoryStoppingPoint("creating page");
      const newId = PageRecordType.createId();
      editor.duplicatePage(item.id, newId);
      trackEvent("duplicate-page", { source: "page-menu" });
    }, [editor, item, trackEvent]);
    const onMoveUp = (0, import_react101.useCallback)(() => {
      onMovePage(editor, item.id, index2, index2 - 1, trackEvent);
    }, [editor, item, index2, trackEvent]);
    const onMoveDown = (0, import_react101.useCallback)(() => {
      onMovePage(editor, item.id, index2, index2 + 1, trackEvent);
    }, [editor, item, index2, trackEvent]);
    const onDelete = (0, import_react101.useCallback)(() => {
      editor.markHistoryStoppingPoint("deleting page");
      editor.deletePage(item.id);
      trackEvent("delete-page", { source: "page-menu" });
    }, [editor, item, trackEvent]);
    return /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)(TldrawUiDropdownMenuRoot, { id: `page item submenu ${index2}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TldrawUiButton, { type: "icon", title: msg2("page-menu.submenu.title"), children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TldrawUiButtonIcon, { icon: "dots-vertical", small: true }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TldrawUiDropdownMenuContent, { alignOffset: 0, side: "right", sideOffset: -4, children: /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "page-menu", children: [
        /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)(TldrawUiMenuGroup, { id: "modify", children: [
          onRename && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TldrawUiMenuItem, { id: "rename", label: "page-menu.submenu.rename", onSelect: onRename }),
          /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
            TldrawUiMenuItem,
            {
              id: "duplicate",
              label: "page-menu.submenu.duplicate-page",
              onSelect: onDuplicate,
              disabled: pages.length >= editor.options.maxPages
            }
          ),
          index2 > 0 && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
            TldrawUiMenuItem,
            {
              id: "move-up",
              onSelect: onMoveUp,
              label: "page-menu.submenu.move-up"
            }
          ),
          index2 < listSize - 1 && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
            TldrawUiMenuItem,
            {
              id: "move-down",
              label: "page-menu.submenu.move-down",
              onSelect: onMoveDown
            }
          )
        ] }),
        listSize > 1 && /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TldrawUiMenuGroup, { id: "delete", children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(TldrawUiMenuItem, { id: "delete", onSelect: onDelete, label: "page-menu.submenu.delete" }) })
      ] }) })
    ] });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/DefaultPageMenu.mjs
  var DefaultPageMenu = (0, import_react102.memo)(function DefaultPageMenu2() {
    const editor = useEditor();
    const trackEvent = useUiEvents();
    const msg2 = useTranslation();
    const breakpoint = useBreakpoint();
    const handleOpenChange = (0, import_react102.useCallback)(() => setIsEditing(false), []);
    const [isOpen, onOpenChange] = useMenuIsOpen("page-menu", handleOpenChange);
    const ITEM_HEIGHT = 36;
    const rSortableContainer = (0, import_react102.useRef)(null);
    const pages = useValue("pages", () => editor.getPages(), [editor]);
    const currentPage = useValue("currentPage", () => editor.getCurrentPage(), [editor]);
    const currentPageId = useValue("currentPageId", () => editor.getCurrentPageId(), [editor]);
    const isReadonlyMode = useReadonly();
    const maxPageCountReached = useValue(
      "maxPageCountReached",
      () => editor.getPages().length >= editor.options.maxPages,
      [editor]
    );
    const isCoarsePointer = useValue(
      "isCoarsePointer",
      () => editor.getInstanceState().isCoarsePointer,
      [editor]
    );
    const [isEditing, setIsEditing] = (0, import_react102.useState)(false);
    const toggleEditing = (0, import_react102.useCallback)(() => {
      if (isReadonlyMode) return;
      setIsEditing((s) => !s);
    }, [isReadonlyMode]);
    const rMutables = (0, import_react102.useRef)({
      isPointing: false,
      status: "idle",
      pointing: null,
      startY: 0,
      startIndex: 0,
      dragIndex: 0
    });
    const [sortablePositionItems, setSortablePositionItems] = (0, import_react102.useState)(
      Object.fromEntries(
        pages.map((page, i) => [page.id, { y: i * ITEM_HEIGHT, offsetY: 0, isSelected: false }])
      )
    );
    (0, import_react102.useLayoutEffect)(() => {
      setSortablePositionItems(
        Object.fromEntries(
          pages.map((page, i) => [page.id, { y: i * ITEM_HEIGHT, offsetY: 0, isSelected: false }])
        )
      );
    }, [ITEM_HEIGHT, pages]);
    (0, import_react102.useEffect)(() => {
      if (!isOpen) return;
      editor.timers.requestAnimationFrame(() => {
        const elm = document.querySelector(
          `[data-testid="page-menu-item-${currentPageId}"]`
        );
        if (elm) {
          const container = rSortableContainer.current;
          if (!container) return;
          const elmTopPosition = elm.offsetTop;
          const containerScrollTopPosition = container.scrollTop;
          if (elmTopPosition < containerScrollTopPosition) {
            container.scrollTo({ top: elmTopPosition });
          }
          const elmBottomPosition = elmTopPosition + ITEM_HEIGHT;
          const containerScrollBottomPosition = container.scrollTop + container.offsetHeight;
          if (elmBottomPosition > containerScrollBottomPosition) {
            container.scrollTo({ top: elmBottomPosition - container.offsetHeight });
          }
        }
      });
    }, [ITEM_HEIGHT, currentPageId, isOpen, editor]);
    const handlePointerDown = (0, import_react102.useCallback)(
      (e) => {
        const { clientY, currentTarget } = e;
        const {
          dataset: { id, index: index2 }
        } = currentTarget;
        if (!id || !index2) return;
        const mut = rMutables.current;
        setPointerCapture(e.currentTarget, e);
        mut.status = "pointing";
        mut.pointing = { id, index: +index2 };
        const current = sortablePositionItems[id];
        const dragY = current.y;
        mut.startY = clientY;
        mut.startIndex = Math.max(0, Math.min(Math.round(dragY / ITEM_HEIGHT), pages.length - 1));
      },
      [ITEM_HEIGHT, pages.length, sortablePositionItems]
    );
    const handlePointerMove = (0, import_react102.useCallback)(
      (e) => {
        const mut = rMutables.current;
        if (mut.status === "pointing") {
          const { clientY } = e;
          const offset4 = clientY - mut.startY;
          if (Math.abs(offset4) > 5) {
            mut.status = "dragging";
          }
        }
        if (mut.status === "dragging") {
          const { clientY } = e;
          const offsetY = clientY - mut.startY;
          const current = sortablePositionItems[mut.pointing.id];
          const { startIndex, pointing } = mut;
          const dragY = current.y + offsetY;
          const dragIndex = Math.max(0, Math.min(Math.round(dragY / ITEM_HEIGHT), pages.length - 1));
          const next = { ...sortablePositionItems };
          next[pointing.id] = {
            y: current.y,
            offsetY,
            isSelected: true
          };
          if (dragIndex !== mut.dragIndex) {
            mut.dragIndex = dragIndex;
            for (let i = 0; i < pages.length; i++) {
              const item = pages[i];
              if (item.id === mut.pointing.id) {
                continue;
              }
              let { y } = next[item.id];
              if (dragIndex === startIndex) {
                y = i * ITEM_HEIGHT;
              } else if (dragIndex < startIndex) {
                if (dragIndex <= i && i < startIndex) {
                  y = (i + 1) * ITEM_HEIGHT;
                } else {
                  y = i * ITEM_HEIGHT;
                }
              } else if (dragIndex > startIndex) {
                if (dragIndex >= i && i > startIndex) {
                  y = (i - 1) * ITEM_HEIGHT;
                } else {
                  y = i * ITEM_HEIGHT;
                }
              }
              if (y !== next[item.id].y) {
                next[item.id] = { y, offsetY: 0, isSelected: true };
              }
            }
          }
          setSortablePositionItems(next);
        }
      },
      [ITEM_HEIGHT, pages, sortablePositionItems]
    );
    const handlePointerUp = (0, import_react102.useCallback)(
      (e) => {
        const mut = rMutables.current;
        if (mut.status === "dragging") {
          const { id, index: index2 } = mut.pointing;
          onMovePage(editor, id, index2, mut.dragIndex, trackEvent);
        }
        releasePointerCapture(e.currentTarget, e);
        mut.status = "idle";
      },
      [editor, trackEvent]
    );
    const handleKeyDown = (0, import_react102.useCallback)(
      (e) => {
        const mut = rMutables.current;
        if (e.key === "Escape") {
          if (mut.status === "dragging") {
            setSortablePositionItems(
              Object.fromEntries(
                pages.map((page, i) => [
                  page.id,
                  { y: i * ITEM_HEIGHT, offsetY: 0, isSelected: false }
                ])
              )
            );
          }
          mut.status = "idle";
        }
      },
      [ITEM_HEIGHT, pages]
    );
    const handleCreatePageClick = (0, import_react102.useCallback)(() => {
      if (isReadonlyMode) return;
      editor.run(() => {
        editor.markHistoryStoppingPoint("creating page");
        const newPageId = PageRecordType.createId();
        editor.createPage({ name: msg2("page-menu.new-page-initial-name"), id: newPageId });
        editor.setCurrentPage(newPageId);
        setIsEditing(true);
      });
      trackEvent("new-page", { source: "page-menu" });
    }, [editor, msg2, isReadonlyMode, trackEvent]);
    const changePage = (0, import_react102.useCallback)(
      (id) => {
        editor.setCurrentPage(id);
        trackEvent("change-page", { source: "page-menu" });
      },
      [editor, trackEvent]
    );
    const renamePage = (0, import_react102.useCallback)(
      (id, name) => {
        editor.renamePage(id, name);
        trackEvent("rename-page", { source: "page-menu" });
      },
      [editor, trackEvent]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)(TldrawUiPopover, { id: "pages", onOpenChange, open: isOpen, children: [
      /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(TldrawUiPopoverTrigger, { "data-testid": "main.page-menu", children: /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)(
        TldrawUiButton,
        {
          type: "menu",
          title: currentPage.name,
          "data-testid": "page-menu.button",
          className: "tlui-page-menu__trigger",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime143.jsx)("div", { className: "tlui-page-menu__name", children: currentPage.name }),
            /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(TldrawUiButtonIcon, { icon: "chevron-down", small: true })
          ]
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(
        TldrawUiPopoverContent,
        {
          side: "bottom",
          align: "start",
          sideOffset: 6,
          disableEscapeKeyDown: isEditing,
          children: /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)("div", { className: "tlui-page-menu__wrapper", children: [
            /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)("div", { className: "tlui-page-menu__header", children: [
              /* @__PURE__ */ (0, import_jsx_runtime143.jsx)("div", { className: "tlui-page-menu__header__title", children: msg2("page-menu.title") }),
              !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)("div", { className: "tlui-buttons__horizontal", children: [
                /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(
                  TldrawUiButton,
                  {
                    type: "icon",
                    "data-testid": "page-menu.edit",
                    title: msg2(isEditing ? "page-menu.edit-done" : "page-menu.edit-start"),
                    onClick: toggleEditing,
                    children: /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(TldrawUiButtonIcon, { icon: isEditing ? "check" : "edit" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(
                  TldrawUiButton,
                  {
                    type: "icon",
                    "data-testid": "page-menu.create",
                    title: msg2(
                      maxPageCountReached ? "page-menu.max-page-count-reached" : "page-menu.create-new-page"
                    ),
                    disabled: maxPageCountReached,
                    onClick: handleCreatePageClick,
                    children: /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(TldrawUiButtonIcon, { icon: "plus" })
                  }
                )
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(
              "div",
              {
                "data-testid": "page-menu.list",
                className: "tlui-page-menu__list tlui-menu__group",
                style: { height: ITEM_HEIGHT * pages.length + 4 },
                ref: rSortableContainer,
                children: pages.map((page, index2) => {
                  const position = sortablePositionItems[page.id] ?? {
                    position: index2 * 40,
                    offsetY: 0
                  };
                  return isEditing ? /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)(
                    "div",
                    {
                      "data-testid": "page-menu.item",
                      className: "tlui-page_menu__item__sortable",
                      style: {
                        zIndex: page.id === currentPage.id ? 888 : index2,
                        transform: `translate(0px, ${position.y + position.offsetY}px)`
                      },
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(
                          TldrawUiButton,
                          {
                            type: "icon",
                            tabIndex: -1,
                            className: "tlui-page_menu__item__sortable__handle",
                            onPointerDown: handlePointerDown,
                            onPointerUp: handlePointerUp,
                            onPointerMove: handlePointerMove,
                            onKeyDown: handleKeyDown,
                            "data-id": page.id,
                            "data-index": index2,
                            children: /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(TldrawUiButtonIcon, { icon: "drag-handle-dots" })
                          }
                        ),
                        breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM && isCoarsePointer ? (
                          // sigh, this is a workaround for iOS Safari
                          // because the device and the radix popover seem
                          // to be fighting over scroll position. Nothing
                          // else seems to work!
                          /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)(TldrawUiButton, {
                            type: "normal",
                            className: "tlui-page-menu__item__button",
                            onClick: () => {
                              const name = window.prompt("Rename page", page.name);
                              if (name && name !== page.name) {
                                renamePage(page.id, name);
                              }
                            },
                            onDoubleClick: toggleEditing,
                            children: [
                              /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(TldrawUiButtonCheck, { checked: page.id === currentPage.id }),
                              /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(TldrawUiButtonLabel, { children: page.name })
                            ]
                          })
                        ) : /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(
                          "div",
                          {
                            className: "tlui-page_menu__item__sortable__title",
                            style: { height: ITEM_HEIGHT },
                            children: /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(
                              PageItemInput,
                              {
                                id: page.id,
                                name: page.name,
                                isCurrentPage: page.id === currentPage.id,
                                onCancel: () => {
                                  setIsEditing(false);
                                  editor.menus.clearOpenMenus();
                                }
                              }
                            )
                          }
                        ),
                        !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime143.jsx)("div", { className: "tlui-page_menu__item__submenu", "data-isediting": isEditing, children: /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(PageItemSubmenu, { index: index2, item: page, listSize: pages.length }) })
                      ]
                    },
                    page.id + "_editing"
                  ) : /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)("div", { "data-testid": "page-menu.item", className: "tlui-page-menu__item", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)(
                      TldrawUiButton,
                      {
                        type: "normal",
                        className: "tlui-page-menu__item__button",
                        onClick: () => changePage(page.id),
                        onDoubleClick: toggleEditing,
                        title: msg2("page-menu.go-to-page"),
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(TldrawUiButtonCheck, { checked: page.id === currentPage.id }),
                          /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(TldrawUiButtonLabel, { children: page.name })
                        ]
                      }
                    ),
                    !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime143.jsx)("div", { className: "tlui-page_menu__item__submenu", children: /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(
                      PageItemSubmenu,
                      {
                        index: index2,
                        item: page,
                        listSize: pages.length,
                        onRename: () => {
                          if (tlenv.isIos) {
                            const name = window.prompt("Rename page", page.name);
                            if (name && name !== page.name) {
                              renamePage(page.id, name);
                            }
                          } else {
                            setIsEditing(true);
                            if (currentPageId !== page.id) {
                              changePage(page.id);
                            }
                          }
                        }
                      }
                    ) })
                  ] }, page.id);
                })
              }
            )
          ] })
        }
      )
    ] });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/QuickActions/DefaultQuickActions.mjs
  var import_jsx_runtime145 = __toESM(require_jsx_runtime(), 1);
  var import_react103 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/QuickActions/DefaultQuickActionsContent.mjs
  var import_jsx_runtime144 = __toESM(require_jsx_runtime(), 1);
  function DefaultQuickActionsContent() {
    const editor = useEditor();
    const isReadonlyMode = useReadonly();
    const isInAcceptableReadonlyState = useValue(
      "should display quick actions",
      () => editor.isInAny("select", "hand", "zoom"),
      [editor]
    );
    if (isReadonlyMode && !isInAcceptableReadonlyState) return;
    return /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(import_jsx_runtime144.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(UndoRedoGroup2, {}),
      /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(DeleteDuplicateGroup, {})
    ] });
  }
  function DeleteDuplicateGroup() {
    const oneSelected = useUnlockedSelectedShapesCount(1);
    const isInSelectState = useIsInSelectState();
    const selectDependentActionsEnabled = oneSelected && isInSelectState;
    return /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(import_jsx_runtime144.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TldrawUiMenuActionItem, { actionId: "delete", disabled: !selectDependentActionsEnabled }),
      /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TldrawUiMenuActionItem, { actionId: "duplicate", disabled: !selectDependentActionsEnabled })
    ] });
  }
  function UndoRedoGroup2() {
    const canUndo = useCanUndo();
    const canRedo = useCanRedo();
    return /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(import_jsx_runtime144.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TldrawUiMenuActionItem, { actionId: "undo", disabled: !canUndo }),
      /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TldrawUiMenuActionItem, { actionId: "redo", disabled: !canRedo })
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/QuickActions/DefaultQuickActions.mjs
  var DefaultQuickActions = (0, import_react103.memo)(function DefaultQuickActions2({
    children
  }) {
    const content = children ?? /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(DefaultQuickActionsContent, {});
    return /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(TldrawUiMenuContextProvider, { type: "small-icons", sourceId: "quick-actions", children: content });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/SharePanel/DefaultSharePanel.mjs
  var import_jsx_runtime152 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/SharePanel/PeopleMenu.mjs
  var import_jsx_runtime151 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/SharePanel/PeopleMenuAvatar.mjs
  var import_jsx_runtime146 = __toESM(require_jsx_runtime(), 1);
  function PeopleMenuAvatar({ userId }) {
    const presence = usePresence(userId);
    if (!presence) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(
      "div",
      {
        className: "tlui-people-menu__avatar",
        style: {
          backgroundColor: presence.color
        },
        children: presence.userName === "New User" ? "" : presence.userName[0] ?? ""
      },
      userId
    );
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/SharePanel/PeopleMenuItem.mjs
  var import_jsx_runtime147 = __toESM(require_jsx_runtime(), 1);
  var import_react104 = __toESM(require_react(), 1);
  var PeopleMenuItem = track(function PeopleMenuItem2({ userId }) {
    const editor = useEditor();
    const msg2 = useTranslation();
    const trackEvent = useUiEvents();
    const presence = usePresence(userId);
    const handleFollowClick = (0, import_react104.useCallback)(() => {
      if (editor.getInstanceState().followingUserId === userId) {
        editor.stopFollowingUser();
        trackEvent("stop-following", { source: "people-menu" });
      } else {
        editor.startFollowingUser(userId);
        trackEvent("start-following", { source: "people-menu" });
      }
    }, [editor, userId, trackEvent]);
    const theyAreFollowingYou = presence?.followingUserId === editor.user.getId();
    const youAreFollowingThem = editor.getInstanceState().followingUserId === userId;
    if (!presence) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime147.jsxs)("div", { className: "tlui-people-menu__item tlui-buttons__horizontal", children: [
      /* @__PURE__ */ (0, import_jsx_runtime147.jsxs)(
        TldrawUiButton,
        {
          type: "menu",
          className: "tlui-people-menu__item__button",
          onClick: () => editor.zoomToUser(userId),
          onDoubleClick: handleFollowClick,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(TldrawUiIcon, { icon: "color", color: presence.color }),
            /* @__PURE__ */ (0, import_jsx_runtime147.jsx)("div", { className: "tlui-people-menu__name", children: presence.userName ?? "New User" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(
        TldrawUiButton,
        {
          type: "icon",
          className: "tlui-people-menu__item__follow",
          title: theyAreFollowingYou ? msg2("people-menu.leading") : youAreFollowingThem ? msg2("people-menu.following") : msg2("people-menu.follow"),
          onClick: handleFollowClick,
          disabled: theyAreFollowingYou,
          "data-active": youAreFollowingThem || theyAreFollowingYou,
          children: /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(
            TldrawUiButtonIcon,
            {
              icon: theyAreFollowingYou ? "leading" : youAreFollowingThem ? "following" : "follow"
            }
          )
        }
      )
    ] });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/SharePanel/PeopleMenuMore.mjs
  var import_jsx_runtime148 = __toESM(require_jsx_runtime(), 1);
  function PeopleMenuMore({ count: count3 }) {
    return /* @__PURE__ */ (0, import_jsx_runtime148.jsx)("div", { className: "tlui-people-menu__more", children: "+" + Math.abs(count3) });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/SharePanel/UserPresenceEditor.mjs
  var import_jsx_runtime150 = __toESM(require_jsx_runtime(), 1);
  var import_react106 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/SharePanel/UserPresenceColorPicker.mjs
  var import_jsx_runtime149 = __toESM(require_jsx_runtime(), 1);
  var import_react105 = __toESM(require_react(), 1);
  var UserPresenceColorPicker = track(function UserPresenceColorPicker2() {
    const editor = useEditor();
    const container = useContainer();
    const msg2 = useTranslation();
    const trackEvent = useUiEvents();
    const rPointing = (0, import_react105.useRef)(false);
    const [isOpen, setIsOpen] = (0, import_react105.useState)(false);
    const handleOpenChange = (0, import_react105.useCallback)((isOpen2) => {
      setIsOpen(isOpen2);
    }, []);
    const value = editor.user.getColor();
    const onValueChange = (0, import_react105.useCallback)(
      (item) => {
        editor.user.updateUserPreferences({ color: item });
        trackEvent("set-color", { source: "people-menu" });
      },
      [editor, trackEvent]
    );
    const {
      handleButtonClick,
      handleButtonPointerDown,
      handleButtonPointerEnter,
      handleButtonPointerUp
    } = import_react105.default.useMemo(() => {
      const handlePointerUp = () => {
        rPointing.current = false;
        window.removeEventListener("pointerup", handlePointerUp);
      };
      const handleButtonClick2 = (e) => {
        const { id } = e.currentTarget.dataset;
        if (!id) return;
        if (value === id) return;
        onValueChange(id);
      };
      const handleButtonPointerDown2 = (e) => {
        const { id } = e.currentTarget.dataset;
        if (!id) return;
        onValueChange(id);
        rPointing.current = true;
        window.addEventListener("pointerup", handlePointerUp);
      };
      const handleButtonPointerEnter2 = (e) => {
        if (!rPointing.current) return;
        const { id } = e.currentTarget.dataset;
        if (!id) return;
        onValueChange(id);
      };
      const handleButtonPointerUp2 = (e) => {
        const { id } = e.currentTarget.dataset;
        if (!id) return;
        onValueChange(id);
      };
      return {
        handleButtonClick: handleButtonClick2,
        handleButtonPointerDown: handleButtonPointerDown2,
        handleButtonPointerEnter: handleButtonPointerEnter2,
        handleButtonPointerUp: handleButtonPointerUp2
      };
    }, [value, onValueChange]);
    return /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(Root26, { onOpenChange: handleOpenChange, open: isOpen, children: [
      /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Trigger3, { dir: "ltr", asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
        TldrawUiButton,
        {
          type: "icon",
          className: "tlui-people-menu__user__color",
          style: { color: editor.user.getColor() },
          title: msg2("people-menu.change-color"),
          children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(TldrawUiButtonIcon, { icon: "color" })
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(Portal4, { container, children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
        Content24,
        {
          dir: "ltr",
          className: "tlui-menu tlui-people-menu__user__color-picker",
          align: "start",
          side: "left",
          sideOffset: 8,
          children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)("div", { className: "tlui-buttons__grid", children: USER_COLORS.map((item) => /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
            TldrawUiButton,
            {
              type: "icon",
              "data-id": item,
              "data-testid": item,
              "aria-label": item,
              "data-state": value === item ? "hinted" : void 0,
              title: item,
              className: "tlui-button-grid__button",
              style: { color: item },
              onPointerEnter: handleButtonPointerEnter,
              onPointerDown: handleButtonPointerDown,
              onPointerUp: handleButtonPointerUp,
              onClick: handleButtonClick,
              children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(TldrawUiButtonIcon, { icon: "color" })
            },
            item
          )) })
        }
      ) })
    ] });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/SharePanel/UserPresenceEditor.mjs
  function UserPresenceEditor() {
    const editor = useEditor();
    const trackEvent = useUiEvents();
    const userName = useValue("userName", () => editor.user.getName(), []);
    const msg2 = useTranslation();
    const rOriginalName = (0, import_react106.useRef)(userName);
    const rCurrentName = (0, import_react106.useRef)(userName);
    const [isEditingName, setIsEditingName] = (0, import_react106.useState)(false);
    const toggleEditingName = (0, import_react106.useCallback)(() => {
      setIsEditingName((s) => !s);
    }, []);
    const handleValueChange = (0, import_react106.useCallback)(
      (value) => {
        rCurrentName.current = value;
        editor.user.updateUserPreferences({ name: value });
      },
      [editor]
    );
    const handleBlur = (0, import_react106.useCallback)(() => {
      if (rOriginalName.current === rCurrentName.current) return;
      trackEvent("change-user-name", { source: "people-menu" });
      rOriginalName.current = rCurrentName.current;
    }, [trackEvent]);
    const handleCancel = (0, import_react106.useCallback)(() => {
      setIsEditingName(false);
      editor.user.updateUserPreferences({ name: rOriginalName.current });
      editor.menus.clearOpenMenus();
    }, [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime150.jsxs)("div", { className: "tlui-people-menu__user", children: [
      /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(UserPresenceColorPicker, {}),
      isEditingName ? /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(
        TldrawUiInput,
        {
          className: "tlui-people-menu__user__input",
          defaultValue: userName,
          onValueChange: handleValueChange,
          onComplete: toggleEditingName,
          onCancel: handleCancel,
          onBlur: handleBlur,
          shouldManuallyMaintainScrollPositionWhenFocused: true,
          autoFocus: true,
          autoSelect: true
        }
      ) : /* @__PURE__ */ (0, import_jsx_runtime150.jsxs)(import_jsx_runtime150.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(
          "div",
          {
            className: "tlui-people-menu__user__name",
            onDoubleClick: () => {
              if (!isEditingName) setIsEditingName(true);
            },
            children: userName
          }
        ),
        userName === "New User" ? /* @__PURE__ */ (0, import_jsx_runtime150.jsx)("div", { className: "tlui-people-menu__user__label", children: msg2("people-menu.user") }) : null
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(
        TldrawUiButton,
        {
          type: "icon",
          className: "tlui-people-menu__user__edit",
          "data-testid": "people-menu.change-name",
          title: msg2("people-menu.change-name"),
          onClick: toggleEditingName,
          children: /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(TldrawUiButtonIcon, { icon: isEditingName ? "check" : "edit" })
        }
      )
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/SharePanel/PeopleMenu.mjs
  function PeopleMenu({ displayUserWhenAlone, children }) {
    const msg2 = useTranslation();
    const container = useContainer();
    const editor = useEditor();
    const userIds = usePeerIds();
    const userColor = useValue("user", () => editor.user.getColor(), [editor]);
    const userName = useValue("user", () => editor.user.getName(), [editor]);
    const [isOpen, onOpenChange] = useMenuIsOpen("people menu");
    return /* @__PURE__ */ (0, import_jsx_runtime151.jsxs)(Root26, { onOpenChange, open: isOpen, children: [
      /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(Trigger3, { dir: "ltr", asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime151.jsxs)("button", { className: "tlui-people-menu__avatars-button", title: msg2("people-menu.title"), children: [
        userIds.length > 5 && /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(PeopleMenuMore, { count: userIds.length - 5 }),
        /* @__PURE__ */ (0, import_jsx_runtime151.jsxs)("div", { className: "tlui-people-menu__avatars", children: [
          userIds.slice(-5).map((userId) => /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(PeopleMenuAvatar, { userId }, userId)),
          (displayUserWhenAlone || userIds.length > 0) && /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(
            "div",
            {
              className: "tlui-people-menu__avatar",
              style: {
                backgroundColor: userColor
              },
              children: userName === "New User" ? "" : userName[0] ?? ""
            }
          )
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(Portal4, { container, children: /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(
        Content24,
        {
          dir: "ltr",
          className: "tlui-menu",
          side: "bottom",
          sideOffset: 2,
          collisionPadding: 4,
          onEscapeKeyDown: preventDefault,
          children: /* @__PURE__ */ (0, import_jsx_runtime151.jsxs)("div", { className: "tlui-people-menu__wrapper", children: [
            /* @__PURE__ */ (0, import_jsx_runtime151.jsx)("div", { className: "tlui-people-menu__section", children: /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(UserPresenceEditor, {}) }),
            userIds.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime151.jsx)("div", { className: "tlui-people-menu__section", children: userIds.map((userId) => {
              return /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(PeopleMenuItem, { userId }, userId + "_presence");
            }) }),
            children
          ] })
        }
      ) })
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/SharePanel/DefaultSharePanel.mjs
  function DefaultSharePanel() {
    return /* @__PURE__ */ (0, import_jsx_runtime152.jsx)("div", { className: "tlui-share-zone", draggable: false, children: /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(PeopleMenu, { displayUserWhenAlone: true }) });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DefaultStylePanel.mjs
  var import_jsx_runtime159 = __toESM(require_jsx_runtime(), 1);
  var import_classnames28 = __toESM(require_classnames(), 1);
  var import_react110 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useRelevantStyles.mjs
  var selectToolStyles = Object.freeze([
    DefaultColorStyle,
    DefaultDashStyle,
    DefaultFillStyle,
    DefaultSizeStyle
  ]);
  function useRelevantStyles(stylesToCheck = selectToolStyles) {
    const editor = useEditor();
    return useValue(
      "getRelevantStyles",
      () => {
        const styles = new SharedStyleMap(editor.getSharedStyles());
        const isInShapeSpecificTool = !!editor.root.getCurrent()?.shapeType;
        const hasShapesSelected = editor.isIn("select") && editor.getSelectedShapeIds().length > 0;
        if (styles.size === 0 && editor.isIn("select") && editor.getSelectedShapeIds().length === 0) {
          for (const style of stylesToCheck) {
            styles.applyValue(style, editor.getStyleForNextShape(style));
          }
        }
        if (isInShapeSpecificTool || hasShapesSelected || styles.size > 0) {
          return styles;
        }
        return null;
      },
      [editor]
    );
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DefaultStylePanelContent.mjs
  var import_jsx_runtime158 = __toESM(require_jsx_runtime(), 1);
  var import_react109 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/styles.mjs
  var STYLES = {
    color: [
      { value: "black", icon: "color" },
      { value: "grey", icon: "color" },
      { value: "light-violet", icon: "color" },
      { value: "violet", icon: "color" },
      { value: "blue", icon: "color" },
      { value: "light-blue", icon: "color" },
      { value: "yellow", icon: "color" },
      { value: "orange", icon: "color" },
      { value: "green", icon: "color" },
      { value: "light-green", icon: "color" },
      { value: "light-red", icon: "color" },
      { value: "red", icon: "color" }
    ],
    fill: [
      { value: "none", icon: "fill-none" },
      { value: "semi", icon: "fill-semi" },
      { value: "solid", icon: "fill-solid" },
      { value: "pattern", icon: "fill-pattern" }
      // { value: 'fill', icon: 'fill-fill' },
    ],
    dash: [
      { value: "draw", icon: "dash-draw" },
      { value: "dashed", icon: "dash-dashed" },
      { value: "dotted", icon: "dash-dotted" },
      { value: "solid", icon: "dash-solid" }
    ],
    size: [
      { value: "s", icon: "size-small" },
      { value: "m", icon: "size-medium" },
      { value: "l", icon: "size-large" },
      { value: "xl", icon: "size-extra-large" }
    ],
    font: [
      { value: "draw", icon: "font-draw" },
      { value: "sans", icon: "font-sans" },
      { value: "serif", icon: "font-serif" },
      { value: "mono", icon: "font-mono" }
    ],
    textAlign: [
      { value: "start", icon: "text-align-left" },
      { value: "middle", icon: "text-align-center" },
      { value: "end", icon: "text-align-right" }
    ],
    horizontalAlign: [
      { value: "start", icon: "horizontal-align-start" },
      { value: "middle", icon: "horizontal-align-middle" },
      { value: "end", icon: "horizontal-align-end" }
    ],
    verticalAlign: [
      { value: "start", icon: "vertical-align-start" },
      { value: "middle", icon: "vertical-align-middle" },
      { value: "end", icon: "vertical-align-end" }
    ],
    geo: [
      { value: "rectangle", icon: "geo-rectangle" },
      { value: "ellipse", icon: "geo-ellipse" },
      { value: "triangle", icon: "geo-triangle" },
      { value: "diamond", icon: "geo-diamond" },
      { value: "star", icon: "geo-star" },
      { value: "pentagon", icon: "geo-pentagon" },
      { value: "hexagon", icon: "geo-hexagon" },
      { value: "octagon", icon: "geo-octagon" },
      { value: "rhombus", icon: "geo-rhombus" },
      { value: "rhombus-2", icon: "geo-rhombus-2" },
      { value: "oval", icon: "geo-oval" },
      { value: "trapezoid", icon: "geo-trapezoid" },
      { value: "arrow-left", icon: "geo-arrow-left" },
      { value: "arrow-up", icon: "geo-arrow-up" },
      { value: "arrow-down", icon: "geo-arrow-down" },
      { value: "arrow-right", icon: "geo-arrow-right" },
      { value: "cloud", icon: "geo-cloud" },
      { value: "x-box", icon: "geo-x-box" },
      { value: "check-box", icon: "geo-check-box" },
      { value: "heart", icon: "geo-heart" }
    ],
    arrowheadStart: [
      { value: "none", icon: "arrowhead-none" },
      { value: "arrow", icon: "arrowhead-arrow" },
      { value: "triangle", icon: "arrowhead-triangle" },
      { value: "square", icon: "arrowhead-square" },
      { value: "dot", icon: "arrowhead-dot" },
      { value: "diamond", icon: "arrowhead-diamond" },
      { value: "inverted", icon: "arrowhead-triangle-inverted" },
      { value: "bar", icon: "arrowhead-bar" }
    ],
    arrowheadEnd: [
      { value: "none", icon: "arrowhead-none" },
      { value: "arrow", icon: "arrowhead-arrow" },
      { value: "triangle", icon: "arrowhead-triangle" },
      { value: "square", icon: "arrowhead-square" },
      { value: "dot", icon: "arrowhead-dot" },
      { value: "diamond", icon: "arrowhead-diamond" },
      { value: "inverted", icon: "arrowhead-triangle-inverted" },
      { value: "bar", icon: "arrowhead-bar" }
    ],
    spline: [
      { value: "line", icon: "spline-line" },
      { value: "cubic", icon: "spline-cubic" }
    ]
  };

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiButtonPicker.mjs
  var import_jsx_runtime153 = __toESM(require_jsx_runtime(), 1);
  var import_classnames27 = __toESM(require_classnames(), 1);
  var import_react107 = __toESM(require_react(), 1);
  var TldrawUiButtonPicker = (0, import_react107.memo)(function TldrawUiButtonPicker2(props) {
    const {
      uiType,
      items,
      title,
      style,
      value,
      // columns = clamp(items.length, 2, 4),
      onValueChange,
      onHistoryMark,
      theme
    } = props;
    const msg2 = useTranslation();
    const rPointing = (0, import_react107.useRef)(false);
    const rPointingOriginalActiveElement = (0, import_react107.useRef)(null);
    const {
      handleButtonClick,
      handleButtonPointerDown,
      handleButtonPointerEnter,
      handleButtonPointerUp
    } = (0, import_react107.useMemo)(() => {
      const handlePointerUp = () => {
        rPointing.current = false;
        window.removeEventListener("pointerup", handlePointerUp);
        const origActiveEl = rPointingOriginalActiveElement.current;
        if (origActiveEl && ["TEXTAREA", "INPUT"].includes(origActiveEl.nodeName)) {
          origActiveEl.focus();
        }
        rPointingOriginalActiveElement.current = null;
      };
      const handleButtonClick2 = (e) => {
        const { id } = e.currentTarget.dataset;
        if (value.type === "shared" && value.value === id) return;
        onHistoryMark?.("point picker item");
        onValueChange(style, id);
      };
      const handleButtonPointerDown2 = (e) => {
        const { id } = e.currentTarget.dataset;
        onHistoryMark?.("point picker item");
        onValueChange(style, id);
        rPointing.current = true;
        rPointingOriginalActiveElement.current = document.activeElement;
        window.addEventListener("pointerup", handlePointerUp);
      };
      const handleButtonPointerEnter2 = (e) => {
        if (!rPointing.current) return;
        const { id } = e.currentTarget.dataset;
        onValueChange(style, id);
      };
      const handleButtonPointerUp2 = (e) => {
        const { id } = e.currentTarget.dataset;
        if (value.type === "shared" && value.value === id) return;
        onValueChange(style, id);
      };
      return {
        handleButtonClick: handleButtonClick2,
        handleButtonPointerDown: handleButtonPointerDown2,
        handleButtonPointerEnter: handleButtonPointerEnter2,
        handleButtonPointerUp: handleButtonPointerUp2
      };
    }, [value, onHistoryMark, onValueChange, style]);
    return /* @__PURE__ */ (0, import_jsx_runtime153.jsx)("div", { "data-testid": `style.${uiType}`, className: (0, import_classnames27.default)("tlui-buttons__grid"), children: items.map((item) => /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(
      TldrawUiButton,
      {
        type: "icon",
        "data-id": item.value,
        "data-testid": `style.${uiType}.${item.value}`,
        "aria-label": item.value,
        "data-state": value.type === "shared" && value.value === item.value ? "hinted" : void 0,
        title: title + " \u2014 " + msg2(`${uiType}-style.${item.value}`),
        className: (0, import_classnames27.default)("tlui-button-grid__button"),
        style: style === DefaultColorStyle ? { color: theme[item.value].solid } : void 0,
        onPointerEnter: handleButtonPointerEnter,
        onPointerDown: handleButtonPointerDown,
        onPointerUp: handleButtonPointerUp,
        onClick: handleButtonClick,
        children: /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(TldrawUiButtonIcon, { icon: item.icon })
      },
      item.value
    )) });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiSlider.mjs
  var import_jsx_runtime155 = __toESM(require_jsx_runtime(), 1);

  // node_modules/@radix-ui/react-slider/dist/index.mjs
  var React62 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/number/dist/index.mjs
  function clamp4(value, [min3, max2]) {
    return Math.min(max2, Math.max(min3, value));
  }

  // node_modules/@radix-ui/react-use-previous/dist/index.mjs
  var React61 = __toESM(require_react(), 1);
  function usePrevious(value) {
    const ref = React61.useRef({ value, previous: value });
    return React61.useMemo(() => {
      if (ref.current.value !== value) {
        ref.current.previous = ref.current.value;
        ref.current.value = value;
      }
      return ref.current.previous;
    }, [value]);
  }

  // node_modules/@radix-ui/react-slider/dist/index.mjs
  var import_jsx_runtime154 = __toESM(require_jsx_runtime(), 1);
  var PAGE_KEYS = ["PageUp", "PageDown"];
  var ARROW_KEYS = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
  var BACK_KEYS = {
    "from-left": ["Home", "PageDown", "ArrowDown", "ArrowLeft"],
    "from-right": ["Home", "PageDown", "ArrowDown", "ArrowRight"],
    "from-bottom": ["Home", "PageDown", "ArrowDown", "ArrowLeft"],
    "from-top": ["Home", "PageDown", "ArrowUp", "ArrowLeft"]
  };
  var SLIDER_NAME = "Slider";
  var [Collection4, useCollection4, createCollectionScope4] = createCollection(SLIDER_NAME);
  var [createSliderContext, createSliderScope] = createContextScope(SLIDER_NAME, [
    createCollectionScope4
  ]);
  var [SliderProvider, useSliderContext] = createSliderContext(SLIDER_NAME);
  var Slider = React62.forwardRef(
    (props, forwardedRef) => {
      const {
        name,
        min: min3 = 0,
        max: max2 = 100,
        step = 1,
        orientation = "horizontal",
        disabled = false,
        minStepsBetweenThumbs = 0,
        defaultValue = [min3],
        value,
        onValueChange = () => {
        },
        onValueCommit = () => {
        },
        inverted = false,
        form,
        ...sliderProps
      } = props;
      const thumbRefs = React62.useRef(/* @__PURE__ */ new Set());
      const valueIndexToChangeRef = React62.useRef(0);
      const isHorizontal = orientation === "horizontal";
      const SliderOrientation = isHorizontal ? SliderHorizontal : SliderVertical;
      const [values = [], setValues] = useControllableState({
        prop: value,
        defaultProp: defaultValue,
        onChange: (value2) => {
          const thumbs = [...thumbRefs.current];
          thumbs[valueIndexToChangeRef.current]?.focus();
          onValueChange(value2);
        }
      });
      const valuesBeforeSlideStartRef = React62.useRef(values);
      function handleSlideStart(value2) {
        const closestIndex = getClosestValueIndex(values, value2);
        updateValues(value2, closestIndex);
      }
      function handleSlideMove(value2) {
        updateValues(value2, valueIndexToChangeRef.current);
      }
      function handleSlideEnd() {
        const prevValue = valuesBeforeSlideStartRef.current[valueIndexToChangeRef.current];
        const nextValue = values[valueIndexToChangeRef.current];
        const hasChanged = nextValue !== prevValue;
        if (hasChanged) onValueCommit(values);
      }
      function updateValues(value2, atIndex, { commit } = { commit: false }) {
        const decimalCount = getDecimalCount(step);
        const snapToStep = roundValue(Math.round((value2 - min3) / step) * step + min3, decimalCount);
        const nextValue = clamp4(snapToStep, [min3, max2]);
        setValues((prevValues = []) => {
          const nextValues = getNextSortedValues(prevValues, nextValue, atIndex);
          if (hasMinStepsBetweenValues(nextValues, minStepsBetweenThumbs * step)) {
            valueIndexToChangeRef.current = nextValues.indexOf(nextValue);
            const hasChanged = String(nextValues) !== String(prevValues);
            if (hasChanged && commit) onValueCommit(nextValues);
            return hasChanged ? nextValues : prevValues;
          } else {
            return prevValues;
          }
        });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
        SliderProvider,
        {
          scope: props.__scopeSlider,
          name,
          disabled,
          min: min3,
          max: max2,
          valueIndexToChangeRef,
          thumbs: thumbRefs.current,
          values,
          orientation,
          form,
          children: /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(Collection4.Provider, { scope: props.__scopeSlider, children: /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(Collection4.Slot, { scope: props.__scopeSlider, children: /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
            SliderOrientation,
            {
              "aria-disabled": disabled,
              "data-disabled": disabled ? "" : void 0,
              ...sliderProps,
              ref: forwardedRef,
              onPointerDown: composeEventHandlers(sliderProps.onPointerDown, () => {
                if (!disabled) valuesBeforeSlideStartRef.current = values;
              }),
              min: min3,
              max: max2,
              inverted,
              onSlideStart: disabled ? void 0 : handleSlideStart,
              onSlideMove: disabled ? void 0 : handleSlideMove,
              onSlideEnd: disabled ? void 0 : handleSlideEnd,
              onHomeKeyDown: () => !disabled && updateValues(min3, 0, { commit: true }),
              onEndKeyDown: () => !disabled && updateValues(max2, values.length - 1, { commit: true }),
              onStepKeyDown: ({ event, direction: stepDirection }) => {
                if (!disabled) {
                  const isPageKey = PAGE_KEYS.includes(event.key);
                  const isSkipKey = isPageKey || event.shiftKey && ARROW_KEYS.includes(event.key);
                  const multiplier = isSkipKey ? 10 : 1;
                  const atIndex = valueIndexToChangeRef.current;
                  const value2 = values[atIndex];
                  const stepInDirection = step * multiplier * stepDirection;
                  updateValues(value2 + stepInDirection, atIndex, { commit: true });
                }
              }
            }
          ) }) })
        }
      );
    }
  );
  Slider.displayName = SLIDER_NAME;
  var [SliderOrientationProvider, useSliderOrientationContext] = createSliderContext(SLIDER_NAME, {
    startEdge: "left",
    endEdge: "right",
    size: "width",
    direction: 1
  });
  var SliderHorizontal = React62.forwardRef(
    (props, forwardedRef) => {
      const {
        min: min3,
        max: max2,
        dir,
        inverted,
        onSlideStart,
        onSlideMove,
        onSlideEnd,
        onStepKeyDown,
        ...sliderProps
      } = props;
      const [slider, setSlider] = React62.useState(null);
      const composedRefs = useComposedRefs(forwardedRef, (node) => setSlider(node));
      const rectRef = React62.useRef(void 0);
      const direction = useDirection(dir);
      const isDirectionLTR = direction === "ltr";
      const isSlidingFromLeft = isDirectionLTR && !inverted || !isDirectionLTR && inverted;
      function getValueFromPointer(pointerPosition) {
        const rect = rectRef.current || slider.getBoundingClientRect();
        const input = [0, rect.width];
        const output = isSlidingFromLeft ? [min3, max2] : [max2, min3];
        const value = linearScale(input, output);
        rectRef.current = rect;
        return value(pointerPosition - rect.left);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
        SliderOrientationProvider,
        {
          scope: props.__scopeSlider,
          startEdge: isSlidingFromLeft ? "left" : "right",
          endEdge: isSlidingFromLeft ? "right" : "left",
          direction: isSlidingFromLeft ? 1 : -1,
          size: "width",
          children: /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
            SliderImpl,
            {
              dir: direction,
              "data-orientation": "horizontal",
              ...sliderProps,
              ref: composedRefs,
              style: {
                ...sliderProps.style,
                ["--radix-slider-thumb-transform"]: "translateX(-50%)"
              },
              onSlideStart: (event) => {
                const value = getValueFromPointer(event.clientX);
                onSlideStart?.(value);
              },
              onSlideMove: (event) => {
                const value = getValueFromPointer(event.clientX);
                onSlideMove?.(value);
              },
              onSlideEnd: () => {
                rectRef.current = void 0;
                onSlideEnd?.();
              },
              onStepKeyDown: (event) => {
                const slideDirection = isSlidingFromLeft ? "from-left" : "from-right";
                const isBackKey = BACK_KEYS[slideDirection].includes(event.key);
                onStepKeyDown?.({ event, direction: isBackKey ? -1 : 1 });
              }
            }
          )
        }
      );
    }
  );
  var SliderVertical = React62.forwardRef(
    (props, forwardedRef) => {
      const {
        min: min3,
        max: max2,
        inverted,
        onSlideStart,
        onSlideMove,
        onSlideEnd,
        onStepKeyDown,
        ...sliderProps
      } = props;
      const sliderRef = React62.useRef(null);
      const ref = useComposedRefs(forwardedRef, sliderRef);
      const rectRef = React62.useRef(void 0);
      const isSlidingFromBottom = !inverted;
      function getValueFromPointer(pointerPosition) {
        const rect = rectRef.current || sliderRef.current.getBoundingClientRect();
        const input = [0, rect.height];
        const output = isSlidingFromBottom ? [max2, min3] : [min3, max2];
        const value = linearScale(input, output);
        rectRef.current = rect;
        return value(pointerPosition - rect.top);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
        SliderOrientationProvider,
        {
          scope: props.__scopeSlider,
          startEdge: isSlidingFromBottom ? "bottom" : "top",
          endEdge: isSlidingFromBottom ? "top" : "bottom",
          size: "height",
          direction: isSlidingFromBottom ? 1 : -1,
          children: /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
            SliderImpl,
            {
              "data-orientation": "vertical",
              ...sliderProps,
              ref,
              style: {
                ...sliderProps.style,
                ["--radix-slider-thumb-transform"]: "translateY(50%)"
              },
              onSlideStart: (event) => {
                const value = getValueFromPointer(event.clientY);
                onSlideStart?.(value);
              },
              onSlideMove: (event) => {
                const value = getValueFromPointer(event.clientY);
                onSlideMove?.(value);
              },
              onSlideEnd: () => {
                rectRef.current = void 0;
                onSlideEnd?.();
              },
              onStepKeyDown: (event) => {
                const slideDirection = isSlidingFromBottom ? "from-bottom" : "from-top";
                const isBackKey = BACK_KEYS[slideDirection].includes(event.key);
                onStepKeyDown?.({ event, direction: isBackKey ? -1 : 1 });
              }
            }
          )
        }
      );
    }
  );
  var SliderImpl = React62.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeSlider,
        onSlideStart,
        onSlideMove,
        onSlideEnd,
        onHomeKeyDown,
        onEndKeyDown,
        onStepKeyDown,
        ...sliderProps
      } = props;
      const context = useSliderContext(SLIDER_NAME, __scopeSlider);
      return /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
        Primitive.span,
        {
          ...sliderProps,
          ref: forwardedRef,
          onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
            if (event.key === "Home") {
              onHomeKeyDown(event);
              event.preventDefault();
            } else if (event.key === "End") {
              onEndKeyDown(event);
              event.preventDefault();
            } else if (PAGE_KEYS.concat(ARROW_KEYS).includes(event.key)) {
              onStepKeyDown(event);
              event.preventDefault();
            }
          }),
          onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
            const target = event.target;
            target.setPointerCapture(event.pointerId);
            event.preventDefault();
            if (context.thumbs.has(target)) {
              target.focus();
            } else {
              onSlideStart(event);
            }
          }),
          onPointerMove: composeEventHandlers(props.onPointerMove, (event) => {
            const target = event.target;
            if (target.hasPointerCapture(event.pointerId)) onSlideMove(event);
          }),
          onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
            const target = event.target;
            if (target.hasPointerCapture(event.pointerId)) {
              target.releasePointerCapture(event.pointerId);
              onSlideEnd(event);
            }
          })
        }
      );
    }
  );
  var TRACK_NAME = "SliderTrack";
  var SliderTrack = React62.forwardRef(
    (props, forwardedRef) => {
      const { __scopeSlider, ...trackProps } = props;
      const context = useSliderContext(TRACK_NAME, __scopeSlider);
      return /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
        Primitive.span,
        {
          "data-disabled": context.disabled ? "" : void 0,
          "data-orientation": context.orientation,
          ...trackProps,
          ref: forwardedRef
        }
      );
    }
  );
  SliderTrack.displayName = TRACK_NAME;
  var RANGE_NAME = "SliderRange";
  var SliderRange = React62.forwardRef(
    (props, forwardedRef) => {
      const { __scopeSlider, ...rangeProps } = props;
      const context = useSliderContext(RANGE_NAME, __scopeSlider);
      const orientation = useSliderOrientationContext(RANGE_NAME, __scopeSlider);
      const ref = React62.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref);
      const valuesCount = context.values.length;
      const percentages = context.values.map(
        (value) => convertValueToPercentage(value, context.min, context.max)
      );
      const offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0;
      const offsetEnd = 100 - Math.max(...percentages);
      return /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
        Primitive.span,
        {
          "data-orientation": context.orientation,
          "data-disabled": context.disabled ? "" : void 0,
          ...rangeProps,
          ref: composedRefs,
          style: {
            ...props.style,
            [orientation.startEdge]: offsetStart + "%",
            [orientation.endEdge]: offsetEnd + "%"
          }
        }
      );
    }
  );
  SliderRange.displayName = RANGE_NAME;
  var THUMB_NAME = "SliderThumb";
  var SliderThumb = React62.forwardRef(
    (props, forwardedRef) => {
      const getItems = useCollection4(props.__scopeSlider);
      const [thumb, setThumb] = React62.useState(null);
      const composedRefs = useComposedRefs(forwardedRef, (node) => setThumb(node));
      const index2 = React62.useMemo(
        () => thumb ? getItems().findIndex((item) => item.ref.current === thumb) : -1,
        [getItems, thumb]
      );
      return /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(SliderThumbImpl, { ...props, ref: composedRefs, index: index2 });
    }
  );
  var SliderThumbImpl = React62.forwardRef(
    (props, forwardedRef) => {
      const { __scopeSlider, index: index2, name, ...thumbProps } = props;
      const context = useSliderContext(THUMB_NAME, __scopeSlider);
      const orientation = useSliderOrientationContext(THUMB_NAME, __scopeSlider);
      const [thumb, setThumb] = React62.useState(null);
      const composedRefs = useComposedRefs(forwardedRef, (node) => setThumb(node));
      const isFormControl = thumb ? context.form || !!thumb.closest("form") : true;
      const size4 = useSize(thumb);
      const value = context.values[index2];
      const percent = value === void 0 ? 0 : convertValueToPercentage(value, context.min, context.max);
      const label = getLabel(index2, context.values.length);
      const orientationSize = size4?.[orientation.size];
      const thumbInBoundsOffset = orientationSize ? getThumbInBoundsOffset(orientationSize, percent, orientation.direction) : 0;
      React62.useEffect(() => {
        if (thumb) {
          context.thumbs.add(thumb);
          return () => {
            context.thumbs.delete(thumb);
          };
        }
      }, [thumb, context.thumbs]);
      return /* @__PURE__ */ (0, import_jsx_runtime154.jsxs)(
        "span",
        {
          style: {
            transform: "var(--radix-slider-thumb-transform)",
            position: "absolute",
            [orientation.startEdge]: `calc(${percent}% + ${thumbInBoundsOffset}px)`
          },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(Collection4.ItemSlot, { scope: props.__scopeSlider, children: /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
              Primitive.span,
              {
                role: "slider",
                "aria-label": props["aria-label"] || label,
                "aria-valuemin": context.min,
                "aria-valuenow": value,
                "aria-valuemax": context.max,
                "aria-orientation": context.orientation,
                "data-orientation": context.orientation,
                "data-disabled": context.disabled ? "" : void 0,
                tabIndex: context.disabled ? void 0 : 0,
                ...thumbProps,
                ref: composedRefs,
                style: value === void 0 ? { display: "none" } : props.style,
                onFocus: composeEventHandlers(props.onFocus, () => {
                  context.valueIndexToChangeRef.current = index2;
                })
              }
            ) }),
            isFormControl && /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
              BubbleInput,
              {
                name: name ?? (context.name ? context.name + (context.values.length > 1 ? "[]" : "") : void 0),
                form: context.form,
                value
              },
              index2
            )
          ]
        }
      );
    }
  );
  SliderThumb.displayName = THUMB_NAME;
  var BubbleInput = (props) => {
    const { value, ...inputProps } = props;
    const ref = React62.useRef(null);
    const prevValue = usePrevious(value);
    React62.useEffect(() => {
      const input = ref.current;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(inputProto, "value");
      const setValue = descriptor.set;
      if (prevValue !== value && setValue) {
        const event = new Event("input", { bubbles: true });
        setValue.call(input, value);
        input.dispatchEvent(event);
      }
    }, [prevValue, value]);
    return /* @__PURE__ */ (0, import_jsx_runtime154.jsx)("input", { style: { display: "none" }, ...inputProps, ref, defaultValue: value });
  };
  function getNextSortedValues(prevValues = [], nextValue, atIndex) {
    const nextValues = [...prevValues];
    nextValues[atIndex] = nextValue;
    return nextValues.sort((a, b) => a - b);
  }
  function convertValueToPercentage(value, min3, max2) {
    const maxSteps = max2 - min3;
    const percentPerStep = 100 / maxSteps;
    const percentage = percentPerStep * (value - min3);
    return clamp4(percentage, [0, 100]);
  }
  function getLabel(index2, totalValues) {
    if (totalValues > 2) {
      return `Value ${index2 + 1} of ${totalValues}`;
    } else if (totalValues === 2) {
      return ["Minimum", "Maximum"][index2];
    } else {
      return void 0;
    }
  }
  function getClosestValueIndex(values, nextValue) {
    if (values.length === 1) return 0;
    const distances = values.map((value) => Math.abs(value - nextValue));
    const closestDistance = Math.min(...distances);
    return distances.indexOf(closestDistance);
  }
  function getThumbInBoundsOffset(width, left, direction) {
    const halfWidth = width / 2;
    const halfPercent = 50;
    const offset4 = linearScale([0, halfPercent], [0, halfWidth]);
    return (halfWidth - offset4(left) * direction) * direction;
  }
  function getStepsBetweenValues(values) {
    return values.slice(0, -1).map((value, index2) => values[index2 + 1] - value);
  }
  function hasMinStepsBetweenValues(values, minStepsBetweenValues) {
    if (minStepsBetweenValues > 0) {
      const stepsBetweenValues = getStepsBetweenValues(values);
      const actualMinStepsBetweenValues = Math.min(...stepsBetweenValues);
      return actualMinStepsBetweenValues >= minStepsBetweenValues;
    }
    return true;
  }
  function linearScale(input, output) {
    return (value) => {
      if (input[0] === input[1] || output[0] === output[1]) return output[0];
      const ratio = (output[1] - output[0]) / (input[1] - input[0]);
      return output[0] + ratio * (value - input[0]);
    };
  }
  function getDecimalCount(value) {
    return (String(value).split(".")[1] || "").length;
  }
  function roundValue(value, decimalCount) {
    const rounder = Math.pow(10, decimalCount);
    return Math.round(value * rounder) / rounder;
  }
  var Root5 = Slider;
  var Track = SliderTrack;
  var Range2 = SliderRange;
  var Thumb = SliderThumb;

  // node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiSlider.mjs
  var import_react108 = __toESM(require_react(), 1);
  var TldrawUiSlider = (0, import_react108.memo)(function Slider2({
    onHistoryMark,
    title,
    steps,
    value,
    label,
    onValueChange,
    ["data-testid"]: testId
  }) {
    const msg2 = useTranslation();
    const handleValueChange = (0, import_react108.useCallback)(
      (value2) => {
        onValueChange(value2[0]);
      },
      [onValueChange]
    );
    const handlePointerDown = (0, import_react108.useCallback)(() => {
      onHistoryMark("click slider");
    }, [onHistoryMark]);
    const handlePointerUp = (0, import_react108.useCallback)(() => {
      if (!value) return;
      onValueChange(value);
    }, [value, onValueChange]);
    return /* @__PURE__ */ (0, import_jsx_runtime155.jsx)("div", { className: "tlui-slider__container", children: /* @__PURE__ */ (0, import_jsx_runtime155.jsxs)(
      Root5,
      {
        "data-testid": testId,
        className: "tlui-slider",
        "area-label": "Opacity",
        dir: "ltr",
        min: 0,
        max: steps,
        step: 1,
        value: value ? [value] : void 0,
        onPointerDown: handlePointerDown,
        onValueChange: handleValueChange,
        onPointerUp: handlePointerUp,
        title: title + " \u2014 " + msg2(label),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(Track, { className: "tlui-slider__track", dir: "ltr", children: value !== null && /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(Range2, { className: "tlui-slider__range", dir: "ltr" }) }),
          value !== null && /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(Thumb, { className: "tlui-slider__thumb", dir: "ltr" })
        ]
      }
    ) });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DoubleDropdownPicker.mjs
  var import_jsx_runtime156 = __toESM(require_jsx_runtime(), 1);
  var React63 = __toESM(require_react(), 1);
  function DoubleDropdownPickerInner({
    label,
    uiTypeA,
    uiTypeB,
    labelA,
    labelB,
    itemsA,
    itemsB,
    styleA,
    styleB,
    valueA,
    valueB,
    onValueChange
  }) {
    const msg2 = useTranslation();
    const iconA = React63.useMemo(
      () => itemsA.find((item) => valueA.type === "shared" && valueA.value === item.value)?.icon ?? "mixed",
      [itemsA, valueA]
    );
    const iconB = React63.useMemo(
      () => itemsB.find((item) => valueB.type === "shared" && valueB.value === item.value)?.icon ?? "mixed",
      [itemsB, valueB]
    );
    if (valueA === void 0 && valueB === void 0) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)("div", { className: "tlui-style-panel__double-select-picker", children: [
      /* @__PURE__ */ (0, import_jsx_runtime156.jsx)("div", { title: msg2(label), className: "tlui-style-panel__double-select-picker-label", children: msg2(label) }),
      /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)("div", { className: "tlui-buttons__horizontal", children: [
        /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)(TldrawUiDropdownMenuRoot, { id: `style panel ${uiTypeA} A`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(
            TldrawUiButton,
            {
              type: "icon",
              "data-testid": `style.${uiTypeA}`,
              title: msg2(labelA) + " \u2014 " + (valueA === null || valueA.type === "mixed" ? msg2("style-panel.mixed") : msg2(`${uiTypeA}-style.${valueA.value}`)),
              children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TldrawUiButtonIcon, { icon: iconA, small: true, invertIcon: true })
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TldrawUiDropdownMenuContent, { side: "left", align: "center", sideOffset: 80, alignOffset: 0, children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)("div", { className: "tlui-buttons__grid", children: itemsA.map((item, i) => {
            return /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TldrawUiDropdownMenuItem, { "data-testid": `style.${uiTypeA}.${item.value}`, children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(
              TldrawUiButton,
              {
                type: "icon",
                onClick: () => onValueChange(styleA, item.value),
                title: `${msg2(labelA)} \u2014 ${msg2(`${uiTypeA}-style.${item.value}`)}`,
                children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TldrawUiButtonIcon, { icon: item.icon, invertIcon: true })
              },
              item.value
            ) }, i);
          }) }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)(TldrawUiDropdownMenuRoot, { id: `style panel ${uiTypeB}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(
            TldrawUiButton,
            {
              type: "icon",
              "data-testid": `style.${uiTypeB}`,
              title: msg2(labelB) + " \u2014 " + (valueB === null || valueB.type === "mixed" ? msg2("style-panel.mixed") : msg2(`${uiTypeB}-style.${valueB.value}`)),
              children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TldrawUiButtonIcon, { icon: iconB, small: true })
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TldrawUiDropdownMenuContent, { side: "left", align: "center", sideOffset: 116, alignOffset: 0, children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)("div", { className: "tlui-buttons__grid", children: itemsB.map((item) => {
            return /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TldrawUiDropdownMenuItem, { children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(
              TldrawUiButton,
              {
                type: "icon",
                title: `${msg2(labelB)} \u2014 ${msg2(`${uiTypeB}-style.${item.value}`)}`,
                "data-testid": `style.${uiTypeB}.${item.value}`,
                onClick: () => onValueChange(styleB, item.value),
                children: /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(TldrawUiButtonIcon, { icon: item.icon })
              }
            ) }, item.value);
          }) }) })
        ] })
      ] })
    ] });
  }
  var DoubleDropdownPicker = React63.memo(
    DoubleDropdownPickerInner
  );

  // node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DropdownPicker.mjs
  var import_jsx_runtime157 = __toESM(require_jsx_runtime(), 1);
  var React64 = __toESM(require_react(), 1);
  function DropdownPickerInner({
    id,
    label,
    uiType,
    stylePanelType,
    style,
    items,
    type,
    value,
    onValueChange
  }) {
    const msg2 = useTranslation();
    const editor = useEditor();
    const icon = React64.useMemo(
      () => items.find((item) => value.type === "shared" && item.value === value.value)?.icon,
      [items, value]
    );
    const stylePanelName = msg2(`style-panel.${stylePanelType}`);
    const titleStr = value.type === "mixed" ? msg2("style-panel.mixed") : stylePanelName + " \u2014 " + msg2(`${uiType}-style.${value.value}`);
    const labelStr = label ? msg2(label) : "";
    return /* @__PURE__ */ (0, import_jsx_runtime157.jsxs)(TldrawUiDropdownMenuRoot, { id: `style panel ${id}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime157.jsxs)(TldrawUiButton, { type, "data-testid": `style.${uiType}`, title: titleStr, children: [
        labelStr && /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(TldrawUiButtonLabel, { children: labelStr }),
        /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(TldrawUiButtonIcon, { icon: icon ?? "mixed" })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(TldrawUiDropdownMenuContent, { side: "left", align: "center", alignOffset: 0, children: /* @__PURE__ */ (0, import_jsx_runtime157.jsx)("div", { className: "tlui-buttons__grid", children: items.map((item) => {
        return /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(TldrawUiDropdownMenuItem, { children: /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
          TldrawUiButton,
          {
            type: "icon",
            "data-testid": `style.${uiType}.${item.value}`,
            title: stylePanelName + " \u2014 " + msg2(`${uiType}-style.${item.value}`),
            onClick: () => {
              editor.markHistoryStoppingPoint("select style dropdown item");
              onValueChange(style, item.value);
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(TldrawUiButtonIcon, { icon: item.icon })
          }
        ) }, item.value);
      }) }) })
    ] });
  }
  var DropdownPicker = React64.memo(DropdownPickerInner);

  // node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DefaultStylePanelContent.mjs
  function DefaultStylePanelContent({ styles }) {
    const isDarkMode = useIsDarkMode();
    if (!styles) return null;
    const geo = styles.get(GeoShapeGeoStyle);
    const arrowheadEnd = styles.get(ArrowShapeArrowheadEndStyle);
    const arrowheadStart = styles.get(ArrowShapeArrowheadStartStyle);
    const spline = styles.get(LineShapeSplineStyle);
    const font = styles.get(DefaultFontStyle);
    const hideGeo = geo === void 0;
    const hideArrowHeads = arrowheadEnd === void 0 && arrowheadStart === void 0;
    const hideSpline = spline === void 0;
    const hideText = font === void 0;
    const theme = getDefaultColorTheme({ isDarkMode });
    return /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)(import_jsx_runtime158.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(CommonStylePickerSet, { theme, styles }),
      !hideText && /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(TextStylePickerSet, { theme, styles }),
      !(hideGeo && hideArrowHeads && hideSpline) && /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)("div", { className: "tlui-style-panel__section", "aria-label": "style panel styles", children: [
        /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(GeoStylePickerSet, { styles }),
        /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(ArrowheadStylePickerSet, { styles }),
        /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(SplineStylePickerSet, { styles })
      ] })
    ] });
  }
  function useStyleChangeCallback() {
    const editor = useEditor();
    const trackEvent = useUiEvents();
    return import_react109.default.useMemo(
      () => function handleStyleChange(style, value) {
        editor.run(() => {
          if (editor.isIn("select")) {
            editor.setStyleForSelectedShapes(style, value);
          }
          editor.setStyleForNextShapes(style, value);
          editor.updateInstanceState({ isChangingStyle: true });
        });
        trackEvent("set-style", { source: "style-panel", id: style.id, value });
      },
      [editor, trackEvent]
    );
  }
  function CommonStylePickerSet({ styles, theme }) {
    const msg2 = useTranslation();
    const editor = useEditor();
    const onHistoryMark = (0, import_react109.useCallback)((id) => editor.markHistoryStoppingPoint(id), [editor]);
    const handleValueChange = useStyleChangeCallback();
    const color = styles.get(DefaultColorStyle);
    const fill = styles.get(DefaultFillStyle);
    const dash = styles.get(DefaultDashStyle);
    const size4 = styles.get(DefaultSizeStyle);
    const showPickers = fill !== void 0 || dash !== void 0 || size4 !== void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)(import_jsx_runtime158.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)(
        "div",
        {
          tabIndex: -1,
          className: "tlui-style-panel__section__common",
          "aria-label": "style panel styles",
          "data-testid": "style.panel",
          children: [
            color === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
              TldrawUiButtonPicker,
              {
                title: msg2("style-panel.color"),
                uiType: "color",
                style: DefaultColorStyle,
                items: STYLES.color,
                value: color,
                onValueChange: handleValueChange,
                theme,
                onHistoryMark
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(OpacitySlider, {})
          ]
        }
      ),
      showPickers && /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)("div", { className: "tlui-style-panel__section", "aria-label": "style panel styles", children: [
        fill === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
          TldrawUiButtonPicker,
          {
            title: msg2("style-panel.fill"),
            uiType: "fill",
            style: DefaultFillStyle,
            items: STYLES.fill,
            value: fill,
            onValueChange: handleValueChange,
            theme,
            onHistoryMark
          }
        ),
        dash === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
          TldrawUiButtonPicker,
          {
            title: msg2("style-panel.dash"),
            uiType: "dash",
            style: DefaultDashStyle,
            items: STYLES.dash,
            value: dash,
            onValueChange: handleValueChange,
            theme,
            onHistoryMark
          }
        ),
        size4 === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
          TldrawUiButtonPicker,
          {
            title: msg2("style-panel.size"),
            uiType: "size",
            style: DefaultSizeStyle,
            items: STYLES.size,
            value: size4,
            onValueChange: (style, value) => {
              handleValueChange(style, value);
              const selectedShapeIds = editor.getSelectedShapeIds();
              if (selectedShapeIds.length > 0) {
                kickoutOccludedShapes(editor, selectedShapeIds);
              }
            },
            theme,
            onHistoryMark
          }
        )
      ] })
    ] });
  }
  function TextStylePickerSet({ theme, styles }) {
    const msg2 = useTranslation();
    const handleValueChange = useStyleChangeCallback();
    const editor = useEditor();
    const onHistoryMark = (0, import_react109.useCallback)((id) => editor.markHistoryStoppingPoint(id), [editor]);
    const font = styles.get(DefaultFontStyle);
    const textAlign = styles.get(DefaultTextAlignStyle);
    const labelAlign = styles.get(DefaultHorizontalAlignStyle);
    const verticalLabelAlign = styles.get(DefaultVerticalAlignStyle);
    if (font === void 0 && labelAlign === void 0) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)("div", { className: "tlui-style-panel__section", "aria-label": "style panel text", children: [
      font === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
        TldrawUiButtonPicker,
        {
          title: msg2("style-panel.font"),
          uiType: "font",
          style: DefaultFontStyle,
          items: STYLES.font,
          value: font,
          onValueChange: handleValueChange,
          theme,
          onHistoryMark
        }
      ),
      textAlign === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)("div", { className: "tlui-style-panel__row", children: [
        /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
          TldrawUiButtonPicker,
          {
            title: msg2("style-panel.align"),
            uiType: "align",
            style: DefaultTextAlignStyle,
            items: STYLES.textAlign,
            value: textAlign,
            onValueChange: handleValueChange,
            theme,
            onHistoryMark
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime158.jsx)("div", { className: "tlui-style-panel__row__extra-button", children: /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
          TldrawUiButton,
          {
            type: "icon",
            title: msg2("style-panel.vertical-align"),
            "data-testid": "vertical-align",
            disabled: true,
            children: /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(TldrawUiButtonIcon, { icon: "vertical-align-middle" })
          }
        ) })
      ] }),
      labelAlign === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)("div", { className: "tlui-style-panel__row", children: [
        /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
          TldrawUiButtonPicker,
          {
            title: msg2("style-panel.label-align"),
            uiType: "align",
            style: DefaultHorizontalAlignStyle,
            items: STYLES.horizontalAlign,
            value: labelAlign,
            onValueChange: handleValueChange,
            theme,
            onHistoryMark
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime158.jsx)("div", { className: "tlui-style-panel__row__extra-button", children: verticalLabelAlign === void 0 ? /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
          TldrawUiButton,
          {
            type: "icon",
            title: msg2("style-panel.vertical-align"),
            "data-testid": "vertical-align",
            disabled: true,
            children: /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(TldrawUiButtonIcon, { icon: "vertical-align-middle" })
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
          DropdownPicker,
          {
            type: "icon",
            id: "geo-vertical-alignment",
            uiType: "verticalAlign",
            stylePanelType: "vertical-align",
            style: DefaultVerticalAlignStyle,
            items: STYLES.verticalAlign,
            value: verticalLabelAlign,
            onValueChange: handleValueChange
          }
        ) })
      ] })
    ] });
  }
  function GeoStylePickerSet({ styles }) {
    const handleValueChange = useStyleChangeCallback();
    const geo = styles.get(GeoShapeGeoStyle);
    if (geo === void 0) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
      DropdownPicker,
      {
        id: "geo",
        type: "menu",
        label: "style-panel.geo",
        uiType: "geo",
        stylePanelType: "geo",
        style: GeoShapeGeoStyle,
        items: STYLES.geo,
        value: geo,
        onValueChange: handleValueChange
      }
    );
  }
  function SplineStylePickerSet({ styles }) {
    const handleValueChange = useStyleChangeCallback();
    const spline = styles.get(LineShapeSplineStyle);
    if (spline === void 0) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
      DropdownPicker,
      {
        id: "spline",
        type: "menu",
        label: "style-panel.spline",
        uiType: "spline",
        stylePanelType: "spline",
        style: LineShapeSplineStyle,
        items: STYLES.spline,
        value: spline,
        onValueChange: handleValueChange
      }
    );
  }
  function ArrowheadStylePickerSet({ styles }) {
    const handleValueChange = useStyleChangeCallback();
    const arrowheadEnd = styles.get(ArrowShapeArrowheadEndStyle);
    const arrowheadStart = styles.get(ArrowShapeArrowheadStartStyle);
    if (!arrowheadEnd || !arrowheadStart) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
      DoubleDropdownPicker,
      {
        label: "style-panel.arrowheads",
        uiTypeA: "arrowheadStart",
        styleA: ArrowShapeArrowheadStartStyle,
        itemsA: STYLES.arrowheadStart,
        valueA: arrowheadStart,
        uiTypeB: "arrowheadEnd",
        styleB: ArrowShapeArrowheadEndStyle,
        itemsB: STYLES.arrowheadEnd,
        valueB: arrowheadEnd,
        onValueChange: handleValueChange,
        labelA: "style-panel.arrowhead-start",
        labelB: "style-panel.arrowhead-end"
      }
    );
  }
  var tldrawSupportedOpacities = [0.1, 0.25, 0.5, 0.75, 1];
  function OpacitySlider() {
    const editor = useEditor();
    const onHistoryMark = (0, import_react109.useCallback)((id) => editor.markHistoryStoppingPoint(id), [editor]);
    const opacity = useValue("opacity", () => editor.getSharedOpacity(), [editor]);
    const trackEvent = useUiEvents();
    const msg2 = useTranslation();
    const handleOpacityValueChange = import_react109.default.useCallback(
      (value) => {
        const item = tldrawSupportedOpacities[value];
        editor.run(() => {
          if (editor.isIn("select")) {
            editor.setOpacityForSelectedShapes(item);
          }
          editor.setOpacityForNextShapes(item);
          editor.updateInstanceState({ isChangingStyle: true });
        });
        trackEvent("set-style", { source: "style-panel", id: "opacity", value });
      },
      [editor, trackEvent]
    );
    if (opacity === void 0) return null;
    const opacityIndex = opacity.type === "mixed" ? -1 : tldrawSupportedOpacities.indexOf(
      minBy(
        tldrawSupportedOpacities,
        (supportedOpacity) => Math.abs(supportedOpacity - opacity.value)
      )
    );
    return /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
      TldrawUiSlider,
      {
        "data-testid": "style.opacity",
        value: opacityIndex >= 0 ? opacityIndex : tldrawSupportedOpacities.length - 1,
        label: opacity.type === "mixed" ? "style-panel.mixed" : `opacity-style.${opacity.value}`,
        onValueChange: handleOpacityValueChange,
        steps: tldrawSupportedOpacities.length - 1,
        title: msg2("style-panel.opacity"),
        onHistoryMark
      }
    );
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DefaultStylePanel.mjs
  var DefaultStylePanel = (0, import_react110.memo)(function DefaultStylePanel2({
    isMobile,
    children
  }) {
    const editor = useEditor();
    const ref = (0, import_react110.useRef)(null);
    usePassThroughWheelEvents(ref);
    const styles = useRelevantStyles();
    const handlePointerOut = (0, import_react110.useCallback)(() => {
      if (!isMobile) {
        editor.updateInstanceState({ isChangingStyle: false });
      }
    }, [editor, isMobile]);
    const content = children ?? /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(DefaultStylePanelContent, { styles });
    return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(
      "div",
      {
        ref,
        className: (0, import_classnames28.default)("tlui-style-panel", { "tlui-style-panel__wrapper": !isMobile }),
        "data-ismobile": isMobile,
        onPointerLeave: handlePointerOut,
        children: content
      }
    );
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/DefaultToolbar.mjs
  var import_jsx_runtime164 = __toESM(require_jsx_runtime(), 1);
  var import_react114 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/MobileStylePanel.mjs
  var import_jsx_runtime160 = __toESM(require_jsx_runtime(), 1);
  var import_react111 = __toESM(require_react(), 1);
  function MobileStylePanel() {
    const editor = useEditor();
    const msg2 = useTranslation();
    const relevantStyles = useRelevantStyles();
    const color = relevantStyles?.get(DefaultColorStyle);
    const theme = getDefaultColorTheme({ isDarkMode: editor.user.getIsDarkMode() });
    const currentColor = (color?.type === "shared" ? theme[color.value] : theme.black).solid;
    const disableStylePanel = useValue(
      "disable style panel",
      () => editor.isInAny("hand", "zoom", "eraser", "laser"),
      [editor]
    );
    const handleStylesOpenChange = (0, import_react111.useCallback)(
      (isOpen) => {
        if (!isOpen) {
          editor.updateInstanceState({ isChangingStyle: false });
        }
      },
      [editor]
    );
    const { StylePanel } = useTldrawUiComponents();
    if (!StylePanel) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime160.jsxs)(TldrawUiPopover, { id: "mobile style menu", onOpenChange: handleStylesOpenChange, children: [
      /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(TldrawUiPopoverTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(
        TldrawUiButton,
        {
          type: "tool",
          "data-testid": "mobile-styles.button",
          style: {
            color: disableStylePanel ? "var(--color-muted-1)" : currentColor
          },
          title: msg2("style-panel.title"),
          disabled: disableStylePanel,
          children: /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(
            TldrawUiButtonIcon,
            {
              icon: disableStylePanel ? "blob" : color?.type === "mixed" ? "mixed" : "blob"
            }
          )
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(TldrawUiPopoverContent, { side: "top", align: "end", children: StylePanel && /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(StylePanel, { isMobile: true }) })
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/DefaultToolbarContent.mjs
  var import_jsx_runtime161 = __toESM(require_jsx_runtime(), 1);
  function DefaultToolbarContent() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsxs)(import_jsx_runtime161.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(SelectToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(HandToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(DrawToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(EraserToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ArrowToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(TextToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(NoteToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(AssetToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(RectangleToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(EllipseToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(TriangleToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(DiamondToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(HexagonToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(OvalToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(RhombusToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(StarToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(CloudToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(HeartToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(XBoxToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(CheckBoxToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ArrowLeftToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ArrowUpToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ArrowDownToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ArrowRightToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(LineToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(HighlightToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(LaserToolbarItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(FrameToolbarItem, {})
    ] });
  }
  function useIsToolSelected(tool) {
    const editor = useEditor();
    const geo = tool.meta?.geo;
    return useValue(
      "is tool selected",
      () => {
        const activeToolId = editor.getCurrentToolId();
        const geoState = editor.getSharedStyles().getAsKnownValue(GeoShapeGeoStyle);
        return geo ? activeToolId === "geo" && geoState === geo : activeToolId === tool.id;
      },
      [editor, tool.id, geo]
    );
  }
  function ToolbarItem({ tool }) {
    const tools = useTools();
    const isSelected = useIsToolSelected(tools[tool]);
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(TldrawUiMenuToolItem, { toolId: tool, isSelected });
  }
  function SelectToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "select" });
  }
  function HandToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "hand" });
  }
  function DrawToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "draw" });
  }
  function EraserToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "eraser" });
  }
  function ArrowToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "arrow" });
  }
  function TextToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "text" });
  }
  function NoteToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "note" });
  }
  function AssetToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(TldrawUiMenuToolItem, { toolId: "asset" });
  }
  function RectangleToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "rectangle" });
  }
  function EllipseToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "ellipse" });
  }
  function DiamondToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "diamond" });
  }
  function TriangleToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "triangle" });
  }
  function RhombusToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "rhombus" });
  }
  function HeartToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "heart" });
  }
  function HexagonToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "hexagon" });
  }
  function CloudToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "cloud" });
  }
  function StarToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "star" });
  }
  function OvalToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "oval" });
  }
  function XBoxToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "x-box" });
  }
  function CheckBoxToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "check-box" });
  }
  function ArrowLeftToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "arrow-left" });
  }
  function ArrowUpToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "arrow-up" });
  }
  function ArrowDownToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "arrow-down" });
  }
  function ArrowRightToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "arrow-right" });
  }
  function LineToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "line" });
  }
  function HighlightToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "highlight" });
  }
  function FrameToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "frame" });
  }
  function LaserToolbarItem() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(ToolbarItem, { tool: "laser" });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/OverflowingToolbar.mjs
  var import_jsx_runtime162 = __toESM(require_jsx_runtime(), 1);
  var import_classnames29 = __toESM(require_classnames(), 1);

  // node_modules/hotkeys-js/dist/hotkeys.esm.js
  var isff = typeof navigator !== "undefined" ? navigator.userAgent.toLowerCase().indexOf("firefox") > 0 : false;
  function addEvent(object2, event, method, useCapture) {
    if (object2.addEventListener) {
      object2.addEventListener(event, method, useCapture);
    } else if (object2.attachEvent) {
      object2.attachEvent("on".concat(event), method);
    }
  }
  function removeEvent(object2, event, method, useCapture) {
    if (object2.removeEventListener) {
      object2.removeEventListener(event, method, useCapture);
    } else if (object2.detachEvent) {
      object2.detachEvent("on".concat(event), method);
    }
  }
  function getMods(modifier, key) {
    const mods = key.slice(0, key.length - 1);
    for (let i = 0; i < mods.length; i++) mods[i] = modifier[mods[i].toLowerCase()];
    return mods;
  }
  function getKeys(key) {
    if (typeof key !== "string") key = "";
    key = key.replace(/\s/g, "");
    const keys = key.split(",");
    let index2 = keys.lastIndexOf("");
    for (; index2 >= 0; ) {
      keys[index2 - 1] += ",";
      keys.splice(index2, 1);
      index2 = keys.lastIndexOf("");
    }
    return keys;
  }
  function compareArray(a1, a2) {
    const arr1 = a1.length >= a2.length ? a1 : a2;
    const arr2 = a1.length >= a2.length ? a2 : a1;
    let isIndex = true;
    for (let i = 0; i < arr1.length; i++) {
      if (arr2.indexOf(arr1[i]) === -1) isIndex = false;
    }
    return isIndex;
  }
  var _keyMap = {
    backspace: 8,
    "\u232B": 8,
    tab: 9,
    clear: 12,
    enter: 13,
    "\u21A9": 13,
    return: 13,
    esc: 27,
    escape: 27,
    space: 32,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    del: 46,
    delete: 46,
    ins: 45,
    insert: 45,
    home: 36,
    end: 35,
    pageup: 33,
    pagedown: 34,
    capslock: 20,
    num_0: 96,
    num_1: 97,
    num_2: 98,
    num_3: 99,
    num_4: 100,
    num_5: 101,
    num_6: 102,
    num_7: 103,
    num_8: 104,
    num_9: 105,
    num_multiply: 106,
    num_add: 107,
    num_enter: 108,
    num_subtract: 109,
    num_decimal: 110,
    num_divide: 111,
    "\u21EA": 20,
    ",": 188,
    ".": 190,
    "/": 191,
    "`": 192,
    "-": isff ? 173 : 189,
    "=": isff ? 61 : 187,
    ";": isff ? 59 : 186,
    "'": 222,
    "[": 219,
    "]": 221,
    "\\": 220
  };
  var _modifier = {
    // shiftKey
    "\u21E7": 16,
    shift: 16,
    // altKey
    "\u2325": 18,
    alt: 18,
    option: 18,
    // ctrlKey
    "\u2303": 17,
    ctrl: 17,
    control: 17,
    // metaKey
    "\u2318": 91,
    cmd: 91,
    command: 91
  };
  var modifierMap = {
    16: "shiftKey",
    18: "altKey",
    17: "ctrlKey",
    91: "metaKey",
    shiftKey: 16,
    ctrlKey: 17,
    altKey: 18,
    metaKey: 91
  };
  var _mods = {
    16: false,
    18: false,
    17: false,
    91: false
  };
  var _handlers = {};
  for (let k = 1; k < 20; k++) {
    _keyMap["f".concat(k)] = 111 + k;
  }
  var _downKeys = [];
  var winListendFocus = null;
  var _scope = "all";
  var elementEventMap = /* @__PURE__ */ new Map();
  var code = (x) => _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);
  var getKey = (x) => Object.keys(_keyMap).find((k) => _keyMap[k] === x);
  var getModifier = (x) => Object.keys(_modifier).find((k) => _modifier[k] === x);
  function setScope(scope) {
    _scope = scope || "all";
  }
  function getScope() {
    return _scope || "all";
  }
  function getPressedKeyCodes() {
    return _downKeys.slice(0);
  }
  function getPressedKeyString() {
    return _downKeys.map((c) => getKey(c) || getModifier(c) || String.fromCharCode(c));
  }
  function getAllKeyCodes() {
    const result = [];
    Object.keys(_handlers).forEach((k) => {
      _handlers[k].forEach((_ref) => {
        let {
          key,
          scope,
          mods,
          shortcut
        } = _ref;
        result.push({
          scope,
          shortcut,
          mods,
          keys: key.split("+").map((v) => code(v))
        });
      });
    });
    return result;
  }
  function filter(event) {
    const target = event.target || event.srcElement;
    const {
      tagName
    } = target;
    let flag = true;
    const isInput = tagName === "INPUT" && !["checkbox", "radio", "range", "button", "file", "reset", "submit", "color"].includes(target.type);
    if (target.isContentEditable || (isInput || tagName === "TEXTAREA" || tagName === "SELECT") && !target.readOnly) {
      flag = false;
    }
    return flag;
  }
  function isPressed(keyCode) {
    if (typeof keyCode === "string") {
      keyCode = code(keyCode);
    }
    return _downKeys.indexOf(keyCode) !== -1;
  }
  function deleteScope(scope, newScope) {
    let handlers;
    let i;
    if (!scope) scope = getScope();
    for (const key in _handlers) {
      if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
        handlers = _handlers[key];
        for (i = 0; i < handlers.length; ) {
          if (handlers[i].scope === scope) {
            const deleteItems = handlers.splice(i, 1);
            deleteItems.forEach((_ref2) => {
              let {
                element
              } = _ref2;
              return removeKeyEvent(element);
            });
          } else {
            i++;
          }
        }
      }
    }
    if (getScope() === scope) setScope(newScope || "all");
  }
  function clearModifier(event) {
    let key = event.keyCode || event.which || event.charCode;
    const i = _downKeys.indexOf(key);
    if (i >= 0) {
      _downKeys.splice(i, 1);
    }
    if (event.key && event.key.toLowerCase() === "meta") {
      _downKeys.splice(0, _downKeys.length);
    }
    if (key === 93 || key === 224) key = 91;
    if (key in _mods) {
      _mods[key] = false;
      for (const k in _modifier) if (_modifier[k] === key) hotkeys[k] = false;
    }
  }
  function unbind(keysInfo) {
    if (typeof keysInfo === "undefined") {
      Object.keys(_handlers).forEach((key) => {
        Array.isArray(_handlers[key]) && _handlers[key].forEach((info) => eachUnbind(info));
        delete _handlers[key];
      });
      removeKeyEvent(null);
    } else if (Array.isArray(keysInfo)) {
      keysInfo.forEach((info) => {
        if (info.key) eachUnbind(info);
      });
    } else if (typeof keysInfo === "object") {
      if (keysInfo.key) eachUnbind(keysInfo);
    } else if (typeof keysInfo === "string") {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      let [scope, method] = args;
      if (typeof scope === "function") {
        method = scope;
        scope = "";
      }
      eachUnbind({
        key: keysInfo,
        scope,
        method,
        splitKey: "+"
      });
    }
  }
  var eachUnbind = (_ref3) => {
    let {
      key,
      scope,
      method,
      splitKey = "+"
    } = _ref3;
    const multipleKeys = getKeys(key);
    multipleKeys.forEach((originKey) => {
      const unbindKeys = originKey.split(splitKey);
      const len = unbindKeys.length;
      const lastKey = unbindKeys[len - 1];
      const keyCode = lastKey === "*" ? "*" : code(lastKey);
      if (!_handlers[keyCode]) return;
      if (!scope) scope = getScope();
      const mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
      const unbindElements = [];
      _handlers[keyCode] = _handlers[keyCode].filter((record) => {
        const isMatchingMethod = method ? record.method === method : true;
        const isUnbind = isMatchingMethod && record.scope === scope && compareArray(record.mods, mods);
        if (isUnbind) unbindElements.push(record.element);
        return !isUnbind;
      });
      unbindElements.forEach((element) => removeKeyEvent(element));
    });
  };
  function eventHandler(event, handler, scope, element) {
    if (handler.element !== element) {
      return;
    }
    let modifiersMatch;
    if (handler.scope === scope || handler.scope === "all") {
      modifiersMatch = handler.mods.length > 0;
      for (const y in _mods) {
        if (Object.prototype.hasOwnProperty.call(_mods, y)) {
          if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {
            modifiersMatch = false;
          }
        }
      }
      if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === "*") {
        handler.keys = [];
        handler.keys = handler.keys.concat(_downKeys);
        if (handler.method(event, handler) === false) {
          if (event.preventDefault) event.preventDefault();
          else event.returnValue = false;
          if (event.stopPropagation) event.stopPropagation();
          if (event.cancelBubble) event.cancelBubble = true;
        }
      }
    }
  }
  function dispatch(event, element) {
    const asterisk = _handlers["*"];
    let key = event.keyCode || event.which || event.charCode;
    if (!hotkeys.filter.call(this, event)) return;
    if (key === 93 || key === 224) key = 91;
    if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);
    ["metaKey", "ctrlKey", "altKey", "shiftKey"].forEach((keyName) => {
      const keyNum = modifierMap[keyName];
      if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
        _downKeys.push(keyNum);
      } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
        _downKeys.splice(_downKeys.indexOf(keyNum), 1);
      } else if (keyName === "metaKey" && event[keyName]) {
        _downKeys = _downKeys.filter((k) => k in modifierMap || k === key);
      }
    });
    if (key in _mods) {
      _mods[key] = true;
      for (const k in _modifier) {
        if (_modifier[k] === key) hotkeys[k] = true;
      }
      if (!asterisk) return;
    }
    for (const e in _mods) {
      if (Object.prototype.hasOwnProperty.call(_mods, e)) {
        _mods[e] = event[modifierMap[e]];
      }
    }
    if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState("AltGraph")) {
      if (_downKeys.indexOf(17) === -1) {
        _downKeys.push(17);
      }
      if (_downKeys.indexOf(18) === -1) {
        _downKeys.push(18);
      }
      _mods[17] = true;
      _mods[18] = true;
    }
    const scope = getScope();
    if (asterisk) {
      for (let i = 0; i < asterisk.length; i++) {
        if (asterisk[i].scope === scope && (event.type === "keydown" && asterisk[i].keydown || event.type === "keyup" && asterisk[i].keyup)) {
          eventHandler(event, asterisk[i], scope, element);
        }
      }
    }
    if (!(key in _handlers)) return;
    const handlerKey = _handlers[key];
    const keyLen = handlerKey.length;
    for (let i = 0; i < keyLen; i++) {
      if (event.type === "keydown" && handlerKey[i].keydown || event.type === "keyup" && handlerKey[i].keyup) {
        if (handlerKey[i].key) {
          const record = handlerKey[i];
          const {
            splitKey
          } = record;
          const keyShortcut = record.key.split(splitKey);
          const _downKeysCurrent = [];
          for (let a = 0; a < keyShortcut.length; a++) {
            _downKeysCurrent.push(code(keyShortcut[a]));
          }
          if (_downKeysCurrent.sort().join("") === _downKeys.sort().join("")) {
            eventHandler(event, record, scope, element);
          }
        }
      }
    }
  }
  function hotkeys(key, option, method) {
    _downKeys = [];
    const keys = getKeys(key);
    let mods = [];
    let scope = "all";
    let element = document;
    let i = 0;
    let keyup = false;
    let keydown = true;
    let splitKey = "+";
    let capture = false;
    let single = false;
    if (method === void 0 && typeof option === "function") {
      method = option;
    }
    if (Object.prototype.toString.call(option) === "[object Object]") {
      if (option.scope) scope = option.scope;
      if (option.element) element = option.element;
      if (option.keyup) keyup = option.keyup;
      if (option.keydown !== void 0) keydown = option.keydown;
      if (option.capture !== void 0) capture = option.capture;
      if (typeof option.splitKey === "string") splitKey = option.splitKey;
      if (option.single === true) single = true;
    }
    if (typeof option === "string") scope = option;
    if (single) unbind(key, scope);
    for (; i < keys.length; i++) {
      key = keys[i].split(splitKey);
      mods = [];
      if (key.length > 1) mods = getMods(_modifier, key);
      key = key[key.length - 1];
      key = key === "*" ? "*" : code(key);
      if (!(key in _handlers)) _handlers[key] = [];
      _handlers[key].push({
        keyup,
        keydown,
        scope,
        mods,
        shortcut: keys[i],
        method,
        key: keys[i],
        splitKey,
        element
      });
    }
    if (typeof element !== "undefined" && window) {
      if (!elementEventMap.has(element)) {
        const keydownListener = function() {
          let event = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.event;
          return dispatch(event, element);
        };
        const keyupListenr = function() {
          let event = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.event;
          dispatch(event, element);
          clearModifier(event);
        };
        elementEventMap.set(element, {
          keydownListener,
          keyupListenr,
          capture
        });
        addEvent(element, "keydown", keydownListener, capture);
        addEvent(element, "keyup", keyupListenr, capture);
      }
      if (!winListendFocus) {
        const listener = () => {
          _downKeys = [];
        };
        winListendFocus = {
          listener,
          capture
        };
        addEvent(window, "focus", listener, capture);
      }
    }
  }
  function trigger(shortcut) {
    let scope = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "all";
    Object.keys(_handlers).forEach((key) => {
      const dataList = _handlers[key].filter((item) => item.scope === scope && item.shortcut === shortcut);
      dataList.forEach((data) => {
        if (data && data.method) {
          data.method();
        }
      });
    });
  }
  function removeKeyEvent(element) {
    const values = Object.values(_handlers).flat();
    const findindex = values.findIndex((_ref4) => {
      let {
        element: el
      } = _ref4;
      return el === element;
    });
    if (findindex < 0) {
      const {
        keydownListener,
        keyupListenr,
        capture
      } = elementEventMap.get(element) || {};
      if (keydownListener && keyupListenr) {
        removeEvent(element, "keyup", keyupListenr, capture);
        removeEvent(element, "keydown", keydownListener, capture);
        elementEventMap.delete(element);
      }
    }
    if (values.length <= 0 || elementEventMap.size <= 0) {
      const eventKeys = Object.keys(elementEventMap);
      eventKeys.forEach((el) => {
        const {
          keydownListener,
          keyupListenr,
          capture
        } = elementEventMap.get(el) || {};
        if (keydownListener && keyupListenr) {
          removeEvent(el, "keyup", keyupListenr, capture);
          removeEvent(el, "keydown", keydownListener, capture);
          elementEventMap.delete(el);
        }
      });
      elementEventMap.clear();
      Object.keys(_handlers).forEach((key) => delete _handlers[key]);
      if (winListendFocus) {
        const {
          listener,
          capture
        } = winListendFocus;
        removeEvent(window, "focus", listener, capture);
        winListendFocus = null;
      }
    }
  }
  var _api = {
    getPressedKeyString,
    setScope,
    getScope,
    deleteScope,
    getPressedKeyCodes,
    getAllKeyCodes,
    isPressed,
    filter,
    trigger,
    unbind,
    keyMap: _keyMap,
    modifier: _modifier,
    modifierMap
  };
  for (const a in _api) {
    if (Object.prototype.hasOwnProperty.call(_api, a)) {
      hotkeys[a] = _api[a];
    }
  }
  if (typeof window !== "undefined") {
    const _hotkeys = window.hotkeys;
    hotkeys.noConflict = (deep) => {
      if (deep && window.hotkeys === hotkeys) {
        window.hotkeys = _hotkeys;
      }
      return hotkeys;
    };
    window.hotkeys = hotkeys;
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/OverflowingToolbar.mjs
  var import_react113 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useKeyboardShortcuts.mjs
  var import_react112 = __toESM(require_react(), 1);
  var SKIP_KBDS = [
    // we set these in useNativeClipboardEvents instead
    "copy",
    "cut",
    "paste",
    // There's also an upload asset action, so we don't want to set the kbd twice
    "asset"
  ];
  function useKeyboardShortcuts() {
    const editor = useEditor();
    const isReadonlyMode = useReadonly();
    const actions = useActions();
    const tools = useTools();
    const isFocused = useValue("is focused", () => editor.getInstanceState().isFocused, [editor]);
    (0, import_react112.useEffect)(() => {
      if (!isFocused) return;
      const disposables = new Array();
      const hot = (keys, callback) => {
        hotkeys(keys, { element: document.body }, callback);
        disposables.push(() => {
          hotkeys.unbind(keys, callback);
        });
      };
      const hotUp = (keys, callback) => {
        hotkeys(keys, { element: document.body, keyup: true, keydown: false }, callback);
        disposables.push(() => {
          hotkeys.unbind(keys, callback);
        });
      };
      for (const action of Object.values(actions)) {
        if (!action.kbd) continue;
        if (isReadonlyMode && !action.readonlyOk) continue;
        if (SKIP_KBDS.includes(action.id)) continue;
        hot(getHotkeysStringFromKbd(action.kbd), (event) => {
          if (areShortcutsDisabled3(editor)) return;
          preventDefault(event);
          action.onSelect("kbd");
        });
      }
      for (const tool of Object.values(tools)) {
        if (!tool.kbd || !tool.readonlyOk && editor.getIsReadonly()) {
          continue;
        }
        if (SKIP_KBDS.includes(tool.id)) continue;
        hot(getHotkeysStringFromKbd(tool.kbd), (event) => {
          if (areShortcutsDisabled3(editor)) return;
          preventDefault(event);
          tool.onSelect("kbd");
        });
      }
      hot(",", (e) => {
        if (areShortcutsDisabled3(editor)) return;
        if (editor.inputs.keys.has("Comma")) return;
        preventDefault(e);
        editor.focus();
        editor.inputs.keys.add("Comma");
        const { x, y, z } = editor.inputs.currentPagePoint;
        const screenpoints = editor.pageToScreen({ x, y });
        const info = {
          type: "pointer",
          name: "pointer_down",
          point: { x: screenpoints.x, y: screenpoints.y, z },
          shiftKey: e.shiftKey,
          altKey: e.altKey,
          ctrlKey: e.metaKey || e.ctrlKey,
          metaKey: e.metaKey,
          accelKey: isAccelKey(e),
          pointerId: 0,
          button: 0,
          isPen: editor.getInstanceState().isPenMode,
          target: "canvas"
        };
        editor.dispatch(info);
      });
      hotUp(",", (e) => {
        if (areShortcutsDisabled3(editor)) return;
        if (!editor.inputs.keys.has("Comma")) return;
        editor.inputs.keys.delete("Comma");
        const { x, y, z } = editor.inputs.currentScreenPoint;
        const info = {
          type: "pointer",
          name: "pointer_up",
          point: { x, y, z },
          shiftKey: e.shiftKey,
          altKey: e.altKey,
          ctrlKey: e.metaKey || e.ctrlKey,
          metaKey: e.metaKey,
          accelKey: isAccelKey(e),
          pointerId: 0,
          button: 0,
          isPen: editor.getInstanceState().isPenMode,
          target: "canvas"
        };
        editor.dispatch(info);
      });
      return () => {
        disposables.forEach((d) => d());
      };
    }, [actions, tools, isReadonlyMode, editor, isFocused]);
  }
  function getHotkeysStringFromKbd(kbd2) {
    return getKeys2(kbd2).map((kbd22) => {
      let str = "";
      const chars = kbd22.split("");
      if (chars.length === 1) {
        str = chars[0];
      } else {
        if (chars[0] === "!") {
          str = `shift+${chars[1]}`;
        } else if (chars[0] === "?") {
          if (chars.length === 3 && chars[1] === "!") {
            str = `alt+shift+${chars[2]}`;
          } else {
            str = `alt+${chars[1]}`;
          }
        } else if (chars[0] === "$") {
          if (chars[1] === "!") {
            str = `cmd+shift+${chars[2]},ctrl+shift+${chars[2]}`;
          } else if (chars[1] === "?") {
            str = `cmd+\u2325+${chars[2]},ctrl+alt+${chars[2]}`;
          } else {
            str = `cmd+${chars[1]},ctrl+${chars[1]}`;
          }
        } else {
          str = kbd22;
        }
      }
      return str;
    }).join(",");
  }
  function getKeys2(key) {
    if (typeof key !== "string") key = "";
    key = key.replace(/\s/g, "");
    const keys = key.split(",");
    let index2 = keys.lastIndexOf("");
    for (; index2 >= 0; ) {
      keys[index2 - 1] += ",";
      keys.splice(index2, 1);
      index2 = keys.lastIndexOf("");
    }
    return keys;
  }
  function areShortcutsDisabled3(editor) {
    return editor.menus.hasAnyOpenMenus() || editor.getEditingShapeId() !== null || editor.getCrashingError();
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/OverflowingToolbar.mjs
  var IsInOverflowContext = (0, import_react113.createContext)(false);
  function OverflowingToolbar({ children }) {
    const editor = useEditor();
    const id = useUniqueSafeId();
    const breakpoint = useBreakpoint();
    const msg2 = useTranslation();
    const overflowIndex = Math.min(8, 5 + breakpoint);
    const [totalItems, setTotalItems] = (0, import_react113.useState)(0);
    const mainToolsRef = (0, import_react113.useRef)(null);
    const [lastActiveOverflowItem, setLastActiveOverflowItem] = (0, import_react113.useState)(null);
    const css = (0, import_react113.useMemo)(() => {
      const activeCss = lastActiveOverflowItem ? `:not([data-value="${lastActiveOverflowItem}"])` : "";
      return `
			#${id}_main > *:nth-child(n + ${overflowIndex + (lastActiveOverflowItem ? 1 : 2)})${activeCss} {
				display: none;
			}
			#${id}_more > *:nth-child(-n + ${overflowIndex}) {
				display: none;
			}
        `;
    }, [lastActiveOverflowItem, id, overflowIndex]);
    const onDomUpdate = useEvent(() => {
      if (!mainToolsRef.current) return;
      const children2 = Array.from(mainToolsRef.current.children);
      setTotalItems(children2.length);
      const lastActiveElementIdx = children2.findIndex(
        (el) => el.getAttribute("data-value") === lastActiveOverflowItem
      );
      if (lastActiveElementIdx <= overflowIndex) {
        setLastActiveOverflowItem(null);
      }
      const activeElementIdx = Array.from(mainToolsRef.current.children).findIndex(
        (el) => el.getAttribute("aria-checked") === "true"
      );
      if (activeElementIdx === -1) return;
      if (activeElementIdx >= overflowIndex) {
        setLastActiveOverflowItem(children2[activeElementIdx].getAttribute("data-value"));
      }
    });
    (0, import_react113.useLayoutEffect)(() => {
      onDomUpdate();
    });
    (0, import_react113.useLayoutEffect)(() => {
      if (!mainToolsRef.current) return;
      const mutationObserver = new MutationObserver(onDomUpdate);
      mutationObserver.observe(mainToolsRef.current, {
        childList: true,
        subtree: true,
        attributeFilter: ["data-value", "aria-checked"]
      });
      return () => {
        mutationObserver.disconnect();
      };
    }, [onDomUpdate]);
    (0, import_react113.useEffect)(() => {
      const keys = [
        ["1", 0],
        ["2", 1],
        ["3", 2],
        ["4", 3],
        ["5", 4],
        ["6", 5],
        ["7", 6],
        ["8", 7],
        ["9", 8],
        ["0", 9]
      ];
      for (const [key, index2] of keys) {
        hotkeys(key, (event) => {
          if (areShortcutsDisabled3(editor)) return;
          preventDefault(event);
          const relevantEls = Array.from(mainToolsRef.current?.children ?? []).filter(
            (el2) => {
              if (!(el2 instanceof HTMLElement)) return false;
              if (el2.tagName.toLowerCase() !== "button") return false;
              return !!(el2.offsetWidth || el2.offsetHeight);
            }
          );
          const el = relevantEls[index2];
          if (el) el.click();
        });
      }
      return () => {
        hotkeys.unbind("1,2,3,4,5,6,7,8,9,0");
      };
    }, [editor]);
    return /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)(import_jsx_runtime162.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime162.jsx)("style", { children: css }),
      /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)(
        "div",
        {
          className: (0, import_classnames29.default)("tlui-toolbar__tools", {
            "tlui-toolbar__tools__mobile": breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM
          }),
          role: "radiogroup",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime162.jsx)("div", { id: `${id}_main`, ref: mainToolsRef, className: "tlui-toolbar__tools__list", children: /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(TldrawUiMenuContextProvider, { type: "toolbar", sourceId: "toolbar", children }) }),
            totalItems > overflowIndex + 1 && /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(IsInOverflowContext.Provider, { value: true, children: /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)(TldrawUiDropdownMenuRoot, { id: "toolbar overflow", modal: false, children: [
              /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(
                TldrawUiButton,
                {
                  title: msg2("tool-panel.more"),
                  type: "tool",
                  className: "tlui-toolbar__overflow",
                  "data-testid": "tools.more-button",
                  children: /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(TldrawUiButtonIcon, { icon: "chevron-up" })
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(TldrawUiDropdownMenuContent, { side: "top", align: "center", children: /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(
                "div",
                {
                  className: "tlui-buttons__grid",
                  "data-testid": "tools.more-content",
                  id: `${id}_more`,
                  children: /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(TldrawUiMenuContextProvider, { type: "toolbar-overflow", sourceId: "toolbar", children })
                }
              ) })
            ] }) })
          ]
        }
      )
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/ToggleToolLockedButton.mjs
  var import_jsx_runtime163 = __toESM(require_jsx_runtime(), 1);
  var import_classnames30 = __toESM(require_classnames(), 1);
  function ToggleToolLockedButton({ activeToolId }) {
    const editor = useEditor();
    const breakpoint = useBreakpoint();
    const msg2 = useTranslation();
    const isToolLocked = useValue("is tool locked", () => editor.getInstanceState().isToolLocked, [
      editor
    ]);
    const tool = useValue("current tool", () => editor.getCurrentTool(), [editor]);
    if (!activeToolId || !tool.isLockable) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(
      TldrawUiButton,
      {
        type: "normal",
        title: msg2("action.toggle-tool-lock"),
        "data-testid": "tool-lock",
        className: (0, import_classnames30.default)("tlui-toolbar__lock-button", {
          "tlui-toolbar__lock-button__mobile": breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM
        }),
        onClick: () => editor.updateInstanceState({ isToolLocked: !isToolLocked }),
        children: /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(TldrawUiButtonIcon, { icon: isToolLocked ? "lock" : "unlock", small: true })
      }
    );
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/DefaultToolbar.mjs
  var DefaultToolbar = (0, import_react114.memo)(function DefaultToolbar2({ children }) {
    const editor = useEditor();
    const breakpoint = useBreakpoint();
    const isReadonlyMode = useReadonly();
    const activeToolId = useValue("current tool id", () => editor.getCurrentToolId(), [editor]);
    const ref = (0, import_react114.useRef)(null);
    usePassThroughWheelEvents(ref);
    const { ActionsMenu, QuickActions } = useTldrawUiComponents();
    const showQuickActions = editor.options.actionShortcutsLocation === "menu" ? false : editor.options.actionShortcutsLocation === "toolbar" ? true : breakpoint < PORTRAIT_BREAKPOINT.TABLET;
    return /* @__PURE__ */ (0, import_jsx_runtime164.jsx)("div", { ref, className: "tlui-toolbar", children: /* @__PURE__ */ (0, import_jsx_runtime164.jsxs)("div", { className: "tlui-toolbar__inner", children: [
      /* @__PURE__ */ (0, import_jsx_runtime164.jsxs)("div", { className: "tlui-toolbar__left", children: [
        !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime164.jsxs)("div", { className: "tlui-toolbar__extras", children: [
          showQuickActions && /* @__PURE__ */ (0, import_jsx_runtime164.jsxs)("div", { className: "tlui-toolbar__extras__controls tlui-buttons__horizontal", children: [
            QuickActions && /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(QuickActions, {}),
            ActionsMenu && /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(ActionsMenu, {})
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(ToggleToolLockedButton, { activeToolId })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(OverflowingToolbar, { children: children ?? /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(DefaultToolbarContent, {}) })
      ] }),
      breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM && !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime164.jsx)("div", { className: "tlui-toolbar__tools", children: /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(MobileStylePanel, {}) })
    ] }) });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/TopPanel/DefaultTopPanel.mjs
  var import_jsx_runtime167 = __toESM(require_jsx_runtime(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/OfflineIndicator/OfflineIndicator.mjs
  var import_jsx_runtime165 = __toESM(require_jsx_runtime(), 1);
  var import_classnames31 = __toESM(require_classnames(), 1);
  function OfflineIndicator() {
    const msg2 = useTranslation();
    return /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)("div", { className: (0, import_classnames31.default)("tlui-offline-indicator"), children: [
      msg2("status.offline"),
      /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(TldrawUiIcon, { "aria-label": "offline", icon: "status-offline", small: true })
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/TopPanel/CenteredTopPanelContainer.mjs
  var import_jsx_runtime166 = __toESM(require_jsx_runtime(), 1);
  var import_react115 = __toESM(require_react(), 1);
  function CenteredTopPanelContainer({
    maxWidth: maxWidth2 = 420,
    ignoreRightWidth = 0,
    stylePanelWidth = 148,
    marginBetweenZones = 12,
    squeezeAmount = 52,
    children
  }) {
    const ref = (0, import_react115.useRef)(null);
    const breakpoint = useBreakpoint();
    const updateLayout = (0, import_react115.useCallback)(() => {
      const element = ref.current;
      if (!element) return;
      const layoutTop = element.parentElement.parentElement;
      const leftPanel = layoutTop.querySelector(".tlui-layout__top__left");
      const rightPanel = layoutTop.querySelector(".tlui-layout__top__right");
      const totalWidth = layoutTop.offsetWidth;
      const leftWidth = leftPanel.offsetWidth;
      const rightWidth = rightPanel.offsetWidth;
      const selfWidth = element.offsetWidth - ignoreRightWidth;
      let xCoordIfCentered = (totalWidth - selfWidth) / 2;
      if (totalWidth % 2 !== 0) {
        xCoordIfCentered -= 0.5;
      }
      const xCoordIfLeftAligned = leftWidth + marginBetweenZones;
      const left = element.offsetLeft;
      const maxWidthProperty = Math.min(
        totalWidth - rightWidth - leftWidth - 2 * marginBetweenZones,
        maxWidth2
      );
      const xCoord = Math.max(xCoordIfCentered, xCoordIfLeftAligned) - left;
      if (rightPanel.offsetWidth > stylePanelWidth && breakpoint <= 6) {
        element.style.setProperty("max-width", maxWidthProperty - squeezeAmount + "px");
      } else {
        element.style.setProperty("max-width", maxWidthProperty + "px");
      }
      element.style.setProperty("transform", `translate(${xCoord}px, 0px)`);
    }, [breakpoint, ignoreRightWidth, marginBetweenZones, maxWidth2, squeezeAmount, stylePanelWidth]);
    (0, import_react115.useLayoutEffect)(() => {
      const element = ref.current;
      if (!element) return;
      const layoutTop = element.parentElement.parentElement;
      const leftPanel = layoutTop.querySelector(".tlui-layout__top__left");
      const rightPanel = layoutTop.querySelector(".tlui-layout__top__right");
      const observer = new ResizeObserver(updateLayout);
      observer.observe(leftPanel);
      observer.observe(rightPanel);
      observer.observe(layoutTop);
      observer.observe(element);
      updateLayout();
      return () => {
        observer.disconnect();
      };
    }, [updateLayout]);
    (0, import_react115.useLayoutEffect)(() => {
      updateLayout();
    });
    return /* @__PURE__ */ (0, import_jsx_runtime166.jsx)("div", { ref, className: "tlui-top-panel__container", children });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/TopPanel/DefaultTopPanel.mjs
  function DefaultTopPanel() {
    const isOffline = useCollaborationStatus() === "offline";
    return /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(CenteredTopPanelContainer, { children: isOffline && /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(OfflineIndicator, {}) });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/ZoomMenu/DefaultZoomMenu.mjs
  var import_jsx_runtime169 = __toESM(require_jsx_runtime(), 1);
  var import_react116 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/ui/components/ZoomMenu/DefaultZoomMenuContent.mjs
  var import_jsx_runtime168 = __toESM(require_jsx_runtime(), 1);
  function DefaultZoomMenuContent() {
    return /* @__PURE__ */ (0, import_jsx_runtime168.jsxs)(import_jsx_runtime168.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(TldrawUiMenuActionItem, { actionId: "zoom-in", noClose: true }),
      /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(TldrawUiMenuActionItem, { actionId: "zoom-out", noClose: true }),
      /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(ZoomTo100MenuItem2, {}),
      /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(ZoomToFitMenuItem, {}),
      /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(ZoomToSelectionMenuItem, {})
    ] });
  }

  // node_modules/tldraw/dist-esm/lib/ui/components/ZoomMenu/DefaultZoomMenu.mjs
  var DefaultZoomMenu = (0, import_react116.memo)(function DefaultZoomMenu2({ children }) {
    const container = useContainer();
    const [isOpen, onOpenChange] = useMenuIsOpen("zoom menu");
    const content = children ?? /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(DefaultZoomMenuContent, {});
    return /* @__PURE__ */ (0, import_jsx_runtime169.jsxs)(Root24, { dir: "ltr", open: isOpen, onOpenChange, modal: false, children: [
      /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(Trigger2, { asChild: true, dir: "ltr", children: /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(ZoomTriggerButton, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(Portal23, { container, children: /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(
        Content23,
        {
          className: "tlui-menu",
          side: "top",
          align: "start",
          alignOffset: 0,
          sideOffset: 8,
          collisionPadding: 4,
          children: /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "zoom-menu", children: content })
        }
      ) })
    ] });
  });
  var ZoomTriggerButton = (0, import_react116.forwardRef)(
    function ZoomTriggerButton2(props, ref) {
      const editor = useEditor();
      const breakpoint = useBreakpoint();
      const zoom = useValue("zoom", () => editor.getZoomLevel(), [editor]);
      const msg2 = useTranslation();
      const handleDoubleClick = (0, import_react116.useCallback)(() => {
        editor.resetZoom(editor.getViewportScreenCenter(), {
          animation: { duration: editor.options.animationMediumMs }
        });
      }, [editor]);
      return /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(
        TldrawUiButton,
        {
          ref,
          ...props,
          type: "icon",
          title: `${msg2("navigation-zone.zoom")}`,
          "data-testid": "minimap.zoom-menu-button",
          className: breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM ? "tlui-zoom-menu__button" : "tlui-zoom-menu__button__pct",
          onDoubleClick: handleDoubleClick,
          children: breakpoint < PORTRAIT_BREAKPOINT.MOBILE ? null : /* @__PURE__ */ (0, import_jsx_runtime169.jsxs)("span", { style: { flexGrow: 0, textAlign: "center" }, children: [
            Math.floor(zoom * 100),
            "%"
          ] })
        }
      );
    }
  );

  // node_modules/tldraw/dist-esm/lib/ui/context/components.mjs
  var TldrawUiComponentsContext = (0, import_react117.createContext)(null);
  function TldrawUiComponentsProvider({
    overrides = {},
    children
  }) {
    const _overrides = useShallowObjectIdentity(overrides);
    const showCollaborationUi = useShowCollaborationUi();
    return /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(
      TldrawUiComponentsContext.Provider,
      {
        value: (0, import_react117.useMemo)(
          () => ({
            ContextMenu: DefaultContextMenu,
            ActionsMenu: DefaultActionsMenu,
            HelpMenu: null,
            ZoomMenu: DefaultZoomMenu,
            MainMenu: DefaultMainMenu,
            Minimap: DefaultMinimap,
            StylePanel: DefaultStylePanel,
            PageMenu: DefaultPageMenu,
            NavigationPanel: DefaultNavigationPanel,
            Toolbar: DefaultToolbar,
            KeyboardShortcutsDialog: DefaultKeyboardShortcutsDialog,
            QuickActions: DefaultQuickActions,
            HelperButtons: DefaultHelperButtons,
            DebugPanel: DefaultDebugPanel,
            DebugMenu: DefaultDebugMenu,
            MenuPanel: DefaultMenuPanel,
            SharePanel: showCollaborationUi ? DefaultSharePanel : null,
            CursorChatBubble: showCollaborationUi ? CursorChatBubble : null,
            TopPanel: showCollaborationUi ? DefaultTopPanel : null,
            ..._overrides
          }),
          [_overrides, showCollaborationUi]
        ),
        children
      }
    );
  }
  function useTldrawUiComponents() {
    const components = (0, import_react117.useContext)(TldrawUiComponentsContext);
    if (!components) {
      throw new Error("useTldrawUiComponents must be used within a TldrawUiComponentsProvider");
    }
    return components;
  }

  // node_modules/tldraw/dist-esm/lib/ui/context/TldrawUiContextProvider.mjs
  var TldrawUiContextProvider = track(function TldrawUiContextProvider2({
    overrides,
    components,
    assetUrls,
    onUiEvent,
    forceMobile,
    mediaMimeTypes,
    children
  }) {
    const editor = useMaybeEditor();
    return /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(MimeTypeContext.Provider, { value: mediaMimeTypes, children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(AssetUrlsProvider, { assetUrls: useDefaultUiAssetUrlsWithOverrides(assetUrls), children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
      TldrawUiTranslationProvider,
      {
        overrides: useMergedTranslationOverrides(overrides),
        locale: editor?.user.getLocale() ?? defaultUserPreferences.locale,
        children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(TldrawUiEventsProvider, { onEvent: onUiEvent, children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(TldrawUiToastsProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(TldrawUiDialogsProvider, { context: editor?.contextId, children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(BreakPointProvider, { forceMobile, children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(TldrawUiComponentsProvider, { overrides: components, children: editor ? (
          // the internal providers are only valid when an editor is present
          /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(InternalProviders, { overrides, children })
        ) : children }) }) }) }) })
      }
    ) }) });
  });
  function InternalProviders({
    overrides,
    children
  }) {
    const mergedOverrides = useMergedOverrides(overrides);
    return /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(ActionsProvider, { overrides: mergedOverrides.actions, children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(ToolsProvider, { overrides: mergedOverrides.tools, children }) });
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/useEditorEvents.mjs
  var import_react118 = __toESM(require_react(), 1);
  function useEditorEvents() {
    const editor = useEditor();
    const { addToast } = useToasts();
    (0, import_react118.useEffect)(() => {
      function handleMaxShapes({ name, count: count3 }) {
        addToast({
          title: "Maximum Shapes Reached",
          description: `You've reached the maximum number of shapes allowed on ${name} (${count3}). Please delete some shapes or move to a different page to continue.`,
          severity: "warning"
        });
      }
      editor.addListener("max-shapes", handleMaxShapes);
      return () => {
        editor.removeListener("max-shapes", handleMaxShapes);
      };
    }, [editor, addToast]);
  }

  // node_modules/tldraw/dist-esm/lib/ui/TldrawUi.mjs
  var TldrawUi = import_react119.default.memo(function TldrawUi2({
    renderDebugMenuItems,
    children,
    hideUi,
    components,
    ...rest
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TldrawUiContextProvider, { ...rest, components, children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TldrawUiInner, { hideUi, renderDebugMenuItems, children }) });
  });
  var TldrawUiInner = import_react119.default.memo(function TldrawUiInner2({
    children,
    hideUi,
    ...rest
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(import_jsx_runtime172.Fragment, { children: [
      children,
      hideUi ? null : /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TldrawUiContent, { ...rest })
    ] });
  });
  var TldrawUiContent = import_react119.default.memo(function TldrawUI() {
    const editor = useEditor();
    const msg2 = useTranslation();
    const breakpoint = useBreakpoint();
    const isReadonlyMode = useReadonly();
    const isFocusMode = useValue("focus", () => editor.getInstanceState().isFocusMode, [editor]);
    const isDebugMode = useValue("debug", () => editor.getInstanceState().isDebugMode, [editor]);
    const {
      SharePanel,
      TopPanel,
      MenuPanel: MenuPanel2,
      StylePanel,
      Toolbar,
      HelpMenu,
      NavigationPanel,
      HelperButtons,
      DebugPanel,
      CursorChatBubble: CursorChatBubble3
    } = useTldrawUiComponents();
    useKeyboardShortcuts();
    useNativeClipboardEvents();
    useEditorEvents();
    const { "toggle-focus-mode": toggleFocus } = useActions();
    return /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(
      "div",
      {
        className: (0, import_classnames32.default)("tlui-layout", {
          "tlui-layout__mobile": breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM
        }),
        "data-breakpoint": breakpoint,
        children: [
          isFocusMode ? /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "tlui-layout__top", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
            TldrawUiButton,
            {
              type: "icon",
              className: "tlui-focus-button",
              title: msg2("focus-mode.toggle-focus-mode"),
              onClick: () => toggleFocus.onSelect("menu"),
              children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TldrawUiButtonIcon, { icon: "dot" })
            }
          ) }) : /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(import_jsx_runtime172.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "tlui-layout__top", children: [
              /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "tlui-layout__top__left", children: [
                MenuPanel2 && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(MenuPanel2, {}),
                HelperButtons && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(HelperButtons, {})
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "tlui-layout__top__center", children: TopPanel && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TopPanel, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "tlui-layout__top__right", children: [
                SharePanel && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(SharePanel, {}),
                StylePanel && breakpoint >= PORTRAIT_BREAKPOINT.TABLET_SM && !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(StylePanel, {})
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "tlui-layout__bottom", children: [
              /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "tlui-layout__bottom__main", children: [
                NavigationPanel && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(NavigationPanel, {}),
                Toolbar && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Toolbar, {}),
                HelpMenu && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(HelpMenu, {})
              ] }),
              isDebugMode && DebugPanel && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(DebugPanel, {})
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TldrawUiToasts, {}),
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TldrawUiDialogs, {}),
          /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(FollowingIndicator, {}),
          CursorChatBubble3 && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(CursorChatBubble3, {})
        ]
      }
    );
  });

  // node_modules/tldraw/dist-esm/lib/ui/hooks/usePreloadAssets.mjs
  var import_react120 = __toESM(require_react(), 1);

  // node_modules/tldraw/dist-esm/lib/utils/assets/preload-font.mjs
  async function preloadFont(id, font) {
    const {
      url,
      style = "normal",
      weight = "500",
      display,
      featureSettings,
      stretch,
      unicodeRange,
      variant,
      format: format2
    } = font;
    const descriptors = {
      style,
      weight,
      display,
      featureSettings,
      stretch,
      unicodeRange,
      // @ts-expect-error why is this here
      variant
    };
    const fontInstance = new FontFace(id, `url(${url})`, descriptors);
    await fontInstance.load();
    document.fonts.add(fontInstance);
    fontInstance.$$_url = url;
    fontInstance.$$_fontface = `
@font-face {
	font-family: ${fontInstance.family};
	font-stretch: ${fontInstance.stretch};
	font-weight: ${fontInstance.weight};
	font-style: ${fontInstance.style};
	src: url("${url}") format("${format2}")
}`;
    return fontInstance;
  }

  // node_modules/tldraw/dist-esm/lib/ui/hooks/usePreloadAssets.mjs
  var usePreloadFont = (id, font) => {
    const [state, setState] = (0, import_react120.useState)(
      2
      /* WAITING */
    );
    (0, import_react120.useEffect)(() => {
      let cancelled = false;
      setState(
        2
        /* WAITING */
      );
      preloadFont(id, font).then(() => {
        if (cancelled) return;
        setState(
          0
          /* SUCCESS */
        );
      }).catch((err) => {
        if (cancelled) return;
        console.error(err);
        setState(
          1
          /* FAILED */
        );
      });
      return () => {
        cancelled = true;
      };
    }, [id, font]);
    return state;
  };
  function getTypefaces(assetUrls) {
    return {
      draw: {
        url: assetUrls.fonts.draw,
        format: assetUrls.fonts.draw.split(".").pop()
      },
      serif: {
        url: assetUrls.fonts.serif,
        format: assetUrls.fonts.serif.split(".").pop()
      },
      sansSerif: {
        url: assetUrls.fonts.sansSerif,
        format: assetUrls.fonts.sansSerif.split(".").pop()
      },
      monospace: {
        url: assetUrls.fonts.monospace,
        format: assetUrls.fonts.monospace.split(".").pop()
      }
    };
  }
  function usePreloadAssets(assetUrls) {
    const typefaces = (0, import_react120.useMemo)(() => getTypefaces(assetUrls), [assetUrls]);
    const results = [
      usePreloadFont("tldraw_draw", typefaces.draw),
      usePreloadFont("tldraw_serif", typefaces.serif),
      usePreloadFont("tldraw_sans", typefaces.sansSerif),
      usePreloadFont("tldraw_mono", typefaces.monospace)
    ];
    return {
      // If any of the results have errored, then preloading has failed
      error: results.some(
        (result) => result === 1
        /* FAILED */
      ),
      // If any of the results are waiting, then we're not done yet
      done: !results.some(
        (result) => result === 2
        /* WAITING */
      )
    };
  }

  // node_modules/tldraw/dist-esm/lib/Tldraw.mjs
  function Tldraw(props) {
    const {
      children,
      maxImageDimension,
      maxAssetSize,
      acceptedImageMimeTypes,
      acceptedVideoMimeTypes,
      onMount,
      components = {},
      shapeUtils = [],
      bindingUtils = [],
      tools = [],
      embeds,
      ...rest
    } = props;
    const _components = useShallowObjectIdentity(components);
    const componentsWithDefault = (0, import_react121.useMemo)(
      () => ({
        Scribble: TldrawScribble,
        ShapeIndicators: TldrawShapeIndicators,
        CollaboratorScribble: TldrawScribble,
        SelectionForeground: TldrawSelectionForeground,
        SelectionBackground: TldrawSelectionBackground,
        Handles: TldrawHandles,
        ..._components
      }),
      [_components]
    );
    const _shapeUtils = useShallowArrayIdentity(shapeUtils);
    const shapeUtilsWithDefaults = (0, import_react121.useMemo)(
      () => [...defaultShapeUtils, ..._shapeUtils],
      [_shapeUtils]
    );
    const _bindingUtils = useShallowArrayIdentity(bindingUtils);
    const bindingUtilsWithDefaults = (0, import_react121.useMemo)(
      () => [...defaultBindingUtils, ..._bindingUtils],
      [_bindingUtils]
    );
    const _tools = useShallowArrayIdentity(tools);
    const toolsWithDefaults = (0, import_react121.useMemo)(
      () => [...defaultTools, ...defaultShapeTools, ..._tools],
      [_tools]
    );
    const _imageMimeTypes = useShallowArrayIdentity(
      acceptedImageMimeTypes ?? DEFAULT_SUPPORTED_IMAGE_TYPES
    );
    const _videoMimeTypes = useShallowArrayIdentity(
      acceptedVideoMimeTypes ?? DEFAULT_SUPPORT_VIDEO_TYPES
    );
    const mediaMimeTypes = (0, import_react121.useMemo)(
      () => [..._imageMimeTypes, ..._videoMimeTypes],
      [_imageMimeTypes, _videoMimeTypes]
    );
    const assets = useDefaultEditorAssetsWithOverrides(rest.assetUrls);
    const { done: preloadingComplete, error: preloadingError } = usePreloadAssets(assets);
    if (preloadingError) {
      return /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(ErrorScreen, { children: "Could not load assets. Please refresh the page." });
    }
    if (!preloadingComplete) {
      return /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(LoadingScreen, { children: /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(DefaultSpinner, {}) });
    }
    const embedShapeUtil = shapeUtilsWithDefaults.find((util) => util.type === "embed");
    if (embedShapeUtil && embeds) {
      EmbedShapeUtil.setEmbedDefinitions(embeds);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(
      TldrawEditor,
      {
        initialState: "select",
        ...rest,
        components: componentsWithDefault,
        shapeUtils: shapeUtilsWithDefaults,
        bindingUtils: bindingUtilsWithDefaults,
        tools: toolsWithDefaults,
        children: /* @__PURE__ */ (0, import_jsx_runtime173.jsxs)(TldrawUi, { ...rest, components: componentsWithDefault, mediaMimeTypes, children: [
          /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(
            InsideOfEditorAndUiContext,
            {
              maxImageDimension,
              maxAssetSize,
              acceptedImageMimeTypes: _imageMimeTypes,
              acceptedVideoMimeTypes: _videoMimeTypes,
              onMount
            }
          ),
          children
        ] })
      }
    );
  }
  function InsideOfEditorAndUiContext({
    maxImageDimension = 5e3,
    maxAssetSize = 10 * 1024 * 1024,
    // 10mb
    acceptedImageMimeTypes = DEFAULT_SUPPORTED_IMAGE_TYPES,
    acceptedVideoMimeTypes = DEFAULT_SUPPORT_VIDEO_TYPES,
    onMount
  }) {
    const editor = useEditor();
    const toasts = useToasts();
    const msg2 = useTranslation();
    useOnMount(() => {
      const unsubs = [];
      unsubs.push(registerDefaultSideEffects(editor));
      registerDefaultExternalContentHandlers(
        editor,
        {
          maxImageDimension,
          maxAssetSize,
          acceptedImageMimeTypes,
          acceptedVideoMimeTypes
        },
        {
          toasts,
          msg: msg2
        }
      );
      unsubs.push(editor.store.props.onMount(editor));
      unsubs.push(onMount?.(editor));
      return () => {
        unsubs.forEach((fn) => fn?.());
      };
    });
    const { Canvas } = useEditorComponents();
    const { ContextMenu: ContextMenu2 } = useTldrawUiComponents();
    if (ContextMenu2) {
      return /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(ContextMenu2, {});
    }
    if (Canvas) {
      return /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(Canvas, {});
    }
    return null;
  }

  // node_modules/tldraw/dist-esm/lib/TldrawImage.mjs
  var import_jsx_runtime174 = __toESM(require_jsx_runtime(), 1);
  var import_react122 = __toESM(require_react(), 1);
  var TldrawImage = (0, import_react122.memo)(function TldrawImage2(props) {
    const [url, setUrl] = (0, import_react122.useState)(null);
    const [container, setContainer] = (0, import_react122.useState)(null);
    const shapeUtils = useShallowArrayIdentity(props.shapeUtils ?? []);
    const shapeUtilsWithDefaults = (0, import_react122.useMemo)(() => [...defaultShapeUtils, ...shapeUtils], [shapeUtils]);
    const bindingUtils = useShallowArrayIdentity(props.bindingUtils ?? []);
    const bindingUtilsWithDefaults = (0, import_react122.useMemo)(
      () => [...defaultBindingUtils, ...bindingUtils],
      [bindingUtils]
    );
    const store = useTLStore({ snapshot: props.snapshot, shapeUtils: shapeUtilsWithDefaults });
    const assets = useDefaultEditorAssetsWithOverrides(props.assetUrls);
    const { done: preloadingComplete, error: preloadingError } = usePreloadAssets(assets);
    const {
      pageId,
      bounds,
      scale,
      pixelRatio,
      background,
      padding,
      darkMode,
      preserveAspectRatio,
      format: format2 = "svg",
      licenseKey
    } = props;
    (0, import_react122.useLayoutEffect)(() => {
      if (!container) return;
      if (!store) return;
      if (!preloadingComplete) return;
      let isCancelled = false;
      const tempElm = document.createElement("div");
      container.appendChild(tempElm);
      container.classList.add("tl-container", "tl-theme__light");
      const editor = new Editor({
        store,
        shapeUtils: shapeUtilsWithDefaults,
        bindingUtils: bindingUtilsWithDefaults,
        tools: [],
        getContainer: () => tempElm,
        licenseKey
      });
      if (pageId) editor.setCurrentPage(pageId);
      const shapeIds = editor.getCurrentPageShapeIds();
      async function setSvg() {
        const svgResult = await editor.getSvgString([...shapeIds], {
          bounds,
          scale,
          background,
          padding,
          darkMode,
          preserveAspectRatio
        });
        if (svgResult && !isCancelled) {
          if (format2 === "svg") {
            if (!isCancelled) {
              const blob = new Blob([svgResult.svg], { type: "image/svg+xml" });
              const url2 = URL.createObjectURL(blob);
              setUrl(url2);
            }
          } else if (format2 === "png") {
            const blob = await getSvgAsImage(editor, svgResult.svg, {
              type: format2,
              width: svgResult.width,
              height: svgResult.height,
              pixelRatio
            });
            if (blob && !isCancelled) {
              const url2 = URL.createObjectURL(blob);
              setUrl(url2);
            }
          }
        }
        editor.dispose();
      }
      setSvg();
      return () => {
        isCancelled = true;
      };
    }, [
      format2,
      container,
      store,
      shapeUtilsWithDefaults,
      bindingUtilsWithDefaults,
      pageId,
      bounds,
      scale,
      background,
      padding,
      darkMode,
      preserveAspectRatio,
      preloadingComplete,
      preloadingError,
      licenseKey,
      pixelRatio
    ]);
    if (preloadingError) {
      return /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(ErrorScreen, { children: "Could not load assets." });
    }
    if (!preloadingComplete) {
      return /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(LoadingScreen, { children: /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(DefaultSpinner, {}) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime174.jsx)("div", { ref: setContainer, style: { position: "relative", width: "100%", height: "100%" }, children: url && /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(
      "img",
      {
        src: url,
        referrerPolicy: "strict-origin-when-cross-origin",
        style: { width: "100%", height: "100%" }
      }
    ) });
  });

  // node_modules/tldraw/dist-esm/lib/ui/components/HelpMenu/DefaultHelpMenu.mjs
  var import_jsx_runtime175 = __toESM(require_jsx_runtime(), 1);
  var import_react123 = __toESM(require_react(), 1);
  var DefaultHelpMenu = (0, import_react123.memo)(function DefaultHelpMenu2({ children }) {
    const msg2 = useTranslation();
    const breakpoint = useBreakpoint();
    const ref = (0, import_react123.useRef)(null);
    usePassThroughWheelEvents(ref);
    const content = children ?? /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(DefaultHelpMenuContent, {});
    if (breakpoint < PORTRAIT_BREAKPOINT.MOBILE) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("div", { ref, className: "tlui-help-menu", children: /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)(TldrawUiDropdownMenuRoot, { id: "help menu", children: [
      /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(TldrawUiButton, { type: "help", title: msg2("help-menu.title"), "data-testid": "help-menu.button", children: /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(TldrawUiButtonIcon, { icon: "question-mark", small: true }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(TldrawUiDropdownMenuContent, { side: "top", align: "end", alignOffset: 0, sideOffset: 8, children: /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "help-menu", children: content }) })
    ] }) });
  });

  // node_modules/tldraw/dist-esm/lib/utils/tldr/file.mjs
  var schemaV1 = validation_exports.object({
    schemaVersion: validation_exports.literal(1),
    storeVersion: validation_exports.positiveInteger,
    recordVersions: validation_exports.dict(
      validation_exports.string,
      validation_exports.object({
        version: validation_exports.positiveInteger,
        subTypeVersions: validation_exports.dict(validation_exports.string, validation_exports.positiveInteger).optional(),
        subTypeKey: validation_exports.string.optional()
      })
    )
  });
  var schemaV2 = validation_exports.object({
    schemaVersion: validation_exports.literal(2),
    sequences: validation_exports.dict(validation_exports.string, validation_exports.positiveInteger)
  });
  var tldrawFileValidator = validation_exports.object({
    tldrawFileFormatVersion: validation_exports.nonZeroInteger,
    schema: validation_exports.numberUnion("schemaVersion", {
      1: schemaV1,
      2: schemaV2
    }),
    records: validation_exports.arrayOf(
      validation_exports.object({
        id: validation_exports.string,
        typeName: validation_exports.string
      }).allowUnknownProperties()
    )
  });

  // node_modules/tldraw/dist-esm/index.mjs
  registerTldrawLibraryVersion(
    "tldraw",
    "3.7.2",
    "esm"
  );

  // node_modules/@tldraw/tldraw/dist-esm/index.mjs
  registerTldrawLibraryVersion(
    "@tldraw/tldraw",
    "3.7.2",
    "esm"
  );

  // index.tsx
  var App = () => {
    const editorRef = (0, import_react124.useRef)(null);
    const blob = exportToBlob;
    return /* @__PURE__ */ import_react124.default.createElement("div", { style: { width: "100vw", height: "100vh" } }, /* @__PURE__ */ import_react124.default.createElement(Tldraw, { onMount: (editor) => {
      editorRef.current = editor;
      window.tldrawEditor = editor;
      window.exportToBlob = exportToBlob;
    } }));
  };
  var rootElement = document.getElementById("tldraw");
  if (rootElement) {
    const root = import_client2.default.createRoot(rootElement);
    root.render(/* @__PURE__ */ import_react124.default.createElement(App, null));
  }
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

@tldraw/utils/dist-esm/lib/id.mjs:
  (*!
   * MIT License: https://github.com/ai/nanoid/blob/main/LICENSE
   * Modified code originally from <https://github.com/ai/nanoid>
   * Copyright 2017 Andrey Sitnik <andrey@sitnik.ru>
   *
   * `nanoid` is currently only distributed as an ES module. Some tools (jest, playwright) don't
   * properly support ESM-only code yet, and tldraw itself is distributed as both an ES module and a
   * CommonJS module. By including nanoid here, we can make sure it works well in every environment
   * where tldraw is used. We can also remove some unused features like custom alphabets.
   *)

@tldraw/utils/dist-esm/lib/media/apng.mjs:
  (*!
   * MIT License: https://github.com/vHeemstra/is-apng/blob/main/license
   * Copyright (c) Philip van Heemstra
   *)

@tldraw/utils/dist-esm/lib/media/gif.mjs:
  (*!
   * MIT License
   * Modified code originally from <https://github.com/qzb/is-animated>
   * Copyright (c) 2016 Józef Sokołowski <j.k.sokolowski@gmail.com>
   *)

@tldraw/utils/dist-esm/lib/media/png.mjs:
  (*!
   * MIT License: https://github.com/alexgorbatchev/crc/blob/master/LICENSE
   * Copyright: 2014 Alex Gorbatchev
   * Code: crc32, https://github.com/alexgorbatchev/crc/blob/master/src/calculators/crc32.ts
   *)

@tldraw/utils/dist-esm/lib/media/webp.mjs:
  (*!
   * MIT License: https://github.com/sindresorhus/is-webp/blob/main/license
   * Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)
   *)

@tldraw/editor/dist-esm/lib/hooks/useScreenBounds.mjs:
  (*!
   * Author: excalidraw
   * MIT License: https://github.com/excalidraw/excalidraw/blob/master/LICENSE
   * https://github.com/excalidraw/excalidraw/blob/48c3465b19f10ec755b3eb84e21a01a468e96e43/packages/excalidraw/utils.ts#L600
   *)

canvas-size/dist/canvas-size.esm.js:
  (*!
   * canvas-size
   * v1.2.6
   * https://github.com/jhildenbiddle/canvas-size
   * (c) 2015-2023 John Hildenbiddle <http://hildenbiddle.com>
   * MIT license
   *)

tldraw/dist-esm/lib/shapes/shared/TextHelpers.mjs:
  (*!
   * MIT License
   * Adapted (mostly copied) the work of https://github.com/fregante/text-field-edit
   * Copyright (c) Federico Brigante <opensource@bfred.it> (bfred.it)
   *)
*/
