{
  "Action": {
    "FunctionName": "Sign",
    "Parameters": [
      {
        "Type": "Object",
        "Name": "body",
        "Value": "%contract%"
      },
      {
        "Type": "List`1<String>",
        "Name": "contracts",
        "Value": [
          "client"
        ]
      }
    ],
    "ReturnValues": [
      {
        "Type": "Signature",
        "VariableName": "%signedContract%"
      }
    ]
  },
  "Text": "sign contract %contract%, \"client\", write to %signedContract%",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "json",
    "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
    "model": "gpt-4o",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\n%Variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nnull is used to represent no value, e.g. { \"name\": null }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See == QuoteExample ==\r\n\r\n== QuoteExample ==\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n== QuoteExample ==\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\n\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
          },
          {
            "type": "text",
            "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## functions available starts ##\r\nGetMyIdentity()  : Identity  // Get the current identity, also called %MyIdentity%. \nGetIdentity(String nameOrIdentity)  : Identity  // Get an identity by name or identification. \nCreateIdentity(String name, Boolean? setAsDefault = False)  : Identity  // Create a new identity in the system. \nSetCurrentIdentity(String nameOrIdentity)  : Identity  // Set the current identity(MyIdentity). Name or identity, identity could be a public address, 0x123..... \nArchiveIdentity(String nameOrIdentity)  : Identity  // Archives a identity. Name or identity, identity could be a public address, 0x123..... \nGetIdentities()  : IEnumerable`1  // Gets all identites in the system. \nUseSharedIdentity()  : void // Set the app to use shared identity. This is usefull when app is running on multiple location but want to use one identity for them all. \nRemoveSharedIdentity()  : void\nSign(Object body, List`1<String>? contracts, Int32? expiresInSeconds = 300, Dictionary`2<String, Object>? headers)  : Signature  // Sign a content with specific headers and contracts. Returns signature object that contains the values to validate the signature. \nVerifySignature(Object? signatureFromUser, Dictionary`2<String, Object>? headers, Object? body, List`1<String>? contracts)  : Signature  // validationKeyValues should have these keys: X-Signature, X-Signature-Created(type is long, unix time), X-Signature-Nonce, X-Signature-Public-Key, X-Signature-Contract=\"CO\". Return dictionary with Identity and IdentityNotHashed. \nGetPrivateKey()  : String\r\n## functions available ends ##\r\n## defined variables ##\r\ncontract (type:Object), signedContract (type:String), \r\n## defined variables ##"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "sign contract %contract%, \"client\", write to %signedContract%"
          }
        ]
      }
    ],
    "type": "PLang.Modules.GenericFunctionBuilder",
    "caching": true,
    "RawResponse": "```json\n{\n\t\"FunctionName\": \"Sign\",\n\t\"Parameters\": [\n\t\t{\n\t\t\t\"Type\": \"Object\",\n\t\t\t\"Name\": \"body\",\n\t\t\t\"Value\": \"%contract%\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"List`1<String>\",\n\t\t\t\"Name\": \"contracts\",\n\t\t\t\"Value\": [\"client\"]\n\t\t}\n\t],\n\t\"ReturnValues\": [\n\t\t{\n\t\t\t\"Type\": \"Signature\",\n\t\t\t\"VariableName\": \"%signedContract%\"\n\t\t}\n\t]\n}\n```"
  },
  "RunOnBuild": false,
  "Metadata": {}
}