{
  "Action": {
    "FunctionName": "FilterOnProperty",
    "Parameters": [
      {
        "Type": "System.Object",
        "Name": "variableToExtractFrom",
        "Value": "%contract%"
      },
      {
        "Type": "System.String",
        "Name": "propertyToFilterOn",
        "Value": "services"
      },
      {
        "Type": "System.String",
        "Name": "operatorOnPropertyToFilterOn",
        "Value": "="
      },
      {
        "Type": "System.String",
        "Name": "retrieveOneItem",
        "Value": null
      }
    ],
    "ReturnValues": [
      {
        "Type": "System.Object",
        "VariableName": "services"
      }
    ]
  },
  "Text": "filter \"services\" from %contract%, write to %services%",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "json",
    "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
    "model": "gpt-4o",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\n%Variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nnull is used to represent no value, e.g. { \"name\": null }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See <Example>\r\nError handling is process by another step, if you see 'on error...' you can ignore it\r\n<Example>\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n<Example>\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\n\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
          },
          {
            "type": "text",
            "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## functions available starts ##\r\n[{\"Description\":\"Parses an input that is wrapped with markdown code format and return text inside those code blocks\",\"MethodName\":\"ExtractMarkdownWrapping\",\"Parameters\":[{\"Type\":\"System.String[]\",\"Name\":\"format\"},{\"Type\":\"System.String\",\"Name\":\"input\"}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"Description\":\"matching: contains|startwith|endwith|equals. retrieveOneItem: first|last|number (retrieveOneItem can also be a number representing the index.)\",\"MethodName\":\"FindTextInContent\",\"Parameters\":[{\"Type\":\"System.String\",\"Name\":\"content\"},{\"Type\":\"System.String\",\"Name\":\"textToFind\"},{\"Type\":\"System.String\",\"Name\":\"matching\",\"DefaultValue\":\"contains\"},{\"Type\":\"System.String\",\"Name\":\"retrieveOneItem\"}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"Description\":\"Joins a list of items into one string\",\"MethodName\":\"Join\",\"Parameters\":[{\"Type\":\"System.Collections.Generic.List`1[System.Object]\",\"Name\":\"list\"},{\"Type\":\"System.String\",\"Name\":\"seperator\",\"DefaultValue\":\", \"},{\"Type\":\"System.String[]\",\"Name\":\"exclude\"}],\"ReturnValue\":{\"Type\":\"System.String\"}},{\"Description\":\"Gets an item from list, giving the first, last or by index according to user definition. retrieveOneItem: first|last|number (retrieveOneItem can also be a number representing the index.)\",\"MethodName\":\"GetItem\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"variableToExtractFrom\"},{\"Type\":\"System.String\",\"Name\":\"retrieveOneItem\"}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"Description\":\"Use this function when the intent is to filter a list based solely on the property name or pattern of the property name, without needing to match a specific value within that property. \\r\\nThis function is suitable when the user specifies conditions like \\\"property starts with\\\", \\\"property ends with\\\", or \\\"property contains\\\" without mentioning a value to filter by.\\r\\n\\r\\noperatorOnPropertyToFilterOn can be: =|!=|startswith|endswith|contains\\r\\nretrieveOneItem: null|first|last|number (retrieveOneItem can also be a number representing the index.)\\r\\ncan return a list of elements or one element, depending on if retrieveOneItem is set.\\r\\n<example>\\r\\n- filter %list% where property is 'Name' => variableToExtractFrom=\\\"%list%\\\", propertyToFilterOn=\\\"Name\\\"\\r\\n- filter %list% where property contains 'Addr', return the first => variableToExtractFrom=\\\"%list%\\\", propertyToFilterOn=\\\"Name\\\", operatorOnPropertyToFilterOn=\\\"contains\\\", retrieveOneItem=\\\"first\\\"\\r\\n</example>\\r\\n\",\"MethodName\":\"FilterOnProperty\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"variableToExtractFrom\"},{\"Type\":\"System.String\",\"Name\":\"propertyToFilterOn\"},{\"Type\":\"System.String\",\"Name\":\"operatorOnPropertyToFilterOn\",\"DefaultValue\":\"=\"},{\"Type\":\"System.String\",\"Name\":\"retrieveOneItem\"}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"Description\":\" Use this function when the intent is to filter a list based on both the property name and a specific value within that property. \\r\\nThis function is appropriate when the user specifies conditions that involve both a property and a value, such as \\\"property is 'Name' and value is 'John'\\\", or when operators on both the property and value are needed.\\r\\n\\r\\npropertyToFilterOn: required, property of a list to filter on\\r\\nvalueToFilterBy: required, find a specific Value that is stored in the propertyToFilterOn\\r\\noperatorOnPropertyToFilter can be following(sperated by |): <|>|equals|startswith|endswith|contains.\\r\\nretrieveOneItem: first|last|retrieveOneItem can also be a number representing the index.\\r\\noperatorOnPropertyToFilter: equals|startswith|endswith|contains\\r\\npropertyToExtract: by default it returns the element that matches the property, can be defined as 'parent' or when propertyToExtract is specified it will find that property and return the object from that property.\\r\\noperatorToFilterOnValue: =|!= \\r\\noperatorToFilterOnValueComparer: insensitive|case-sensitive\\r\\n<example>\\r\\n- filter %json% where property starts with \\\"%item%/\\\" and has \\\"John\\\" as value, get parent object, write to %libraries% => variableToExtractFrom=\\\"%json%\\\", \\r\\n\\tpropertyToFilterOn=\\\"%item%/\\\", valueToFilterBy=\\\"John\\\", operatorToFilterOnValue=\\\"contains\\\", operatorOnPropertyToFilter=\\\"startswith\\\", propertyToExtract=\\\"parent\\\"\\r\\n\\toperatorToFilterOnValueComparer=\\\"insensitive\\\"\\r\\n- filter %list% where property is \\\"Quantity\\\" and is larger then \\\"10\\\", give me first, write to %library% => variableToExtractFrom=\\\"%list%\\\", \\r\\n\\tpropertyToFilterOn=\\\"Quantity\\\", valueToFilterBy=\\\"10\\\", operatorToFilterOnValue=\\\">\\\", operatorOnPropertyToFilter=\\\"=\\\"\\r\\n\\toperatorToFilterOnValueComparer=\\\"case-sensitive\\\"\\r\\n\\tretrieveOneItem=\\\"first\\\"\\r\\n</example>\\r\\n\",\"MethodName\":\"FilterOnPropertyAndValue\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"variableToExtractFrom\"},{\"Type\":\"System.String\",\"Name\":\"propertyToFilterOn\"},{\"Type\":\"System.String\",\"Name\":\"valueToFilterBy\"},{\"Type\":\"System.String\",\"Name\":\"operatorToFilterOnValue\",\"DefaultValue\":\"=\"},{\"Type\":\"System.String\",\"Name\":\"operatorOnPropertyToFilter\",\"DefaultValue\":\"=\"},{\"Type\":\"System.String\",\"Name\":\"propertyToExtract\"},{\"Type\":\"System.Boolean\",\"Name\":\"throwErrorWhenNothingFound\",\"DefaultValue\":false},{\"Type\":\"System.String\",\"Name\":\"retrieveOneItem\"},{\"Type\":\"System.String\",\"Name\":\"operatorToFilterOnValueComparer\",\"DefaultValue\":\"insensitive\"}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"Description\":\"Retrieve element(s) from html by a css selector, retrieveOneItem: first|last|number (retrieveOneItem can also be a number representing the index.) \",\"MethodName\":\"ExtractByCssSelector\",\"Parameters\":[{\"Type\":\"System.String\",\"Name\":\"html\"},{\"Type\":\"System.String\",\"Name\":\"cssSelector\"},{\"Type\":\"System.String\",\"Name\":\"retrieveOneItem\"}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"MethodName\":\"ExtractFromXPath\",\"Parameters\":[{\"Type\":\"System.String\",\"Name\":\"html\"},{\"Type\":\"System.String\",\"Name\":\"xpath\"}],\"ReturnValue\":{\"Type\":\"System.Object\"}}]\r\n## functions available ends ##\r\n## defined variables ##\r\ncontract (type:System.Object), services (type:object), \r\n## defined variables ##"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "filter \"services\" from %contract%, write to %services%"
          }
        ]
      }
    ],
    "type": "PLang.Modules.GenericFunctionBuilder",
    "caching": true,
    "RawResponse": "```json\n{\n\t\"FunctionName\": \"FilterOnProperty\",\n\t\"Parameters\": [{\n\t\t\"Type\": \"System.Object\",\n\t\t\"Name\": \"variableToExtractFrom\",\n\t\t\"Value\": \"%contract%\"\n\t}, {\n\t\t\"Type\": \"System.String\",\n\t\t\"Name\": \"propertyToFilterOn\",\n\t\t\"Value\": \"services\"\n\t}, {\n\t\t\"Type\": \"System.String\",\n\t\t\"Name\": \"operatorOnPropertyToFilterOn\",\n\t\t\"Value\": \"=\"\n\t}, {\n\t\t\"Type\": \"System.String\",\n\t\t\"Name\": \"retrieveOneItem\",\n\t\t\"Value\": null\n\t}],\n\t\"ReturnValues\": [{\n\t\t\"Type\": \"System.Object\",\n\t\t\"VariableName\": \"services\"\n\t}]\n}\n```"
  },
  "RunOnBuild": false,
  "Metadata": {}
}