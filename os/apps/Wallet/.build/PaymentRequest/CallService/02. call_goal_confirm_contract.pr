{
  "Action": {
    "FunctionName": "RunGoal",
    "Parameters": [
      {
        "Type": "GoalToCall",
        "Name": "goalName",
        "Value": "/services/%service.name%/ConfirmContract"
      }
    ],
    "ReturnValues": [
      {
        "Type": "ReturnDictionary`2",
        "VariableName": "%signedContract%"
      }
    ]
  },
  "Text": "call goal /services/%service.name%/ConfirmContract\n    on error 'not found' call ServiceNotFound\n    write to %signedContract%",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "json",
    "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
    "model": "gpt-4.1-mini",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\n%Variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nnull is used to represent no value, e.g. { \"name\": null }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See == QuoteExample ==\r\n\r\n== QuoteExample ==\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n== QuoteExample ==\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\n\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
          },
          {
            "type": "text",
            "text": "Goals in current file is provided"
          },
          {
            "type": "text",
            "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## functions available starts ##\r\nRunApp(String? path, GoalToCall? goalName, Dictionary`2<String, Object>? parameters, Boolean? waitForExecution = True, Int32? delayWhenNotWaitingInMilliseconds = 50, UInt32? waitForXMillisecondsBeforeRunningGoal = 0, Boolean? keepMemoryStackOnAsync = False)  : ReturnDictionary`2  // Call/Runs another app. app can be located in another directory, then path points the way. goalName is default \"Start\" when it cannot be mapped. \nRunGoal(GoalToCall goalName, Dictionary`2<String, Object>? parameters, Boolean? waitForExecution = True, Int32? delayWhenNotWaitingInMilliseconds = 50, UInt32? waitForXMillisecondsBeforeRunningGoal = 0, Boolean? keepMemoryStackOnAsync = False, Boolean? isolated = False)  : ReturnDictionary`2  // Call/Runs another goal. goalName can be prefixed with !. If backward slash(\\) is used by user, change to forward slash(/).\r\n## functions available ends ##\r\n## defined variables ##\r\nservice.name (type:object), signedContract (type:object), \r\n## defined variables ##"
          },
          {
            "type": "text",
            "text": "\r\n== Examples starts ==\r\ncall goal /Start => /Start is goalName that is rooted, no parameter.\r\ncall !ParseText => ParseText is goalName, no parameters\r\ncall !Gmail/Search %query%, => Gmail/Search is goalName,  %query% is key and value in parameters\r\ncall Folder/Search q=%fileName% => Folder/Search is goalName, parameter key is q, and value is %fileName%\r\ncall goal EvaluteScore %user%, write to %score% => EvaluteScore is goalName, parameter is user, return value is %score%\r\nset %data% = ParseDocument(%document%) => ParseDocument is goalName, parameter is %document%, %data% is the return value\r\n%user% = GetUser %id% => GetUser is goalName, parameter is %id%, return value is %user%\r\n== Examples ends ==\r\n"
          },
          {
            "type": "text",
            "text": "== Goals in file == PaymentRequest\r\nChoosePaymentService\r\nCallService\r\nServiceNotFound == Goals in file =="
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "call goal /services/%service.name%/ConfirmContract\n    on error 'not found' call ServiceNotFound\n    write to %signedContract%"
          }
        ]
      }
    ],
    "type": "PLang.Modules.CallGoalModule.Builder",
    "caching": true,
    "RawResponse": null
  },
  "RunOnBuild": false,
  "Metadata": {}
}