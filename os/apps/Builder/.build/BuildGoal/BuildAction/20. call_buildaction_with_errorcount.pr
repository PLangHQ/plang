{
  "Action": {
    "FunctionName": "RunGoal",
    "Parameters": [
      {
        "Type": "PLang.Models.GoalToCall",
        "Name": "goalName",
        "Value": "BuildAction"
      },
      {
        "Type": "Dictionary<String, Object>",
        "Name": "parameters",
        "Value": {
          "errorCount": "%errorCount+%"
        }
      },
      {
        "Type": "System.Boolean",
        "Name": "waitForExecution",
        "Value": true
      },
      {
        "Type": "System.Int32",
        "Name": "delayWhenNotWaitingInMilliseconds",
        "Value": 50
      },
      {
        "Type": "System.UInt32",
        "Name": "waitForXMillisecondsBeforeRunningGoal",
        "Value": 0
      },
      {
        "Type": "System.Boolean",
        "Name": "keepMemoryStackOnAsync",
        "Value": false
      },
      {
        "Type": "System.Boolean",
        "Name": "isolated",
        "Value": false
      }
    ],
    "ReturnValues": null
  },
  "Text": "call !BuildAction errorCount=%errorCount+%",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "json",
    "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
    "model": "gpt-4o",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\n%Variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nnull is used to represent no value, e.g. { \"name\": null }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See <Example>\r\nError handling is process by another step, if you see 'on error...' you can ignore it\r\n<Example>\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n<Example>\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\n\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
          },
          {
            "type": "text",
            "text": "Match the one of the <goals_in_file>, <goals> or <apps> depending on user intent. In that order\r\nUse <examples> to understand user input\r\n\r\n<examples>\r\ncall goal /Start => /Start is goalName that is rooted, no parameter.\r\ncall ParseText => ParseText is goalName, no parameters\r\ncall Gmail/Search %query%, => Gmail/Search is goalName,  %query% is key and value in parameters\r\ncall Folder/Search q=%fileName% => Folder/Search is goalName, parameter key is q, and value is %fileName%\r\ncall goal EvaluteScore %user%, write to %score% => EvaluteScore is goalName, parameter is user, return value is %score%\r\nset %data% = ParseDocument(%document%) => ParseDocument is goalName, parameter is %document%, %data% is the return value\r\n%user% = GetUser %id% => GetUser is goalName, parameter is %id%, return value is %user%\r\n<examples>\r\n"
          },
          {
            "type": "text",
            "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## functions available starts ##\r\n[{\"Description\":\"Call/Runs another app. app can be located in another directory, then path points the way. goalName is default \\\"Start\\\" when it cannot be mapped\",\"MethodName\":\"RunApp\",\"Parameters\":[{\"Type\":\"System.String\",\"Name\":\"appName\"},{\"Type\":\"PLang.Models.GoalToCall\",\"Name\":\"goalName\"},{\"Type\":\"Dictionary<String, Object>\",\"Name\":\"parameters\",\"TypeProperties\":[{\"Type\":\"System.Object\",\"Name\":\"Item\"}]},{\"Type\":\"System.Boolean\",\"Name\":\"waitForExecution\",\"DefaultValue\":true},{\"Type\":\"System.Int32\",\"Name\":\"delayWhenNotWaitingInMilliseconds\",\"DefaultValue\":50},{\"Type\":\"System.UInt32\",\"Name\":\"waitForXMillisecondsBeforeRunningGoal\",\"DefaultValue\":0},{\"Type\":\"System.Boolean\",\"Name\":\"keepMemoryStackOnAsync\",\"DefaultValue\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}},{\"Description\":\"Call/Runs another goal. goalName can be prefixed with !. If backward slash(\\\\) is used by user, change to forward slash(/)\",\"MethodName\":\"RunGoal\",\"Parameters\":[{\"Type\":\"PLang.Models.GoalToCall\",\"Name\":\"goalName\"},{\"Type\":\"Dictionary<String, Object>\",\"Name\":\"parameters\",\"TypeProperties\":[{\"Type\":\"System.Object\",\"Name\":\"Item\"}]},{\"Type\":\"System.Boolean\",\"Name\":\"waitForExecution\",\"DefaultValue\":true},{\"Type\":\"System.Int32\",\"Name\":\"delayWhenNotWaitingInMilliseconds\",\"DefaultValue\":50},{\"Type\":\"System.UInt32\",\"Name\":\"waitForXMillisecondsBeforeRunningGoal\",\"DefaultValue\":0},{\"Type\":\"System.Boolean\",\"Name\":\"keepMemoryStackOnAsync\",\"DefaultValue\":false},{\"Type\":\"System.Boolean\",\"Name\":\"isolated\",\"DefaultValue\":false}],\"ReturnValue\":{\"Type\":\"System.Object\"}}]\r\n## functions available ends ##\r\n## defined variables ##\r\nerrorCount+ (type:object), \r\n## defined variables ##"
          },
          {
            "type": "text",
            "text": "<goals_in_file>\n[{\"GoalName\":\"BuildGoal\",\"RelativePrFolderPath\":\".build\\\\BuildGoal\",\"Description\":\"The BuildGoal function retrieves a list of goals from a specified file and processes each goal by calling the BuildStep function for each item in the goals list.\"},{\"GoalName\":\"BuildStep\",\"RelativePrFolderPath\":\".build\\\\BuildGoal\\\\BuildStep\",\"Description\":\"The BuildStep goal iterates through each step defined in the %goal.GoalSteps% variable, calling the BuildAction goal for each step while initializing an error count to 0. After processing all steps, it writes the %goal% variable to a specified relative path defined by %goal.RelativePrPath%.\"}]\n<goals_in_file>"
          },
          {
            "type": "text",
            "text": "<apps>\n[{\"AppName\":\"/apps/Builder\",\"Description\":\"The BuildStep goal iterates through each step defined in the %goal.GoalSteps% variable, calling the BuildAction goal for each step while initializing an error count to 0. After processing all steps, it writes the %goal% variable to a specified relative path defined by %goal.RelativePrPath%.\",\"SubGoals\":[{\"GoalName\":\"BuildStep\",\"RelativePrFolderPath\":\".build\\\\BuildGoal\\\\BuildStep\"},{\"GoalName\":\"BuildAction\",\"RelativePrFolderPath\":\".build\\\\BuildGoal\\\\BuildAction\"},{\"GoalName\":\"Bye\",\"RelativePrFolderPath\":\".build\\\\Hello\\\\Bye\"},{\"GoalName\":\"BuildGoal\",\"RelativePrFolderPath\":\".build\\\\BuildGoal\"},{\"GoalName\":\"Hello\",\"RelativePrFolderPath\":\".build\\\\Hello\"}]},{\"AppName\":\"/apps/Tests\",\"Description\":\"The Start goal initializes a web server and sets up two routes: the root path (/) which calls the Question function, and the /editor path which calls the Editor function. This goal is essential for starting the web application and routing requests appropriately.\",\"SubGoals\":[{\"GoalName\":\"ConsoleOutput\",\"RelativePrFolderPath\":\".build\\\\CreateStepTest\\\\ConsoleOutput\"},{\"GoalName\":\"PLang.Modules.ConditionalModule.Specifics\",\"RelativePrFolderPath\":\".build\\\\CreateStepTest\\\\PLang.Modules.ConditionalModule.Specifics\"},{\"GoalName\":\"FormatQuestionAsHtml\",\"RelativePrFolderPath\":\".build\\\\CreateStepTest\\\\FormatQuestionAsHtml\"},{\"GoalName\":\"NotSupported\",\"RelativePrFolderPath\":\".build\\\\CreateStepTest\\\\NotSupported\"},{\"GoalName\":\"AddId\",\"RelativePrFolderPath\":\".build\\\\CreateStepTest\\\\AddId\"},{\"GoalName\":\"Success\",\"RelativePrFolderPath\":\".build\\\\RunTest\\\\Success\"},{\"GoalName\":\"Fail\",\"RelativePrFolderPath\":\".build\\\\RunTest\\\\Fail\"},{\"GoalName\":\"Question\",\"RelativePrFolderPath\":\".build\\\\Start\\\\Question\"},{\"GoalName\":\"Editor\",\"RelativePrFolderPath\":\".build\\\\Start\\\\Editor\"},{\"GoalName\":\"CreateStepTest\",\"RelativePrFolderPath\":\".build\\\\CreateStepTest\"},{\"GoalName\":\"RunTest\",\"RelativePrFolderPath\":\".build\\\\RunTest\"},{\"GoalName\":\"Start\",\"RelativePrFolderPath\":\".build\\\\Start\"}]},{\"AppName\":\"/apps/Wallet\",\"Description\":\"This Goal retrieves data from various blockchain-related URLs and processes the information. It first fetches a greeting message and outputs it. Then, it retrieves the address and symbols, storing the results for further processing. Finally, it fetches transaction data based on the address and outputs the final results.\",\"SubGoals\":[{\"GoalName\":\"CancelContract\",\"RelativePrFolderPath\":\".build\\\\Charge\\\\CancelContract\"},{\"GoalName\":\"ChoosePaymentService\",\"RelativePrFolderPath\":\".build\\\\PaymentRequest\\\\ChoosePaymentService\"},{\"GoalName\":\"CallService\",\"RelativePrFolderPath\":\".build\\\\PaymentRequest\\\\CallService\"},{\"GoalName\":\"ServiceNotFound\",\"RelativePrFolderPath\":\".build\\\\PaymentRequest\\\\ServiceNotFound\"},{\"GoalName\":\"SignContract\",\"RelativePrFolderPath\":\".build\\\\services\\\\payment.plang.io\\\\ConfirmContract\\\\SignContract\"},{\"GoalName\":\"CancelSignature\",\"RelativePrFolderPath\":\".build\\\\services\\\\payment.plang.io\\\\ConfirmContract\\\\CancelSignature\"},{\"GoalName\":\"Charge\",\"RelativePrFolderPath\":\".build\\\\Charge\"},{\"GoalName\":\"Hello\",\"RelativePrFolderPath\":\".build\\\\Hello\"},{\"GoalName\":\"PaymentRequest\",\"RelativePrFolderPath\":\".build\\\\PaymentRequest\"},{\"GoalName\":\"Start\",\"RelativePrFolderPath\":\".build\\\\Start\"},{\"GoalName\":\"ConfirmContract\",\"RelativePrFolderPath\":\".build\\\\services\\\\blockchain\\\\ConfirmContract\"},{\"GoalName\":\"ConfirmContract\",\"RelativePrFolderPath\":\".build\\\\services\\\\payment.plang.io\\\\ConfirmContract\"}]},{\"AppName\":\"/apps/Installer\",\"Description\":\"The InstallDependencies goal is designed to read a dependencies file, filter for specific libraries, and download the required library package if it is not already present. It checks for the existence of the specified library and handles errors related to missing libraries and signature validation. The goal involves reading a JSON file, filtering its contents, and performing file operations based on the results of these filters.\",\"SubGoals\":[{\"GoalName\":\"InstallDependencies\",\"RelativePrFolderPath\":\".build\\\\InstallDependencies\"}]}]\n<apps>"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "call !BuildAction errorCount=%errorCount+%"
          }
        ]
      }
    ],
    "type": "PLang.Modules.CallGoalModule.Builder",
    "caching": true,
    "RawResponse": "```json\n{\n\t\"FunctionName\": \"RunGoal\",\n\t\"Parameters\": [{\n\t\t\t\"Type\": \"PLang.Models.GoalToCall\",\n\t\t\t\"Name\": \"goalName\",\n\t\t\t\"Value\": \"BuildAction\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"Dictionary<String, Object>\",\n\t\t\t\"Name\": \"parameters\",\n\t\t\t\"Value\": {\n\t\t\t\t\"errorCount\": \"%errorCount+%\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"System.Boolean\",\n\t\t\t\"Name\": \"waitForExecution\",\n\t\t\t\"Value\": true\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"System.Int32\",\n\t\t\t\"Name\": \"delayWhenNotWaitingInMilliseconds\",\n\t\t\t\"Value\": 50\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"System.UInt32\",\n\t\t\t\"Name\": \"waitForXMillisecondsBeforeRunningGoal\",\n\t\t\t\"Value\": 0\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"System.Boolean\",\n\t\t\t\"Name\": \"keepMemoryStackOnAsync\",\n\t\t\t\"Value\": false\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"System.Boolean\",\n\t\t\t\"Name\": \"isolated\",\n\t\t\t\"Value\": false\n\t\t}\n\t],\n\t\"ReturnValues\": null\n}\n```"
  },
  "RunOnBuild": false,
  "Metadata": {}
}