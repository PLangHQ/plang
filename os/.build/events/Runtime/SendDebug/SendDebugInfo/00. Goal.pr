{
  "GoalName": "SendDebugInfo",
  "Comment": null,
  "Text": "SendDebugInfo",
  "GoalSteps": [
    {
      "Text": "post http://localhost:%plang.debugPort%/\n    data: {\n        \"!MemoryStack\":\"%!memorystack%\",\n        \"!Context\": \"%!context%\"\n        \"AbsolutePath\":\"%!Event.Goal.AbsoluteGoalPath%\", \n        \"!Goal\":\"%!Event.Goal%\", \n        \"!Step\":\"%!Event.GoalStep%\",\n        \"!Event\":\"%!Event%\",\n        \"!IsHttpRequest\":\"%!IsHttpRequest%\",\n        \"!StepIndex\": %!Event.GoalStep.Index%,\n        \"!Error\":\"%!error%\",\n        \"!GoalVariables\":\"%!Event.Goal.GetVariables()%\"\n        }\n    dont sign\n    timeout 30 min\n    on error 'No connection could', call WriteToConsole\n    on error, call WriteOutError\n    write to %debugResponse%",
      "Comment": null,
      "ModuleType": "PLang.Modules.HttpModule",
      "Name": "post_debug_data_to_localhost",
      "Description": "Perform an HTTP POST request to the URL constructed with the local host and a debug port variable. The request body contains a JSON object with various runtime context variables such as memory stack, event goal details, error info, and goal variables. The request is configured not to sign the data and has a timeout of 30 minutes. If an error occurs containing 'No connection could', it calls the WriteToConsole step. For any other error, it calls the WriteOutError step. The response from the HTTP request is stored in the variable %debugResponse%.",
      "PrFileName": "01. post_debug_data_to_localhost.pr",
      "RelativePrPath": ".build\\events\\Runtime\\SendDebug\\SendDebugInfo\\01. post_debug_data_to_localhost.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-19T11:49:54.0034673+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": [
        {
          "IgnoreError": false,
          "Message": "No connection could",
          "StatusCode": null,
          "Key": "*",
          "GoalToCall": {
            "Name": "WriteToConsole",
            "Parameters": {}
          },
          "GoalToCallParameters": null,
          "RetryHandler": null,
          "RunRetryBeforeCallingGoalToCall": false
        },
        {
          "IgnoreError": false,
          "Message": null,
          "StatusCode": null,
          "Key": "*",
          "GoalToCall": {
            "Name": "WriteOutError",
            "Parameters": {}
          },
          "GoalToCallParameters": null,
          "RetryHandler": null,
          "RunRetryBeforeCallingGoalToCall": false
        }
      ],
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 0,
      "LineNumber": 10,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nplang.debugPort(System.Nullable),!MemoryStack(System.Collections.Generic.Dictionary`2[System.String,PLang.Runtime.ObjectValue]),!context(System.Nullable),!Event.Goal.AbsoluteGoalPath(System.Nullable),!Event.Goal(System.Nullable),!Event.GoalStep(System.Nullable),!Event(System.Nullable),!IsHttpRequest(System.Nullable),!Event.GoalStep.Index(System.Nullable),!error(System.Nullable),!Event.Goal.GetVariables()(System.Nullable),debugResponse(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "post http://localhost:%plang.debugPort%/\n    data: {\n        \"!MemoryStack\":\"%!memorystack%\",\n        \"!Context\": \"%!context%\"\n        \"AbsolutePath\":\"%!Event.Goal.AbsoluteGoalPath%\", \n        \"!Goal\":\"%!Event.Goal%\", \n        \"!Step\":\"%!Event.GoalStep%\",\n        \"!Event\":\"%!Event%\",\n        \"!IsHttpRequest\":\"%!IsHttpRequest%\",\n        \"!StepIndex\": %!Event.GoalStep.Index%,\n        \"!Error\":\"%!error%\",\n        \"!GoalVariables\":\"%!Event.Goal.GetVariables()%\"\n        }\n    dont sign\n    timeout 30 min\n    on error 'No connection could', call WriteToConsole\n    on error, call WriteOutError\n    write to %debugResponse%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Send a POST HTTP request to a local debug server with detailed runtime context data and handle errors by calling specific error handling steps, then store the response.\",\n  \"Reason\": \"The step involves making an HTTP POST request with JSON data, setting a timeout, handling errors with calls to other steps, and writing the response to a variable. The HttpModule handles HTTP requests, and the CallGoalModule is needed for calling other goals on error. The OutputModule is relevant for writing output or error messages.\",\n  \"StepDescription\": \"Perform an HTTP POST request to the URL constructed with the local host and a debug port variable. The request body contains a JSON object with various runtime context variables such as memory stack, event goal details, error info, and goal variables. The request is configured not to sign the data and has a timeout of 30 minutes. If an error occurs containing 'No connection could', it calls the WriteToConsole step. For any other error, it calls the WriteOutError step. The response from the HTTP request is stored in the variable %debugResponse%.\",\n  \"Modules\": [\n    \"PLang.Modules.HttpModule\",\n    \"PLang.Modules.CallGoalModule\",\n    \"PLang.Modules.OutputModule\"\n  ],\n  \"StepName\": \"post_debug_data_to_localhost\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "66b4caca6a3f49662f5729b6e537ee198f24dfc5341416723b63815b05d4382f",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\events\\Runtime\\SendDebug.goal",
      "UserIntent": null
    },
    {
      "Text": "if %debugResponse.csharpDebugger% then",
      "Comment": null,
      "ModuleType": "PLang.Modules.ConditionalModule",
      "Name": "check_debug_response_csharp_debugger",
      "Description": "Evaluate whether the variable %debugResponse.csharpDebugger% is true or has a value that evaluates to true, and based on that, proceed with conditional logic or branching in the workflow",
      "PrFileName": "02. check_debug_response_csharp_debugger.pr",
      "RelativePrPath": ".build\\events\\Runtime\\SendDebug\\SendDebugInfo\\02. check_debug_response_csharp_debugger.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-19T11:50:02.9473197+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 1,
      "LineNumber": 28,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\ndebugResponse.csharpDebugger(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "if %debugResponse.csharpDebugger% then"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Check if the variable %debugResponse.csharpDebugger% has a truthy value to conditionally execute subsequent steps\",\n  \"Reason\": \"The step uses an 'if' conditional statement to evaluate a variable, which matches the ConditionalModule's purpose of managing if conditions and branching logic\",\n  \"StepDescription\": \"Evaluate whether the variable %debugResponse.csharpDebugger% is true or has a value that evaluates to true, and based on that, proceed with conditional logic or branching in the workflow\",\n  \"Modules\": [\"PLang.Modules.ConditionalModule\"],\n  \"StepName\": \"check_debug_response_csharp_debugger\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "5aff3926da8eda49f54e2563cbda17970da3d3fa5c21486724d08d13ec6e22c2",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\events\\Runtime\\SendDebug.goal",
      "UserIntent": null
    },
    {
      "Text": "log warning 'Starting C# debugger'",
      "Comment": null,
      "ModuleType": "PLang.Modules.LoggerModule",
      "Name": "log_warning_starting_csharp_debugger",
      "Description": "Write a warning level log entry with the message 'Starting C# debugger' to the logging system for monitoring or debugging purposes",
      "PrFileName": "03. log_warning_starting_csharp_debugger.pr",
      "RelativePrPath": ".build\\events\\Runtime\\SendDebug\\SendDebugInfo\\03. log_warning_starting_csharp_debugger.pr",
      "Indent": 4,
      "Execute": false,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-10T15:06:06.7212251+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 2,
      "LineNumber": 29,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "log warning 'Starting C# debugger'"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"The user wants to log a warning message indicating that the C# debugger is starting\",\n  \"Reason\": \"The step involves logging a warning message, which is directly supported by the LoggerModule that handles logging operations\",\n  \"StepDescription\": \"Write a warning level log entry with the message 'Starting C# debugger' to the logging system for monitoring or debugging purposes\",\n  \"Modules\": [\"PLang.Modules.LoggerModule\"],\n  \"StepName\": \"log_warning_starting_csharp_debugger\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "f55abae2af69b3a7e32fb8a4a0436cf07b3eb9c966f9f9a587d7a86a75af527b",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\events\\Runtime\\SendDebug.goal",
      "UserIntent": null
    },
    {
      "Text": "[plang] start csharp debugger",
      "Comment": null,
      "ModuleType": "PLang.Modules.PlangModule",
      "Name": "start_csharp_debugger",
      "Description": "Initiate a debugging session for C# code using the plang environment's debugging capabilities, enabling step-by-step code execution and inspection",
      "PrFileName": "04. start_csharp_debugger.pr",
      "RelativePrPath": ".build\\events\\Runtime\\SendDebug\\SendDebugInfo\\04. start_csharp_debugger.pr",
      "Indent": 4,
      "Execute": false,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-10T15:09:59.3542878+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 3,
      "LineNumber": 30,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\nPLang.Modules.PlangModule\r\n<modules>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[plang] start csharp debugger"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"The user wants to start a C# debugger session within the plang environment\",\n  \"Reason\": \"The step explicitly uses the [plang] tag and mentions starting a C# debugger, which aligns with the PlangModule that handles plang-specific operations and integrations\",\n  \"StepDescription\": \"Initiate a debugging session for C# code using the plang environment's debugging capabilities, enabling step-by-step code execution and inspection\",\n  \"Modules\": [\"PLang.Modules.PlangModule\"],\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null,\n  \"StepName\": \"start_csharp_debugger\"\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "4e098bfc62128403cb78f9f141ffb7d95d89a3233961df6db759f97ba494887e",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\events\\Runtime\\SendDebug.goal",
      "UserIntent": null
    },
    {
      "Text": "if %debugResponse.prFileName% is not empty then",
      "Comment": null,
      "ModuleType": "PLang.Modules.ConditionalModule",
      "Name": "check_if_debugresponse_prfilename_is_not_empty",
      "Description": "Evaluate whether the variable %debugResponse.prFileName% is not empty, to determine the flow of execution based on this condition",
      "PrFileName": "05. check_if_debugresponse_prfilename_is_not_empty.pr",
      "RelativePrPath": ".build\\events\\Runtime\\SendDebug\\SendDebugInfo\\05. check_if_debugresponse_prfilename_is_not_empty.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-19T11:50:11.1343888+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 4,
      "LineNumber": 31,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\ndebugResponse.prFileName(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "if %debugResponse.prFileName% is not empty then"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Check if the variable %debugResponse.prFileName% contains a non-empty value\",\n  \"Reason\": \"The step is a conditional check on a variable's content, which matches the description of the ConditionalModule that manages if conditions and checks for empty variables\",\n  \"StepDescription\": \"Evaluate whether the variable %debugResponse.prFileName% is not empty, to determine the flow of execution based on this condition\",\n  \"Modules\": [\"PLang.Modules.ConditionalModule\"],\n  \"StepName\": \"check_if_debugresponse_prfilename_is_not_empty\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "51f7671441aa92c452edd151157eb8ff52d58565d2b77384933d1fe5d0bcd555",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\events\\Runtime\\SendDebug.goal",
      "UserIntent": null
    },
    {
      "Text": "log warning 'Running from step %debugResponse.prFileName%'",
      "Comment": null,
      "ModuleType": "PLang.Modules.LoggerModule",
      "Name": "log_warning_with_step_filename",
      "Description": "Generate a warning log entry with the message 'Running from step' followed by the value of the variable %debugResponse.prFileName%, to help track the execution flow or identify the current step being executed.",
      "PrFileName": "06. log_warning_with_step_filename.pr",
      "RelativePrPath": ".build\\events\\Runtime\\SendDebug\\SendDebugInfo\\06. log_warning_with_step_filename.pr",
      "Indent": 4,
      "Execute": false,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-19T11:50:23.6892353+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 5,
      "LineNumber": 32,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\ndebugResponse.prFileName(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "log warning 'Running from step %debugResponse.prFileName%'"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Log a warning message that includes the current step's file name for debugging or monitoring purposes\",\n  \"Reason\": \"The step is about logging a warning message, which is typically handled by a logging module. The presence of 'log warning' indicates the use of a logger.\",\n  \"StepDescription\": \"Generate a warning log entry with the message 'Running from step' followed by the value of the variable %debugResponse.prFileName%, to help track the execution flow or identify the current step being executed.\",\n  \"Modules\": [\"PLang.Modules.LoggerModule\"],\n  \"StepName\": \"log_warning_with_step_filename\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "612c2f552384694769901723da0c7bc18d93d710e9ef750deb2278aa4f0adada",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\events\\Runtime\\SendDebug.goal",
      "UserIntent": null
    },
    {
      "Text": "[plang] run from step %debugResponse.prFileName%",
      "Comment": null,
      "ModuleType": "PLang.Modules.PlangModule",
      "Name": "run_step_from_variable",
      "Description": "Invoke the plang interpreter to run the step whose name is stored in the variable %debugResponse.prFileName%, effectively continuing or branching the script execution at that step.",
      "PrFileName": "07. run_step_from_variable.pr",
      "RelativePrPath": ".build\\events\\Runtime\\SendDebug\\SendDebugInfo\\07. run_step_from_variable.pr",
      "Indent": 4,
      "Execute": false,
      "RunOnce": false,
      "Confidence": "Very High",
      "Inconsistency": null,
      "Generated": "2025-06-19T15:02:31.2517599+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 6,
      "LineNumber": 33,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\nPLang.Modules.PlangModule\r\n<modules>\r\n\r\n<variables>\r\ndebugResponse.prFileName(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[plang] run from step %debugResponse.prFileName%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Execute a specific step in the plang script identified by the variable %debugResponse.prFileName%\",\n  \"Reason\": \"The step explicitly uses the [plang] tag and involves running a step by name, which is the core functionality of the PlangModule that handles plang script execution and control flow.\",\n  \"StepDescription\": \"Invoke the plang interpreter to run the step whose name is stored in the variable %debugResponse.prFileName%, effectively continuing or branching the script execution at that step.\",\n  \"Modules\": [\"PLang.Modules.PlangModule\"],\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null,\n  \"StepName\": \"run_step_from_variable\"\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "e445b9c598f2db2e246720942072887d93e7ab01e51234702066c9ddf8596171",
      "BuilderVersion": "1.0.0.0",
      "RelativeGoalPath": "\\events\\Runtime\\SendDebug.goal",
      "UserIntent": "Execute a specific step in the plang script identified by the variable %debugResponse.prFileName%"
    }
  ],
  "SubGoals": [],
  "Description": "The SendDebugInfo goal sends debugging information to a specified HTTP endpoint. It constructs a data payload containing various debugging details such as memory stack, context, goal path, and error information. The goal also handles potential errors during the HTTP request and can initiate a C# debugger or run from a specific step based on the response received.",
  "Visibility": 0,
  "GoalFileName": "SendDebug.goal",
  "RelativeGoalPath": "\\events\\Runtime\\SendDebug.goal",
  "RelativeGoalFolderPath": "\\events\\Runtime",
  "RelativePrPath": ".build\\events\\Runtime\\SendDebug\\SendDebugInfo\\00. Goal.pr",
  "RelativePrFolderPath": ".build\\events\\Runtime\\SendDebug\\SendDebugInfo",
  "BuilderVersion": "1.0.0.0",
  "GoalInfo": null,
  "Injections": [],
  "Signature": null,
  "FileHash": "62f019b76d9e1262da48dba0520ccd75bebee7df636f32676c12cfa4e04fee48",
  "Hash": "96dfd60520833e7391c103626d69b7f4e0bca86c798053264c15f2974b46f799",
  "IncomingVariablesRequired": {
    "plang.debugPort": "The port number for the debug server.",
    "memorystack": "The current memory stack to be sent.",
    "context": "The context information to be sent.",
    "Event.Goal.AbsoluteGoalPath": "The absolute path of the goal being executed.",
    "Event.Goal": "The current goal being executed.",
    "Event.GoalStep": "The current step of the goal being executed.",
    "Event": "The event information related to the goal.",
    "IsHttpRequest": "A boolean indicating if the request is an HTTP request.",
    "Event.GoalStep.Index": "The index of the current step in the goal.",
    "error": "Any error information that needs to be sent.",
    "Event.Goal.GetVariables()": "The variables associated with the current goal."
  },
  "DataSourceName": null,
  "IsSetup": false
}