{
  "Action": {
    "FunctionName": "CreateDataSource",
    "Parameters": [
      {
        "Type": "String",
        "Name": "name",
        "Value": "%name%"
      },
      {
        "Type": "String",
        "Name": "databaseType",
        "Value": "sqlite"
      },
      {
        "Type": "Boolean",
        "Name": "setAsDefaultForApp",
        "Value": "%defaultForApp%"
      },
      {
        "Type": "Boolean",
        "Name": "keepHistoryEventSourcing",
        "Value": "%keepHistory%"
      }
    ],
    "ReturnValues": null
  },
  "Text": "create db \"%name%\", \"/.db/%id%/data.sqlite\", %keepHistory%, %defaultForApp%",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "json",
    "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
    "model": "gpt-4o",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Generate the SQL statement from user command. \r\nThe SQL statement MUST be a valid SQL statement for sqlite. \r\nMake sure to use correct data types that match sqlite\r\nYou MUST provide Parameters if SQL has @parameter.\r\n\r\n"
          },
          {
            "type": "text",
            "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## functions available defined in csharp ##\r\nCreateDataSource(String? name = \"data\", String? databaseType = \"sqlite\", Boolean? setAsDefaultForApp = False, Boolean? keepHistoryEventSourcing = False)  : DataSource  // Create a datasource to a database. \nGetDataSource()  : DataSource  // gets the current datasource. \nSetDataSourceName(String? name)  : void \nCreateIsolatedDataPattern(String id, String setupGoalFile, String? name, Boolean? keepHistory = True, Boolean? defaultForApp = False)  : Object  // Create Isolated data pattern (IDP) for the system.. \nBeginTransaction()  : void\nEndTransaction()  : void\nRollback()  : void\nLoadExtension(String fileName, String? procName)  : void \nGetDatabaseStructure(String[]? tables, String? dataSourceName)  : Dicionary<String, Object>  // Returns tables and views in database with the columns description. \nInsertEventSourceData(Int64 id, String data, String keyHash)  : Int32 \nExecute(String sql, String? dataSourceName)  : Int64 \nCreateTable(String sql, String? dataSourceName)  : Int64 \nSelectOneRow(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Object \nSelect(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : List<Object> \nUpdate(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Int64 \nDelete(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Int64 \nInsertOrUpdate(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Int64  // Insert or update table(Upsert). Will return affected row count. \nInsertOrUpdateAndSelectIdOfRow(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Object  // Insert or update table(Upsert). Will return the primary key of the affected row. \nInsert(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Int64  // Insert into table. Will return affected row count. \nInsertAndSelectIdOfInsertedRow(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Object  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \nInsertBulk(String tableName, List`1<Object> itemsToInsert, Dictionary`2<String, Object>? columnMapping, Boolean? ignoreContraintOnInsert = False)  : Int64  // Insert a list(bulk) into database, return number of rows inserted. columnMapping maps which variable should match with a column. User will define that he is using bulk insert.. \nGetAdditionalSystemErrorInfo()  : String \nGetAdditionalAssistantErrorInfo()  : String \n\r\n## functions available ends ##\r\n"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "create db \"%name%\", \"/.db/%id%/data.sqlite\", %keepHistory%, %defaultForApp%"
          }
        ]
      }
    ],
    "type": "PLang.Modules.DbModule.Builder",
    "caching": true,
    "RawResponse": "```json\n{\n\t\"FunctionName\": \"CreateDataSource\",\n\t\"Parameters\": [\n\t\t{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"name\",\n\t\t\t\"Value\": \"%name%\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"databaseType\",\n\t\t\t\"Value\": \"sqlite\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"Boolean\",\n\t\t\t\"Name\": \"setAsDefaultForApp\",\n\t\t\t\"Value\": \"%defaultForApp%\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"Boolean\",\n\t\t\t\"Name\": \"keepHistoryEventSourcing\",\n\t\t\t\"Value\": \"%keepHistory%\"\n\t\t}\n\t]\n}\n```"
  },
  "RunOnBuild": false,
  "Metadata": {}
}