{
  "Action": {
    "FunctionName": "CreateTable",
    "Parameters": [
      {
        "Type": "String",
        "Name": "sql",
        "Value": "CREATE TABLE Setup (id BIGINT PRIMARY KEY, text TEXT, hash TEXT UNIQUE, created DATETIME DEFAULT CURRENT_TIMESTAMP, UNIQUE(hash))"
      }
    ],
    "ReturnValues": null
  },
  "Text": "create table Setup, columns: text(string), hash(string, unique, indexed), created(datetime, now)",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "json",
    "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
    "model": "gpt-4o",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Map user command to this c# function: \r\n\r\n## csharp function ##\r\nvoid CreateTable(String sql)  \r\n## csharp function ##\r\n\r\nIf table name is a variable, keep the variable in the sql statement\r\nvariable is defined with starting and ending %, e.g. %filePath%.\r\nYou MUST generate a valid sql statement for SQLite.\r\nYou MUST add id to create statement.\r\nIf id is not defined then add id to the create statement \r\nThe id MUST NOT be auto incremental, but is primary key.\r\nThe id should be datatype long/bigint/.. which fits SQLite.\r\n\r\n"
          },
          {
            "type": "text",
            "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## functions available starts ##\r\nCreateDataSource(String? name = \"data\", String? localPath, String? databaseType = \"sqlite\", Boolean? setAsDefaultForApp = False, Boolean? keepHistoryEventSourcing = False)  : void // localPath is location of the database on the drive for sqlite. localPath can be string with variables, default is null. \nSetDataSourceName(String? name, String? localPath)  : void \nCreateIsolatedDataPattern(String id, String setupGoalFile, String? name, Boolean? keepHistory = True, Boolean? defaultForApp = False)  : ReturnDictionary`2  // Create Isolated data pattern (IDP) for the system.. \nBeginTransaction()  : void\nEndTransaction()  : void\nRollback()  : void\nLoadExtension(String fileName, String? procName)  : void \nGetDatabaseStructure(String[]? tables, String? dataSourceName)  : Dicionary<String, Object>  // Returns tables and views in database with the columns description. \nInsertEventSourceData(Int64 id, String data, String keyHash)  : Int32 \nExecute(String sql, String? dataSourceName)  : Int64 \nCreateTable(String sql, String? dataSourceName)  : Int64 \nSelectOneRow(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Object \nSelect(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : List<Object> \nUpdate(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Int64 \nDelete(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Int64 \nInsertOrUpdate(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Int64  // Insert or update table(Upsert). Will return affected row count. \nInsertOrUpdateAndSelectIdOfRow(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Object  // Insert or update table(Upsert). Will return the primary key of the affected row. \nInsert(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Int64  // Insert into table. Will return affected row count. \nInsertAndSelectIdOfInsertedRow(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : Object  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \nInsertBulk(String tableName, List`1<Object> itemsToInsert, Dictionary`2<String, Object>? columnMapping, Boolean? ignoreContraintOnInsert = False)  : Int64  // Insert a list(bulk) into database, return number of rows inserted. columnMapping maps which variable should match with a column. User will define that he is using bulk insert.. \nGetAdditionalSystemErrorInfo()  : String \nGetAdditionalAssistantErrorInfo()  : String\r\n## functions available ends ##"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "create table Setup, columns: text(string), hash(string, unique, indexed), created(datetime, now)"
          }
        ]
      }
    ],
    "type": "PLang.Modules.DbModule.Builder",
    "caching": true,
    "RawResponse": "```json\n{\n\t\"FunctionName\": \"CreateTable\",\n\t\"Parameters\": [{\n\t\t\"Type\": \"String\",\n\t\t\"Name\": \"sql\",\n\t\t\"Value\": \"CREATE TABLE Setup (id BIGINT PRIMARY KEY, text TEXT, hash TEXT UNIQUE, created DATETIME DEFAULT CURRENT_TIMESTAMP, UNIQUE(hash))\"\n\t}]\n}\n```"
  },
  "RunOnBuild": false
}