{
  "Text": "validate %developerInstructionForResult%, %text%, %options% is not empty",
  "ModuleType": null,
  "Reload": false,
  "LlmRequest": [
    {
      "temperature": 0.0,
      "top_p": 0.0,
      "frequencyPenalty": 0.0,
      "presencePenalty": 0.0,
      "maxLength": 4000,
      "llmResponseType": "json",
      "scheme": "{\n\t\"Reasoning\": string,\n\t\"Name\": string,\n\t\"Parameters\"?: [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}] = null,\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
      "model": "gpt-4o",
      "promptMessage": [
        {
          "role": "system",
          "content": [
            {
              "type": "text",
              "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\n## Rules\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\n%Variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nnull is used to represent no value, e.g. { \"name\": null }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See <Example>\r\nError handling is process by another step, if you see 'on error...' you can ignore it\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\nDictionary<T1, T2> value is {key: value, ... }\r\n\r\n<Example>\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n<Example>\r\n\r\n## JSON scheme information\r\nReasoning: A brief description of the reasoning behind the selection of the function and parameters based on the user's intent. This property provides context for why a particular function was chosen and how it aligns with the user intent.\r\nName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
            },
            {
              "type": "text",
              "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"Reasoning\": string,\n\t\"Name\": string,\n\t\"Parameters\"?: [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}] = null,\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
            }
          ]
        },
        {
          "role": "assistant",
          "content": [
            {
              "type": "text",
              "text": "## Canonical User Intent (already disambiguated by LLM)\r\nThe user wants to ensure that the specified variables are not empty."
            }
          ]
        },
        {
          "role": "assistant",
          "content": [
            {
              "type": "text",
              "text": "## functions available starts ##\r\n[{\"Description\":\"Check each %variable% if it is empty. Create error message fitting the intent of the validation. Extract all %variables% from this statement as a JSON array of strings, ensuring it is not wrapped as a single string. channel=error|warning|info|debug|trace. channel is null unless sepecifically defined by user e.g. channel:error\",\"MethodName\":\"IsNotEmpty\",\"Parameters\":[{\"Type\":\"System.String[]\",\"Name\":\"variables\"},{\"Type\":\"System.String\",\"Name\":\"errorMessage\"},{\"Type\":\"System.Int32\",\"Name\":\"statusCode\",\"DefaultValue\":400}]},{\"Description\":\"Checks if variable contains a regex pattern. Create error message fitting the intent of the validation\",\"MethodName\":\"HasPattern\",\"Parameters\":[{\"Type\":\"System.String[]\",\"Name\":\"variables\"},{\"Type\":\"System.String\",\"Name\":\"pattern\"},{\"Type\":\"System.String\",\"Name\":\"errorMessage\"},{\"Type\":\"System.Int32\",\"Name\":\"statusCode\",\"DefaultValue\":400}]},{\"Description\":\"Checks if variable is a valid 2 letter country code\",\"MethodName\":\"IsValid2LetterCountryCode\",\"Parameters\":[{\"Type\":\"System.String[]\",\"Name\":\"variables\"},{\"Type\":\"System.String\",\"Name\":\"pattern\"},{\"Type\":\"System.String\",\"Name\":\"errorMessage\"},{\"Type\":\"System.Int32\",\"Name\":\"statusCode\",\"DefaultValue\":400}]},{\"MethodName\":\"ValidateItemIsInList\",\"Parameters\":[{\"Type\":\"System.Object[]\",\"Name\":\"itemsToCheckInList\"},{\"Type\":\"System.Collections.IList\",\"Name\":\"list\",\"TypeProperties\":[{\"Type\":\"System.Object\",\"Name\":\"Item\"}]},{\"Type\":\"System.String\",\"Name\":\"errorMessage\",\"DefaultValue\":\"item is not in list\"},{\"Type\":\"System.Boolean\",\"Name\":\"caseSensitive\",\"DefaultValue\":false}],\"ReturnValue\":{\"Type\":\"List<Object>\"}},{\"Description\":\"Validates if signed contract is valid. Uses properties on the contract from signatureProperties as signatures to validate against. propertiesToMatch specifies properties that should be used on the validation, when null all poperties are used except signatureProperties\",\"MethodName\":\"ValidateSignedContract\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"contract\"},{\"Type\":\"List<string>\",\"Name\":\"signatureProperties\"},{\"Type\":\"List<string>\",\"Name\":\"propertiesToMatch\"}]}]\r\n## functions available ends ##\r\n## defined variables ##\r\ndeveloperinstructionforresult (type:object), text (type:object), options (type:object), \r\n## defined variables ##"
            }
          ]
        },
        {
          "role": "user",
          "content": [
            {
              "type": "text",
              "text": "validate %developerInstructionForResult%, %text%, %options% is not empty"
            }
          ]
        }
      ],
      "type": "PLang.Modules.GenericFunctionBuilder",
      "caching": true,
      "RawResponse": "```json\n{\n\t\"Reasoning\": \"The user wants to ensure that the variables %developerInstructionForResult%, %text%, and %options% are not empty. The IsNotEmpty function is appropriate for this task as it checks if the specified variables are not empty.\",\n\t\"Name\": \"IsNotEmpty\",\n\t\"Parameters\": [\n\t\t{\n\t\t\t\"Type\": \"System.String[]\",\n\t\t\t\"Name\": \"variables\",\n\t\t\t\"Value\": [\"%developerInstructionForResult%\", \"%text%\", \"%options%\"]\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"System.String\",\n\t\t\t\"Name\": \"errorMessage\",\n\t\t\t\"Value\": \"One or more required fields are empty.\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"System.Int32\",\n\t\t\t\"Name\": \"statusCode\",\n\t\t\t\"Value\": 400\n\t\t}\n\t],\n\t\"ReturnValues\": null\n}\n```"
    }
  ],
  "Properties": {
    "Parameters": {
      "variables": [
        {
          "Name": "variables",
          "FullTypeName": "System.String[]"
        }
      ],
      "errorMessage": [
        {
          "Name": "errorMessage",
          "FullTypeName": "System.String"
        }
      ],
      "statusCode": [
        {
          "Name": "statusCode",
          "FullTypeName": "System.Int32"
        }
      ]
    },
    "ReturnValues": {}
  },
  "GenericFunctionType": "PLang.Modules.BaseBuilder+GenericFunction",
  "Function": {
    "Reasoning": "The user wants to ensure that the variables %developerInstructionForResult%, %text%, and %options% are not empty. The IsNotEmpty function is appropriate for this task as it checks if the specified variables are not empty.",
    "Name": "IsNotEmpty",
    "Parameters": [
      {
        "Type": "System.String[]",
        "Name": "variables",
        "Value": [
          "%developerInstructionForResult%",
          "%text%",
          "%options%"
        ]
      },
      {
        "Type": "System.String",
        "Name": "errorMessage",
        "Value": "One or more required fields are empty."
      },
      {
        "Type": "System.Int32",
        "Name": "statusCode",
        "Value": 400
      }
    ],
    "ReturnValues": null
  }
}