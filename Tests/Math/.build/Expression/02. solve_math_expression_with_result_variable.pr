{
  "Text": "solve for \"(sqrt(100) + %result% + pow(2, 3)) / %result%\", write to %result%",
  "ModuleType": null,
  "Reload": false,
  "LlmRequest": [
    {
      "temperature": 0.0,
      "top_p": 0.0,
      "frequencyPenalty": 0.0,
      "presencePenalty": 0.0,
      "maxLength": 4000,
      "llmResponseType": "json",
      "scheme": "{\n\t\"Reasoning\": string,\n\t\"Name\": string,\n\t\"Parameters\"?: [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}] = null,\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null,\n\t\"Instruction\": {\n\t\"Text\": string,\n\t\"ModuleType\": string,\n\t\"GenericFunctionType\": string,\n\t\"FunctionJson\"?: jtoken\n}\n}",
      "model": "gpt-4.1-mini",
      "promptMessage": [
        {
          "role": "system",
          "content": [
            {
              "type": "text",
              "text": "User is writing code in plang programming language.\r\n\r\nYour job is: \r\n1. Parse and understand user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\n## Rules\r\n%variable% in plang is defined with starting and ending percentage sign (%)\r\n%variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nleave %variable% as is and do not change text to a variable\r\nnull is used to represent no value, e.g. { \"name\": null }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See <Example>\r\nError handling is process by another step, if you see 'on error...' you can ignore it\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\nDictionary<T1, T2> value is {key: value, ... }\r\n\r\n<Example>\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n<Example>\r\n\r\n## JSON scheme information\r\nReasoning: A brief description of the reasoning behind the selection of the function and parameters based on the user's intent. This property provides context for why a particular function was chosen and how it aligns with the user intent.\r\nName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
            },
            {
              "type": "text",
              "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"Reasoning\": string,\n\t\"Name\": string,\n\t\"Parameters\"?: [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}] = null,\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null,\n\t\"Instruction\": {\n\t\"Text\": string,\n\t\"ModuleType\": string,\n\t\"GenericFunctionType\": string,\n\t\"FunctionJson\"?: jtoken\n}\n}"
            }
          ]
        },
        {
          "role": "assistant",
          "content": [
            {
              "type": "text",
              "text": "## Canonical User Intent (already disambiguated by LLM)\r\nPerform a mathematical calculation involving square root, power, addition, and division, then store the result in a variable\n## functions available starts ##\r\n{\"Methods\":[{\"Description\":\"Take the square root of a specified variable or value.\",\"MethodName\":\"SquareRoot\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"variable\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"Nullable<Double>\"}},{\"Description\":\"Solve a complex math expression given as a string. Please capitalize any functions called like sqrt() into Sqrt()\",\"MethodName\":\"SolveExpression\",\"Parameters\":[{\"Type\":\"System.String\",\"Name\":\"expression\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"Nullable<Double>\"}},{\"Description\":\"Find the sum of two given numbers or variables.\",\"MethodName\":\"SumTwoNumbers\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"firstTerm\",\"IsRequired\":true},{\"Type\":\"System.Object\",\"Name\":\"secondTerm\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"Nullable<Double>\"}},{\"Description\":\"Find the difference of two given numbers or variables.\",\"MethodName\":\"SubtractTwoNumbers\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"firstTerm\",\"IsRequired\":true},{\"Type\":\"System.Object\",\"Name\":\"secondTerm\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"Nullable<Double>\"}},{\"Description\":\"Find the product of two given numbers or variables.\",\"MethodName\":\"MultiplyTwoNumbers\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"multiplicand\",\"IsRequired\":true},{\"Type\":\"System.Object\",\"Name\":\"multiplier\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"Nullable<Double>\"}},{\"Description\":\"Find the quotient of two given numbers or variables.\",\"MethodName\":\"DivideTwoNumbers\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"dividend\",\"IsRequired\":true},{\"Type\":\"System.Object\",\"Name\":\"divisor\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"Nullable<Double>\"}},{\"Description\":\"Raise a number by an exponent/power.\",\"MethodName\":\"RaiseNumberToExponent\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"baseValue\",\"IsRequired\":true},{\"Type\":\"System.Object\",\"Name\":\"exponent\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"Nullable<Double>\"}},{\"Description\":\"Multiply a variable by a number that has a number that is being raised by an exponent.\",\"MethodName\":\"MultiplyVariableByPower\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"variable\",\"IsRequired\":true},{\"Type\":\"System.Int32\",\"Name\":\"baseValue\",\"IsRequired\":true},{\"Type\":\"System.Int32\",\"Name\":\"exponent\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"Nullable<Decimal>\"}},{\"Description\":\"Find the fibonacci number of a given variable or number.\",\"MethodName\":\"Fibonacci\",\"Parameters\":[{\"Type\":\"System.Object\",\"Name\":\"variable\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"Nullable<Int32>\"}},{\"Description\":\"Find the first n prime numbers where n is a given number.\",\"MethodName\":\"PrimeNumbers\",\"Parameters\":[{\"Type\":\"System.Int32\",\"Name\":\"number\",\"IsRequired\":true}],\"ReturnValue\":{\"Type\":\"List<Int32>\"}}],\"SupportingObjects\":[]}\r\n## functions available ends ##\r\n## defined variables ##\r\nresult (type:object), result (type:object), result (type:object), \r\n## defined variables ##"
            }
          ]
        },
        {
          "role": "user",
          "content": [
            {
              "type": "text",
              "text": "solve for \"(sqrt(100) + %result% + pow(2, 3)) / %result%\", write to %result%"
            }
          ]
        }
      ],
      "type": "PLang.Modules.GenericFunctionBuilder",
      "caching": true,
      "RawResponse": "{\n  \"Reasoning\": \"The user wants to solve a mathematical expression involving square root, power, addition, and division, and store the result in %result%. The SolveExpression function can handle the entire expression as a string, so it is the most suitable choice.\",\n  \"Name\": \"SolveExpression\",\n  \"Parameters\": [\n    {\n      \"Type\": \"System.String\",\n      \"Name\": \"expression\",\n      \"Value\": \"(Sqrt(100) + %result% + Pow(2, 3)) / %result%\"\n    }\n  ],\n  \"ReturnValues\": [\n    {\n      \"Type\": \"Nullable<Double>\",\n      \"VariableName\": \"%result%\"\n    }\n  ],\n  \"Instruction\": {\n    \"Text\": \"Solve the given mathematical expression and store the result in %result%.\",\n    \"ModuleType\": \"Math\",\n    \"GenericFunctionType\": \"SolveExpression\",\n    \"FunctionJson\": null\n  }\n}"
    }
  ],
  "Properties": {
    "Parameters": {
      "expression": [
        {
          "Name": "expression",
          "FullTypeName": "System.String"
        }
      ]
    },
    "ReturnValues": {
      "%result%": []
    }
  },
  "GenericFunctionType": "PLang.Modules.BaseBuilder+GenericFunction",
  "Function": {
    "Reasoning": "The user wants to solve a mathematical expression involving square root, power, addition, and division, and store the result in %result%. The SolveExpression function can handle the entire expression as a string, so it is the most suitable choice.",
    "Name": "SolveExpression",
    "Parameters": [
      {
        "Type": "System.String",
        "Name": "expression",
        "Value": "(Sqrt(100) + %result% + Pow(2, 3)) / %result%"
      }
    ],
    "ReturnValues": [
      {
        "Type": "Nullable<Double>",
        "VariableName": "%result%"
      }
    ]
  }
}