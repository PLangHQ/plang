{
  "Action": {
    "FunctionName": "SetStringVariable",
    "Parameters": [
      {
        "Type": "String",
        "Name": "key",
        "Value": "%goalToCall%"
      },
      {
        "Type": "String",
        "Name": "value",
        "Value": "%stepPr.Action.Parameters[1].Value.ToString().Replace(\"!\", \"\")%"
      }
    ],
    "ReturnValue": null
  },
  "Text": "set string var %goalToCall% = %stepPr.Action.Parameters[1].Value.ToString().Replace(\"!\", \"\")%",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "json",
    "scheme": "{\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}] = null}",
    "type": "PLang.Modules.GenericFunctionBuilder",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\nVariables MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
          },
          {
            "type": "text",
            "text": "You MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}] = null}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## functions available starts ##\r\nvoid OnCreateVariableListener(String key, String goalName, Dictionary`2<String, Object>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeVariableListener(String key, String goalName, Boolean? notifyWhenCreated = True, Dictionary`2<String, Object>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveVariableListener(String key, String goalName, Dictionary`2<String, Object>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnCreateStaticVariableListener(String key, String goalName, Dictionary`2<String, Object>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnChangeStaticVariableListener(String key, String goalName, Boolean? notifyWhenCreated = True, Dictionary`2<String, Object>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nvoid OnRemoveStaticVariableListener(String key, String goalName, Dictionary`2<String, Object>? parameters, Boolean? waitForResponse = True, Int32? delayWhenNotWaitingInMilliseconds = 50)  // goalName should be prefix with !, it can whole word only but can contain dot(.). \nString GetEnvironmentVariable(String key) \nObject LoadVariables(String key) \nvoid SetStringVariable(String key, String? value)  // Set string variable. If value is json, make sure to format it as valid json, use double quote(\") by escaping it. \nvoid SetNumberVariable(String key, Nullable`1<Int64>? value)  // Set int/long variable.. \nvoid SetDoubleVariable(String key, Nullable`1<Double>? value)  // Set double variable.. \nvoid SetFloatVariable(String key, Nullable`1<Single>? value)  // Set float variable.. \nvoid SetBoolVariable(String key, Nullable`1<Boolean>? value)  // Set bool variable.. \nvoid SetVariable(String key, Object? value)  // Set variable. If value is json, make sure to format it as valid json, use double quote(\") by escaping it. \nvoid SetVariables(Dictionary`2<String, Object> keyValues)  // Set multiple variables. If value is json, make sure to format it as valid json, use double quote(\") by escaping it. \nvoid SetValuesOnVariables(Dictionary`2<String, Object> keyValues)  // Set value on variables. If value is json, make sure to format it as valid json, use double quote(\") by escaping it. \nvoid SetDefaultValueOnVariables(Dictionary`2<String, Object> keyValues)  // Set default value on variables if not set. If value is json, make sure to format it as valid json, use double quote(\") by escaping it. \nObject AppendToVariable(String key, Object? value, Char? seperator = \n, String? valueLocation = \"postfix\", String? seperatorLocation = \"end\")  // Append to variable. valueLocation=postfix|prefix seperatorLocation=end|start. \nObject GetVariable(String key) \nvoid RemoveVariable(String key) \nvoid SetStaticVariable(String key, Object value) \nObject GetStaticVariable(String key) \nvoid RemoveStaticVariable(String key) \nvoid SetSettingValue(String key, Object value)  // Sets a value to %Settings.XXXX% variable. \nvoid SetDefaultSettingValue(String key, Object value)  // Sets a value to %Settings.XXXX% variable but only if it is not set before. \nString ConvertToBase64(String key)\r\n## functions available ends ##\r\n## defined variables ##\r\ngoalToCall (type:object), stepPr.Action.Parameters[1].Value.ToString().Replace(\"!\", \"\") (type:object), \r\n## defined variables ##"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "set string var %goalToCall% = %stepPr.Action.Parameters[1].Value.ToString().Replace(\"!\", \"\")%"
          }
        ]
      }
    ],
    "model": "gpt-4-turbo",
    "caching": true,
    "RawResponse": null
  },
  "RunOnBuild": false
}