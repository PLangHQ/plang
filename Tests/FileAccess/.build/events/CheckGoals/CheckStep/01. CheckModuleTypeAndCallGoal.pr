{
  "Action": {
    "Namespace": "PLangGeneratedCode",
    "Name": "CheckModuleTypeAndCallGoal",
    "Code": "\nnamespace PLangGeneratedCode\n{\n    public static class CheckModuleTypeAndCallGoal\n    {\n        public static bool ExecutePlangCode(object? stepαModuleType)\n        {\n            return stepαModuleType?.ToString() == \"PLang.Modules.CallGoalModule\";\n        }\n    }\n}\n",
    "Using": null,
    "InputParameters": {
      "step.ModuleType": "object?"
    },
    "OutParameterDefinition": null,
    "GoalToCallOnTrue": "CheckCallingGoal",
    "GoalToCallOnFalse": null,
    "GoalToCallOnTrueParameters": null,
    "GoalToCallOnFalseParameters": null,
    "ServicesAssembly": []
  },
  "Text": "if %step.ModuleType%(to string) == \"PLang.Modules.CallGoalModule\" then call CheckCallingGoal",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "csharp",
    "scheme": "{\"GoalToCallOnTrue\": string = null,\n\"GoalToCallOnTrueParameters\"? : { String : Object, ... } = null,\n\"GoalToCallOnFalse\": string = null,\n\"GoalToCallOnFalseParameters\"? : { String : Object, ... } = null,\n\"Namespace\": string,\n\"Name\": string,\n\"Using\"?: string[] = null,\n\"Assemblies\"?: string[] = null}",
    "type": "PLang.Modules.ConditionalModule.Builder",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Act as a senior C# developer, that converts the user intent into a valid C#(Version. 11) code. \r\n\r\n## Rules ##\r\n- Generate static class. The code generated should have 1 method with the static method named ExecutePlangCode and return bool. \r\n- A variable in user intent is defined by starting and ending %.\r\n- Variables defined in the user intent can be passed into the ExecutePlangCode function by value, but only if defined by user. \r\n- Variable names passed to ExecutePlangCode function MUST be unmodified from the user statement\r\n- The code will not be modified after you generate it.\r\n- ALWAYS use long or long? instead of int or int?\r\n- When validating if variable is long, also validate if it is int\r\n- Do not reference any DTO classes. Use dynamic? if complex object is needed, else use object?.\r\n- Strings are defined with double quote (\")\r\n- Any class from System.IO, should be replaced with PLang.SafeFileSystem.PLangFileSystem. It contains same classes and methods. \r\n- ONLY IF PLangFileSystem is needed, add parameter PLang.SafeFileSystem.PLangFileSystem fileSystem into ExecutePlangCode method, but ONLY if needed. Assembly for PLangFileSystem is already include, do not list it in Assemblies response.\r\n- When condition is checking if variable is null, the variable needs to be defined with ? in the parameter, e.g. ExecutePlangCode(dynamic? variable)\r\n- Replace the dot(.) in variables with the letter α e.g. %user.id% to userαid, %product.items[0].title% to productαitemsα0ααtitle, %list[1]% to listα1α\r\n- Keep underscore in variables if defined by user, e.g.  if %user_id%(string) is null => ExecutePlangCode(string? user_id)\r\n- Consider top security measures when generating code and validate code\r\n- append @ sign for variable that match reserved keywords in C#\r\n- C# code MUST only contain the contition code and return bool, an external system will call goals(methods) that user defines in his intent.\r\n## Rules ##\r\n\r\n## Response information ##\r\n- Namespace: MUST be PLangGeneratedCode\r\n- Name: is name of class, it should represent the intent of what the code is doing. \r\n- Name of class cannot be: CheckModuleTypeAndCallGoal, CheckModuleTypeAndCallGoal, CheckModuleTypeAndCallGoal\n\r\n- Goals should be prefixed with !, e.g. Call !ValidateUser, Call !ConditionFalse\r\n- GoalToCallOnTrue or GoalToCallOnFalse is optional, if not defined by user, set as null\r\n- Goals can be called with parameters using GoalToCallOnTrueParameters and GoalToCallOnFalseParameters, e.g. Call !UpdateProduct id=%id%, call !FalseCall status='false'. Then id is parameter for True, and status for False\r\n- Using: must include namespaces that are needed to compile code.\r\n- Assemblies: dll to reference to compile using Roslyn\r\n## Response information ##\r\n"
          },
          {
            "type": "text",
            "text": "Only write the raw c# code and json scheme, no summary, no extra text to explain, be concise.\r\n\tYOU MUST implement all code needed and valid c# code. \r\n\tYou must return ```csharp for the code implementation and ```json scheme: {\"GoalToCallOnTrue\": string = null,\n\"GoalToCallOnTrueParameters\"? : { String : Object, ... } = null,\n\"GoalToCallOnFalse\": string = null,\n\"GoalToCallOnFalseParameters\"? : { String : Object, ... } = null,\n\"Namespace\": string,\n\"Name\": string,\n\"Using\"?: string[] = null,\n\"Assemblies\"?: string[] = null}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## defined variables ##\r\nstep.ModuleType (type:object), \r\n## defined variables ##"
          },
          {
            "type": "text",
            "text": "## examples ##\r\n'if %isValid% is true then', this condition would return true if %isValid% is true. \r\n'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false.\r\n\r\n'if %data% (string) is null, call !CreateData, else !AppendData' => public static bool ExecutePlangCode(string? dataαuser_id) { return string.IsNullOrEmpty(userIdentity); }, GoalToCallOnTrue=CreateData, GoalToCallOnFalse=AppendData\r\n'if %exists% (bool) is null, call !CreateUser' => public static bool ExecutePlangCode(bool? dataαuser_id) { return exists == null;}, GoalToCallOnTrue=CreateUser, GoalToCallOnFalse=null\r\n'if %exists% (bool) is not null, call !CreateUser' => public static bool ExecutePlangCode(bool? dataαuser_id) { return exists != null;}, GoalToCallOnTrue=CreateUser, GoalToCallOnFalse=null\r\n'if %data.user_id% is empty, call !CreateUser' => public static bool ExecutePlangCode(dynamic? dataαuser_id) { return (dataαuser_id == null || (dataαuser_id is string str && string.IsNullOrEmpty(str))); } //if we dont know the type of %data.user_id%, , GoalToCallOnTrue=CreateUser, GoalToCallOnFalse=null\r\n'if !%isValid% then => public static bool ExecutePlangCode(bool? isValid) { return !isValid; }, GoalToCallOnTrue=null, GoalToCallOnFalse=null\r\n'if %first_name% is null, call !UpdateFirstName' => public static bool ExecutePlangCode(string? first_name) { return (first_name == null || string.IsNullOrEmpty(str)); }\r\n## examples ##\r\n"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "if %step.ModuleType%(to string) == \"PLang.Modules.CallGoalModule\" then call CheckCallingGoal"
          }
        ]
      }
    ],
    "model": "gpt-4-turbo",
    "caching": true,
    "RawResponse": null
  },
  "RunOnBuild": false
}