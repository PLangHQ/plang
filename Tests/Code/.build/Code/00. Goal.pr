{
  "GoalName": "Code",
  "Comment": null,
  "Text": "Code",
  "GoalSteps": [
    {
      "Text": "listen to %assertResult%, call Result",
      "Comment": null,
      "ModuleType": "PLang.Modules.LocalOrGlobalVariableModule",
      "Name": "listen_to_assertresult_and_call_result",
      "Description": "Set up a listener on the variable %assertResult% so that whenever its value changes, the system automatically calls the 'Result' step or goal to process or handle the updated value.",
      "PrFileName": "01. listen_to_assertresult_and_call_result.pr",
      "RelativePrPath": ".build\\Code\\01. listen_to_assertresult_and_call_result.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-11T18:07:39.8338062+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 0,
      "LineNumber": 2,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set, Get & Return local and static variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global\r\n. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nassertResult(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "listen to %assertResult%, call Result"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Monitor the variable %assertResult% for changes and trigger the 'Result' step or goal when a change is detected\",\n  \"Reason\": \"The step involves listening to a variable and then calling another step or goal. Listening to variable changes is handled by LocalOrGlobalVariableModule, and calling another goal or step is handled by CallGoalModule.\",\n  \"StepDescription\": \"Set up a listener on the variable %assertResult% so that whenever its value changes, the system automatically calls the 'Result' step or goal to process or handle the updated value.\",\n  \"Modules\": [\n    \"PLang.Modules.LocalOrGlobalVariableModule\",\n    \"PLang.Modules.CallGoalModule\"\n  ],\n  \"StepName\": \"listen_to_assertresult_and_call_result\",\n  \"Confidence\": \"High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "7e8026d57918e197e37ae4ecdd0f0fc31302ee431826d67d59299deb0816eb33",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Code.goal",
      "UserIntent": null
    },
    {
      "Text": "set %name%(string) as 'Toby Flenderson'",
      "Comment": null,
      "ModuleType": "PLang.Modules.LocalOrGlobalVariableModule",
      "Name": "set_name_variable",
      "Description": "Set the variable named %name% to the string value 'Toby Flenderson', explicitly indicating that the variable is of type string",
      "PrFileName": "02. set_name_variable.pr",
      "RelativePrPath": ".build\\Code\\02. set_name_variable.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-11T18:07:48.56241+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 1,
      "LineNumber": 3,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set, Get & Return local and static variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global\r\n. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nname(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "set %name%(string) as 'Toby Flenderson'"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Assign the string value 'Toby Flenderson' to the variable %name% with a specified type of string\",\n  \"Reason\": \"The step is setting a variable with a value and type, which matches the functionality of the LocalOrGlobalVariableModule that handles setting and getting variables\",\n  \"StepDescription\": \"Set the variable named %name% to the string value 'Toby Flenderson', explicitly indicating that the variable is of type string\",\n  \"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n  \"StepName\": \"set_name_variable\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "28a5b4169fea0a3aea8fdf5865c298d78401894bb942aa12afc7ac9355614ad0",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Code.goal",
      "UserIntent": null
    },
    {
      "Text": "[code] get first name of %name%, write to %firstName%",
      "Comment": null,
      "ModuleType": "PLang.Modules.CodeModule",
      "Name": "extract_first_name_from_name",
      "Description": "Using code execution capabilities, parse the value of the variable %name% to extract the first name portion and assign this extracted value to the variable %firstName%.",
      "PrFileName": "03. extract_first_name_from_name.pr",
      "RelativePrPath": ".build\\Code\\03. extract_first_name_from_name.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-11T18:07:57.350963+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 2,
      "LineNumber": 4,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "csharp",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\nPLang.Modules.CodeModule\r\n<modules>\r\n\r\n<variables>\r\nname(System.Nullable),firstName(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[code] get first name of %name%, write to %firstName%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Extract the first name part from a full name string stored in the variable %name% and store it in the variable %firstName%\",\n  \"Reason\": \"The step involves string manipulation or code execution to parse the first name from a full name, which is best handled by the CodeModule that supports code operations and transformations.\",\n  \"StepDescription\": \"Using code execution capabilities, parse the value of the variable %name% to extract the first name portion and assign this extracted value to the variable %firstName%.\",\n  \"Modules\": [\"PLang.Modules.CodeModule\"],\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null,\n  \"StepName\": \"extract_first_name_from_name\"\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "fbdae5cc7216c00bddcedc058c84fb2453c4c7bdf48b930224ff2ca9fde9c1db",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Code.goal",
      "UserIntent": null
    },
    {
      "Text": "assert that %firstName% is \"Toby\"",
      "Comment": null,
      "ModuleType": "PLang.Modules.AssertModule",
      "Name": "assert_firstname_is_toby",
      "Description": "Check if the variable %firstName% is equal to the string 'Toby'. If it is not, the assertion should fail, indicating the value does not match the expected one.",
      "PrFileName": "04. assert_firstname_is_toby.pr",
      "RelativePrPath": ".build\\Code\\04. assert_firstname_is_toby.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-11T18:08:02.704146+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 3,
      "LineNumber": 5,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set, Get & Return local and static variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global\r\n. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nfirstName(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "assert that %firstName% is \"Toby\""
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Verify that the variable %firstName% has the exact value 'Toby'\",\n  \"Reason\": \"The step is an assertion to check a variable's value, which matches the AssertModule's purpose of asserting that an object or variable meets an expected condition.\",\n  \"StepDescription\": \"Check if the variable %firstName% is equal to the string 'Toby'. If it is not, the assertion should fail, indicating the value does not match the expected one.\",\n  \"Modules\": [\"PLang.Modules.AssertModule\"],\n  \"StepName\": \"assert_firstname_is_toby\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "0c07c58fe1c2e1298957f3893c344cb3d40dd2ceddfaa6831057f408125d693b",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Code.goal",
      "UserIntent": null
    },
    {
      "Text": "[code] get last name of %name%, write to %lastName%",
      "Comment": null,
      "ModuleType": "PLang.Modules.CodeModule",
      "Name": "extract_last_name_from_name",
      "Description": "Use code logic to parse the value in the variable %name%, extract the last name portion, and assign that extracted value to the variable %lastName%.",
      "PrFileName": "05. extract_last_name_from_name.pr",
      "RelativePrPath": ".build\\Code\\05. extract_last_name_from_name.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-11T18:08:11.5312218+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 4,
      "LineNumber": 6,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "csharp",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\nPLang.Modules.CodeModule\r\n<modules>\r\n\r\n<variables>\r\nname(System.Nullable),lastName(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[code] get last name of %name%, write to %lastName%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Extract the last name part from the full name stored in the variable %name% and store it in the variable %lastName%\",\n  \"Reason\": \"The step involves code execution to manipulate string data (extract last name from a name), which fits the capabilities of the CodeModule that executes code logic.\",\n  \"StepDescription\": \"Use code logic to parse the value in the variable %name%, extract the last name portion, and assign that extracted value to the variable %lastName%.\",\n  \"Modules\": [\"PLang.Modules.CodeModule\"],\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null,\n  \"StepName\": \"extract_last_name_from_name\"\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "ffad41ad1ea2ff50141aa82ecda1651d17e6ad22ec0b318c62c63660b18fb18a",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Code.goal",
      "UserIntent": null
    },
    {
      "Text": "write out %lastName%",
      "Comment": null,
      "ModuleType": "PLang.Modules.OutputModule",
      "Name": "write_out_lastname",
      "Description": "Take the value contained in the variable %lastName% and display or output it to the user or designated output channel",
      "PrFileName": "06. write_out_lastname.pr",
      "RelativePrPath": ".build\\Code\\06. write_out_lastname.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-11T18:08:15.3177695+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 5,
      "LineNumber": 7,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set, Get & Return local and static variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global\r\n. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nlastName(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "write out %lastName%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Output the value stored in the variable %lastName% to the user or output stream\",\n  \"Reason\": \"The step explicitly instructs to write out a variable's value, which matches the OutputModule's capability to write to the output stream or user interface\",\n  \"StepDescription\": \"Take the value contained in the variable %lastName% and display or output it to the user or designated output channel\",\n  \"Modules\": [\"PLang.Modules.OutputModule\"],\n  \"StepName\": \"write_out_lastname\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "c1ba124874a74ac964a352d82a884f22e36171a5d48518659a401524cdbc38df",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Code.goal",
      "UserIntent": null
    },
    {
      "Text": "[code] uppercase %name%, write to %uppercaseName%",
      "Comment": null,
      "ModuleType": "PLang.Modules.CodeModule",
      "Name": "uppercase_name_variable",
      "Description": "Take the input variable %name%, convert its string content to uppercase letters, and save the transformed string into the variable %uppercaseName%.",
      "PrFileName": "07. uppercase_name_variable.pr",
      "RelativePrPath": ".build\\Code\\07. uppercase_name_variable.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-11T18:08:21.7935391+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 6,
      "LineNumber": 8,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "csharp",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\nPLang.Modules.CodeModule\r\n<modules>\r\n\r\n<variables>\r\nname(System.Nullable),uppercaseName(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[code] uppercase %name%, write to %uppercaseName%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Convert the value of the variable %name% to uppercase and store the result in %uppercaseName%\",\n  \"Reason\": \"The step explicitly uses the [code] tag and performs a string manipulation operation (uppercase), which is typically handled by the CodeModule that supports code execution and transformations.\",\n  \"StepDescription\": \"Take the input variable %name%, convert its string content to uppercase letters, and save the transformed string into the variable %uppercaseName%.\",\n  \"Modules\": [\"PLang.Modules.CodeModule\"],\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null,\n  \"StepName\": \"uppercase_name_variable\"\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "615a653097b55be966aee0bd2da027a5b7ea96a3c711eed4bb14983667b37dde",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Code.goal",
      "UserIntent": null
    },
    {
      "Text": "write out %uppercaseName%",
      "Comment": null,
      "ModuleType": "PLang.Modules.OutputModule",
      "Name": "write_out_uppercase_name",
      "Description": "Take the content of the variable named %uppercaseName% and write it out to the output stream, typically to display it to the user or log it",
      "PrFileName": "08. write_out_uppercase_name.pr",
      "RelativePrPath": ".build\\Code\\08. write_out_uppercase_name.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-11T18:08:29.0419752+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 7,
      "LineNumber": 9,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set, Get & Return local and static variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global\r\n. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nuppercaseName(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "write out %uppercaseName%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Output the value stored in the variable %uppercaseName% to the user or output stream\",\n  \"Reason\": \"The step explicitly instructs to 'write out' a variable, which matches the OutputModule's capability to write to the output stream or user interface\",\n  \"StepDescription\": \"Take the content of the variable named %uppercaseName% and write it out to the output stream, typically to display it to the user or log it\",\n  \"Modules\": [\"PLang.Modules.OutputModule\"],\n  \"StepName\": \"write_out_uppercase_name\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "f73d298960504b8c68a88ec0f7abdb65ce6fb1ab5bb9967dca955ee06dc651df",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Code.goal",
      "UserIntent": null
    },
    {
      "Text": "[code] create list string with 10 rows of random list data, write to %list%",
      "Comment": null,
      "ModuleType": "PLang.Modules.CodeModule",
      "Name": "create_random_string_list",
      "Description": "Use code execution capabilities to create a list of strings containing 10 rows of random data, then assign this list to the variable %list% for further use",
      "PrFileName": "09. create_random_string_list.pr",
      "RelativePrPath": ".build\\Code\\09. create_random_string_list.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-11T18:08:40.040813+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 8,
      "LineNumber": 10,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "csharp",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\nPLang.Modules.CodeModule\r\n<modules>\r\n\r\n<variables>\r\nlist(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[code] create list string with 10 rows of random list data, write to %list%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Generate a list of 10 random string entries and store it in a variable\",\n  \"Reason\": \"The step explicitly uses the [code] tag and involves creating and writing a list of random data, which fits the CodeModule's capability to execute code and generate data structures\",\n  \"StepDescription\": \"Use code execution capabilities to create a list of strings containing 10 rows of random data, then assign this list to the variable %list% for further use\",\n  \"Modules\": [\"PLang.Modules.CodeModule\"],\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null,\n  \"StepName\": \"create_random_string_list\"\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "a1cf253b6398b866a2f512322a162bab93638823df3b56236d81da585a91421b",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Code.goal",
      "UserIntent": null
    },
    {
      "Text": "write out %list%",
      "Comment": null,
      "ModuleType": "PLang.Modules.OutputModule",
      "Name": "write_out_list",
      "Description": "Take the variable named %list% and write its contents to the output stream, typically displaying it to the user or logging it as output",
      "PrFileName": "10. write_out_list.pr",
      "RelativePrPath": ".build\\Code\\10. write_out_list.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-11T18:08:43.381343+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 9,
      "LineNumber": 11,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set, Get & Return local and static variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global\r\n. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nlist(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "write out %list%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Output the contents of the variable %list% to the user or output stream\",\n  \"Reason\": \"The step explicitly instructs to 'write out' a variable, which matches the OutputModule's capability to write to the output stream or user interface\",\n  \"StepDescription\": \"Take the variable named %list% and write its contents to the output stream, typically displaying it to the user or logging it as output\",\n  \"Modules\": [\"PLang.Modules.OutputModule\"],\n  \"StepName\": \"write_out_list\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "ea74b768d662e6324e5bec626488480ec9e54f293865f25cde1e31578ad25822",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Code.goal",
      "UserIntent": null
    },
    {
      "Text": "set %fileNameWithExtension% as 'video.mp4'",
      "Comment": null,
      "ModuleType": "PLang.Modules.LocalOrGlobalVariableModule",
      "Name": "set_file_name_with_extension",
      "Description": "Set the variable named fileNameWithExtension to the string value 'video.mp4', so that this variable can be used later in the program with this assigned filename.",
      "PrFileName": "11. set_file_name_with_extension.pr",
      "RelativePrPath": ".build\\Code\\11. set_file_name_with_extension.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-11T18:08:47.1945729+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 10,
      "LineNumber": 12,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set, Get & Return local and static variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global\r\n. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nfileNameWithExtension(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "set %fileNameWithExtension% as 'video.mp4'"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Assign the string 'video.mp4' to the variable %fileNameWithExtension%\",\n  \"Reason\": \"The step is setting a variable's value, which is handled by the LocalOrGlobalVariableModule that manages setting and getting variables.\",\n  \"StepDescription\": \"Set the variable named fileNameWithExtension to the string value 'video.mp4', so that this variable can be used later in the program with this assigned filename.\",\n  \"Modules\": [\"PLang.Modules.LocalOrGlobalVariableModule\"],\n  \"StepName\": \"set_file_name_with_extension\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "8cdba2acdc2c87bfd96e4ea6a6760638c4ae24daa82aeb91d2a88cf3b7409cb9",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Code.goal",
      "UserIntent": null
    },
    {
      "Text": "[code] remove file extension from %fileNameWithExtension%, write to %fileName%",
      "Comment": null,
      "ModuleType": "PLang.Modules.CodeModule",
      "Name": "remove_file_extension_from_filename",
      "Description": "Take the variable %fileNameWithExtension% which contains a file name including its extension, remove the extension part (e.g., '.txt', '.jpg'), and store the resulting file name without extension into the variable %fileName%",
      "PrFileName": "12. remove_file_extension_from_filename.pr",
      "RelativePrPath": ".build\\Code\\12. remove_file_extension_from_filename.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": "Very High",
      "Inconsistency": null,
      "Generated": "2025-06-11T18:12:36.8692295+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 11,
      "LineNumber": 13,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "csharp",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\nPLang.Modules.CodeModule\r\n<modules>\r\n\r\n<variables>\r\nfileNameWithExtension(System.Nullable),fileName(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[code] remove file extension from %fileNameWithExtension%, write to %fileName%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Extract the file name without its extension from a given file name string that includes the extension\",\n  \"Reason\": \"The step involves string manipulation to remove the file extension, which is a typical use case for the CodeModule that handles code execution and transformations\",\n  \"StepDescription\": \"Take the variable %fileNameWithExtension% which contains a file name including its extension, remove the extension part (e.g., '.txt', '.jpg'), and store the resulting file name without extension into the variable %fileName%\",\n  \"Modules\": [\"PLang.Modules.CodeModule\"],\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null,\n  \"StepName\": \"remove_file_extension_from_filename\"\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "01b5b620a6a5eaa0792f4203603412c5f9cc9159c84ac06459b720228ac8bc46",
      "BuilderVersion": "1.0.0.0",
      "RelativeGoalPath": "\\Code.goal",
      "UserIntent": "Extract the file name without its extension from a given file name string that includes the extension"
    },
    {
      "Text": "write out %fileName%",
      "Comment": null,
      "ModuleType": "PLang.Modules.OutputModule",
      "Name": "write_out_file_name",
      "Description": "Take the value contained in the variable %fileName% and write it out to the output stream, typically to display it to the user or log it",
      "PrFileName": "13. write_out_file_name.pr",
      "RelativePrPath": ".build\\Code\\13. write_out_file_name.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": "Very High",
      "Inconsistency": null,
      "Generated": "2025-06-11T18:12:40.6577469+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 12,
      "LineNumber": 14,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set, Get & Return local and static variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global\r\n. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nfileName(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "write out %fileName%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Output the value stored in the variable %fileName% to the user or output stream\",\n  \"Reason\": \"The step explicitly instructs to write out a variable's content, which matches the OutputModule's capability to write to the output stream or user interface\",\n  \"StepDescription\": \"Take the value contained in the variable %fileName% and write it out to the output stream, typically to display it to the user or log it\",\n  \"Modules\": [\"PLang.Modules.OutputModule\"],\n  \"StepName\": \"write_out_file_name\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "2556d9d8479b28eeac37d0e2b216ef38320122e22a51c9870070b97ec11298d7",
      "BuilderVersion": "1.0.0.0",
      "RelativeGoalPath": "\\Code.goal",
      "UserIntent": "Output the value stored in the variable %fileName% to the user or output stream"
    }
  ],
  "SubGoals": [
    "Result"
  ],
  "Description": "This Goal listens for an assertion result and processes a name by extracting its first and last names, converting the name to uppercase, creating a list of random data, and manipulating a file name to remove its extension. The goal asserts that the first name matches 'Toby' and outputs various results including the last name, uppercase name, and a list of random data.",
  "Visibility": 1,
  "GoalFileName": "Code.goal",
  "RelativeGoalPath": "\\Code.goal",
  "RelativeGoalFolderPath": "\\",
  "RelativePrPath": ".build\\Code\\00. Goal.pr",
  "RelativePrFolderPath": ".build\\Code",
  "BuilderVersion": "1.0.0.0",
  "GoalInfo": null,
  "Injections": [],
  "Signature": null,
  "FileHash": "3078f840ead3328b51010d4efaccd7dcadeea989b41ba051ca0a2cbe71d38999",
  "Hash": "14403a1c137d9f4635551ba12e7ca404c3305ca5243bbea90a836c48f9a3f3f6",
  "IncomingVariablesRequired": {
    "assertResult": "The result of the assertion to be listened to.",
    "name": "The full name from which the first and last names will be extracted.",
    "fileNameWithExtension": "The file name including its extension that needs to be processed."
  },
  "DataSourceName": null,
  "IsSetup": false
}