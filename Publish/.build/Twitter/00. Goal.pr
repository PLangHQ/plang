{
  "GoalName": "Twitter",
  "Comment": null,
  "Text": "Twitter",
  "GoalSteps": [
    {
      "Text": "navigate to https://x.com/home, hide being bot, use user profile",
      "Comment": null,
      "ModuleType": "PLang.Modules.WebCrawlerModule",
      "Name": "navigate_to_url_with_bot_hiding_and_user_profile",
      "Description": "Launch a browser instance and navigate to the URL https://x.com/home. Configure the browser to mask automation or bot signatures to avoid detection and load the session using a specified user profile to simulate a real user environment.",
      "PrFileName": "01. navigate_to_url_with_bot_hiding_and_user_profile.pr",
      "RelativePrPath": ".build\\Twitter\\01. navigate_to_url_with_bot_hiding_and_user_profile.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": "Very High",
      "Inconsistency": null,
      "Generated": "2025-06-24T08:47:49.4006686+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 0,
      "LineNumber": 2,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "navigate to https://x.com/home, hide being bot, use user profile"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Open a web browser to the specified URL and configure it to appear as a normal user by hiding bot characteristics and using a user profile\",\n  \"Reason\": \"The step involves browsing a website, interacting with browser settings to hide bot detection and use a user profile, which aligns with browser automation and web interaction capabilities\",\n  \"StepDescription\": \"Launch a browser instance and navigate to the URL https://x.com/home. Configure the browser to mask automation or bot signatures to avoid detection and load the session using a specified user profile to simulate a real user environment.\",\n  \"Modules\": [\"PLang.Modules.WebCrawlerModule\"],\n  \"StepName\": \"navigate_to_url_with_bot_hiding_and_user_profile\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "f9b111058f18add2a05dc72450f572dc46f400e1f98542f3617fd55d81564298",
      "BuilderVersion": "1.0.0.0",
      "RelativeGoalPath": "\\Twitter.goal",
      "UserIntent": "Open a web browser to the specified URL and configure it to appear as a normal user by hiding bot characteristics and using a user profile"
    },
    {
      "Text": "wait 3 sec",
      "Comment": null,
      "ModuleType": "PLang.Modules.ScheduleModule",
      "Name": "wait_3_seconds",
      "Description": "The program should halt or sleep for a duration of 3 seconds before continuing with the next steps",
      "PrFileName": "02. wait_3_seconds.pr",
      "RelativePrPath": ".build\\Twitter\\02. wait_3_seconds.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-24T08:38:03.5746433+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 1,
      "LineNumber": 3,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "wait 3 sec"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Pause the execution of the program for 3 seconds\",\n  \"Reason\": \"The step requests a time delay or wait, which is typically handled by scheduling or timing modules\",\n  \"StepDescription\": \"The program should halt or sleep for a duration of 3 seconds before continuing with the next steps\",\n  \"Modules\": [\"PLang.Modules.ScheduleModule\"],\n  \"StepName\": \"wait_3_seconds\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "e5cce0ce2c9485f1bf50a72452e837f4aa87dcaaa8e21de3236ccc611362bf90",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Twitter.goal",
      "UserIntent": null
    },
    {
      "Text": "[webc] write %post% to div[class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"] > span, timeout 3 sec, dont clear",
      "Comment": null,
      "ModuleType": "PLang.Modules.WebCrawlerModule",
      "Name": "write_post_to_html_element",
      "Description": "Using the WebCrawlerModule, locate the HTML element matching the CSS selector div[class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"] > span on the current web page, then write the content stored in the variable %post% into that element. The operation should wait up to 3 seconds for the element to be available and should not clear any existing content before writing.",
      "PrFileName": "03. write_post_to_html_element.pr",
      "RelativePrPath": ".build\\Twitter\\03. write_post_to_html_element.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-24T08:38:16.4992116+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 2,
      "LineNumber": 4,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\nPLang.Modules.WebCrawlerModule\r\n<modules>\r\n\r\n<variables>\r\npost(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[webc] write %post% to div[class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\"] > span, timeout 3 sec, dont clear"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Write the content of the variable %post% into a specific HTML element on a web page using a CSS selector, with a timeout and without clearing existing content\",\n  \"Reason\": \"The step involves writing content to a web page element identified by a CSS selector, which is a web crawling/browser automation task. The WebCrawlerModule is designed to handle web navigation, interaction, and manipulation including writing to elements.\",\n  \"StepDescription\": \"Using the WebCrawlerModule, locate the HTML element matching the CSS selector div[class=\\\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\\\"] > span on the current web page, then write the content stored in the variable %post% into that element. The operation should wait up to 3 seconds for the element to be available and should not clear any existing content before writing.\",\n  \"Modules\": [\"PLang.Modules.WebCrawlerModule\"],\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null,\n  \"StepName\": \"write_post_to_html_element\"\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "94a7f1f5908dde25338d24aae0fe6babd6c2d1c66f702c97759f95cbdc543822",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Twitter.goal",
      "UserIntent": null
    },
    {
      "Text": "click on button main[role=main] button[role=\"button\"][data-testid=\"tweetButtonInline\"]",
      "Comment": null,
      "ModuleType": "PLang.Modules.WebCrawlerModule",
      "Name": "click_tweet_button_inline",
      "Description": "Locate the button element that is a descendant of the main element with role 'main' and has the attributes role='button' and data-testid='tweetButtonInline', then perform a click action on that button within a browser instance.",
      "PrFileName": "04. click_tweet_button_inline.pr",
      "RelativePrPath": ".build\\Twitter\\04. click_tweet_button_inline.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-24T08:38:24.5047914+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 3,
      "LineNumber": 5,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "click on button main[role=main] button[role=\"button\"][data-testid=\"tweetButtonInline\"]"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"The user wants to simulate a click action on a specific button element within a web page's DOM.\",\n  \"Reason\": \"The step involves interacting with a web page element by clicking a button identified by CSS selectors, which is a typical browser automation task handled by the WebCrawlerModule.\",\n  \"StepDescription\": \"Locate the button element that is a descendant of the main element with role 'main' and has the attributes role='button' and data-testid='tweetButtonInline', then perform a click action on that button within a browser instance.\",\n  \"Modules\": [\"PLang.Modules.WebCrawlerModule\"],\n  \"StepName\": \"click_tweet_button_inline\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "7e2b646a2dcf163a646a28632ccb469f65f019ae9752bba6d2e48a2d4b877bd9",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Twitter.goal",
      "UserIntent": null
    }
  ],
  "SubGoals": [],
  "Description": "This Goal automates the process of posting a tweet on Twitter. It navigates to the Twitter homepage, waits for a brief moment, writes a specified post into the tweet input area, and then clicks the tweet button to submit the post.",
  "Visibility": 1,
  "GoalFileName": "Twitter.goal",
  "RelativeGoalPath": "\\Twitter.goal",
  "RelativeGoalFolderPath": "\\",
  "RelativePrPath": ".build\\Twitter\\00. Goal.pr",
  "RelativePrFolderPath": ".build\\Twitter",
  "BuilderVersion": "1.0.0.0",
  "GoalInfo": null,
  "Injections": [],
  "Signature": null,
  "FileHash": "d549f74bd0346df6d2fe7c39146fc9a0c340d0b58a0a3c53f137bd9a62529df0",
  "Hash": "72c11a888a3cfe80f123857f752d4175e13aad74901f6f129992ec4510f0ea1f",
  "IncomingVariablesRequired": {
    "post": "The content of the tweet that will be posted."
  },
  "DataSourceName": null,
  "IsSetup": false
}