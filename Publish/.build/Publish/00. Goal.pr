{
  "GoalName": "Publish",
  "Comment": null,
  "Text": "Publish",
  "GoalSteps": [
    {
      "Text": "write out \"Starting at %Now%\"",
      "Comment": null,
      "ModuleType": "PLang.Modules.OutputModule",
      "Name": "write_out_starting_at_now",
      "Description": "Write out the string 'Starting at ' followed by the value of the variable %Now%, which contains the current date and time, to the output stream for the user to see.",
      "PrFileName": "01. write_out_starting_at_now.pr",
      "RelativePrPath": ".build\\Publish\\01. write_out_starting_at_now.pr",
      "InstructionHash": null,
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-24T08:33:50.6090006+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 0,
      "LineNumber": 2,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nNow(System.DateTime)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "write out \"Starting at %Now%\""
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Display a message to the user that includes the current date and time stored in the variable %Now%\",\n  \"Reason\": \"The step involves outputting a message to the user, which matches the OutputModule's capability to write to the output stream and ask or display information to the user.\",\n  \"StepDescription\": \"Write out the string 'Starting at ' followed by the value of the variable %Now%, which contains the current date and time, to the output stream for the user to see.\",\n  \"Modules\": [\"PLang.Modules.OutputModule\"],\n  \"StepName\": \"write_out_starting_at_now\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "2ddb74d70e588ea3ce34fd543729582751712e17c95ee8234b90dd8b1de10fe1",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Publish.goal",
      "UserIntent": null
    },
    {
      "Text": "read \"version.txt\", into %version%",
      "Comment": null,
      "ModuleType": "PLang.Modules.FileModule",
      "Name": "read_version_txt_into_version_variable",
      "Description": "Open the file 'version.txt', read its entire content as text, and assign that content to the variable named %version% for further use in the program.",
      "PrFileName": "02. read_version_txt_into_version_variable.pr",
      "RelativePrPath": ".build\\Publish\\02. read_version_txt_into_version_variable.pr",
      "InstructionHash": null,
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-24T08:33:50.7173677+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 1,
      "LineNumber": 3,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nversion(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "read \"version.txt\", into %version%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Read the contents of the file named 'version.txt' and store it into the variable %version%\",\n  \"Reason\": \"The step involves reading a file and storing its content into a variable, which is a file operation. The FileModule description explicitly mentions handling file system access and reading text files.\",\n  \"StepDescription\": \"Open the file 'version.txt', read its entire content as text, and assign that content to the variable named %version% for further use in the program.\",\n  \"Modules\": [\"PLang.Modules.FileModule\"],\n  \"StepName\": \"read_version_txt_into_version_variable\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "1bd9378d4bb4333ce7fa1b94bf6a5e7281d8f1833a29f520e007d36a437e1926",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Publish.goal",
      "UserIntent": null
    },
    {
      "Text": "write out 'Building project - Version:%version%'",
      "Comment": null,
      "ModuleType": "PLang.Modules.OutputModule",
      "Name": "write_out_building_project_version",
      "Description": "Output the string 'Building project - Version:' followed by the value of the variable %version% to the user or designated output stream",
      "PrFileName": "03. write_out_building_project_version.pr",
      "RelativePrPath": ".build\\Publish\\03. write_out_building_project_version.pr",
      "InstructionHash": null,
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-24T08:33:58.9295958+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 2,
      "LineNumber": 4,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nversion(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "write out 'Building project - Version:%version%'"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Display a message to the user or output stream indicating the current project build version\",\n  \"Reason\": \"The step involves writing out a formatted string to an output, which matches the capabilities of the OutputModule that handles writing to the output stream and user interaction\",\n  \"StepDescription\": \"Output the string 'Building project - Version:' followed by the value of the variable %version% to the user or designated output stream\",\n  \"Modules\": [\"PLang.Modules.OutputModule\"],\n  \"StepName\": \"write_out_building_project_version\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "1a653bb6fb3a8bc5937d19cba89ab8c82ef84a08600bfeb9f0870beb0e62bf5b",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Publish.goal",
      "UserIntent": null
    },
    {
      "Text": "listen to %buildVar%, call ConsoleOutPut",
      "Comment": null,
      "ModuleType": "PLang.Modules.VariableModule",
      "Name": "listen_to_buildvar_and_call_consoleoutput",
      "Description": "Set up a listener on the variable %buildVar% to detect changes or events, and upon such events, send the data or notification to the console output using a console output method.",
      "PrFileName": "04. listen_to_buildvar_and_call_consoleoutput.pr",
      "RelativePrPath": ".build\\Publish\\04. listen_to_buildvar_and_call_consoleoutput.pr",
      "InstructionHash": null,
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-24T08:34:10.6431106+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 3,
      "LineNumber": 5,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nbuildVar(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "listen to %buildVar%, call ConsoleOutPut"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Listen for changes or events on the variable %buildVar% and output the received data to the console\",\n  \"Reason\": \"The step involves listening to a variable and then calling a console output action. VariableModule handles variable events such as onChange or onCreate, and TerminalModule provides console/terminal output capabilities.\",\n  \"StepDescription\": \"Set up a listener on the variable %buildVar% to detect changes or events, and upon such events, send the data or notification to the console output using a console output method.\",\n  \"Modules\": [\n    \"PLang.Modules.VariableModule\",\n    \"PLang.Modules.TerminalModule\"\n  ],\n  \"StepName\": \"listen_to_buildvar_and_call_consoleoutput\",\n  \"Confidence\": \"High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "b8e43a39cfe66282cbe57deaef0320edc06139af493259a9941da2f09cd5ea8c",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Publish.goal",
      "UserIntent": null
    },
    {
      "Text": "dotnet build Plang.sln -c Release -p:Version=%version%,  working dir ../\n    stream data: %buildVar%",
      "Comment": null,
      "ModuleType": "PLang.Modules.TerminalModule",
      "Name": "dotnet_build_plang_solution_release_with_version",
      "Description": "Execute the command 'dotnet build Plang.sln' with the Release configuration and a version property set from the %version% variable, running in the ../ directory. The output stream from this build process is captured and stored in the %buildVar% variable for further use or inspection.",
      "PrFileName": "05. dotnet_build_plang_solution_release_with_version.pr",
      "RelativePrPath": ".build\\Publish\\05. dotnet_build_plang_solution_release_with_version.pr",
      "InstructionHash": null,
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-24T08:34:19.874651+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 4,
      "LineNumber": 6,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nversion(System.Nullable),buildVar(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "dotnet build Plang.sln -c Release -p:Version=%version%,  working dir ../\n    stream data: %buildVar%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Build the .NET solution Plang.sln in Release configuration with a specified version and capture the build output stream\",\n  \"Reason\": \"The step involves running an external build command (dotnet build) with parameters and capturing its output stream, which aligns with the TerminalModule's capability to run external applications and handle their output\",\n  \"StepDescription\": \"Execute the command 'dotnet build Plang.sln' with the Release configuration and a version property set from the %version% variable, running in the ../ directory. The output stream from this build process is captured and stored in the %buildVar% variable for further use or inspection.\",\n  \"Modules\": [\"PLang.Modules.TerminalModule\"],\n  \"StepName\": \"dotnet_build_plang_solution_release_with_version\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "b76559f3e33f8276f3946efeae65b6668a52c610c92d9a8111927162e49beb07",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Publish.goal",
      "UserIntent": null
    },
    {
      "Text": "get file paths of .zip in ./, write to %zipFiles%",
      "Comment": null,
      "ModuleType": "PLang.Modules.FileModule",
      "Name": "get_zip_file_paths_in_current_directory",
      "Description": "Search the current directory (./) for all files with the .zip extension and collect their file paths. Store the resulting list of file paths into the variable named %zipFiles% for further use.",
      "PrFileName": "06. get_zip_file_paths_in_current_directory.pr",
      "RelativePrPath": ".build\\Publish\\06. get_zip_file_paths_in_current_directory.pr",
      "InstructionHash": null,
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-24T08:34:28.2710306+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 5,
      "LineNumber": 8,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nzipFiles(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "get file paths of .zip in ./, write to %zipFiles%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Retrieve the file paths of all .zip files in the current directory and store them in the variable %zipFiles%\",\n  \"Reason\": \"The step involves accessing the file system to find files matching a pattern (.zip) in a directory, which is a file system operation. The FileModule handles file system access and reading file information.\",\n  \"StepDescription\": \"Search the current directory (./) for all files with the .zip extension and collect their file paths. Store the resulting list of file paths into the variable named %zipFiles% for further use.\",\n  \"Modules\": [\"PLang.Modules.FileModule\"],\n  \"StepName\": \"get_zip_file_paths_in_current_directory\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "4f4b0bea2d123aa74c8b56bb1dc2f702eb05f696a3d3f5c0cb28367e7c425106",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Publish.goal",
      "UserIntent": null
    },
    {
      "Text": "foreach %zipFiles% call !RemoveFile",
      "Comment": null,
      "ModuleType": "PLang.Modules.LoopModule",
      "Name": "foreach_zipfiles_call_removefile",
      "Description": "For every file path or file name stored in the variable %zipFiles%, execute the RemoveFile goal to remove that file. This involves looping through the list and invoking the external goal for each element.",
      "PrFileName": "07. foreach_zipfiles_call_removefile.pr",
      "RelativePrPath": ".build\\Publish\\07. foreach_zipfiles_call_removefile.pr",
      "InstructionHash": null,
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-07-17T22:27:56.098116+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 6,
      "LineNumber": 9,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. Set the (default) layout for the UI. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render template html, files, elements using template engine. plang examples: \r\n```\r\n- render file.html\r\n- render %content% to #main / will render the variable into the element #main\r\n- render products.html, %products%, write to %result%\r\n```. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Solves math expressions. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.EmailModule\" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists. Prefer predefined methods over SimpleCondition and CompoundCondition. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nzipFiles(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "foreach %zipFiles% call !RemoveFile"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Iterate over each file in the zipFiles list and call the RemoveFile goal to delete each file\",\n  \"Reason\": \"The step uses a foreach loop to iterate over a list variable and calls another goal for each item. LoopModule handles loops like foreach, and CallGoalModule handles calling other goals.\",\n  \"StepDescription\": \"For every file path or file name stored in the variable %zipFiles%, execute the RemoveFile goal to remove that file. This involves looping through the list and invoking the external goal for each element.\",\n  \"Modules\": [\n    \"PLang.Modules.LoopModule\",\n    \"PLang.Modules.CallGoalModule\"\n  ],\n  \"StepName\": \"foreach_zipfiles_call_removefile\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "cbaaf1afa2d7b0f8f647c73a2c5696b325fd22586556b30b3d04da3168e86a3b",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Publish.goal",
      "UserIntent": null
    },
    {
      "Text": "create string list for 'linux-x64', 'win-x64', 'linux-arm64', 'osx-x64', 'osx-arm64', write to %platforms%",
      "Comment": null,
      "ModuleType": "PLang.Modules.VariableModule",
      "Name": "create_platforms_string_list",
      "Description": "Create a list containing the strings 'linux-x64', 'win-x64', 'linux-arm64', 'osx-x64', and 'osx-arm64', then store this list in the variable %platforms% for later use",
      "PrFileName": "08. create_platforms_string_list.pr",
      "RelativePrPath": ".build\\Publish\\08. create_platforms_string_list.pr",
      "InstructionHash": null,
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": "Very High",
      "Inconsistency": null,
      "Generated": "2025-07-17T22:34:25.6029944+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 7,
      "LineNumber": 10,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. Set the (default) layout for the UI. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render template html, files, elements using template engine. plang examples: \r\n```\r\n- render file.html\r\n- render %content% to #main / will render the variable into the element #main\r\n- render products.html, %products%, write to %result%\r\n```. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Solves math expressions. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.EmailModule\" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists. Prefer predefined methods over SimpleCondition and CompoundCondition. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nplatforms(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "create string list for 'linux-x64', 'win-x64', 'linux-arm64', 'osx-x64', 'osx-arm64', write to %platforms%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Create a list of platform strings and store it in a variable\",\n  \"Reason\": \"The step involves creating a list of strings and assigning it to a variable, which is a variable operation handled by the VariableModule\",\n  \"StepDescription\": \"Create a list containing the strings 'linux-x64', 'win-x64', 'linux-arm64', 'osx-x64', and 'osx-arm64', then store this list in the variable %platforms% for later use\",\n  \"Modules\": [\"PLang.Modules.VariableModule\"],\n  \"StepName\": \"create_platforms_string_list\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "8c0b862f1f104fad783e8d27ee43041ca6bb49b753b6581f5585fa43c6941ed5",
      "BuilderVersion": "1.0.0.0",
      "RelativeGoalPath": "\\Publish.goal",
      "UserIntent": "Create a list of platform strings and store it in a variable"
    },
    {
      "Text": "foreach %platforms%, call BuildPlatform item=%platform%",
      "Comment": null,
      "ModuleType": "PLang.Modules.LoopModule",
      "Name": "foreach_platform_call_buildplatform",
      "Description": "For each element in the %platforms% list, invoke the BuildPlatform goal, passing the current element as the %platform% parameter to that goal. This enables processing or building for each platform individually.",
      "PrFileName": "09. foreach_platform_call_buildplatform.pr",
      "RelativePrPath": ".build\\Publish\\09. foreach_platform_call_buildplatform.pr",
      "InstructionHash": null,
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Confidence": null,
      "Inconsistency": null,
      "Generated": "2025-06-24T08:34:59.8753526+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "Retry": false,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Number": 8,
      "LineNumber": 11,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}",
        "model": "gpt-4.1-mini",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are a module selection assistant for the plang natural language programming language. Your task is to analyze a single plang step and determine which module(s) from the provided list can best handle that step.\r\n\r\n## Available Modules\r\nYou will be provided with a list of available modules in JSON format. Each module has a name and may include a description of its capabilities. Use these descriptions as your primary guide for module selection.\r\n\r\n## Your Role\r\n- Analyze the given plang step carefully\r\n- Match the step's intent and actions to the most appropriate module(s) based on their descriptions\r\n- Consider variable usage patterns as clues for module selection\r\n- Return multiple modules if they are equally relevant\r\n- Provide a confidence score for your selection\r\n\r\n## Analysis Process\r\n1. **Review available modules**: Examine the provided module list and their descriptions\r\n2. **Parse the step**: Identify the main action, objects, and any modifiers\r\n3. **Look for key indicators**: \r\n   - Database operations: select, insert, update, upsert, delete\r\n   - Validation: validate, check conditions\r\n   - User interaction: ask, write out\r\n   - Control flow: if, foreach, call\r\n   - Web operations: navigate, click, extract\r\n   - File operations: read, write files\r\n   - LLM operations: [llm], system prompts\r\n   - Browser operations: [webc], open browser\r\n   - Code execution: [code]\r\n4. **Consider variables**: Variable names and usage patterns may hint at the appropriate module\r\n5. **Match to descriptions**: Compare the step's requirements against each module's description\r\n6. **Evaluate relevance**: Determine which modules can actually perform the requested operation\r\n7. **Rank by specificity**: Prefer more specific modules over generic ones when equally applicable\r\n\r\n## Selection Criteria\r\n- **Primary match**: The module's description directly covers the step's main action\r\n- **Secondary match**: The module can handle the step but it's not its primary purpose\r\n- **Variable clues**: Consider variable names and types as hints (e.g., %database%, %html%, %file%)\r\n- **Multiple matches**: If several modules are equally relevant, include all of them\r\n- **Confidence**: Rate your confidence based on how well the module matches\r\n\r\n## Response Format\r\nRespond with valid JSON array of all modules using this exact schema:\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Brief description of what the user wants to accomplish with this step\",\r\n  \"Reason\": \"Short explanation of why you chose these modules\",\r\n  \"StepDescription\": \"Detailed rewrite of the step as you understand it, expanding on the intent and expected behavior\",\r\n  \"Modules\": [\"PLang.Modules.ModuleName1\", ...],\r\n  \"StepName\": \"descriptive_step_name_in_lowercase_with_underscores\",\r\n  \"Confidence\":\"Very High|High|Medium|Low|Very Low\",\r\n  \"Inconsistency\": \"Some kind of inconsistency in code and/or typos, can be null\"\r\n}\r\n```\r\n## Key Indicators to Look For\r\n\r\n**Explicit Module Tags**: Steps may contain explicit module indicators in square brackets:\r\n- `[llm]` → LlmModule\r\n- `[webc]` → WebCrawlerModule  \r\n- `[code]` → CodeModule\r\n\r\n**Database Operations**: \r\n- `select`, `insert`, `update`, `upsert`, `delete` → DbModule\r\n- `set datasource` → DbModule\r\n\r\n**Validation Operations**:\r\n- `validate` → ValidateModule\r\n\r\n**Control Flow**:\r\n- `if`, `then`, `else` → ConditionalModule\r\n- `foreach`, `while`, `for` → LoopModule\r\n- `call`, `call goal`, `call GoalName`, `call app /Gmail/Search` → CallGoalModule\r\n\r\n**Web/Browser Operations**:\r\n- `navigate`, `click`, `open browser`, `extract` → WebCrawlerModule\r\n- `add request header`, `remove headers` → WebCrawlerModule or HttpModule\r\n\r\n**User Interaction**:\r\n- `ask user`, `write out` → OutputModule\r\n\r\n**File Operations**:\r\n- `read file`, `write file` → FileModule\r\n\r\n**Error Handling**:\r\n- `throw`, `end goal` → ThrowErrorModule\r\n\r\n**Variable Operations**:\r\n- `set %variable%` → LocalOrGlobalVariableModule\r\n\r\n**Logging**:\r\n- `log`, `logger` → LoggerModule\r\n\r\n**Llm**:\r\n- Constructed usually with a system: and user:, often with scheme, response type and other properties and response is writing to a variable, `system: %system%.... user: ....` → LlmModule\r\n\r\n## Selection Criteria\r\n- **Be precise**: Only select modules that can actually perform the requested operation\r\n- **Consider context**: Variable names and patterns provide important clues\r\n- **Handle ambiguity**: If multiple modules are equally valid, include them all. Step will ultimately only call one module\r\n- **Module Selection**: Choose 1-3 modules that could handle the step, ordered by relevance. Do not select any module if none explicitly supports the step; in that case, return 'Modules': [] or 'Modules': null.\"\r\n- **Step Names**: Use lowercase with underscores instead of spaces or slashes (e.g., \"select_user_data\", \"validate_input\")  \r\n- **Confidence Levels**:\r\n    - **Very High**: Module directly and explicitly supports the step’s operation.\r\n    - **High**: Module clearly covers the action, even if not explicitly named.\r\n    - **Medium**: Action is plausible but not central to the module.\r\n    - **Low**: Module could work, but there's uncertainty or better alternatives.\r\n    - **Very Low**: Poor fit; selection is speculative or a fallback.\r\n- **Detailed Description**: Expand on the original step to show your understanding of what it should accomplish\r\n\r\n## Example Analysis Process\r\n\r\n**Example Analysis for:** \"select * from Users where id=%userId%, return 1 row, write to %users%\"\r\n\r\n```json\r\n{\r\n  \"ExplainUserIntent\": \"Retrieve a specific user record from the database using its ID\",\r\n  \"Reason\": \"This is a database select operation with SQL syntax - DbModule handles database access and SQL operations\",\r\n  \"StepDescription\": \"Execute a SQL SELECT query on the Users table to find the record matching the provided user id, limit the result to one row, and store the complete record in the users variable for later use\",\r\n  \"Modules\": [\"PLang.Modules.DbModule\"],\r\n  \"StepName\": \"select_user_by_id\",\r\n  \"Confidence\": \"High\", \r\n  \"Inconsistency\": \"%users% is plural, but you are only selecting 1 row from database, better name would be %user%\"\r\n}\r\n```\r\n\r\nNow analyze the provided plang step against the available modules and return your module selection.\r\n\r\n## Input Format\r\nYou will receive:\r\n1. **Modules**: A JSON array of available modules with their descriptions\r\n2. **Step**: The plang step to analyze\r\n3. **Variables** (optional): Currently available variables that might provide context\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"ExplainUserIntent\": string,\n\t\"Reason\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[],\n\t\"Confidence\": string,\n\t\"Inconsistency\": string,\n\t\"StepName\": string\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n<modules>\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebSocketModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.VariableModule\", \"description\": \"Set, Get & Return variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable. Trim variable for llm. \" }, \n{ \"module\": \"PLang.Modules.ValidateModule\", \"description\": \"Validates a variable, make sure it's not empty, follows a pattern, is a number, etc.. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.UdpModule\" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error or retry a step. Allows user to return out of goal or stop(end) running goal. Create payment request(status code 402). \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\", \"description\": \"Render html (files) using template engine. \" }, \n{ \"module\": \"PLang.Modules.SerializerModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangModule\", \"description\": \"get apps available, compiles plang code, gets goals and steps from .goal files, method descriptions and class scheme. Runtime Engine for plang, can run goal and step(s) in plang. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Writes to the output stream. Ask user a question, with LLM or without, either straight or with help of llm. output stream can be to the user(default), system, log, audit, metric. \" }, \n{ \"module\": \"PLang.Modules.OptionsModule\", \"description\": \"Set options for the code. Only set the options that are defined by user. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.MathModule\", \"description\": \"Misc math method. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops, go through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"\r\nget first|last|random|position| item from list or dictionary.\r\nAdd, update, delete and retrieve list or dictionary. Group by key, merge two lists\r\n. \" }, \n{ \"module\": \"PLang.Modules.InstallModule\", \"description\": \"Install external utility from url. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to find text, filter out items, select, query from a %variable% and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. Reads text, csv, xls, pdf files and raw stream. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app, npm install. \" }, \n{ \"module\": \"PLang.Modules.DesktopModule\", \"description\": \"Get information about what windows are open on the operating system. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. Isolated data pattern (idp). \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConvertModule\", \"description\": \"Convert object from one to another. html => md, md => html, string => keyvalue list. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then call SomeGoal, else call OtherGoal', this condition would return true if %isValid% is true and call a goals on either conditions. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\", \"description\": \"compress and decompress(extract) a file or folder. This can be various of file formats, zip, gz, or other custom formats. Example usage: `zip file.txt to file.zip`, or `unzip file.zip to file.txt`. \" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate or Run existing c# code from user description. Only use if no other module is found or if [code] is defined.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal or App, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff, set %formatted% = Format(%data%), %user% = GetUser %id%. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\", \"description\": \"Handles caching of objects, set, get and remove. object can be can be cached with sliding or fixed period. \" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n{ \"module\": \"PLang.Modules.AssertModule\", \"description\": \"Assert object/variable/text or other entity to be what is epxected. For unit testing. \" }, \n]\r\n<modules>\r\n\r\n<variables>\r\nplatforms(System.Nullable),platform(System.Nullable)\r\n<variables>\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "foreach %platforms%, call BuildPlatform item=%platform%"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "{\n  \"ExplainUserIntent\": \"Iterate over a list of platforms and for each platform, call the BuildPlatform goal with the current platform as a parameter\",\n  \"Reason\": \"The step involves looping over a collection (%platforms%) and calling another goal (BuildPlatform) for each item. LoopModule handles loops such as foreach, and CallGoalModule handles calling other goals or apps.\",\n  \"StepDescription\": \"For each element in the %platforms% list, invoke the BuildPlatform goal, passing the current element as the %platform% parameter to that goal. This enables processing or building for each platform individually.\",\n  \"Modules\": [\n    \"PLang.Modules.LoopModule\",\n    \"PLang.Modules.CallGoalModule\"\n  ],\n  \"StepName\": \"foreach_platform_call_buildplatform\",\n  \"Confidence\": \"Very High\",\n  \"Inconsistency\": null\n}"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "72c2773c4642e54d5aac2c80247740053f7576416c1eff8d0fff0379b53b0833",
      "BuilderVersion": null,
      "RelativeGoalPath": "\\Publish.goal",
      "UserIntent": null
    }
  ],
  "SubGoals": [
    ".build\\Publish\\BuildPlatform\\00. Goal.pr",
    ".build\\Publish\\RemoveFile\\00. Goal.pr",
    ".build\\Publish\\ConsoleOutPut\\00. Goal.pr"
  ],
  "Description": "The Publish goal initiates the publishing process by first logging the current time, reading the version from a file, and then building the project with the specified version. It listens for build output, collects zip file paths, removes those files, and finally builds the project for various platforms.",
  "Visibility": 1,
  "GoalFileName": "Publish.goal",
  "RelativeGoalPath": "\\Publish.goal",
  "RelativeGoalFolderPath": "\\",
  "RelativePrPath": ".build\\Publish\\00. Goal.pr",
  "RelativePrFolderPath": ".build\\Publish",
  "BuilderVersion": "1.0.0.0",
  "GoalInfo": null,
  "Injections": [],
  "Signature": null,
  "FileHash": "3b3b418696ea0085209414ea4cfdb3dbad322ecb0ba56cc24e077a3a68a81fb7",
  "Hash": "4d2e0abcb98e1d35a26f0d8b8c0b58b6e679ba2abc1334b07f6632fe9db009a0",
  "IncomingVariablesRequired": {
    "buildVar": "A variable to capture the output of the build process.",
    "version": "The version of the project read from 'version.txt'.",
    "zipFiles": "A list of zip file paths found in the current directory.",
    "platforms": "A list of target platforms for building the project."
  },
  "DataSourceName": null,
  "IsSetup": false,
  "IsEvent": false
}