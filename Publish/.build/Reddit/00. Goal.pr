{
  "GoalName": "Reddit",
  "Comment": null,
  "Text": "Reddit",
  "GoalSteps": [
    {
      "Text": "navigate to https://www.reddit.com/r/plang/submit/, use profile, hide bot, timeout 5 sec",
      "Comment": null,
      "ModuleType": "PLang.Modules.WebCrawlerModule",
      "Name": "NavigateToRedditSubmit",
      "Description": "Open a browser and navigate to the URL 'https://www.reddit.com/r/plang/submit/'. Use a specific profile, hide the bot interface, and set a timeout of 5 seconds.",
      "PrFileName": "01. NavigateToRedditSubmit.pr",
      "RelativePrPath": ".build\\Reddit\\01. NavigateToRedditSubmit.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2025-01-15T12:05:34.8103723+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 0,
      "LineNumber": 2,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}",
        "model": "gpt-4o",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set [\"N/A\"]\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nRead the description of each module, then determine which module to use.\r\nMake sure to return valid JSON, escape double quote if needed\r\n\r\nBe Concise\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error. Allows user to return out of goal or stop(end) running goal.. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangCodeModule\", \"description\": \"Compiles plang code, gets goals from .goal files, method descriptions and class scheme. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n]\r\n## modules available ends ##\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "navigate to https://www.reddit.com/r/plang/submit/, use profile, hide bot, timeout 5 sec"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "```json\n{\n\t\"StepName\": \"NavigateToRedditSubmit\",\n\t\"StepDescription\": \"Open a browser and navigate to the URL 'https://www.reddit.com/r/plang/submit/'. Use a specific profile, hide the bot interface, and set a timeout of 5 seconds.\",\n\t\"Modules\": [\"PLang.Modules.WebCrawlerModule\"]\n}\n```"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "7450e4fd4c03177af0f89ca761b0a65efedef6ee1ed9ebfb3bc4223320e1dfb5",
      "BuilderVersion": null,
      "PrFile": {
        "Action": {
          "FunctionName": "NavigateToUrl",
          "Parameters": [
            {
              "Type": "String",
              "Name": "url",
              "Value": "https://www.reddit.com/r/plang/submit/"
            },
            {
              "Type": "Boolean",
              "Name": "useUserSession",
              "Value": true
            },
            {
              "Type": "Boolean",
              "Name": "hideTestingMode",
              "Value": true
            },
            {
              "Type": "Nullable`1<Int32>",
              "Name": "timeoutInSecods",
              "Value": 5
            }
          ],
          "ReturnValues": null
        },
        "Text": "navigate to https://www.reddit.com/r/plang/submit/, use profile, hide bot, timeout 5 sec",
        "Reload": false,
        "LlmRequest": {
          "temperature": 0.0,
          "top_p": 0.0,
          "frequencyPenalty": 0.0,
          "presencePenalty": 0.0,
          "maxLength": 4000,
          "llmResponseType": "json",
          "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
          "model": "gpt-4o",
          "promptMessage": [
            {
              "role": "system",
              "content": [
                {
                  "type": "text",
                  "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\n%Variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See == QuoteExample ==\r\n\r\n== QuoteExample ==\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n== QuoteExample ==\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\n\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
                },
                {
                  "type": "text",
                  "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "## functions available starts ##\r\nStartBrowser(String? browserType = \"Chrome\", Boolean? headless = False, Boolean? useUserSession = False, String? userSessionPath, Boolean? incognito = False, Boolean? kioskMode = False, Dictionary`2<String, String>? argumentOptions, Nullable`1<Int32>? timoutInSeconds = 30, Boolean? hideTestingMode = False)  : void // browserType=Chrome|Edge|Firefox|IE|Safari. hideTestingMode tries to disguise that it is a bot.. \nGetElement(String? cssSelector)  : PlangWebElement \nCloseBrowser()  : void\nNavigateToUrl(String url, String? browserType = \"Chrome\", Boolean? headless = False, Boolean? useUserSession = False, String? userSessionPath, Boolean? incognito = False, Boolean? kioskMode = False, Dictionary`2<String, String>? argumentOptions, String? browserConsoleOutputVariableName, Nullable`1<Int32>? timeoutInSecods, Boolean? hideTestingMode = False)  : void // browserType=Chrome|Edge|Firefox|IE|Safari. hideTestingMode tries to disguise that it is a bot.. \nScrollToBottom()  : void\nScrollToElementByCssSelector(String cssSelector)  : void\nScrollToElement(PlangWebElement element)  : void\nGetElementByText(String text, String? operatorOnText = \"equals\", Nullable`1<Int32>? timeoutInSeconds, String? cssSelector)  : PlangWebElement  // operatorOnText can be equals|contains|startswith|endswith. \nWaitForElementToDissapear(Object elementOrCssSelector, Int32 timeoutInSeconds)  : void\nWaitForElementToAppear(String cssSelector, Int32? timeoutInSeconds = 30, Boolean? waitForElementToChange = False)  : void\nSetTimeout(Nullable`1<Int32>? timoutInSeconds)  : void\nSetFocus(String? cssSelector, Nullable`1<Int32>? timoutInSeconds)  : void\nClickOnElement(PlangWebElement element)  : void\nClick(String cssSelector, Int32? elementAtToClick = 0, Boolean? clickAllMatchingElements = False, Nullable`1<Int32>? timeoutInSeconds, String? shadowDomCssSelector)  : void\nAcceptAlert()  : String \nSendKey(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // Writes a text to an element. \nSetTextOnElement(String text, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds, Boolean? clearElementFirst = False, String? shadowDomCssSelector)  : void // set the text of an element other than input by cssSelector. \nInput(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds, String? shadowDomCssSelector)  : void // set the value of an input by cssSelector. \nSelectByValue(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // select an option by its value in select input by cssSelector. \nSelectByText(String text, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // select an option by its text in select input by cssSelector. \nSubmit(String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void\nGetElements(String? cssSelector, String? shadowDomCssSelector)  : List`1 \nGetElementsInsideElement(String elementName, IWebElement element)  : List<PlangWebElement> \nSerializeElements(List`1<List`1> elementsArray)  : List`1 \nFindElementAndExtractAttribute(String attribute, String? cssSelector, PlangWebElement? element)  : String \nExtractContent(Boolean? clearHtml = True, String? cssSelector, PlangWebElement? element)  : List`1 \nSwitchTab(Int32 tabIndex)  : void\nWait(Int32? milliseconds = 1000)  : void\nTakeScreenshotOfWebsite(String saveToPath, Boolean? overwrite = False)  : void\r\n## functions available ends ##"
                },
                {
                  "type": "text",
                  "text": "Make sure to convert html tags into correct css selector format"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "navigate to https://www.reddit.com/r/plang/submit/, use profile, hide bot, timeout 5 sec"
                }
              ]
            }
          ],
          "type": "PLang.Modules.WebCrawlerModule.Builder",
          "caching": true,
          "RawResponse": "```json\n{\n\t\"FunctionName\": \"NavigateToUrl\",\n\t\"Parameters\": [{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"url\",\n\t\t\t\"Value\": \"https://www.reddit.com/r/plang/submit/\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"Boolean\",\n\t\t\t\"Name\": \"useUserSession\",\n\t\t\t\"Value\": true\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"Boolean\",\n\t\t\t\"Name\": \"hideTestingMode\",\n\t\t\t\"Value\": true\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"Nullable`1<Int32>\",\n\t\t\t\"Name\": \"timeoutInSecods\",\n\t\t\t\"Value\": 5\n\t\t}\n\t],\n\t\"ReturnValues\": null\n}\n```"
        },
        "RunOnBuild": false
      }
    },
    {
      "Text": "[webc] write %post% to element, \"faceplate-textarea-input\"",
      "Comment": null,
      "ModuleType": "PLang.Modules.WebCrawlerModule",
      "Name": "WriteToElement",
      "Description": "Write the content of the variable %post% into the web element identified by the class name 'faceplate-textarea-input'.",
      "PrFileName": "02. WriteToElement.pr",
      "RelativePrPath": ".build\\Reddit\\02. WriteToElement.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2025-01-15T11:41:55.7325621+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 1,
      "LineNumber": 3,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}",
        "model": "gpt-4o",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set [\"N/A\"]\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nRead the description of each module, then determine which module to use.\r\nMake sure to return valid JSON, escape double quote if needed\r\n\r\nBe Concise\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.WebCrawlerModule\r\n## modules available ends ##\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[webc] write %post% to element, \"faceplate-textarea-input\""
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "```json\n{\n\t\"StepName\": \"WriteToElement\",\n\t\"StepDescription\": \"Write the content of the variable %post% into the web element identified by the class name 'faceplate-textarea-input'.\",\n\t\"Modules\": [\"PLang.Modules.WebCrawlerModule\"]\n}\n```"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "68bcdc3df1f800cff4d0e03c6a227832c2f1b56c0691492739297deb6917141e",
      "BuilderVersion": null,
      "PrFile": {
        "Action": {
          "FunctionName": "SetTextOnElement",
          "Parameters": [
            {
              "Type": "String",
              "Name": "text",
              "Value": "%post%"
            },
            {
              "Type": "String",
              "Name": "cssSelector",
              "Value": "faceplate-textarea-input"
            }
          ],
          "ReturnValues": null
        },
        "Text": "[webc] write %post% to element, \"faceplate-textarea-input\"",
        "Reload": false,
        "LlmRequest": {
          "temperature": 0.0,
          "top_p": 0.0,
          "frequencyPenalty": 0.0,
          "presencePenalty": 0.0,
          "maxLength": 4000,
          "llmResponseType": "json",
          "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
          "model": "gpt-4o",
          "promptMessage": [
            {
              "role": "system",
              "content": [
                {
                  "type": "text",
                  "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\n%Variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See == QuoteExample ==\r\n\r\n== QuoteExample ==\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n== QuoteExample ==\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\n\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
                },
                {
                  "type": "text",
                  "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "## functions available starts ##\r\nStartBrowser(String? browserType = \"Chrome\", Boolean? headless = False, Boolean? useUserSession = False, String? userSessionPath, Boolean? incognito = False, Boolean? kioskMode = False, Dictionary`2<String, String>? argumentOptions, Nullable`1<Int32>? timoutInSeconds = 30, Boolean? hideTestingMode = False)  : void // browserType=Chrome|Edge|Firefox|IE|Safari. hideTestingMode tries to disguise that it is a bot.. \nGetElement(String? cssSelector)  : PlangWebElement \nCloseBrowser()  : void\nNavigateToUrl(String url, String? browserType = \"Chrome\", Boolean? headless = False, Boolean? useUserSession = False, String? userSessionPath, Boolean? incognito = False, Boolean? kioskMode = False, Dictionary`2<String, String>? argumentOptions, String? browserConsoleOutputVariableName, Nullable`1<Int32>? timeoutInSecods, Boolean? hideTestingMode = False)  : void // browserType=Chrome|Edge|Firefox|IE|Safari. hideTestingMode tries to disguise that it is a bot.. \nScrollToBottom()  : void\nScrollToElementByCssSelector(String cssSelector)  : void\nScrollToElement(PlangWebElement element)  : void\nGetElementByText(String text, String? operatorOnText = \"equals\", Nullable`1<Int32>? timeoutInSeconds, String? cssSelector)  : PlangWebElement  // operatorOnText can be equals|contains|startswith|endswith. \nWaitForElementToDissapear(Object elementOrCssSelector, Int32 timeoutInSeconds)  : void\nWaitForElementToAppear(String cssSelector, Int32? timeoutInSeconds = 30, Boolean? waitForElementToChange = False)  : void\nSetTimeout(Nullable`1<Int32>? timoutInSeconds)  : void\nSetFocus(String? cssSelector, Nullable`1<Int32>? timoutInSeconds)  : void\nClickOnElement(PlangWebElement element)  : void\nClick(String cssSelector, Int32? elementAtToClick = 0, Boolean? clickAllMatchingElements = False, Nullable`1<Int32>? timeoutInSeconds)  : void\nAcceptAlert()  : String \nSendKey(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // Writes a text to an element. \nSetTextOnElement(String text, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds, Boolean? clearElementFirst = True)  : void // set the text of an element other than input by cssSelector. \nInput(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // set the value of an input by cssSelector. \nSelectByValue(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // select an option by its value in select input by cssSelector. \nSelectByText(String text, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // select an option by its text in select input by cssSelector. \nSubmit(String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void\nGetElements(String? cssSelector)  : List`1 \nGetElementsInsideElement(String elementName, IWebElement element)  : List<PlangWebElement> \nSerializeElements(List`1<List`1> elementsArray)  : List`1 \nFindElementAndExtractAttribute(String attribute, String? cssSelector, PlangWebElement? element)  : String \nExtractContent(Boolean? clearHtml = True, String? cssSelector, PlangWebElement? element)  : List`1 \nSwitchTab(Int32 tabIndex)  : void\nWait(Int32? milliseconds = 1000)  : void\nTakeScreenshotOfWebsite(String saveToPath, Boolean? overwrite = False)  : void\r\n## functions available ends ##\r\n## defined variables ##\r\npost (type:object), \r\n## defined variables ##"
                },
                {
                  "type": "text",
                  "text": "Make sure to convert html tags into correct css selector format"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "[webc] write %post% to element, \"faceplate-textarea-input\""
                }
              ]
            }
          ],
          "type": "PLang.Modules.WebCrawlerModule.Builder",
          "caching": true,
          "RawResponse": "```json\n{\n\t\"FunctionName\": \"SetTextOnElement\",\n\t\"Parameters\": [{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"text\",\n\t\t\t\"Value\": \"%post%\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"cssSelector\",\n\t\t\t\"Value\": \"faceplate-textarea-input\"\n\t\t}\n\t]\n}\n```"
        },
        "RunOnBuild": false
      }
    },
    {
      "Text": "[webc] write \"Hello\" to element, div[slot=\"rte\"]",
      "Comment": null,
      "ModuleType": "PLang.Modules.WebCrawlerModule",
      "Name": "WriteTextToElement",
      "Description": "Write the text 'Hello' to the HTML element specified by the selector div[slot=\"rte\"].",
      "PrFileName": "03. WriteTextToElement.pr",
      "RelativePrPath": ".build\\Reddit\\03. WriteTextToElement.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2025-01-15T12:57:28.0072368+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 2,
      "LineNumber": 4,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}",
        "model": "gpt-4o",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set [\"N/A\"]\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nRead the description of each module, then determine which module to use.\r\nMake sure to return valid JSON, escape double quote if needed\r\n\r\nBe Concise\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.WebCrawlerModule\r\n## modules available ends ##\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[webc] write \"Hello\" to element, div[slot=\"rte\"]"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "```json\n{\n\t\"StepName\": \"WriteTextToElement\",\n\t\"StepDescription\": \"Write the text 'Hello' to the HTML element specified by the selector div[slot=\\\"rte\\\"].\",\n\t\"Modules\": [\"PLang.Modules.WebCrawlerModule\"]\n}\n```"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "936e6fcb7f490b88e63d9b6c374608c48a1cf26724a7155c5a09e812f066ea82",
      "BuilderVersion": null,
      "PrFile": {
        "Action": {
          "FunctionName": "SetTextOnElement",
          "Parameters": [
            {
              "Type": "String",
              "Name": "text",
              "Value": "Hello"
            },
            {
              "Type": "String",
              "Name": "cssSelector",
              "Value": "div[slot=\"rte\"]"
            }
          ],
          "ReturnValues": null
        },
        "Text": "[webc] write \"Hello\" to element, div[slot=\"rte\"]",
        "Reload": false,
        "LlmRequest": {
          "temperature": 0.0,
          "top_p": 0.0,
          "frequencyPenalty": 0.0,
          "presencePenalty": 0.0,
          "maxLength": 4000,
          "llmResponseType": "json",
          "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
          "model": "gpt-4o",
          "promptMessage": [
            {
              "role": "system",
              "content": [
                {
                  "type": "text",
                  "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\n%Variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See == QuoteExample ==\r\n\r\n== QuoteExample ==\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n== QuoteExample ==\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\n\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
                },
                {
                  "type": "text",
                  "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "## functions available starts ##\r\nStartBrowser(String? browserType = \"Chrome\", Boolean? headless = False, Boolean? useUserSession = False, String? userSessionPath, Boolean? incognito = False, Boolean? kioskMode = False, Dictionary`2<String, String>? argumentOptions, Nullable`1<Int32>? timoutInSeconds = 30, Boolean? hideTestingMode = False)  : void // browserType=Chrome|Edge|Firefox|IE|Safari. hideTestingMode tries to disguise that it is a bot.. \nGetElement(String? cssSelector)  : PlangWebElement \nCloseBrowser()  : void\nNavigateToUrl(String url, String? browserType = \"Chrome\", Boolean? headless = False, Boolean? useUserSession = False, String? userSessionPath, Boolean? incognito = False, Boolean? kioskMode = False, Dictionary`2<String, String>? argumentOptions, String? browserConsoleOutputVariableName, Nullable`1<Int32>? timeoutInSecods, Boolean? hideTestingMode = False)  : void // browserType=Chrome|Edge|Firefox|IE|Safari. hideTestingMode tries to disguise that it is a bot.. \nScrollToBottom()  : void\nScrollToElementByCssSelector(String cssSelector)  : void\nScrollToElement(PlangWebElement element)  : void\nGetElementByText(String text, String? operatorOnText = \"equals\", Nullable`1<Int32>? timeoutInSeconds, String? cssSelector)  : PlangWebElement  // operatorOnText can be equals|contains|startswith|endswith. \nWaitForElementToDissapear(Object elementOrCssSelector, Int32 timeoutInSeconds)  : void\nWaitForElementToAppear(String cssSelector, Int32? timeoutInSeconds = 30, Boolean? waitForElementToChange = False)  : void\nSetTimeout(Nullable`1<Int32>? timoutInSeconds)  : void\nSetFocus(String? cssSelector, Nullable`1<Int32>? timoutInSeconds)  : void\nClickOnElement(PlangWebElement element)  : void\nClick(String cssSelector, Int32? elementAtToClick = 0, Boolean? clickAllMatchingElements = False, Nullable`1<Int32>? timeoutInSeconds, String? shadowDomCssSelector)  : void\nAcceptAlert()  : String \nSendKey(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // Writes a text to an element. \nSetTextOnElement(String text, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds, Boolean? clearElementFirst = False, String? shadowDomCssSelector)  : void // set the text of an element other than input by cssSelector. \nInput(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds, String? shadowDomCssSelector)  : void // set the value of an input by cssSelector. \nSelectByValue(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // select an option by its value in select input by cssSelector. \nSelectByText(String text, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // select an option by its text in select input by cssSelector. \nSubmit(String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void\nGetElements(String? cssSelector, String? shadowDomCssSelector)  : List`1 \nGetElementsInsideElement(String elementName, IWebElement element)  : List<PlangWebElement> \nSerializeElements(List`1<List`1> elementsArray)  : List`1 \nFindElementAndExtractAttribute(String attribute, String? cssSelector, PlangWebElement? element)  : String \nExtractContent(Boolean? clearHtml = True, String? cssSelector, PlangWebElement? element)  : List`1 \nSwitchTab(Int32 tabIndex)  : void\nWait(Int32? milliseconds = 1000)  : void\nTakeScreenshotOfWebsite(String saveToPath, Boolean? overwrite = False)  : void\r\n## functions available ends ##"
                },
                {
                  "type": "text",
                  "text": "Make sure to convert html tags into correct css selector format"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "[webc] write \"Hello\" to element, div[slot=\"rte\"]"
                }
              ]
            }
          ],
          "type": "PLang.Modules.WebCrawlerModule.Builder",
          "caching": true,
          "RawResponse": "```json\n{\n\t\"FunctionName\": \"SetTextOnElement\",\n\t\"Parameters\": [{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"text\",\n\t\t\t\"Value\": \"Hello\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"cssSelector\",\n\t\t\t\"Value\": \"div[slot=\\\"rte\\\"]\"\n\t\t}\n\t]\n}\n```"
        },
        "RunOnBuild": false
      }
    },
    {
      "Text": "[webc] click on id=\"submit-post-button\"",
      "Comment": null,
      "ModuleType": "PLang.Modules.WebCrawlerModule",
      "Name": "ClickSubmitPostButton",
      "Description": "Click on the button with the ID 'submit-post-button' on a web page.",
      "PrFileName": "04. ClickSubmitPostButton.pr",
      "RelativePrPath": ".build\\Reddit\\04. ClickSubmitPostButton.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2025-01-15T11:45:15.805298+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 3,
      "LineNumber": 5,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}",
        "model": "gpt-4o",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set [\"N/A\"]\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nRead the description of each module, then determine which module to use.\r\nMake sure to return valid JSON, escape double quote if needed\r\n\r\nBe Concise\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.WebCrawlerModule\r\n## modules available ends ##\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[webc] click on id=\"submit-post-button\""
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "```json\n{\n\t\"StepName\": \"ClickSubmitPostButton\",\n\t\"StepDescription\": \"Click on the button with the ID 'submit-post-button' on a web page.\",\n\t\"Modules\": [\"PLang.Modules.WebCrawlerModule\"]\n}\n```"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "98490beb20dca180181116ee6141d7a286b98e699fc017dd3137f323c023333e",
      "BuilderVersion": null,
      "PrFile": {
        "Action": {
          "FunctionName": "Click",
          "Parameters": [
            {
              "Type": "String",
              "Name": "cssSelector",
              "Value": "#submit-post-button"
            },
            {
              "Type": "Int32?",
              "Name": "elementAtToClick",
              "Value": 0
            },
            {
              "Type": "Boolean?",
              "Name": "clickAllMatchingElements",
              "Value": false
            },
            {
              "Type": "Nullable`1<Int32>?",
              "Name": "timeoutInSeconds",
              "Value": null
            }
          ],
          "ReturnValues": null
        },
        "Text": "[webc] click on id=\"submit-post-button\"",
        "Reload": false,
        "LlmRequest": {
          "temperature": 0.0,
          "top_p": 0.0,
          "frequencyPenalty": 0.0,
          "presencePenalty": 0.0,
          "maxLength": 4000,
          "llmResponseType": "json",
          "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
          "model": "gpt-4o",
          "promptMessage": [
            {
              "role": "system",
              "content": [
                {
                  "type": "text",
                  "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\n%Variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See == QuoteExample ==\r\n\r\n== QuoteExample ==\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n== QuoteExample ==\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\n\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
                },
                {
                  "type": "text",
                  "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "## functions available starts ##\r\nStartBrowser(String? browserType = \"Chrome\", Boolean? headless = False, Boolean? useUserSession = False, String? userSessionPath, Boolean? incognito = False, Boolean? kioskMode = False, Dictionary`2<String, String>? argumentOptions, Nullable`1<Int32>? timoutInSeconds = 30, Boolean? hideTestingMode = False)  : void // browserType=Chrome|Edge|Firefox|IE|Safari. hideTestingMode tries to disguise that it is a bot.. \nGetElement(String? cssSelector)  : PlangWebElement \nCloseBrowser()  : void\nNavigateToUrl(String url, String? browserType = \"Chrome\", Boolean? headless = False, Boolean? useUserSession = False, String? userSessionPath, Boolean? incognito = False, Boolean? kioskMode = False, Dictionary`2<String, String>? argumentOptions, String? browserConsoleOutputVariableName, Nullable`1<Int32>? timeoutInSecods, Boolean? hideTestingMode = False)  : void // browserType=Chrome|Edge|Firefox|IE|Safari. hideTestingMode tries to disguise that it is a bot.. \nScrollToBottom()  : void\nScrollToElementByCssSelector(String cssSelector)  : void\nScrollToElement(PlangWebElement element)  : void\nGetElementByText(String text, String? operatorOnText = \"equals\", Nullable`1<Int32>? timeoutInSeconds, String? cssSelector)  : PlangWebElement  // operatorOnText can be equals|contains|startswith|endswith. \nWaitForElementToDissapear(Object elementOrCssSelector, Int32 timeoutInSeconds)  : void\nWaitForElementToAppear(String cssSelector, Int32? timeoutInSeconds = 30, Boolean? waitForElementToChange = False)  : void\nSetTimeout(Nullable`1<Int32>? timoutInSeconds)  : void\nSetFocus(String? cssSelector, Nullable`1<Int32>? timoutInSeconds)  : void\nClickOnElement(PlangWebElement element)  : void\nClick(String cssSelector, Int32? elementAtToClick = 0, Boolean? clickAllMatchingElements = False, Nullable`1<Int32>? timeoutInSeconds)  : void\nAcceptAlert()  : String \nSendKey(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // Writes a text to an element. \nSetTextOnElement(String text, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds, Boolean? clearElementFirst = False)  : void // set the text of an element other than input by cssSelector. \nInput(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // set the value of an input by cssSelector. \nSelectByValue(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // select an option by its value in select input by cssSelector. \nSelectByText(String text, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // select an option by its text in select input by cssSelector. \nSubmit(String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void\nGetElements(String? cssSelector)  : List`1 \nGetElementsInsideElement(String elementName, IWebElement element)  : List<PlangWebElement> \nSerializeElements(List`1<List`1> elementsArray)  : List`1 \nFindElementAndExtractAttribute(String attribute, String? cssSelector, PlangWebElement? element)  : String \nExtractContent(Boolean? clearHtml = True, String? cssSelector, PlangWebElement? element)  : List`1 \nSwitchTab(Int32 tabIndex)  : void\nWait(Int32? milliseconds = 1000)  : void\nTakeScreenshotOfWebsite(String saveToPath, Boolean? overwrite = False)  : void\r\n## functions available ends ##"
                },
                {
                  "type": "text",
                  "text": "Make sure to convert html tags into correct css selector format"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "[webc] click on id=\"submit-post-button\""
                }
              ]
            }
          ],
          "type": "PLang.Modules.WebCrawlerModule.Builder",
          "caching": true,
          "RawResponse": "```json\n{\n\t\"FunctionName\": \"Click\",\n\t\"Parameters\": [{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"cssSelector\",\n\t\t\t\"Value\": \"#submit-post-button\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"Int32?\",\n\t\t\t\"Name\": \"elementAtToClick\",\n\t\t\t\"Value\": 0\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"Boolean?\",\n\t\t\t\"Name\": \"clickAllMatchingElements\",\n\t\t\t\"Value\": false\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"Nullable`1<Int32>?\",\n\t\t\t\"Name\": \"timeoutInSeconds\",\n\t\t\t\"Value\": null\n\t\t}\n\t],\n\t\"ReturnValues\": null\n}\n```"
        },
        "RunOnBuild": false
      }
    },
    {
      "Text": "wait 3 sec",
      "Comment": null,
      "ModuleType": "PLang.Modules.ScheduleModule",
      "Name": "WaitForSeconds",
      "Description": "Pause the execution of the program for 3 seconds.",
      "PrFileName": "05. WaitForSeconds.pr",
      "RelativePrPath": ".build\\Reddit\\05. WaitForSeconds.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2025-01-15T12:02:26.2377953+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 4,
      "LineNumber": 6,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}",
        "model": "gpt-4o",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set [\"N/A\"]\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nRead the description of each module, then determine which module to use.\r\nMake sure to return valid JSON, escape double quote if needed\r\n\r\nBe Concise\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n## modules available starts ##\r\n[{ \"module\": \"PLang.Modules.XmlModule\" }, \n{ \"module\": \"PLang.Modules.WindowAppModule\" }, \n{ \"module\": \"PLang.Modules.WebserverModule\", \"description\": \"Start webserver, write to Body, Header, Cookie, send file to client. \" }, \n{ \"module\": \"PLang.Modules.WebCrawlerModule\", \"description\": \"Run a browser instance, browse a website, input values and click on html elements, sendkeys, wait for browser and extract content. \" }, \n{ \"module\": \"PLang.Modules.UiModule\", \"description\": \"Takes any user command and tries to convert it to html. Add, remove, insert content to css selector. \" }, \n{ \"module\": \"PLang.Modules.ThrowErrorModule\", \"description\": \"Allows user to throw error. Allows user to return out of goal or stop(end) running goal.. \" }, \n{ \"module\": \"PLang.Modules.TerminalModule\", \"description\": \"Terminal/Console access to run external applications. \" }, \n{ \"module\": \"PLang.Modules.TemplateEngineModule\" }, \n{ \"module\": \"PLang.Modules.ScheduleModule\", \"description\": \"Wait, Sleep and time delay. Cron scheduler. \" }, \n{ \"module\": \"PLang.Modules.PythonModule\", \"description\": \"Runs python scripts. Parameters can be passed to the python process. \" }, \n{ \"module\": \"PLang.Modules.PlangCodeModule\", \"description\": \"Compiles plang code, gets goals from .goal files, method descriptions and class scheme. \" }, \n{ \"module\": \"PLang.Modules.OutputModule\", \"description\": \"Outputs and writes out, to the UI a text or a variable. In console, code can ask user and he gives response. \" }, \n{ \"module\": \"PLang.Modules.MessageModule\", \"description\": \"Send and recieve private messages. Get account(public key), set current account for messaging. \" }, \n{ \"module\": \"PLang.Modules.LoopModule\", \"description\": \"While, for, foreach, loops through a list. \" }, \n{ \"module\": \"PLang.Modules.LoggerModule\" }, \n{ \"module\": \"PLang.Modules.LocalOrGlobalVariableModule\", \"description\": \"Set & Get local and static variables. Set on variable includes condition such as empty or null. Bind onCreate, onChange, onRemove events to variable.. \" }, \n{ \"module\": \"PLang.Modules.LlmModule\", \"description\": \"Ask LLM a question and recieve and answer. \" }, \n{ \"module\": \"PLang.Modules.ListDictionaryModule\", \"description\": \"Add, update, delete and retrieve list or dictionary. It can be stored as local list/directory or as static/global. \" }, \n{ \"module\": \"PLang.Modules.InjectModule\", \"description\": \"Dependancy injection. \" }, \n{ \"module\": \"PLang.Modules.IdentityModule\", \"description\": \"Handles Identity in plang. Sign content and verifies signature with the identity.. \" }, \n{ \"module\": \"PLang.Modules.HttpModule\", \"description\": \"Make Http request. \" }, \n{ \"module\": \"PLang.Modules.FilterModule\", \"description\": \"Allow user to filter, select, query from a variable and get specific item from that variable.. \" }, \n{ \"module\": \"PLang.Modules.FileModule\", \"description\": \"Handle file system access. Listen to files and dirs. Get permission to file and folder paths. \" }, \n{ \"module\": \"PLang.Modules.EnvironmentModule\", \"description\": \"Information about the environment that the software is running, such as machine name, os user name, process id, settings, debug modes, set culture, open file in default app. \" }, \n{ \"module\": \"PLang.Modules.DbModule\", \"description\": \"Database access, select, insert, update, delete and execute raw sql. Handles transactions. Sets and create datasources. \" }, \n{ \"module\": \"PLang.Modules.CryptographicModule\", \"description\": \"Encrypt, descryption and hashing & verify using bcrypt, compute Sha256Hash, generate & validate Bearer token. \" }, \n{ \"module\": \"PLang.Modules.ConditionalModule\", \"description\": \"Manages if conditions for the user request. Example 1:'if %isValid% is true then', this condition would return true if %isValid% is true. Example 2:'if %address% is empty then', this would check if the %address% variable is empty and return true if it is, else false. Use when checking if file or directory exists.. \" }, \n{ \"module\": \"PLang.Modules.CompressionModule\" }, \n{ \"module\": \"PLang.Modules.CodeModule\", \"description\": \"Generate c# code from user description. Only use if no other module is found.. \" }, \n{ \"module\": \"PLang.Modules.CallGoalModule\", \"description\": \"Call another Goal, when ! is prefixed, example: call !RenameFile, call app !Google/Search, call !ui/ShowItems, call goal !DoStuff. \" }, \n{ \"module\": \"PLang.Modules.CachingModule\" }, \n{ \"module\": \"PLang.Modules.BlockchainModule\", \"description\": \"Use blockchain, create wallet, account info, transfer money. \" }, \n]\r\n## modules available ends ##\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "wait 3 sec"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "```json\n{\n\t\"StepName\": \"WaitForSeconds\",\n\t\"StepDescription\": \"Pause the execution of the program for 3 seconds.\",\n\t\"Modules\": [\"PLang.Modules.ScheduleModule\"]\n}\n```"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "f22d9d21ae285725fc7e74dd563456502a6360264cb412a08e29578201da8bef",
      "BuilderVersion": null,
      "PrFile": {
        "Action": {
          "FunctionName": "Sleep",
          "Parameters": [
            {
              "Type": "Int32",
              "Name": "sleepTimeInMilliseconds",
              "Value": 3000
            }
          ],
          "ReturnValues": null
        },
        "Text": "wait 3 sec",
        "Reload": false,
        "LlmRequest": {
          "temperature": 0.0,
          "top_p": 0.0,
          "frequencyPenalty": 0.0,
          "presencePenalty": 0.0,
          "maxLength": 4000,
          "llmResponseType": "json",
          "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
          "model": "gpt-4o",
          "promptMessage": [
            {
              "role": "system",
              "content": [
                {
                  "type": "text",
                  "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\n%Variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See == QuoteExample ==\r\n\r\n== QuoteExample ==\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n== QuoteExample ==\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\n\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
                },
                {
                  "type": "text",
                  "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "## functions available starts ##\r\nSleep(Int32 sleepTimeInMilliseconds)  : void // WaitForExecution is always true when calling Sleep. \nSchedule(String cronCommand, GoalToCall goalName, Dictionary`2<String, Object>? parameters, Nullable`1<DateTime>? nextRun)  : void // Use numerical representation for cronCommand, e.g. 0 11 * * 1. goalName is the goal that should be called, it should be prefixed by ! and be whole word with possible slash(/).. \nStartScheduler()  : void\r\n## functions available ends ##"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "wait 3 sec"
                }
              ]
            }
          ],
          "type": "PLang.Modules.GenericFunctionBuilder",
          "caching": true,
          "RawResponse": "```json\n{\n\t\"FunctionName\": \"Sleep\",\n\t\"Parameters\": [{\n\t\t\"Type\": \"Int32\",\n\t\t\"Name\": \"sleepTimeInMilliseconds\",\n\t\t\"Value\": 3000\n\t}]\n}\n```"
        },
        "RunOnBuild": false
      }
    },
    {
      "Text": "[webc] click mod-action-button[aria-label=\"Approve content\"], located in shadow dom shreddit-mod-inline-actions",
      "Comment": null,
      "ModuleType": "PLang.Modules.WebCrawlerModule",
      "Name": "ClickApproveButton",
      "Description": "Click the 'Approve content' button located within the shadow DOM of the 'shreddit-mod-inline-actions' element.",
      "PrFileName": "06. ClickApproveButton.pr",
      "RelativePrPath": ".build\\Reddit\\06. ClickApproveButton.pr",
      "Indent": 0,
      "Execute": true,
      "RunOnce": false,
      "Generated": "2025-01-15T12:02:31.897462+00:00",
      "WaitForExecution": true,
      "LoggerLevel": null,
      "ErrorHandlers": null,
      "CacheHandler": null,
      "CancellationHandler": null,
      "Custom": {},
      "Number": 5,
      "LineNumber": 7,
      "LlmRequest": {
        "temperature": 0.0,
        "top_p": 0.0,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.0,
        "maxLength": 4000,
        "llmResponseType": "json",
        "scheme": "{\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}",
        "model": "gpt-4o",
        "promptMessage": [
          {
            "role": "system",
            "content": [
              {
                "type": "text",
                "text": "You are provided with a statement from the user. \r\nThis statement is a step in a Function. \r\n\r\nYou MUST determine which module can be used to solve the statement.\r\nYou MUST choose from available modules provided by the assistant to determine which module. If you cannot choose module, set [\"N/A\"]\r\n\r\nvariable is defined with starting and ending %, e.g. %filePath%\r\n! defines a call to a function\r\n\r\nModules: Name of module. Suggest 1-3 modules that could be used to solve the step.\r\nStepName: Short name for step\r\nStepDescription: Rewrite the step as you understand it, make it detailed\r\nRead the description of each module, then determine which module to use.\r\nMake sure to return valid JSON, escape double quote if needed\r\n\r\nBe Concise\r\n"
              },
              {
                "type": "text",
                "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"StepName\": string,\n\t\"StepDescription\": string,\n\t\"Modules\": string[]\n}"
              }
            ]
          },
          {
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": "This is a list of modules you can choose from\r\n## modules available starts ##\r\nPLang.Modules.WebCrawlerModule\r\n## modules available ends ##\r\n"
              }
            ]
          },
          {
            "role": "user",
            "content": [
              {
                "type": "text",
                "text": "[webc] click mod-action-button[aria-label=\"Approve content\"], located in shadow dom shreddit-mod-inline-actions"
              }
            ]
          }
        ],
        "type": "StepInformationBuilder",
        "caching": true,
        "RawResponse": "```json\n{\n\t\"StepName\": \"ClickApproveButton\",\n\t\"StepDescription\": \"Click the 'Approve content' button located within the shadow DOM of the 'shreddit-mod-inline-actions' element.\",\n\t\"Modules\": [\"PLang.Modules.WebCrawlerModule\"]\n}\n```"
      },
      "EventBinding": null,
      "IsEvent": false,
      "Hash": "b9c22e179df94fe2dccc802d8df27d11a41a3e5fb8dc771ca1927c547115462c",
      "BuilderVersion": null,
      "PrFile": {
        "Action": {
          "FunctionName": "Click",
          "Parameters": [
            {
              "Type": "String",
              "Name": "cssSelector",
              "Value": "mod-action-button[aria-label=\"Approve content\"]"
            },
            {
              "Type": "String",
              "Name": "shadowDomCssSelector",
              "Value": "shreddit-mod-inline-actions"
            }
          ],
          "ReturnValues": null
        },
        "Text": "[webc] click mod-action-button[aria-label=\"Approve content\"], located in shadow dom shreddit-mod-inline-actions",
        "Reload": false,
        "LlmRequest": {
          "temperature": 0.0,
          "top_p": 0.0,
          "frequencyPenalty": 0.0,
          "presencePenalty": 0.0,
          "maxLength": 4000,
          "llmResponseType": "json",
          "scheme": "{\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}",
          "model": "gpt-4o",
          "promptMessage": [
            {
              "role": "system",
              "content": [
                {
                  "type": "text",
                  "text": "Your job is: \r\n1. Parse user intent\r\n2. Map the intent to one of C# function provided to you\r\n3. Return a valid JSON\r\n\r\nVariable is defined with starting and ending %, e.g. %filePath%. \r\n%Variable% MUST be wrapped in quotes(\") in json response, e.g. { \"name\":\"%name%\" }\r\nVariables should not be changed, they can include dot(.) and parentheses()\r\nKeep \\n, \\r, \\t that are submitted to you for string variables\r\nParameter.Value that is type String MUST be without escaping quotes. See == QuoteExample ==\r\n\r\n== QuoteExample ==\r\nget url \"http://example.org\" => Value: \"http://example.org\"\r\nwrite out 'Hello world' => Value: \"Hello world\"\r\n== QuoteExample ==\r\n\r\nIf there is some api key, settings, config replace it with %Settings.Get(\"settingName\", \"defaultValue\", \"Explain\")% \r\n- settingName would be the api key, config key, \r\n- defaultValue for settings is the usual value given, make it \"\" if no value can be default\r\n- Explain is an explanation about the setting that novice user can understand.\r\n\r\n\r\n\r\nJSON scheme information\r\nFunctionName: Name of the function to use from list of functions, if no function matches set as \"N/A\"\r\nParameters: List of parameters that are needed according to the user intent.\r\n- Type: the object type in c#\r\n- Name: name of the variable\r\n- Value: \"%variable%\" or hardcode string that should be used\r\nReturnValue rules\r\n- Only if the function returns a value AND if user defines %variable% to write into, e.g. ' write into %data%' or 'into %result%', or simliar intent to write return value into variable\r\n- If no %variable% is defined then set as null."
                },
                {
                  "type": "text",
                  "text": "You MUST respond in JSON, scheme:\r\n {\n\t\"FunctionName\": string,\n\t\"Parameters\": [{\n\t\"Type\": string,\n\t\"Name\": string,\n\t\"Value\"?: object\n}],\n\t\"ReturnValues\"?: [{\n\t\"Type\": string,\n\t\"VariableName\": string\n}] = null\n}"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "## functions available starts ##\r\nStartBrowser(String? browserType = \"Chrome\", Boolean? headless = False, Boolean? useUserSession = False, String? userSessionPath, Boolean? incognito = False, Boolean? kioskMode = False, Dictionary`2<String, String>? argumentOptions, Nullable`1<Int32>? timoutInSeconds = 30, Boolean? hideTestingMode = False)  : void // browserType=Chrome|Edge|Firefox|IE|Safari. hideTestingMode tries to disguise that it is a bot.. \nGetElement(String? cssSelector)  : PlangWebElement \nCloseBrowser()  : void\nNavigateToUrl(String url, String? browserType = \"Chrome\", Boolean? headless = False, Boolean? useUserSession = False, String? userSessionPath, Boolean? incognito = False, Boolean? kioskMode = False, Dictionary`2<String, String>? argumentOptions, String? browserConsoleOutputVariableName, Nullable`1<Int32>? timeoutInSecods, Boolean? hideTestingMode = False)  : void // browserType=Chrome|Edge|Firefox|IE|Safari. hideTestingMode tries to disguise that it is a bot.. \nScrollToBottom()  : void\nScrollToElementByCssSelector(String cssSelector)  : void\nScrollToElement(PlangWebElement element)  : void\nGetElementByText(String text, String? operatorOnText = \"equals\", Nullable`1<Int32>? timeoutInSeconds, String? cssSelector)  : PlangWebElement  // operatorOnText can be equals|contains|startswith|endswith. \nWaitForElementToDissapear(Object elementOrCssSelector, Int32 timeoutInSeconds)  : void\nWaitForElementToAppear(String cssSelector, Int32? timeoutInSeconds = 30, Boolean? waitForElementToChange = False)  : void\nSetTimeout(Nullable`1<Int32>? timoutInSeconds)  : void\nSetFocus(String? cssSelector, Nullable`1<Int32>? timoutInSeconds)  : void\nClickOnElement(PlangWebElement element)  : void\nClick(String cssSelector, Int32? elementAtToClick = 0, Boolean? clickAllMatchingElements = False, Nullable`1<Int32>? timeoutInSeconds, String? shadowDomCssSelector)  : void\nAcceptAlert()  : String \nSendKey(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // Writes a text to an element. \nSetTextOnElement(String text, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds, Boolean? clearElementFirst = False, String? shadowDomCssSelector)  : void // set the text of an element other than input by cssSelector. \nInput(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds, String? shadowDomCssSelector)  : void // set the value of an input by cssSelector. \nSelectByValue(String value, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // select an option by its value in select input by cssSelector. \nSelectByText(String text, String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void // select an option by its text in select input by cssSelector. \nSubmit(String? cssSelector, Nullable`1<Int32>? timeoutInSeconds)  : void\nGetElements(String? cssSelector, String? shadowDomCssSelector)  : List`1 \nGetElementsInsideElement(String elementName, IWebElement element)  : List<PlangWebElement> \nSerializeElements(List`1<List`1> elementsArray)  : List`1 \nFindElementAndExtractAttribute(String attribute, String? cssSelector, PlangWebElement? element)  : String \nExtractContent(Boolean? clearHtml = True, String? cssSelector, PlangWebElement? element)  : List`1 \nSwitchTab(Int32 tabIndex)  : void\nWait(Int32? milliseconds = 1000)  : void\nTakeScreenshotOfWebsite(String saveToPath, Boolean? overwrite = False)  : void\r\n## functions available ends ##"
                },
                {
                  "type": "text",
                  "text": "Make sure to convert html tags into correct css selector format"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "[webc] click mod-action-button[aria-label=\"Approve content\"], located in shadow dom shreddit-mod-inline-actions"
                }
              ]
            }
          ],
          "type": "PLang.Modules.WebCrawlerModule.Builder",
          "caching": true,
          "RawResponse": "```json\n{\n\t\"FunctionName\": \"Click\",\n\t\"Parameters\": [{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"cssSelector\",\n\t\t\t\"Value\": \"mod-action-button[aria-label=\\\"Approve content\\\"]\"\n\t\t},\n\t\t{\n\t\t\t\"Type\": \"String\",\n\t\t\t\"Name\": \"shadowDomCssSelector\",\n\t\t\t\"Value\": \"shreddit-mod-inline-actions\"\n\t\t}\n\t]\n}\n```"
        },
        "RunOnBuild": false
      }
    }
  ],
  "SubGoals": [],
  "Description": "The Reddit goal automates the process of submitting a post to the Plang subreddit. It navigates to the submission page using the user's profile, hides the bot, and waits for 5 seconds. It then writes the content of the post, defined by the variable \\%post\\%, into the designated textarea. After writing a greeting 'Hello' into a specific element, it clicks the submit button to post the content. Following a 3-second wait, it approves the content using a specific button located in the shadow DOM.",
  "Visibility": 1,
  "GoalFileName": "Reddit.goal",
  "RelativeGoalPath": "\\Reddit.goal",
  "RelativeGoalFolderPath": "\\",
  "RelativePrPath": ".build\\Reddit\\00. Goal.pr",
  "RelativePrFolderPath": ".build\\Reddit",
  "BuilderVersion": "1.0.0.0",
  "GoalInfo": null,
  "Injections": [],
  "Signature": null,
  "Hash": "ba5e450b143a33b06ebba37c32d872da803df18badd11073d3b8fdcc3ca393d7",
  "IncomingVariablesRequired": [
    "post"
  ]
}